"use strict";function _typeof(obj){"@babel/helpers - typeof";if(typeof Symbol==="function"&&typeof Symbol.iterator==="symbol"){_typeof=function _typeof(obj){return typeof obj;};}else{_typeof=function _typeof(obj){return obj&&typeof Symbol==="function"&&obj.constructor===Symbol&&obj!==Symbol.prototype?"symbol":typeof obj;};}return _typeof(obj);}/*!
 * jQuery JavaScript Library v3.5.1
 * https://jquery.com/
 *
 * Includes Sizzle.js
 * https://sizzlejs.com/
 *
 * Copyright JS Foundation and other contributors
 * Released under the MIT license
 * https://jquery.org/license
 *
 * Date: 2020-05-04T22:49Z
 */(function(global,factory){"use strict";if((typeof module==="undefined"?"undefined":_typeof(module))==="object"&&_typeof(module.exports)==="object"){// For CommonJS and CommonJS-like environments where a proper `window`
// is present, execute the factory and get jQuery.
// For environments that do not have a `window` with a `document`
// (such as Node.js), expose a factory as module.exports.
// This accentuates the need for the creation of a real `window`.
// e.g. var jQuery = require("jquery")(window);
// See ticket #14549 for more info.
module.exports=global.document?factory(global,true):function(w){if(!w.document){throw new Error("jQuery requires a window with a document");}return factory(w);};}else{factory(global);}// Pass this if window is not defined yet
})(typeof window!=="undefined"?window:void 0,function(window,noGlobal){// Edge <= 12 - 13+, Firefox <=18 - 45+, IE 10 - 11, Safari 5.1 - 9+, iOS 6 - 9.1
// throw exceptions when non-strict code (e.g., ASP.NET 4.5) accesses strict mode
// arguments.callee.caller (trac-13335). But as of jQuery 3.0 (2016), strict mode should be common
// enough that all such attempts are guarded in a try block.
"use strict";var arr=[];var getProto=Object.getPrototypeOf;var _slice=arr.slice;var flat=arr.flat?function(array){return arr.flat.call(array);}:function(array){return arr.concat.apply([],array);};var push=arr.push;var indexOf=arr.indexOf;var class2type={};var toString=class2type.toString;var hasOwn=class2type.hasOwnProperty;var fnToString=hasOwn.toString;var ObjectFunctionString=fnToString.call(Object);var support={};var isFunction=function isFunction(obj){// Support: Chrome <=57, Firefox <=52
// In some browsers, typeof returns "function" for HTML <object> elements
// (i.e., `typeof document.createElement( "object" ) === "function"`).
// We don't want to classify *any* DOM node as a function.
return typeof obj==="function"&&typeof obj.nodeType!=="number";};var isWindow=function isWindow(obj){return obj!=null&&obj===obj.window;};var document=window.document;var preservedScriptAttributes={type:true,src:true,nonce:true,noModule:true};function DOMEval(code,node,doc){doc=doc||document;var i,val,script=doc.createElement("script");script.text=code;if(node){for(i in preservedScriptAttributes){// Support: Firefox 64+, Edge 18+
// Some browsers don't support the "nonce" property on scripts.
// On the other hand, just using `getAttribute` is not enough as
// the `nonce` attribute is reset to an empty string whenever it
// becomes browsing-context connected.
// See https://github.com/whatwg/html/issues/2369
// See https://html.spec.whatwg.org/#nonce-attributes
// The `node.getAttribute` check was added for the sake of
// `jQuery.globalEval` so that it can fake a nonce-containing node
// via an object.
val=node[i]||node.getAttribute&&node.getAttribute(i);if(val){script.setAttribute(i,val);}}}doc.head.appendChild(script).parentNode.removeChild(script);}function toType(obj){if(obj==null){return obj+"";}// Support: Android <=2.3 only (functionish RegExp)
return _typeof(obj)==="object"||typeof obj==="function"?class2type[toString.call(obj)]||"object":_typeof(obj);}/* global Symbol */ // Defining this global in .eslintrc.json would create a danger of using the global
// unguarded in another place, it seems safer to define global only for this module
var version="3.5.1",// Define a local copy of jQuery
jQuery=function jQuery(selector,context){// The jQuery object is actually just the init constructor 'enhanced'
// Need init if jQuery is called (just allow error to be thrown if not included)
return new jQuery.fn.init(selector,context);};jQuery.fn=jQuery.prototype={// The current version of jQuery being used
jquery:version,constructor:jQuery,// The default length of a jQuery object is 0
length:0,toArray:function toArray(){return _slice.call(this);},// Get the Nth element in the matched element set OR
// Get the whole matched element set as a clean array
get:function get(num){// Return all the elements in a clean array
if(num==null){return _slice.call(this);}// Return just the one element from the set
return num<0?this[num+this.length]:this[num];},// Take an array of elements and push it onto the stack
// (returning the new matched element set)
pushStack:function pushStack(elems){// Build a new jQuery matched element set
var ret=jQuery.merge(this.constructor(),elems);// Add the old object onto the stack (as a reference)
ret.prevObject=this;// Return the newly-formed element set
return ret;},// Execute a callback for every element in the matched set.
each:function each(callback){return jQuery.each(this,callback);},map:function map(callback){return this.pushStack(jQuery.map(this,function(elem,i){return callback.call(elem,i,elem);}));},slice:function slice(){return this.pushStack(_slice.apply(this,arguments));},first:function first(){return this.eq(0);},last:function last(){return this.eq(-1);},even:function even(){return this.pushStack(jQuery.grep(this,function(_elem,i){return(i+1)%2;}));},odd:function odd(){return this.pushStack(jQuery.grep(this,function(_elem,i){return i%2;}));},eq:function eq(i){var len=this.length,j=+i+(i<0?len:0);return this.pushStack(j>=0&&j<len?[this[j]]:[]);},end:function end(){return this.prevObject||this.constructor();},// For internal use only.
// Behaves like an Array's method, not like a jQuery method.
push:push,sort:arr.sort,splice:arr.splice};jQuery.extend=jQuery.fn.extend=function(){var options,name,src,copy,copyIsArray,clone,target=arguments[0]||{},i=1,length=arguments.length,deep=false;// Handle a deep copy situation
if(typeof target==="boolean"){deep=target;// Skip the boolean and the target
target=arguments[i]||{};i++;}// Handle case when target is a string or something (possible in deep copy)
if(_typeof(target)!=="object"&&!isFunction(target)){target={};}// Extend jQuery itself if only one argument is passed
if(i===length){target=this;i--;}for(;i<length;i++){// Only deal with non-null/undefined values
if((options=arguments[i])!=null){// Extend the base object
for(name in options){copy=options[name];// Prevent Object.prototype pollution
// Prevent never-ending loop
if(name==="__proto__"||target===copy){continue;}// Recurse if we're merging plain objects or arrays
if(deep&&copy&&(jQuery.isPlainObject(copy)||(copyIsArray=Array.isArray(copy)))){src=target[name];// Ensure proper type for the source value
if(copyIsArray&&!Array.isArray(src)){clone=[];}else if(!copyIsArray&&!jQuery.isPlainObject(src)){clone={};}else{clone=src;}copyIsArray=false;// Never move original objects, clone them
target[name]=jQuery.extend(deep,clone,copy);// Don't bring in undefined values
}else if(copy!==undefined){target[name]=copy;}}}}// Return the modified object
return target;};jQuery.extend({// Unique for each copy of jQuery on the page
expando:"jQuery"+(version+Math.random()).replace(/\D/g,""),// Assume jQuery is ready without the ready module
isReady:true,error:function error(msg){throw new Error(msg);},noop:function noop(){},isPlainObject:function isPlainObject(obj){var proto,Ctor;// Detect obvious negatives
// Use toString instead of jQuery.type to catch host objects
if(!obj||toString.call(obj)!=="[object Object]"){return false;}proto=getProto(obj);// Objects with no prototype (e.g., `Object.create( null )`) are plain
if(!proto){return true;}// Objects with prototype are plain iff they were constructed by a global Object function
Ctor=hasOwn.call(proto,"constructor")&&proto.constructor;return typeof Ctor==="function"&&fnToString.call(Ctor)===ObjectFunctionString;},isEmptyObject:function isEmptyObject(obj){var name;for(name in obj){return false;}return true;},// Evaluates a script in a provided context; falls back to the global one
// if not specified.
globalEval:function globalEval(code,options,doc){DOMEval(code,{nonce:options&&options.nonce},doc);},each:function each(obj,callback){var length,i=0;if(isArrayLike(obj)){length=obj.length;for(;i<length;i++){if(callback.call(obj[i],i,obj[i])===false){break;}}}else{for(i in obj){if(callback.call(obj[i],i,obj[i])===false){break;}}}return obj;},// results is for internal usage only
makeArray:function makeArray(arr,results){var ret=results||[];if(arr!=null){if(isArrayLike(Object(arr))){jQuery.merge(ret,typeof arr==="string"?[arr]:arr);}else{push.call(ret,arr);}}return ret;},inArray:function inArray(elem,arr,i){return arr==null?-1:indexOf.call(arr,elem,i);},// Support: Android <=4.0 only, PhantomJS 1 only
// push.apply(_, arraylike) throws on ancient WebKit
merge:function merge(first,second){var len=+second.length,j=0,i=first.length;for(;j<len;j++){first[i++]=second[j];}first.length=i;return first;},grep:function grep(elems,callback,invert){var callbackInverse,matches=[],i=0,length=elems.length,callbackExpect=!invert;// Go through the array, only saving the items
// that pass the validator function
for(;i<length;i++){callbackInverse=!callback(elems[i],i);if(callbackInverse!==callbackExpect){matches.push(elems[i]);}}return matches;},// arg is for internal usage only
map:function map(elems,callback,arg){var length,value,i=0,ret=[];// Go through the array, translating each of the items to their new values
if(isArrayLike(elems)){length=elems.length;for(;i<length;i++){value=callback(elems[i],i,arg);if(value!=null){ret.push(value);}}// Go through every key on the object,
}else{for(i in elems){value=callback(elems[i],i,arg);if(value!=null){ret.push(value);}}}// Flatten any nested arrays
return flat(ret);},// A global GUID counter for objects
guid:1,// jQuery.support is not used in Core but other projects attach their
// properties to it so it needs to exist.
support:support});if(typeof Symbol==="function"){jQuery.fn[Symbol.iterator]=arr[Symbol.iterator];}// Populate the class2type map
jQuery.each("Boolean Number String Function Array Date RegExp Object Error Symbol".split(" "),function(_i,name){class2type["[object "+name+"]"]=name.toLowerCase();});function isArrayLike(obj){// Support: real iOS 8.2 only (not reproducible in simulator)
// `in` check used to prevent JIT error (gh-2145)
// hasOwn isn't used here due to false negatives
// regarding Nodelist length in IE
var length=!!obj&&"length"in obj&&obj.length,type=toType(obj);if(isFunction(obj)||isWindow(obj)){return false;}return type==="array"||length===0||typeof length==="number"&&length>0&&length-1 in obj;}var Sizzle=/*!
 * Sizzle CSS Selector Engine v2.3.5
 * https://sizzlejs.com/
 *
 * Copyright JS Foundation and other contributors
 * Released under the MIT license
 * https://js.foundation/
 *
 * Date: 2020-03-14
 */function(window){var i,support,Expr,getText,isXML,tokenize,compile,select,outermostContext,sortInput,hasDuplicate,// Local document vars
setDocument,document,docElem,documentIsHTML,rbuggyQSA,rbuggyMatches,matches,contains,// Instance-specific data
expando="sizzle"+1*new Date(),preferredDoc=window.document,dirruns=0,done=0,classCache=createCache(),tokenCache=createCache(),compilerCache=createCache(),nonnativeSelectorCache=createCache(),sortOrder=function sortOrder(a,b){if(a===b){hasDuplicate=true;}return 0;},// Instance methods
hasOwn={}.hasOwnProperty,arr=[],pop=arr.pop,pushNative=arr.push,push=arr.push,slice=arr.slice,// Use a stripped-down indexOf as it's faster than native
// https://jsperf.com/thor-indexof-vs-for/5
indexOf=function indexOf(list,elem){var i=0,len=list.length;for(;i<len;i++){if(list[i]===elem){return i;}}return-1;},booleans="checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|"+"ismap|loop|multiple|open|readonly|required|scoped",// Regular expressions
// http://www.w3.org/TR/css3-selectors/#whitespace
whitespace="[\\x20\\t\\r\\n\\f]",// https://www.w3.org/TR/css-syntax-3/#ident-token-diagram
identifier="(?:\\\\[\\da-fA-F]{1,6}"+whitespace+"?|\\\\[^\\r\\n\\f]|[\\w-]|[^\0-\\x7f])+",// Attribute selectors: http://www.w3.org/TR/selectors/#attribute-selectors
attributes="\\["+whitespace+"*("+identifier+")(?:"+whitespace+// Operator (capture 2)
"*([*^$|!~]?=)"+whitespace+// "Attribute values must be CSS identifiers [capture 5]
// or strings [capture 3 or capture 4]"
"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|("+identifier+"))|)"+whitespace+"*\\]",pseudos=":("+identifier+")(?:\\(("+// To reduce the number of selectors needing tokenize in the preFilter, prefer arguments:
// 1. quoted (capture 3; capture 4 or capture 5)
"('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|"+// 2. simple (capture 6)
"((?:\\\\.|[^\\\\()[\\]]|"+attributes+")*)|"+// 3. anything else (capture 2)
".*"+")\\)|)",// Leading and non-escaped trailing whitespace, capturing some non-whitespace characters preceding the latter
rwhitespace=new RegExp(whitespace+"+","g"),rtrim=new RegExp("^"+whitespace+"+|((?:^|[^\\\\])(?:\\\\.)*)"+whitespace+"+$","g"),rcomma=new RegExp("^"+whitespace+"*,"+whitespace+"*"),rcombinators=new RegExp("^"+whitespace+"*([>+~]|"+whitespace+")"+whitespace+"*"),rdescend=new RegExp(whitespace+"|>"),rpseudo=new RegExp(pseudos),ridentifier=new RegExp("^"+identifier+"$"),matchExpr={"ID":new RegExp("^#("+identifier+")"),"CLASS":new RegExp("^\\.("+identifier+")"),"TAG":new RegExp("^("+identifier+"|[*])"),"ATTR":new RegExp("^"+attributes),"PSEUDO":new RegExp("^"+pseudos),"CHILD":new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\("+whitespace+"*(even|odd|(([+-]|)(\\d*)n|)"+whitespace+"*(?:([+-]|)"+whitespace+"*(\\d+)|))"+whitespace+"*\\)|)","i"),"bool":new RegExp("^(?:"+booleans+")$","i"),// For use in libraries implementing .is()
// We use this for POS matching in `select`
"needsContext":new RegExp("^"+whitespace+"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\("+whitespace+"*((?:-\\d)?\\d*)"+whitespace+"*\\)|)(?=[^-]|$)","i")},rhtml=/HTML$/i,rinputs=/^(?:input|select|textarea|button)$/i,rheader=/^h\d$/i,rnative=/^[^{]+\{\s*\[native \w/,// Easily-parseable/retrievable ID or TAG or CLASS selectors
rquickExpr=/^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,rsibling=/[+~]/,// CSS escapes
// http://www.w3.org/TR/CSS21/syndata.html#escaped-characters
runescape=new RegExp("\\\\[\\da-fA-F]{1,6}"+whitespace+"?|\\\\([^\\r\\n\\f])","g"),funescape=function funescape(escape,nonHex){var high="0x"+escape.slice(1)-0x10000;return nonHex?// Strip the backslash prefix from a non-hex escape sequence
nonHex:// Replace a hexadecimal escape sequence with the encoded Unicode code point
// Support: IE <=11+
// For values outside the Basic Multilingual Plane (BMP), manually construct a
// surrogate pair
high<0?String.fromCharCode(high+0x10000):String.fromCharCode(high>>10|0xD800,high&0x3FF|0xDC00);},// CSS string/identifier serialization
// https://drafts.csswg.org/cssom/#common-serializing-idioms
rcssescape=/([\0-\x1f\x7f]|^-?\d)|^-$|[^\0-\x1f\x7f-\uFFFF\w-]/g,fcssescape=function fcssescape(ch,asCodePoint){if(asCodePoint){// U+0000 NULL becomes U+FFFD REPLACEMENT CHARACTER
if(ch==="\0"){return"\uFFFD";}// Control characters and (dependent upon position) numbers get escaped as code points
return ch.slice(0,-1)+"\\"+ch.charCodeAt(ch.length-1).toString(16)+" ";}// Other potentially-special ASCII characters get backslash-escaped
return"\\"+ch;},// Used for iframes
// See setDocument()
// Removing the function wrapper causes a "Permission Denied"
// error in IE
unloadHandler=function unloadHandler(){setDocument();},inDisabledFieldset=addCombinator(function(elem){return elem.disabled===true&&elem.nodeName.toLowerCase()==="fieldset";},{dir:"parentNode",next:"legend"});// Optimize for push.apply( _, NodeList )
try{push.apply(arr=slice.call(preferredDoc.childNodes),preferredDoc.childNodes);// Support: Android<4.0
// Detect silently failing push.apply
// eslint-disable-next-line no-unused-expressions
arr[preferredDoc.childNodes.length].nodeType;}catch(e){push={apply:arr.length?// Leverage slice if possible
function(target,els){pushNative.apply(target,slice.call(els));}:// Support: IE<9
// Otherwise append directly
function(target,els){var j=target.length,i=0;// Can't trust NodeList.length
while(target[j++]=els[i++]){}target.length=j-1;}};}function Sizzle(selector,context,results,seed){var m,i,elem,nid,match,groups,newSelector,newContext=context&&context.ownerDocument,// nodeType defaults to 9, since context defaults to document
nodeType=context?context.nodeType:9;results=results||[];// Return early from calls with invalid selector or context
if(typeof selector!=="string"||!selector||nodeType!==1&&nodeType!==9&&nodeType!==11){return results;}// Try to shortcut find operations (as opposed to filters) in HTML documents
if(!seed){setDocument(context);context=context||document;if(documentIsHTML){// If the selector is sufficiently simple, try using a "get*By*" DOM method
// (excepting DocumentFragment context, where the methods don't exist)
if(nodeType!==11&&(match=rquickExpr.exec(selector))){// ID selector
if(m=match[1]){// Document context
if(nodeType===9){if(elem=context.getElementById(m)){// Support: IE, Opera, Webkit
// TODO: identify versions
// getElementById can match elements by name instead of ID
if(elem.id===m){results.push(elem);return results;}}else{return results;}// Element context
}else{// Support: IE, Opera, Webkit
// TODO: identify versions
// getElementById can match elements by name instead of ID
if(newContext&&(elem=newContext.getElementById(m))&&contains(context,elem)&&elem.id===m){results.push(elem);return results;}}// Type selector
}else if(match[2]){push.apply(results,context.getElementsByTagName(selector));return results;// Class selector
}else if((m=match[3])&&support.getElementsByClassName&&context.getElementsByClassName){push.apply(results,context.getElementsByClassName(m));return results;}}// Take advantage of querySelectorAll
if(support.qsa&&!nonnativeSelectorCache[selector+" "]&&(!rbuggyQSA||!rbuggyQSA.test(selector))&&(// Support: IE 8 only
// Exclude object elements
nodeType!==1||context.nodeName.toLowerCase()!=="object")){newSelector=selector;newContext=context;// qSA considers elements outside a scoping root when evaluating child or
// descendant combinators, which is not what we want.
// In such cases, we work around the behavior by prefixing every selector in the
// list with an ID selector referencing the scope context.
// The technique has to be used as well when a leading combinator is used
// as such selectors are not recognized by querySelectorAll.
// Thanks to Andrew Dupont for this technique.
if(nodeType===1&&(rdescend.test(selector)||rcombinators.test(selector))){// Expand context for sibling selectors
newContext=rsibling.test(selector)&&testContext(context.parentNode)||context;// We can use :scope instead of the ID hack if the browser
// supports it & if we're not changing the context.
if(newContext!==context||!support.scope){// Capture the context ID, setting it first if necessary
if(nid=context.getAttribute("id")){nid=nid.replace(rcssescape,fcssescape);}else{context.setAttribute("id",nid=expando);}}// Prefix every selector in the list
groups=tokenize(selector);i=groups.length;while(i--){groups[i]=(nid?"#"+nid:":scope")+" "+toSelector(groups[i]);}newSelector=groups.join(",");}try{push.apply(results,newContext.querySelectorAll(newSelector));return results;}catch(qsaError){nonnativeSelectorCache(selector,true);}finally{if(nid===expando){context.removeAttribute("id");}}}}}// All others
return select(selector.replace(rtrim,"$1"),context,results,seed);}/**
 * Create key-value caches of limited size
 * @returns {function(string, object)} Returns the Object data after storing it on itself with
 *	property name the (space-suffixed) string and (if the cache is larger than Expr.cacheLength)
 *	deleting the oldest entry
 */function createCache(){var keys=[];function cache(key,value){// Use (key + " ") to avoid collision with native prototype properties (see Issue #157)
if(keys.push(key+" ")>Expr.cacheLength){// Only keep the most recent entries
delete cache[keys.shift()];}return cache[key+" "]=value;}return cache;}/**
 * Mark a function for special use by Sizzle
 * @param {Function} fn The function to mark
 */function markFunction(fn){fn[expando]=true;return fn;}/**
 * Support testing using an element
 * @param {Function} fn Passed the created element and returns a boolean result
 */function assert(fn){var el=document.createElement("fieldset");try{return!!fn(el);}catch(e){return false;}finally{// Remove from its parent by default
if(el.parentNode){el.parentNode.removeChild(el);}// release memory in IE
el=null;}}/**
 * Adds the same handler for all of the specified attrs
 * @param {String} attrs Pipe-separated list of attributes
 * @param {Function} handler The method that will be applied
 */function addHandle(attrs,handler){var arr=attrs.split("|"),i=arr.length;while(i--){Expr.attrHandle[arr[i]]=handler;}}/**
 * Checks document order of two siblings
 * @param {Element} a
 * @param {Element} b
 * @returns {Number} Returns less than 0 if a precedes b, greater than 0 if a follows b
 */function siblingCheck(a,b){var cur=b&&a,diff=cur&&a.nodeType===1&&b.nodeType===1&&a.sourceIndex-b.sourceIndex;// Use IE sourceIndex if available on both nodes
if(diff){return diff;}// Check if b follows a
if(cur){while(cur=cur.nextSibling){if(cur===b){return-1;}}}return a?1:-1;}/**
 * Returns a function to use in pseudos for input types
 * @param {String} type
 */function createInputPseudo(type){return function(elem){var name=elem.nodeName.toLowerCase();return name==="input"&&elem.type===type;};}/**
 * Returns a function to use in pseudos for buttons
 * @param {String} type
 */function createButtonPseudo(type){return function(elem){var name=elem.nodeName.toLowerCase();return(name==="input"||name==="button")&&elem.type===type;};}/**
 * Returns a function to use in pseudos for :enabled/:disabled
 * @param {Boolean} disabled true for :disabled; false for :enabled
 */function createDisabledPseudo(disabled){// Known :disabled false positives: fieldset[disabled] > legend:nth-of-type(n+2) :can-disable
return function(elem){// Only certain elements can match :enabled or :disabled
// https://html.spec.whatwg.org/multipage/scripting.html#selector-enabled
// https://html.spec.whatwg.org/multipage/scripting.html#selector-disabled
if("form"in elem){// Check for inherited disabledness on relevant non-disabled elements:
// * listed form-associated elements in a disabled fieldset
//   https://html.spec.whatwg.org/multipage/forms.html#category-listed
//   https://html.spec.whatwg.org/multipage/forms.html#concept-fe-disabled
// * option elements in a disabled optgroup
//   https://html.spec.whatwg.org/multipage/forms.html#concept-option-disabled
// All such elements have a "form" property.
if(elem.parentNode&&elem.disabled===false){// Option elements defer to a parent optgroup if present
if("label"in elem){if("label"in elem.parentNode){return elem.parentNode.disabled===disabled;}else{return elem.disabled===disabled;}}// Support: IE 6 - 11
// Use the isDisabled shortcut property to check for disabled fieldset ancestors
return elem.isDisabled===disabled||// Where there is no isDisabled, check manually
/* jshint -W018 */elem.isDisabled!==!disabled&&inDisabledFieldset(elem)===disabled;}return elem.disabled===disabled;// Try to winnow out elements that can't be disabled before trusting the disabled property.
// Some victims get caught in our net (label, legend, menu, track), but it shouldn't
// even exist on them, let alone have a boolean value.
}else if("label"in elem){return elem.disabled===disabled;}// Remaining elements are neither :enabled nor :disabled
return false;};}/**
 * Returns a function to use in pseudos for positionals
 * @param {Function} fn
 */function createPositionalPseudo(fn){return markFunction(function(argument){argument=+argument;return markFunction(function(seed,matches){var j,matchIndexes=fn([],seed.length,argument),i=matchIndexes.length;// Match elements found at the specified indexes
while(i--){if(seed[j=matchIndexes[i]]){seed[j]=!(matches[j]=seed[j]);}}});});}/**
 * Checks a node for validity as a Sizzle context
 * @param {Element|Object=} context
 * @returns {Element|Object|Boolean} The input node if acceptable, otherwise a falsy value
 */function testContext(context){return context&&typeof context.getElementsByTagName!=="undefined"&&context;}// Expose support vars for convenience
support=Sizzle.support={};/**
 * Detects XML nodes
 * @param {Element|Object} elem An element or a document
 * @returns {Boolean} True iff elem is a non-HTML XML node
 */isXML=Sizzle.isXML=function(elem){var namespace=elem.namespaceURI,docElem=(elem.ownerDocument||elem).documentElement;// Support: IE <=8
// Assume HTML when documentElement doesn't yet exist, such as inside loading iframes
// https://bugs.jquery.com/ticket/4833
return!rhtml.test(namespace||docElem&&docElem.nodeName||"HTML");};/**
 * Sets document-related variables once based on the current document
 * @param {Element|Object} [doc] An element or document object to use to set the document
 * @returns {Object} Returns the current document
 */setDocument=Sizzle.setDocument=function(node){var hasCompare,subWindow,doc=node?node.ownerDocument||node:preferredDoc;// Return early if doc is invalid or already selected
// Support: IE 11+, Edge 17 - 18+
// IE/Edge sometimes throw a "Permission denied" error when strict-comparing
// two documents; shallow comparisons work.
// eslint-disable-next-line eqeqeq
if(doc==document||doc.nodeType!==9||!doc.documentElement){return document;}// Update global variables
document=doc;docElem=document.documentElement;documentIsHTML=!isXML(document);// Support: IE 9 - 11+, Edge 12 - 18+
// Accessing iframe documents after unload throws "permission denied" errors (jQuery #13936)
// Support: IE 11+, Edge 17 - 18+
// IE/Edge sometimes throw a "Permission denied" error when strict-comparing
// two documents; shallow comparisons work.
// eslint-disable-next-line eqeqeq
if(preferredDoc!=document&&(subWindow=document.defaultView)&&subWindow.top!==subWindow){// Support: IE 11, Edge
if(subWindow.addEventListener){subWindow.addEventListener("unload",unloadHandler,false);// Support: IE 9 - 10 only
}else if(subWindow.attachEvent){subWindow.attachEvent("onunload",unloadHandler);}}// Support: IE 8 - 11+, Edge 12 - 18+, Chrome <=16 - 25 only, Firefox <=3.6 - 31 only,
// Safari 4 - 5 only, Opera <=11.6 - 12.x only
// IE/Edge & older browsers don't support the :scope pseudo-class.
// Support: Safari 6.0 only
// Safari 6.0 supports :scope but it's an alias of :root there.
support.scope=assert(function(el){docElem.appendChild(el).appendChild(document.createElement("div"));return typeof el.querySelectorAll!=="undefined"&&!el.querySelectorAll(":scope fieldset div").length;});/* Attributes
	---------------------------------------------------------------------- */ // Support: IE<8
// Verify that getAttribute really returns attributes and not properties
// (excepting IE8 booleans)
support.attributes=assert(function(el){el.className="i";return!el.getAttribute("className");});/* getElement(s)By*
	---------------------------------------------------------------------- */ // Check if getElementsByTagName("*") returns only elements
support.getElementsByTagName=assert(function(el){el.appendChild(document.createComment(""));return!el.getElementsByTagName("*").length;});// Support: IE<9
support.getElementsByClassName=rnative.test(document.getElementsByClassName);// Support: IE<10
// Check if getElementById returns elements by name
// The broken getElementById methods don't pick up programmatically-set names,
// so use a roundabout getElementsByName test
support.getById=assert(function(el){docElem.appendChild(el).id=expando;return!document.getElementsByName||!document.getElementsByName(expando).length;});// ID filter and find
if(support.getById){Expr.filter["ID"]=function(id){var attrId=id.replace(runescape,funescape);return function(elem){return elem.getAttribute("id")===attrId;};};Expr.find["ID"]=function(id,context){if(typeof context.getElementById!=="undefined"&&documentIsHTML){var elem=context.getElementById(id);return elem?[elem]:[];}};}else{Expr.filter["ID"]=function(id){var attrId=id.replace(runescape,funescape);return function(elem){var node=typeof elem.getAttributeNode!=="undefined"&&elem.getAttributeNode("id");return node&&node.value===attrId;};};// Support: IE 6 - 7 only
// getElementById is not reliable as a find shortcut
Expr.find["ID"]=function(id,context){if(typeof context.getElementById!=="undefined"&&documentIsHTML){var node,i,elems,elem=context.getElementById(id);if(elem){// Verify the id attribute
node=elem.getAttributeNode("id");if(node&&node.value===id){return[elem];}// Fall back on getElementsByName
elems=context.getElementsByName(id);i=0;while(elem=elems[i++]){node=elem.getAttributeNode("id");if(node&&node.value===id){return[elem];}}}return[];}};}// Tag
Expr.find["TAG"]=support.getElementsByTagName?function(tag,context){if(typeof context.getElementsByTagName!=="undefined"){return context.getElementsByTagName(tag);// DocumentFragment nodes don't have gEBTN
}else if(support.qsa){return context.querySelectorAll(tag);}}:function(tag,context){var elem,tmp=[],i=0,// By happy coincidence, a (broken) gEBTN appears on DocumentFragment nodes too
results=context.getElementsByTagName(tag);// Filter out possible comments
if(tag==="*"){while(elem=results[i++]){if(elem.nodeType===1){tmp.push(elem);}}return tmp;}return results;};// Class
Expr.find["CLASS"]=support.getElementsByClassName&&function(className,context){if(typeof context.getElementsByClassName!=="undefined"&&documentIsHTML){return context.getElementsByClassName(className);}};/* QSA/matchesSelector
	---------------------------------------------------------------------- */ // QSA and matchesSelector support
// matchesSelector(:active) reports false when true (IE9/Opera 11.5)
rbuggyMatches=[];// qSa(:focus) reports false when true (Chrome 21)
// We allow this because of a bug in IE8/9 that throws an error
// whenever `document.activeElement` is accessed on an iframe
// So, we allow :focus to pass through QSA all the time to avoid the IE error
// See https://bugs.jquery.com/ticket/13378
rbuggyQSA=[];if(support.qsa=rnative.test(document.querySelectorAll)){// Build QSA regex
// Regex strategy adopted from Diego Perini
assert(function(el){var input;// Select is set to empty string on purpose
// This is to test IE's treatment of not explicitly
// setting a boolean content attribute,
// since its presence should be enough
// https://bugs.jquery.com/ticket/12359
docElem.appendChild(el).innerHTML="<a id='"+expando+"'></a>"+"<select id='"+expando+"-\r\\' msallowcapture=''>"+"<option selected=''></option></select>";// Support: IE8, Opera 11-12.16
// Nothing should be selected when empty strings follow ^= or $= or *=
// The test attribute must be unknown in Opera but "safe" for WinRT
// https://msdn.microsoft.com/en-us/library/ie/hh465388.aspx#attribute_section
if(el.querySelectorAll("[msallowcapture^='']").length){rbuggyQSA.push("[*^$]="+whitespace+"*(?:''|\"\")");}// Support: IE8
// Boolean attributes and "value" are not treated correctly
if(!el.querySelectorAll("[selected]").length){rbuggyQSA.push("\\["+whitespace+"*(?:value|"+booleans+")");}// Support: Chrome<29, Android<4.4, Safari<7.0+, iOS<7.0+, PhantomJS<1.9.8+
if(!el.querySelectorAll("[id~="+expando+"-]").length){rbuggyQSA.push("~=");}// Support: IE 11+, Edge 15 - 18+
// IE 11/Edge don't find elements on a `[name='']` query in some cases.
// Adding a temporary attribute to the document before the selection works
// around the issue.
// Interestingly, IE 10 & older don't seem to have the issue.
input=document.createElement("input");input.setAttribute("name","");el.appendChild(input);if(!el.querySelectorAll("[name='']").length){rbuggyQSA.push("\\["+whitespace+"*name"+whitespace+"*="+whitespace+"*(?:''|\"\")");}// Webkit/Opera - :checked should return selected option elements
// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
// IE8 throws error here and will not see later tests
if(!el.querySelectorAll(":checked").length){rbuggyQSA.push(":checked");}// Support: Safari 8+, iOS 8+
// https://bugs.webkit.org/show_bug.cgi?id=136851
// In-page `selector#id sibling-combinator selector` fails
if(!el.querySelectorAll("a#"+expando+"+*").length){rbuggyQSA.push(".#.+[+~]");}// Support: Firefox <=3.6 - 5 only
// Old Firefox doesn't throw on a badly-escaped identifier.
el.querySelectorAll("\\\f");rbuggyQSA.push("[\\r\\n\\f]");});assert(function(el){el.innerHTML="<a href='' disabled='disabled'></a>"+"<select disabled='disabled'><option/></select>";// Support: Windows 8 Native Apps
// The type and name attributes are restricted during .innerHTML assignment
var input=document.createElement("input");input.setAttribute("type","hidden");el.appendChild(input).setAttribute("name","D");// Support: IE8
// Enforce case-sensitivity of name attribute
if(el.querySelectorAll("[name=d]").length){rbuggyQSA.push("name"+whitespace+"*[*^$|!~]?=");}// FF 3.5 - :enabled/:disabled and hidden elements (hidden elements are still enabled)
// IE8 throws error here and will not see later tests
if(el.querySelectorAll(":enabled").length!==2){rbuggyQSA.push(":enabled",":disabled");}// Support: IE9-11+
// IE's :disabled selector does not pick up the children of disabled fieldsets
docElem.appendChild(el).disabled=true;if(el.querySelectorAll(":disabled").length!==2){rbuggyQSA.push(":enabled",":disabled");}// Support: Opera 10 - 11 only
// Opera 10-11 does not throw on post-comma invalid pseudos
el.querySelectorAll("*,:x");rbuggyQSA.push(",.*:");});}if(support.matchesSelector=rnative.test(matches=docElem.matches||docElem.webkitMatchesSelector||docElem.mozMatchesSelector||docElem.oMatchesSelector||docElem.msMatchesSelector)){assert(function(el){// Check to see if it's possible to do matchesSelector
// on a disconnected node (IE 9)
support.disconnectedMatch=matches.call(el,"*");// This should fail with an exception
// Gecko does not error, returns false instead
matches.call(el,"[s!='']:x");rbuggyMatches.push("!=",pseudos);});}rbuggyQSA=rbuggyQSA.length&&new RegExp(rbuggyQSA.join("|"));rbuggyMatches=rbuggyMatches.length&&new RegExp(rbuggyMatches.join("|"));/* Contains
	---------------------------------------------------------------------- */hasCompare=rnative.test(docElem.compareDocumentPosition);// Element contains another
// Purposefully self-exclusive
// As in, an element does not contain itself
contains=hasCompare||rnative.test(docElem.contains)?function(a,b){var adown=a.nodeType===9?a.documentElement:a,bup=b&&b.parentNode;return a===bup||!!(bup&&bup.nodeType===1&&(adown.contains?adown.contains(bup):a.compareDocumentPosition&&a.compareDocumentPosition(bup)&16));}:function(a,b){if(b){while(b=b.parentNode){if(b===a){return true;}}}return false;};/* Sorting
	---------------------------------------------------------------------- */ // Document order sorting
sortOrder=hasCompare?function(a,b){// Flag for duplicate removal
if(a===b){hasDuplicate=true;return 0;}// Sort on method existence if only one input has compareDocumentPosition
var compare=!a.compareDocumentPosition-!b.compareDocumentPosition;if(compare){return compare;}// Calculate position if both inputs belong to the same document
// Support: IE 11+, Edge 17 - 18+
// IE/Edge sometimes throw a "Permission denied" error when strict-comparing
// two documents; shallow comparisons work.
// eslint-disable-next-line eqeqeq
compare=(a.ownerDocument||a)==(b.ownerDocument||b)?a.compareDocumentPosition(b):// Otherwise we know they are disconnected
1;// Disconnected nodes
if(compare&1||!support.sortDetached&&b.compareDocumentPosition(a)===compare){// Choose the first element that is related to our preferred document
// Support: IE 11+, Edge 17 - 18+
// IE/Edge sometimes throw a "Permission denied" error when strict-comparing
// two documents; shallow comparisons work.
// eslint-disable-next-line eqeqeq
if(a==document||a.ownerDocument==preferredDoc&&contains(preferredDoc,a)){return-1;}// Support: IE 11+, Edge 17 - 18+
// IE/Edge sometimes throw a "Permission denied" error when strict-comparing
// two documents; shallow comparisons work.
// eslint-disable-next-line eqeqeq
if(b==document||b.ownerDocument==preferredDoc&&contains(preferredDoc,b)){return 1;}// Maintain original order
return sortInput?indexOf(sortInput,a)-indexOf(sortInput,b):0;}return compare&4?-1:1;}:function(a,b){// Exit early if the nodes are identical
if(a===b){hasDuplicate=true;return 0;}var cur,i=0,aup=a.parentNode,bup=b.parentNode,ap=[a],bp=[b];// Parentless nodes are either documents or disconnected
if(!aup||!bup){// Support: IE 11+, Edge 17 - 18+
// IE/Edge sometimes throw a "Permission denied" error when strict-comparing
// two documents; shallow comparisons work.
/* eslint-disable eqeqeq */return a==document?-1:b==document?1:/* eslint-enable eqeqeq */aup?-1:bup?1:sortInput?indexOf(sortInput,a)-indexOf(sortInput,b):0;// If the nodes are siblings, we can do a quick check
}else if(aup===bup){return siblingCheck(a,b);}// Otherwise we need full lists of their ancestors for comparison
cur=a;while(cur=cur.parentNode){ap.unshift(cur);}cur=b;while(cur=cur.parentNode){bp.unshift(cur);}// Walk down the tree looking for a discrepancy
while(ap[i]===bp[i]){i++;}return i?// Do a sibling check if the nodes have a common ancestor
siblingCheck(ap[i],bp[i]):// Otherwise nodes in our document sort first
// Support: IE 11+, Edge 17 - 18+
// IE/Edge sometimes throw a "Permission denied" error when strict-comparing
// two documents; shallow comparisons work.
/* eslint-disable eqeqeq */ap[i]==preferredDoc?-1:bp[i]==preferredDoc?1:/* eslint-enable eqeqeq */0;};return document;};Sizzle.matches=function(expr,elements){return Sizzle(expr,null,null,elements);};Sizzle.matchesSelector=function(elem,expr){setDocument(elem);if(support.matchesSelector&&documentIsHTML&&!nonnativeSelectorCache[expr+" "]&&(!rbuggyMatches||!rbuggyMatches.test(expr))&&(!rbuggyQSA||!rbuggyQSA.test(expr))){try{var ret=matches.call(elem,expr);// IE 9's matchesSelector returns false on disconnected nodes
if(ret||support.disconnectedMatch||// As well, disconnected nodes are said to be in a document
// fragment in IE 9
elem.document&&elem.document.nodeType!==11){return ret;}}catch(e){nonnativeSelectorCache(expr,true);}}return Sizzle(expr,document,null,[elem]).length>0;};Sizzle.contains=function(context,elem){// Set document vars if needed
// Support: IE 11+, Edge 17 - 18+
// IE/Edge sometimes throw a "Permission denied" error when strict-comparing
// two documents; shallow comparisons work.
// eslint-disable-next-line eqeqeq
if((context.ownerDocument||context)!=document){setDocument(context);}return contains(context,elem);};Sizzle.attr=function(elem,name){// Set document vars if needed
// Support: IE 11+, Edge 17 - 18+
// IE/Edge sometimes throw a "Permission denied" error when strict-comparing
// two documents; shallow comparisons work.
// eslint-disable-next-line eqeqeq
if((elem.ownerDocument||elem)!=document){setDocument(elem);}var fn=Expr.attrHandle[name.toLowerCase()],// Don't get fooled by Object.prototype properties (jQuery #13807)
val=fn&&hasOwn.call(Expr.attrHandle,name.toLowerCase())?fn(elem,name,!documentIsHTML):undefined;return val!==undefined?val:support.attributes||!documentIsHTML?elem.getAttribute(name):(val=elem.getAttributeNode(name))&&val.specified?val.value:null;};Sizzle.escape=function(sel){return(sel+"").replace(rcssescape,fcssescape);};Sizzle.error=function(msg){throw new Error("Syntax error, unrecognized expression: "+msg);};/**
 * Document sorting and removing duplicates
 * @param {ArrayLike} results
 */Sizzle.uniqueSort=function(results){var elem,duplicates=[],j=0,i=0;// Unless we *know* we can detect duplicates, assume their presence
hasDuplicate=!support.detectDuplicates;sortInput=!support.sortStable&&results.slice(0);results.sort(sortOrder);if(hasDuplicate){while(elem=results[i++]){if(elem===results[i]){j=duplicates.push(i);}}while(j--){results.splice(duplicates[j],1);}}// Clear input after sorting to release objects
// See https://github.com/jquery/sizzle/pull/225
sortInput=null;return results;};/**
 * Utility function for retrieving the text value of an array of DOM nodes
 * @param {Array|Element} elem
 */getText=Sizzle.getText=function(elem){var node,ret="",i=0,nodeType=elem.nodeType;if(!nodeType){// If no nodeType, this is expected to be an array
while(node=elem[i++]){// Do not traverse comment nodes
ret+=getText(node);}}else if(nodeType===1||nodeType===9||nodeType===11){// Use textContent for elements
// innerText usage removed for consistency of new lines (jQuery #11153)
if(typeof elem.textContent==="string"){return elem.textContent;}else{// Traverse its children
for(elem=elem.firstChild;elem;elem=elem.nextSibling){ret+=getText(elem);}}}else if(nodeType===3||nodeType===4){return elem.nodeValue;}// Do not include comment or processing instruction nodes
return ret;};Expr=Sizzle.selectors={// Can be adjusted by the user
cacheLength:50,createPseudo:markFunction,match:matchExpr,attrHandle:{},find:{},relative:{">":{dir:"parentNode",first:true}," ":{dir:"parentNode"},"+":{dir:"previousSibling",first:true},"~":{dir:"previousSibling"}},preFilter:{"ATTR":function ATTR(match){match[1]=match[1].replace(runescape,funescape);// Move the given value to match[3] whether quoted or unquoted
match[3]=(match[3]||match[4]||match[5]||"").replace(runescape,funescape);if(match[2]==="~="){match[3]=" "+match[3]+" ";}return match.slice(0,4);},"CHILD":function CHILD(match){/* matches from matchExpr["CHILD"]
				1 type (only|nth|...)
				2 what (child|of-type)
				3 argument (even|odd|\d*|\d*n([+-]\d+)?|...)
				4 xn-component of xn+y argument ([+-]?\d*n|)
				5 sign of xn-component
				6 x of xn-component
				7 sign of y-component
				8 y of y-component
			*/match[1]=match[1].toLowerCase();if(match[1].slice(0,3)==="nth"){// nth-* requires argument
if(!match[3]){Sizzle.error(match[0]);}// numeric x and y parameters for Expr.filter.CHILD
// remember that false/true cast respectively to 0/1
match[4]=+(match[4]?match[5]+(match[6]||1):2*(match[3]==="even"||match[3]==="odd"));match[5]=+(match[7]+match[8]||match[3]==="odd");// other types prohibit arguments
}else if(match[3]){Sizzle.error(match[0]);}return match;},"PSEUDO":function PSEUDO(match){var excess,unquoted=!match[6]&&match[2];if(matchExpr["CHILD"].test(match[0])){return null;}// Accept quoted arguments as-is
if(match[3]){match[2]=match[4]||match[5]||"";// Strip excess characters from unquoted arguments
}else if(unquoted&&rpseudo.test(unquoted)&&(// Get excess from tokenize (recursively)
excess=tokenize(unquoted,true))&&(// advance to the next closing parenthesis
excess=unquoted.indexOf(")",unquoted.length-excess)-unquoted.length)){// excess is a negative index
match[0]=match[0].slice(0,excess);match[2]=unquoted.slice(0,excess);}// Return only captures needed by the pseudo filter method (type and argument)
return match.slice(0,3);}},filter:{"TAG":function TAG(nodeNameSelector){var nodeName=nodeNameSelector.replace(runescape,funescape).toLowerCase();return nodeNameSelector==="*"?function(){return true;}:function(elem){return elem.nodeName&&elem.nodeName.toLowerCase()===nodeName;};},"CLASS":function CLASS(className){var pattern=classCache[className+" "];return pattern||(pattern=new RegExp("(^|"+whitespace+")"+className+"("+whitespace+"|$)"))&&classCache(className,function(elem){return pattern.test(typeof elem.className==="string"&&elem.className||typeof elem.getAttribute!=="undefined"&&elem.getAttribute("class")||"");});},"ATTR":function ATTR(name,operator,check){return function(elem){var result=Sizzle.attr(elem,name);if(result==null){return operator==="!=";}if(!operator){return true;}result+="";/* eslint-disable max-len */return operator==="="?result===check:operator==="!="?result!==check:operator==="^="?check&&result.indexOf(check)===0:operator==="*="?check&&result.indexOf(check)>-1:operator==="$="?check&&result.slice(-check.length)===check:operator==="~="?(" "+result.replace(rwhitespace," ")+" ").indexOf(check)>-1:operator==="|="?result===check||result.slice(0,check.length+1)===check+"-":false;/* eslint-enable max-len */};},"CHILD":function CHILD(type,what,_argument,first,last){var simple=type.slice(0,3)!=="nth",forward=type.slice(-4)!=="last",ofType=what==="of-type";return first===1&&last===0?// Shortcut for :nth-*(n)
function(elem){return!!elem.parentNode;}:function(elem,_context,xml){var cache,uniqueCache,outerCache,node,nodeIndex,start,dir=simple!==forward?"nextSibling":"previousSibling",parent=elem.parentNode,name=ofType&&elem.nodeName.toLowerCase(),useCache=!xml&&!ofType,diff=false;if(parent){// :(first|last|only)-(child|of-type)
if(simple){while(dir){node=elem;while(node=node[dir]){if(ofType?node.nodeName.toLowerCase()===name:node.nodeType===1){return false;}}// Reverse direction for :only-* (if we haven't yet done so)
start=dir=type==="only"&&!start&&"nextSibling";}return true;}start=[forward?parent.firstChild:parent.lastChild];// non-xml :nth-child(...) stores cache data on `parent`
if(forward&&useCache){// Seek `elem` from a previously-cached index
// ...in a gzip-friendly way
node=parent;outerCache=node[expando]||(node[expando]={});// Support: IE <9 only
// Defend against cloned attroperties (jQuery gh-1709)
uniqueCache=outerCache[node.uniqueID]||(outerCache[node.uniqueID]={});cache=uniqueCache[type]||[];nodeIndex=cache[0]===dirruns&&cache[1];diff=nodeIndex&&cache[2];node=nodeIndex&&parent.childNodes[nodeIndex];while(node=++nodeIndex&&node&&node[dir]||(// Fallback to seeking `elem` from the start
diff=nodeIndex=0)||start.pop()){// When found, cache indexes on `parent` and break
if(node.nodeType===1&&++diff&&node===elem){uniqueCache[type]=[dirruns,nodeIndex,diff];break;}}}else{// Use previously-cached element index if available
if(useCache){// ...in a gzip-friendly way
node=elem;outerCache=node[expando]||(node[expando]={});// Support: IE <9 only
// Defend against cloned attroperties (jQuery gh-1709)
uniqueCache=outerCache[node.uniqueID]||(outerCache[node.uniqueID]={});cache=uniqueCache[type]||[];nodeIndex=cache[0]===dirruns&&cache[1];diff=nodeIndex;}// xml :nth-child(...)
// or :nth-last-child(...) or :nth(-last)?-of-type(...)
if(diff===false){// Use the same loop as above to seek `elem` from the start
while(node=++nodeIndex&&node&&node[dir]||(diff=nodeIndex=0)||start.pop()){if((ofType?node.nodeName.toLowerCase()===name:node.nodeType===1)&&++diff){// Cache the index of each encountered element
if(useCache){outerCache=node[expando]||(node[expando]={});// Support: IE <9 only
// Defend against cloned attroperties (jQuery gh-1709)
uniqueCache=outerCache[node.uniqueID]||(outerCache[node.uniqueID]={});uniqueCache[type]=[dirruns,diff];}if(node===elem){break;}}}}}// Incorporate the offset, then check against cycle size
diff-=last;return diff===first||diff%first===0&&diff/first>=0;}};},"PSEUDO":function PSEUDO(pseudo,argument){// pseudo-class names are case-insensitive
// http://www.w3.org/TR/selectors/#pseudo-classes
// Prioritize by case sensitivity in case custom pseudos are added with uppercase letters
// Remember that setFilters inherits from pseudos
var args,fn=Expr.pseudos[pseudo]||Expr.setFilters[pseudo.toLowerCase()]||Sizzle.error("unsupported pseudo: "+pseudo);// The user may use createPseudo to indicate that
// arguments are needed to create the filter function
// just as Sizzle does
if(fn[expando]){return fn(argument);}// But maintain support for old signatures
if(fn.length>1){args=[pseudo,pseudo,"",argument];return Expr.setFilters.hasOwnProperty(pseudo.toLowerCase())?markFunction(function(seed,matches){var idx,matched=fn(seed,argument),i=matched.length;while(i--){idx=indexOf(seed,matched[i]);seed[idx]=!(matches[idx]=matched[i]);}}):function(elem){return fn(elem,0,args);};}return fn;}},pseudos:{// Potentially complex pseudos
"not":markFunction(function(selector){// Trim the selector passed to compile
// to avoid treating leading and trailing
// spaces as combinators
var input=[],results=[],matcher=compile(selector.replace(rtrim,"$1"));return matcher[expando]?markFunction(function(seed,matches,_context,xml){var elem,unmatched=matcher(seed,null,xml,[]),i=seed.length;// Match elements unmatched by `matcher`
while(i--){if(elem=unmatched[i]){seed[i]=!(matches[i]=elem);}}}):function(elem,_context,xml){input[0]=elem;matcher(input,null,xml,results);// Don't keep the element (issue #299)
input[0]=null;return!results.pop();};}),"has":markFunction(function(selector){return function(elem){return Sizzle(selector,elem).length>0;};}),"contains":markFunction(function(text){text=text.replace(runescape,funescape);return function(elem){return(elem.textContent||getText(elem)).indexOf(text)>-1;};}),// "Whether an element is represented by a :lang() selector
// is based solely on the element's language value
// being equal to the identifier C,
// or beginning with the identifier C immediately followed by "-".
// The matching of C against the element's language value is performed case-insensitively.
// The identifier C does not have to be a valid language name."
// http://www.w3.org/TR/selectors/#lang-pseudo
"lang":markFunction(function(lang){// lang value must be a valid identifier
if(!ridentifier.test(lang||"")){Sizzle.error("unsupported lang: "+lang);}lang=lang.replace(runescape,funescape).toLowerCase();return function(elem){var elemLang;do{if(elemLang=documentIsHTML?elem.lang:elem.getAttribute("xml:lang")||elem.getAttribute("lang")){elemLang=elemLang.toLowerCase();return elemLang===lang||elemLang.indexOf(lang+"-")===0;}}while((elem=elem.parentNode)&&elem.nodeType===1);return false;};}),// Miscellaneous
"target":function target(elem){var hash=window.location&&window.location.hash;return hash&&hash.slice(1)===elem.id;},"root":function root(elem){return elem===docElem;},"focus":function focus(elem){return elem===document.activeElement&&(!document.hasFocus||document.hasFocus())&&!!(elem.type||elem.href||~elem.tabIndex);},// Boolean properties
"enabled":createDisabledPseudo(false),"disabled":createDisabledPseudo(true),"checked":function checked(elem){// In CSS3, :checked should return both checked and selected elements
// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
var nodeName=elem.nodeName.toLowerCase();return nodeName==="input"&&!!elem.checked||nodeName==="option"&&!!elem.selected;},"selected":function selected(elem){// Accessing this property makes selected-by-default
// options in Safari work properly
if(elem.parentNode){// eslint-disable-next-line no-unused-expressions
elem.parentNode.selectedIndex;}return elem.selected===true;},// Contents
"empty":function empty(elem){// http://www.w3.org/TR/selectors/#empty-pseudo
// :empty is negated by element (1) or content nodes (text: 3; cdata: 4; entity ref: 5),
//   but not by others (comment: 8; processing instruction: 7; etc.)
// nodeType < 6 works because attributes (2) do not appear as children
for(elem=elem.firstChild;elem;elem=elem.nextSibling){if(elem.nodeType<6){return false;}}return true;},"parent":function parent(elem){return!Expr.pseudos["empty"](elem);},// Element/input types
"header":function header(elem){return rheader.test(elem.nodeName);},"input":function input(elem){return rinputs.test(elem.nodeName);},"button":function button(elem){var name=elem.nodeName.toLowerCase();return name==="input"&&elem.type==="button"||name==="button";},"text":function text(elem){var attr;return elem.nodeName.toLowerCase()==="input"&&elem.type==="text"&&(// Support: IE<8
// New HTML5 attribute values (e.g., "search") appear with elem.type === "text"
(attr=elem.getAttribute("type"))==null||attr.toLowerCase()==="text");},// Position-in-collection
"first":createPositionalPseudo(function(){return[0];}),"last":createPositionalPseudo(function(_matchIndexes,length){return[length-1];}),"eq":createPositionalPseudo(function(_matchIndexes,length,argument){return[argument<0?argument+length:argument];}),"even":createPositionalPseudo(function(matchIndexes,length){var i=0;for(;i<length;i+=2){matchIndexes.push(i);}return matchIndexes;}),"odd":createPositionalPseudo(function(matchIndexes,length){var i=1;for(;i<length;i+=2){matchIndexes.push(i);}return matchIndexes;}),"lt":createPositionalPseudo(function(matchIndexes,length,argument){var i=argument<0?argument+length:argument>length?length:argument;for(;--i>=0;){matchIndexes.push(i);}return matchIndexes;}),"gt":createPositionalPseudo(function(matchIndexes,length,argument){var i=argument<0?argument+length:argument;for(;++i<length;){matchIndexes.push(i);}return matchIndexes;})}};Expr.pseudos["nth"]=Expr.pseudos["eq"];// Add button/input type pseudos
for(i in{radio:true,checkbox:true,file:true,password:true,image:true}){Expr.pseudos[i]=createInputPseudo(i);}for(i in{submit:true,reset:true}){Expr.pseudos[i]=createButtonPseudo(i);}// Easy API for creating new setFilters
function setFilters(){}setFilters.prototype=Expr.filters=Expr.pseudos;Expr.setFilters=new setFilters();tokenize=Sizzle.tokenize=function(selector,parseOnly){var matched,match,tokens,type,soFar,groups,preFilters,cached=tokenCache[selector+" "];if(cached){return parseOnly?0:cached.slice(0);}soFar=selector;groups=[];preFilters=Expr.preFilter;while(soFar){// Comma and first run
if(!matched||(match=rcomma.exec(soFar))){if(match){// Don't consume trailing commas as valid
soFar=soFar.slice(match[0].length)||soFar;}groups.push(tokens=[]);}matched=false;// Combinators
if(match=rcombinators.exec(soFar)){matched=match.shift();tokens.push({value:matched,// Cast descendant combinators to space
type:match[0].replace(rtrim," ")});soFar=soFar.slice(matched.length);}// Filters
for(type in Expr.filter){if((match=matchExpr[type].exec(soFar))&&(!preFilters[type]||(match=preFilters[type](match)))){matched=match.shift();tokens.push({value:matched,type:type,matches:match});soFar=soFar.slice(matched.length);}}if(!matched){break;}}// Return the length of the invalid excess
// if we're just parsing
// Otherwise, throw an error or return tokens
return parseOnly?soFar.length:soFar?Sizzle.error(selector):// Cache the tokens
tokenCache(selector,groups).slice(0);};function toSelector(tokens){var i=0,len=tokens.length,selector="";for(;i<len;i++){selector+=tokens[i].value;}return selector;}function addCombinator(matcher,combinator,base){var dir=combinator.dir,skip=combinator.next,key=skip||dir,checkNonElements=base&&key==="parentNode",doneName=done++;return combinator.first?// Check against closest ancestor/preceding element
function(elem,context,xml){while(elem=elem[dir]){if(elem.nodeType===1||checkNonElements){return matcher(elem,context,xml);}}return false;}:// Check against all ancestor/preceding elements
function(elem,context,xml){var oldCache,uniqueCache,outerCache,newCache=[dirruns,doneName];// We can't set arbitrary data on XML nodes, so they don't benefit from combinator caching
if(xml){while(elem=elem[dir]){if(elem.nodeType===1||checkNonElements){if(matcher(elem,context,xml)){return true;}}}}else{while(elem=elem[dir]){if(elem.nodeType===1||checkNonElements){outerCache=elem[expando]||(elem[expando]={});// Support: IE <9 only
// Defend against cloned attroperties (jQuery gh-1709)
uniqueCache=outerCache[elem.uniqueID]||(outerCache[elem.uniqueID]={});if(skip&&skip===elem.nodeName.toLowerCase()){elem=elem[dir]||elem;}else if((oldCache=uniqueCache[key])&&oldCache[0]===dirruns&&oldCache[1]===doneName){// Assign to newCache so results back-propagate to previous elements
return newCache[2]=oldCache[2];}else{// Reuse newcache so results back-propagate to previous elements
uniqueCache[key]=newCache;// A match means we're done; a fail means we have to keep checking
if(newCache[2]=matcher(elem,context,xml)){return true;}}}}}return false;};}function elementMatcher(matchers){return matchers.length>1?function(elem,context,xml){var i=matchers.length;while(i--){if(!matchers[i](elem,context,xml)){return false;}}return true;}:matchers[0];}function multipleContexts(selector,contexts,results){var i=0,len=contexts.length;for(;i<len;i++){Sizzle(selector,contexts[i],results);}return results;}function condense(unmatched,map,filter,context,xml){var elem,newUnmatched=[],i=0,len=unmatched.length,mapped=map!=null;for(;i<len;i++){if(elem=unmatched[i]){if(!filter||filter(elem,context,xml)){newUnmatched.push(elem);if(mapped){map.push(i);}}}}return newUnmatched;}function setMatcher(preFilter,selector,matcher,postFilter,postFinder,postSelector){if(postFilter&&!postFilter[expando]){postFilter=setMatcher(postFilter);}if(postFinder&&!postFinder[expando]){postFinder=setMatcher(postFinder,postSelector);}return markFunction(function(seed,results,context,xml){var temp,i,elem,preMap=[],postMap=[],preexisting=results.length,// Get initial elements from seed or context
elems=seed||multipleContexts(selector||"*",context.nodeType?[context]:context,[]),// Prefilter to get matcher input, preserving a map for seed-results synchronization
matcherIn=preFilter&&(seed||!selector)?condense(elems,preMap,preFilter,context,xml):elems,matcherOut=matcher?// If we have a postFinder, or filtered seed, or non-seed postFilter or preexisting results,
postFinder||(seed?preFilter:preexisting||postFilter)?// ...intermediate processing is necessary
[]:// ...otherwise use results directly
results:matcherIn;// Find primary matches
if(matcher){matcher(matcherIn,matcherOut,context,xml);}// Apply postFilter
if(postFilter){temp=condense(matcherOut,postMap);postFilter(temp,[],context,xml);// Un-match failing elements by moving them back to matcherIn
i=temp.length;while(i--){if(elem=temp[i]){matcherOut[postMap[i]]=!(matcherIn[postMap[i]]=elem);}}}if(seed){if(postFinder||preFilter){if(postFinder){// Get the final matcherOut by condensing this intermediate into postFinder contexts
temp=[];i=matcherOut.length;while(i--){if(elem=matcherOut[i]){// Restore matcherIn since elem is not yet a final match
temp.push(matcherIn[i]=elem);}}postFinder(null,matcherOut=[],temp,xml);}// Move matched elements from seed to results to keep them synchronized
i=matcherOut.length;while(i--){if((elem=matcherOut[i])&&(temp=postFinder?indexOf(seed,elem):preMap[i])>-1){seed[temp]=!(results[temp]=elem);}}}// Add elements to results, through postFinder if defined
}else{matcherOut=condense(matcherOut===results?matcherOut.splice(preexisting,matcherOut.length):matcherOut);if(postFinder){postFinder(null,results,matcherOut,xml);}else{push.apply(results,matcherOut);}}});}function matcherFromTokens(tokens){var checkContext,matcher,j,len=tokens.length,leadingRelative=Expr.relative[tokens[0].type],implicitRelative=leadingRelative||Expr.relative[" "],i=leadingRelative?1:0,// The foundational matcher ensures that elements are reachable from top-level context(s)
matchContext=addCombinator(function(elem){return elem===checkContext;},implicitRelative,true),matchAnyContext=addCombinator(function(elem){return indexOf(checkContext,elem)>-1;},implicitRelative,true),matchers=[function(elem,context,xml){var ret=!leadingRelative&&(xml||context!==outermostContext)||((checkContext=context).nodeType?matchContext(elem,context,xml):matchAnyContext(elem,context,xml));// Avoid hanging onto element (issue #299)
checkContext=null;return ret;}];for(;i<len;i++){if(matcher=Expr.relative[tokens[i].type]){matchers=[addCombinator(elementMatcher(matchers),matcher)];}else{matcher=Expr.filter[tokens[i].type].apply(null,tokens[i].matches);// Return special upon seeing a positional matcher
if(matcher[expando]){// Find the next relative operator (if any) for proper handling
j=++i;for(;j<len;j++){if(Expr.relative[tokens[j].type]){break;}}return setMatcher(i>1&&elementMatcher(matchers),i>1&&toSelector(// If the preceding token was a descendant combinator, insert an implicit any-element `*`
tokens.slice(0,i-1).concat({value:tokens[i-2].type===" "?"*":""})).replace(rtrim,"$1"),matcher,i<j&&matcherFromTokens(tokens.slice(i,j)),j<len&&matcherFromTokens(tokens=tokens.slice(j)),j<len&&toSelector(tokens));}matchers.push(matcher);}}return elementMatcher(matchers);}function matcherFromGroupMatchers(elementMatchers,setMatchers){var bySet=setMatchers.length>0,byElement=elementMatchers.length>0,superMatcher=function superMatcher(seed,context,xml,results,outermost){var elem,j,matcher,matchedCount=0,i="0",unmatched=seed&&[],setMatched=[],contextBackup=outermostContext,// We must always have either seed elements or outermost context
elems=seed||byElement&&Expr.find["TAG"]("*",outermost),// Use integer dirruns iff this is the outermost matcher
dirrunsUnique=dirruns+=contextBackup==null?1:Math.random()||0.1,len=elems.length;if(outermost){// Support: IE 11+, Edge 17 - 18+
// IE/Edge sometimes throw a "Permission denied" error when strict-comparing
// two documents; shallow comparisons work.
// eslint-disable-next-line eqeqeq
outermostContext=context==document||context||outermost;}// Add elements passing elementMatchers directly to results
// Support: IE<9, Safari
// Tolerate NodeList properties (IE: "length"; Safari: <number>) matching elements by id
for(;i!==len&&(elem=elems[i])!=null;i++){if(byElement&&elem){j=0;// Support: IE 11+, Edge 17 - 18+
// IE/Edge sometimes throw a "Permission denied" error when strict-comparing
// two documents; shallow comparisons work.
// eslint-disable-next-line eqeqeq
if(!context&&elem.ownerDocument!=document){setDocument(elem);xml=!documentIsHTML;}while(matcher=elementMatchers[j++]){if(matcher(elem,context||document,xml)){results.push(elem);break;}}if(outermost){dirruns=dirrunsUnique;}}// Track unmatched elements for set filters
if(bySet){// They will have gone through all possible matchers
if(elem=!matcher&&elem){matchedCount--;}// Lengthen the array for every element, matched or not
if(seed){unmatched.push(elem);}}}// `i` is now the count of elements visited above, and adding it to `matchedCount`
// makes the latter nonnegative.
matchedCount+=i;// Apply set filters to unmatched elements
// NOTE: This can be skipped if there are no unmatched elements (i.e., `matchedCount`
// equals `i`), unless we didn't visit _any_ elements in the above loop because we have
// no element matchers and no seed.
// Incrementing an initially-string "0" `i` allows `i` to remain a string only in that
// case, which will result in a "00" `matchedCount` that differs from `i` but is also
// numerically zero.
if(bySet&&i!==matchedCount){j=0;while(matcher=setMatchers[j++]){matcher(unmatched,setMatched,context,xml);}if(seed){// Reintegrate element matches to eliminate the need for sorting
if(matchedCount>0){while(i--){if(!(unmatched[i]||setMatched[i])){setMatched[i]=pop.call(results);}}}// Discard index placeholder values to get only actual matches
setMatched=condense(setMatched);}// Add matches to results
push.apply(results,setMatched);// Seedless set matches succeeding multiple successful matchers stipulate sorting
if(outermost&&!seed&&setMatched.length>0&&matchedCount+setMatchers.length>1){Sizzle.uniqueSort(results);}}// Override manipulation of globals by nested matchers
if(outermost){dirruns=dirrunsUnique;outermostContext=contextBackup;}return unmatched;};return bySet?markFunction(superMatcher):superMatcher;}compile=Sizzle.compile=function(selector,match/* Internal Use Only */){var i,setMatchers=[],elementMatchers=[],cached=compilerCache[selector+" "];if(!cached){// Generate a function of recursive functions that can be used to check each element
if(!match){match=tokenize(selector);}i=match.length;while(i--){cached=matcherFromTokens(match[i]);if(cached[expando]){setMatchers.push(cached);}else{elementMatchers.push(cached);}}// Cache the compiled function
cached=compilerCache(selector,matcherFromGroupMatchers(elementMatchers,setMatchers));// Save selector and tokenization
cached.selector=selector;}return cached;};/**
 * A low-level selection function that works with Sizzle's compiled
 *  selector functions
 * @param {String|Function} selector A selector or a pre-compiled
 *  selector function built with Sizzle.compile
 * @param {Element} context
 * @param {Array} [results]
 * @param {Array} [seed] A set of elements to match against
 */select=Sizzle.select=function(selector,context,results,seed){var i,tokens,token,type,find,compiled=typeof selector==="function"&&selector,match=!seed&&tokenize(selector=compiled.selector||selector);results=results||[];// Try to minimize operations if there is only one selector in the list and no seed
// (the latter of which guarantees us context)
if(match.length===1){// Reduce context if the leading compound selector is an ID
tokens=match[0]=match[0].slice(0);if(tokens.length>2&&(token=tokens[0]).type==="ID"&&context.nodeType===9&&documentIsHTML&&Expr.relative[tokens[1].type]){context=(Expr.find["ID"](token.matches[0].replace(runescape,funescape),context)||[])[0];if(!context){return results;// Precompiled matchers will still verify ancestry, so step up a level
}else if(compiled){context=context.parentNode;}selector=selector.slice(tokens.shift().value.length);}// Fetch a seed set for right-to-left matching
i=matchExpr["needsContext"].test(selector)?0:tokens.length;while(i--){token=tokens[i];// Abort if we hit a combinator
if(Expr.relative[type=token.type]){break;}if(find=Expr.find[type]){// Search, expanding context for leading sibling combinators
if(seed=find(token.matches[0].replace(runescape,funescape),rsibling.test(tokens[0].type)&&testContext(context.parentNode)||context)){// If seed is empty or no tokens remain, we can return early
tokens.splice(i,1);selector=seed.length&&toSelector(tokens);if(!selector){push.apply(results,seed);return results;}break;}}}}// Compile and execute a filtering function if one is not provided
// Provide `match` to avoid retokenization if we modified the selector above
(compiled||compile(selector,match))(seed,context,!documentIsHTML,results,!context||rsibling.test(selector)&&testContext(context.parentNode)||context);return results;};// One-time assignments
// Sort stability
support.sortStable=expando.split("").sort(sortOrder).join("")===expando;// Support: Chrome 14-35+
// Always assume duplicates if they aren't passed to the comparison function
support.detectDuplicates=!!hasDuplicate;// Initialize against the default document
setDocument();// Support: Webkit<537.32 - Safari 6.0.3/Chrome 25 (fixed in Chrome 27)
// Detached nodes confoundingly follow *each other*
support.sortDetached=assert(function(el){// Should return 1, but returns 4 (following)
return el.compareDocumentPosition(document.createElement("fieldset"))&1;});// Support: IE<8
// Prevent attribute/property "interpolation"
// https://msdn.microsoft.com/en-us/library/ms536429%28VS.85%29.aspx
if(!assert(function(el){el.innerHTML="<a href='#'></a>";return el.firstChild.getAttribute("href")==="#";})){addHandle("type|href|height|width",function(elem,name,isXML){if(!isXML){return elem.getAttribute(name,name.toLowerCase()==="type"?1:2);}});}// Support: IE<9
// Use defaultValue in place of getAttribute("value")
if(!support.attributes||!assert(function(el){el.innerHTML="<input/>";el.firstChild.setAttribute("value","");return el.firstChild.getAttribute("value")==="";})){addHandle("value",function(elem,_name,isXML){if(!isXML&&elem.nodeName.toLowerCase()==="input"){return elem.defaultValue;}});}// Support: IE<9
// Use getAttributeNode to fetch booleans when getAttribute lies
if(!assert(function(el){return el.getAttribute("disabled")==null;})){addHandle(booleans,function(elem,name,isXML){var val;if(!isXML){return elem[name]===true?name.toLowerCase():(val=elem.getAttributeNode(name))&&val.specified?val.value:null;}});}return Sizzle;}(window);jQuery.find=Sizzle;jQuery.expr=Sizzle.selectors;// Deprecated
jQuery.expr[":"]=jQuery.expr.pseudos;jQuery.uniqueSort=jQuery.unique=Sizzle.uniqueSort;jQuery.text=Sizzle.getText;jQuery.isXMLDoc=Sizzle.isXML;jQuery.contains=Sizzle.contains;jQuery.escapeSelector=Sizzle.escape;var dir=function dir(elem,_dir,until){var matched=[],truncate=until!==undefined;while((elem=elem[_dir])&&elem.nodeType!==9){if(elem.nodeType===1){if(truncate&&jQuery(elem).is(until)){break;}matched.push(elem);}}return matched;};var _siblings=function siblings(n,elem){var matched=[];for(;n;n=n.nextSibling){if(n.nodeType===1&&n!==elem){matched.push(n);}}return matched;};var rneedsContext=jQuery.expr.match.needsContext;function nodeName(elem,name){return elem.nodeName&&elem.nodeName.toLowerCase()===name.toLowerCase();};var rsingleTag=/^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i;// Implement the identical functionality for filter and not
function winnow(elements,qualifier,not){if(isFunction(qualifier)){return jQuery.grep(elements,function(elem,i){return!!qualifier.call(elem,i,elem)!==not;});}// Single element
if(qualifier.nodeType){return jQuery.grep(elements,function(elem){return elem===qualifier!==not;});}// Arraylike of elements (jQuery, arguments, Array)
if(typeof qualifier!=="string"){return jQuery.grep(elements,function(elem){return indexOf.call(qualifier,elem)>-1!==not;});}// Filtered directly for both simple and complex selectors
return jQuery.filter(qualifier,elements,not);}jQuery.filter=function(expr,elems,not){var elem=elems[0];if(not){expr=":not("+expr+")";}if(elems.length===1&&elem.nodeType===1){return jQuery.find.matchesSelector(elem,expr)?[elem]:[];}return jQuery.find.matches(expr,jQuery.grep(elems,function(elem){return elem.nodeType===1;}));};jQuery.fn.extend({find:function find(selector){var i,ret,len=this.length,self=this;if(typeof selector!=="string"){return this.pushStack(jQuery(selector).filter(function(){for(i=0;i<len;i++){if(jQuery.contains(self[i],this)){return true;}}}));}ret=this.pushStack([]);for(i=0;i<len;i++){jQuery.find(selector,self[i],ret);}return len>1?jQuery.uniqueSort(ret):ret;},filter:function filter(selector){return this.pushStack(winnow(this,selector||[],false));},not:function not(selector){return this.pushStack(winnow(this,selector||[],true));},is:function is(selector){return!!winnow(this,// If this is a positional/relative selector, check membership in the returned set
// so $("p:first").is("p:last") won't return true for a doc with two "p".
typeof selector==="string"&&rneedsContext.test(selector)?jQuery(selector):selector||[],false).length;}});// Initialize a jQuery object
// A central reference to the root jQuery(document)
var rootjQuery,// A simple way to check for HTML strings
// Prioritize #id over <tag> to avoid XSS via location.hash (#9521)
// Strict HTML recognition (#11290: must start with <)
// Shortcut simple #id case for speed
rquickExpr=/^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/,init=jQuery.fn.init=function(selector,context,root){var match,elem;// HANDLE: $(""), $(null), $(undefined), $(false)
if(!selector){return this;}// Method init() accepts an alternate rootjQuery
// so migrate can support jQuery.sub (gh-2101)
root=root||rootjQuery;// Handle HTML strings
if(typeof selector==="string"){if(selector[0]==="<"&&selector[selector.length-1]===">"&&selector.length>=3){// Assume that strings that start and end with <> are HTML and skip the regex check
match=[null,selector,null];}else{match=rquickExpr.exec(selector);}// Match html or make sure no context is specified for #id
if(match&&(match[1]||!context)){// HANDLE: $(html) -> $(array)
if(match[1]){context=context instanceof jQuery?context[0]:context;// Option to run scripts is true for back-compat
// Intentionally let the error be thrown if parseHTML is not present
jQuery.merge(this,jQuery.parseHTML(match[1],context&&context.nodeType?context.ownerDocument||context:document,true));// HANDLE: $(html, props)
if(rsingleTag.test(match[1])&&jQuery.isPlainObject(context)){for(match in context){// Properties of context are called as methods if possible
if(isFunction(this[match])){this[match](context[match]);// ...and otherwise set as attributes
}else{this.attr(match,context[match]);}}}return this;// HANDLE: $(#id)
}else{elem=document.getElementById(match[2]);if(elem){// Inject the element directly into the jQuery object
this[0]=elem;this.length=1;}return this;}// HANDLE: $(expr, $(...))
}else if(!context||context.jquery){return(context||root).find(selector);// HANDLE: $(expr, context)
// (which is just equivalent to: $(context).find(expr)
}else{return this.constructor(context).find(selector);}// HANDLE: $(DOMElement)
}else if(selector.nodeType){this[0]=selector;this.length=1;return this;// HANDLE: $(function)
// Shortcut for document ready
}else if(isFunction(selector)){return root.ready!==undefined?root.ready(selector):// Execute immediately if ready is not present
selector(jQuery);}return jQuery.makeArray(selector,this);};// Give the init function the jQuery prototype for later instantiation
init.prototype=jQuery.fn;// Initialize central reference
rootjQuery=jQuery(document);var rparentsprev=/^(?:parents|prev(?:Until|All))/,// Methods guaranteed to produce a unique set when starting from a unique set
guaranteedUnique={children:true,contents:true,next:true,prev:true};jQuery.fn.extend({has:function has(target){var targets=jQuery(target,this),l=targets.length;return this.filter(function(){var i=0;for(;i<l;i++){if(jQuery.contains(this,targets[i])){return true;}}});},closest:function closest(selectors,context){var cur,i=0,l=this.length,matched=[],targets=typeof selectors!=="string"&&jQuery(selectors);// Positional selectors never match, since there's no _selection_ context
if(!rneedsContext.test(selectors)){for(;i<l;i++){for(cur=this[i];cur&&cur!==context;cur=cur.parentNode){// Always skip document fragments
if(cur.nodeType<11&&(targets?targets.index(cur)>-1:// Don't pass non-elements to Sizzle
cur.nodeType===1&&jQuery.find.matchesSelector(cur,selectors))){matched.push(cur);break;}}}}return this.pushStack(matched.length>1?jQuery.uniqueSort(matched):matched);},// Determine the position of an element within the set
index:function index(elem){// No argument, return index in parent
if(!elem){return this[0]&&this[0].parentNode?this.first().prevAll().length:-1;}// Index in selector
if(typeof elem==="string"){return indexOf.call(jQuery(elem),this[0]);}// Locate the position of the desired element
return indexOf.call(this,// If it receives a jQuery object, the first element is used
elem.jquery?elem[0]:elem);},add:function add(selector,context){return this.pushStack(jQuery.uniqueSort(jQuery.merge(this.get(),jQuery(selector,context))));},addBack:function addBack(selector){return this.add(selector==null?this.prevObject:this.prevObject.filter(selector));}});function sibling(cur,dir){while((cur=cur[dir])&&cur.nodeType!==1){}return cur;}jQuery.each({parent:function parent(elem){var parent=elem.parentNode;return parent&&parent.nodeType!==11?parent:null;},parents:function parents(elem){return dir(elem,"parentNode");},parentsUntil:function parentsUntil(elem,_i,until){return dir(elem,"parentNode",until);},next:function next(elem){return sibling(elem,"nextSibling");},prev:function prev(elem){return sibling(elem,"previousSibling");},nextAll:function nextAll(elem){return dir(elem,"nextSibling");},prevAll:function prevAll(elem){return dir(elem,"previousSibling");},nextUntil:function nextUntil(elem,_i,until){return dir(elem,"nextSibling",until);},prevUntil:function prevUntil(elem,_i,until){return dir(elem,"previousSibling",until);},siblings:function siblings(elem){return _siblings((elem.parentNode||{}).firstChild,elem);},children:function children(elem){return _siblings(elem.firstChild);},contents:function contents(elem){if(elem.contentDocument!=null&&// Support: IE 11+
// <object> elements with no `data` attribute has an object
// `contentDocument` with a `null` prototype.
getProto(elem.contentDocument)){return elem.contentDocument;}// Support: IE 9 - 11 only, iOS 7 only, Android Browser <=4.3 only
// Treat the template element as a regular one in browsers that
// don't support it.
if(nodeName(elem,"template")){elem=elem.content||elem;}return jQuery.merge([],elem.childNodes);}},function(name,fn){jQuery.fn[name]=function(until,selector){var matched=jQuery.map(this,fn,until);if(name.slice(-5)!=="Until"){selector=until;}if(selector&&typeof selector==="string"){matched=jQuery.filter(selector,matched);}if(this.length>1){// Remove duplicates
if(!guaranteedUnique[name]){jQuery.uniqueSort(matched);}// Reverse order for parents* and prev-derivatives
if(rparentsprev.test(name)){matched.reverse();}}return this.pushStack(matched);};});var rnothtmlwhite=/[^\x20\t\r\n\f]+/g;// Convert String-formatted options into Object-formatted ones
function createOptions(options){var object={};jQuery.each(options.match(rnothtmlwhite)||[],function(_,flag){object[flag]=true;});return object;}/*
 * Create a callback list using the following parameters:
 *
 *	options: an optional list of space-separated options that will change how
 *			the callback list behaves or a more traditional option object
 *
 * By default a callback list will act like an event callback list and can be
 * "fired" multiple times.
 *
 * Possible options:
 *
 *	once:			will ensure the callback list can only be fired once (like a Deferred)
 *
 *	memory:			will keep track of previous values and will call any callback added
 *					after the list has been fired right away with the latest "memorized"
 *					values (like a Deferred)
 *
 *	unique:			will ensure a callback can only be added once (no duplicate in the list)
 *
 *	stopOnFalse:	interrupt callings when a callback returns false
 *
 */jQuery.Callbacks=function(options){// Convert options from String-formatted to Object-formatted if needed
// (we check in cache first)
options=typeof options==="string"?createOptions(options):jQuery.extend({},options);var// Flag to know if list is currently firing
firing,// Last fire value for non-forgettable lists
memory,// Flag to know if list was already fired
_fired,// Flag to prevent firing
_locked,// Actual callback list
list=[],// Queue of execution data for repeatable lists
queue=[],// Index of currently firing callback (modified by add/remove as needed)
firingIndex=-1,// Fire callbacks
fire=function fire(){// Enforce single-firing
_locked=_locked||options.once;// Execute callbacks for all pending executions,
// respecting firingIndex overrides and runtime changes
_fired=firing=true;for(;queue.length;firingIndex=-1){memory=queue.shift();while(++firingIndex<list.length){// Run callback and check for early termination
if(list[firingIndex].apply(memory[0],memory[1])===false&&options.stopOnFalse){// Jump to end and forget the data so .add doesn't re-fire
firingIndex=list.length;memory=false;}}}// Forget the data if we're done with it
if(!options.memory){memory=false;}firing=false;// Clean up if we're done firing for good
if(_locked){// Keep an empty list if we have data for future add calls
if(memory){list=[];// Otherwise, this object is spent
}else{list="";}}},// Actual Callbacks object
self={// Add a callback or a collection of callbacks to the list
add:function add(){if(list){// If we have memory from a past run, we should fire after adding
if(memory&&!firing){firingIndex=list.length-1;queue.push(memory);}(function add(args){jQuery.each(args,function(_,arg){if(isFunction(arg)){if(!options.unique||!self.has(arg)){list.push(arg);}}else if(arg&&arg.length&&toType(arg)!=="string"){// Inspect recursively
add(arg);}});})(arguments);if(memory&&!firing){fire();}}return this;},// Remove a callback from the list
remove:function remove(){jQuery.each(arguments,function(_,arg){var index;while((index=jQuery.inArray(arg,list,index))>-1){list.splice(index,1);// Handle firing indexes
if(index<=firingIndex){firingIndex--;}}});return this;},// Check if a given callback is in the list.
// If no argument is given, return whether or not list has callbacks attached.
has:function has(fn){return fn?jQuery.inArray(fn,list)>-1:list.length>0;},// Remove all callbacks from the list
empty:function empty(){if(list){list=[];}return this;},// Disable .fire and .add
// Abort any current/pending executions
// Clear all callbacks and values
disable:function disable(){_locked=queue=[];list=memory="";return this;},disabled:function disabled(){return!list;},// Disable .fire
// Also disable .add unless we have memory (since it would have no effect)
// Abort any pending executions
lock:function lock(){_locked=queue=[];if(!memory&&!firing){list=memory="";}return this;},locked:function locked(){return!!_locked;},// Call all callbacks with the given context and arguments
fireWith:function fireWith(context,args){if(!_locked){args=args||[];args=[context,args.slice?args.slice():args];queue.push(args);if(!firing){fire();}}return this;},// Call all the callbacks with the given arguments
fire:function fire(){self.fireWith(this,arguments);return this;},// To know if the callbacks have already been called at least once
fired:function fired(){return!!_fired;}};return self;};function Identity(v){return v;}function Thrower(ex){throw ex;}function adoptValue(value,resolve,reject,noValue){var method;try{// Check for promise aspect first to privilege synchronous behavior
if(value&&isFunction(method=value.promise)){method.call(value).done(resolve).fail(reject);// Other thenables
}else if(value&&isFunction(method=value.then)){method.call(value,resolve,reject);// Other non-thenables
}else{// Control `resolve` arguments by letting Array#slice cast boolean `noValue` to integer:
// * false: [ value ].slice( 0 ) => resolve( value )
// * true: [ value ].slice( 1 ) => resolve()
resolve.apply(undefined,[value].slice(noValue));}// For Promises/A+, convert exceptions into rejections
// Since jQuery.when doesn't unwrap thenables, we can skip the extra checks appearing in
// Deferred#then to conditionally suppress rejection.
}catch(value){// Support: Android 4.0 only
// Strict mode functions invoked without .call/.apply get global-object context
reject.apply(undefined,[value]);}}jQuery.extend({Deferred:function Deferred(func){var tuples=[// action, add listener, callbacks,
// ... .then handlers, argument index, [final state]
["notify","progress",jQuery.Callbacks("memory"),jQuery.Callbacks("memory"),2],["resolve","done",jQuery.Callbacks("once memory"),jQuery.Callbacks("once memory"),0,"resolved"],["reject","fail",jQuery.Callbacks("once memory"),jQuery.Callbacks("once memory"),1,"rejected"]],_state="pending",_promise={state:function state(){return _state;},always:function always(){deferred.done(arguments).fail(arguments);return this;},"catch":function _catch(fn){return _promise.then(null,fn);},// Keep pipe for back-compat
pipe:function pipe()/* fnDone, fnFail, fnProgress */{var fns=arguments;return jQuery.Deferred(function(newDefer){jQuery.each(tuples,function(_i,tuple){// Map tuples (progress, done, fail) to arguments (done, fail, progress)
var fn=isFunction(fns[tuple[4]])&&fns[tuple[4]];// deferred.progress(function() { bind to newDefer or newDefer.notify })
// deferred.done(function() { bind to newDefer or newDefer.resolve })
// deferred.fail(function() { bind to newDefer or newDefer.reject })
deferred[tuple[1]](function(){var returned=fn&&fn.apply(this,arguments);if(returned&&isFunction(returned.promise)){returned.promise().progress(newDefer.notify).done(newDefer.resolve).fail(newDefer.reject);}else{newDefer[tuple[0]+"With"](this,fn?[returned]:arguments);}});});fns=null;}).promise();},then:function then(onFulfilled,onRejected,onProgress){var maxDepth=0;function resolve(depth,deferred,handler,special){return function(){var that=this,args=arguments,mightThrow=function mightThrow(){var returned,then;// Support: Promises/A+ section 2.3.3.3.3
// https://promisesaplus.com/#point-59
// Ignore double-resolution attempts
if(depth<maxDepth){return;}returned=handler.apply(that,args);// Support: Promises/A+ section 2.3.1
// https://promisesaplus.com/#point-48
if(returned===deferred.promise()){throw new TypeError("Thenable self-resolution");}// Support: Promises/A+ sections 2.3.3.1, 3.5
// https://promisesaplus.com/#point-54
// https://promisesaplus.com/#point-75
// Retrieve `then` only once
then=returned&&(// Support: Promises/A+ section 2.3.4
// https://promisesaplus.com/#point-64
// Only check objects and functions for thenability
_typeof(returned)==="object"||typeof returned==="function")&&returned.then;// Handle a returned thenable
if(isFunction(then)){// Special processors (notify) just wait for resolution
if(special){then.call(returned,resolve(maxDepth,deferred,Identity,special),resolve(maxDepth,deferred,Thrower,special));// Normal processors (resolve) also hook into progress
}else{// ...and disregard older resolution values
maxDepth++;then.call(returned,resolve(maxDepth,deferred,Identity,special),resolve(maxDepth,deferred,Thrower,special),resolve(maxDepth,deferred,Identity,deferred.notifyWith));}// Handle all other returned values
}else{// Only substitute handlers pass on context
// and multiple values (non-spec behavior)
if(handler!==Identity){that=undefined;args=[returned];}// Process the value(s)
// Default process is resolve
(special||deferred.resolveWith)(that,args);}},// Only normal processors (resolve) catch and reject exceptions
process=special?mightThrow:function(){try{mightThrow();}catch(e){if(jQuery.Deferred.exceptionHook){jQuery.Deferred.exceptionHook(e,process.stackTrace);}// Support: Promises/A+ section 2.3.3.3.4.1
// https://promisesaplus.com/#point-61
// Ignore post-resolution exceptions
if(depth+1>=maxDepth){// Only substitute handlers pass on context
// and multiple values (non-spec behavior)
if(handler!==Thrower){that=undefined;args=[e];}deferred.rejectWith(that,args);}}};// Support: Promises/A+ section 2.3.3.3.1
// https://promisesaplus.com/#point-57
// Re-resolve promises immediately to dodge false rejection from
// subsequent errors
if(depth){process();}else{// Call an optional hook to record the stack, in case of exception
// since it's otherwise lost when execution goes async
if(jQuery.Deferred.getStackHook){process.stackTrace=jQuery.Deferred.getStackHook();}window.setTimeout(process);}};}return jQuery.Deferred(function(newDefer){// progress_handlers.add( ... )
tuples[0][3].add(resolve(0,newDefer,isFunction(onProgress)?onProgress:Identity,newDefer.notifyWith));// fulfilled_handlers.add( ... )
tuples[1][3].add(resolve(0,newDefer,isFunction(onFulfilled)?onFulfilled:Identity));// rejected_handlers.add( ... )
tuples[2][3].add(resolve(0,newDefer,isFunction(onRejected)?onRejected:Thrower));}).promise();},// Get a promise for this deferred
// If obj is provided, the promise aspect is added to the object
promise:function promise(obj){return obj!=null?jQuery.extend(obj,_promise):_promise;}},deferred={};// Add list-specific methods
jQuery.each(tuples,function(i,tuple){var list=tuple[2],stateString=tuple[5];// promise.progress = list.add
// promise.done = list.add
// promise.fail = list.add
_promise[tuple[1]]=list.add;// Handle state
if(stateString){list.add(function(){// state = "resolved" (i.e., fulfilled)
// state = "rejected"
_state=stateString;},// rejected_callbacks.disable
// fulfilled_callbacks.disable
tuples[3-i][2].disable,// rejected_handlers.disable
// fulfilled_handlers.disable
tuples[3-i][3].disable,// progress_callbacks.lock
tuples[0][2].lock,// progress_handlers.lock
tuples[0][3].lock);}// progress_handlers.fire
// fulfilled_handlers.fire
// rejected_handlers.fire
list.add(tuple[3].fire);// deferred.notify = function() { deferred.notifyWith(...) }
// deferred.resolve = function() { deferred.resolveWith(...) }
// deferred.reject = function() { deferred.rejectWith(...) }
deferred[tuple[0]]=function(){deferred[tuple[0]+"With"](this===deferred?undefined:this,arguments);return this;};// deferred.notifyWith = list.fireWith
// deferred.resolveWith = list.fireWith
// deferred.rejectWith = list.fireWith
deferred[tuple[0]+"With"]=list.fireWith;});// Make the deferred a promise
_promise.promise(deferred);// Call given func if any
if(func){func.call(deferred,deferred);}// All done!
return deferred;},// Deferred helper
when:function when(singleValue){var// count of uncompleted subordinates
remaining=arguments.length,// count of unprocessed arguments
i=remaining,// subordinate fulfillment data
resolveContexts=Array(i),resolveValues=_slice.call(arguments),// the master Deferred
master=jQuery.Deferred(),// subordinate callback factory
updateFunc=function updateFunc(i){return function(value){resolveContexts[i]=this;resolveValues[i]=arguments.length>1?_slice.call(arguments):value;if(! --remaining){master.resolveWith(resolveContexts,resolveValues);}};};// Single- and empty arguments are adopted like Promise.resolve
if(remaining<=1){adoptValue(singleValue,master.done(updateFunc(i)).resolve,master.reject,!remaining);// Use .then() to unwrap secondary thenables (cf. gh-3000)
if(master.state()==="pending"||isFunction(resolveValues[i]&&resolveValues[i].then)){return master.then();}}// Multiple arguments are aggregated like Promise.all array elements
while(i--){adoptValue(resolveValues[i],updateFunc(i),master.reject);}return master.promise();}});// These usually indicate a programmer mistake during development,
// warn about them ASAP rather than swallowing them by default.
var rerrorNames=/^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;jQuery.Deferred.exceptionHook=function(error,stack){// Support: IE 8 - 9 only
// Console exists when dev tools are open, which can happen at any time
if(window.console&&window.console.warn&&error&&rerrorNames.test(error.name)){window.console.warn("jQuery.Deferred exception: "+error.message,error.stack,stack);}};jQuery.readyException=function(error){window.setTimeout(function(){throw error;});};// The deferred used on DOM ready
var readyList=jQuery.Deferred();jQuery.fn.ready=function(fn){readyList.then(fn)// Wrap jQuery.readyException in a function so that the lookup
// happens at the time of error handling instead of callback
// registration.
["catch"](function(error){jQuery.readyException(error);});return this;};jQuery.extend({// Is the DOM ready to be used? Set to true once it occurs.
isReady:false,// A counter to track how many items to wait for before
// the ready event fires. See #6781
readyWait:1,// Handle when the DOM is ready
ready:function ready(wait){// Abort if there are pending holds or we're already ready
if(wait===true?--jQuery.readyWait:jQuery.isReady){return;}// Remember that the DOM is ready
jQuery.isReady=true;// If a normal DOM Ready event fired, decrement, and wait if need be
if(wait!==true&&--jQuery.readyWait>0){return;}// If there are functions bound, to execute
readyList.resolveWith(document,[jQuery]);}});jQuery.ready.then=readyList.then;// The ready event handler and self cleanup method
function completed(){document.removeEventListener("DOMContentLoaded",completed);window.removeEventListener("load",completed);jQuery.ready();}// Catch cases where $(document).ready() is called
// after the browser event has already occurred.
// Support: IE <=9 - 10 only
// Older IE sometimes signals "interactive" too soon
if(document.readyState==="complete"||document.readyState!=="loading"&&!document.documentElement.doScroll){// Handle it asynchronously to allow scripts the opportunity to delay ready
window.setTimeout(jQuery.ready);}else{// Use the handy event callback
document.addEventListener("DOMContentLoaded",completed);// A fallback to window.onload, that will always work
window.addEventListener("load",completed);}// Multifunctional method to get and set values of a collection
// The value/s can optionally be executed if it's a function
var access=function access(elems,fn,key,value,chainable,emptyGet,raw){var i=0,len=elems.length,bulk=key==null;// Sets many values
if(toType(key)==="object"){chainable=true;for(i in key){access(elems,fn,i,key[i],true,emptyGet,raw);}// Sets one value
}else if(value!==undefined){chainable=true;if(!isFunction(value)){raw=true;}if(bulk){// Bulk operations run against the entire set
if(raw){fn.call(elems,value);fn=null;// ...except when executing function values
}else{bulk=fn;fn=function fn(elem,_key,value){return bulk.call(jQuery(elem),value);};}}if(fn){for(;i<len;i++){fn(elems[i],key,raw?value:value.call(elems[i],i,fn(elems[i],key)));}}}if(chainable){return elems;}// Gets
if(bulk){return fn.call(elems);}return len?fn(elems[0],key):emptyGet;};// Matches dashed string for camelizing
var rmsPrefix=/^-ms-/,rdashAlpha=/-([a-z])/g;// Used by camelCase as callback to replace()
function fcamelCase(_all,letter){return letter.toUpperCase();}// Convert dashed to camelCase; used by the css and data modules
// Support: IE <=9 - 11, Edge 12 - 15
// Microsoft forgot to hump their vendor prefix (#9572)
function camelCase(string){return string.replace(rmsPrefix,"ms-").replace(rdashAlpha,fcamelCase);}var acceptData=function acceptData(owner){// Accepts only:
//  - Node
//    - Node.ELEMENT_NODE
//    - Node.DOCUMENT_NODE
//  - Object
//    - Any
return owner.nodeType===1||owner.nodeType===9||!+owner.nodeType;};function Data(){this.expando=jQuery.expando+Data.uid++;}Data.uid=1;Data.prototype={cache:function cache(owner){// Check if the owner object already has a cache
var value=owner[this.expando];// If not, create one
if(!value){value={};// We can accept data for non-element nodes in modern browsers,
// but we should not, see #8335.
// Always return an empty object.
if(acceptData(owner)){// If it is a node unlikely to be stringify-ed or looped over
// use plain assignment
if(owner.nodeType){owner[this.expando]=value;// Otherwise secure it in a non-enumerable property
// configurable must be true to allow the property to be
// deleted when data is removed
}else{Object.defineProperty(owner,this.expando,{value:value,configurable:true});}}}return value;},set:function set(owner,data,value){var prop,cache=this.cache(owner);// Handle: [ owner, key, value ] args
// Always use camelCase key (gh-2257)
if(typeof data==="string"){cache[camelCase(data)]=value;// Handle: [ owner, { properties } ] args
}else{// Copy the properties one-by-one to the cache object
for(prop in data){cache[camelCase(prop)]=data[prop];}}return cache;},get:function get(owner,key){return key===undefined?this.cache(owner):// Always use camelCase key (gh-2257)
owner[this.expando]&&owner[this.expando][camelCase(key)];},access:function access(owner,key,value){// In cases where either:
//
//   1. No key was specified
//   2. A string key was specified, but no value provided
//
// Take the "read" path and allow the get method to determine
// which value to return, respectively either:
//
//   1. The entire cache object
//   2. The data stored at the key
//
if(key===undefined||key&&typeof key==="string"&&value===undefined){return this.get(owner,key);}// When the key is not a string, or both a key and value
// are specified, set or extend (existing objects) with either:
//
//   1. An object of properties
//   2. A key and value
//
this.set(owner,key,value);// Since the "set" path can have two possible entry points
// return the expected data based on which path was taken[*]
return value!==undefined?value:key;},remove:function remove(owner,key){var i,cache=owner[this.expando];if(cache===undefined){return;}if(key!==undefined){// Support array or space separated string of keys
if(Array.isArray(key)){// If key is an array of keys...
// We always set camelCase keys, so remove that.
key=key.map(camelCase);}else{key=camelCase(key);// If a key with the spaces exists, use it.
// Otherwise, create an array by matching non-whitespace
key=key in cache?[key]:key.match(rnothtmlwhite)||[];}i=key.length;while(i--){delete cache[key[i]];}}// Remove the expando if there's no more data
if(key===undefined||jQuery.isEmptyObject(cache)){// Support: Chrome <=35 - 45
// Webkit & Blink performance suffers when deleting properties
// from DOM nodes, so set to undefined instead
// https://bugs.chromium.org/p/chromium/issues/detail?id=378607 (bug restricted)
if(owner.nodeType){owner[this.expando]=undefined;}else{delete owner[this.expando];}}},hasData:function hasData(owner){var cache=owner[this.expando];return cache!==undefined&&!jQuery.isEmptyObject(cache);}};var dataPriv=new Data();var dataUser=new Data();//	Implementation Summary
//
//	1. Enforce API surface and semantic compatibility with 1.9.x branch
//	2. Improve the module's maintainability by reducing the storage
//		paths to a single mechanism.
//	3. Use the same single mechanism to support "private" and "user" data.
//	4. _Never_ expose "private" data to user code (TODO: Drop _data, _removeData)
//	5. Avoid exposing implementation details on user objects (eg. expando properties)
//	6. Provide a clear path for implementation upgrade to WeakMap in 2014
var rbrace=/^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,rmultiDash=/[A-Z]/g;function getData(data){if(data==="true"){return true;}if(data==="false"){return false;}if(data==="null"){return null;}// Only convert to a number if it doesn't change the string
if(data===+data+""){return+data;}if(rbrace.test(data)){return JSON.parse(data);}return data;}function dataAttr(elem,key,data){var name;// If nothing was found internally, try to fetch any
// data from the HTML5 data-* attribute
if(data===undefined&&elem.nodeType===1){name="data-"+key.replace(rmultiDash,"-$&").toLowerCase();data=elem.getAttribute(name);if(typeof data==="string"){try{data=getData(data);}catch(e){}// Make sure we set the data so it isn't changed later
dataUser.set(elem,key,data);}else{data=undefined;}}return data;}jQuery.extend({hasData:function hasData(elem){return dataUser.hasData(elem)||dataPriv.hasData(elem);},data:function data(elem,name,_data){return dataUser.access(elem,name,_data);},removeData:function removeData(elem,name){dataUser.remove(elem,name);},// TODO: Now that all calls to _data and _removeData have been replaced
// with direct calls to dataPriv methods, these can be deprecated.
_data:function _data(elem,name,data){return dataPriv.access(elem,name,data);},_removeData:function _removeData(elem,name){dataPriv.remove(elem,name);}});jQuery.fn.extend({data:function data(key,value){var i,name,data,elem=this[0],attrs=elem&&elem.attributes;// Gets all values
if(key===undefined){if(this.length){data=dataUser.get(elem);if(elem.nodeType===1&&!dataPriv.get(elem,"hasDataAttrs")){i=attrs.length;while(i--){// Support: IE 11 only
// The attrs elements can be null (#14894)
if(attrs[i]){name=attrs[i].name;if(name.indexOf("data-")===0){name=camelCase(name.slice(5));dataAttr(elem,name,data[name]);}}}dataPriv.set(elem,"hasDataAttrs",true);}}return data;}// Sets multiple values
if(_typeof(key)==="object"){return this.each(function(){dataUser.set(this,key);});}return access(this,function(value){var data;// The calling jQuery object (element matches) is not empty
// (and therefore has an element appears at this[ 0 ]) and the
// `value` parameter was not undefined. An empty jQuery object
// will result in `undefined` for elem = this[ 0 ] which will
// throw an exception if an attempt to read a data cache is made.
if(elem&&value===undefined){// Attempt to get data from the cache
// The key will always be camelCased in Data
data=dataUser.get(elem,key);if(data!==undefined){return data;}// Attempt to "discover" the data in
// HTML5 custom data-* attrs
data=dataAttr(elem,key);if(data!==undefined){return data;}// We tried really hard, but the data doesn't exist.
return;}// Set the data...
this.each(function(){// We always store the camelCased key
dataUser.set(this,key,value);});},null,value,arguments.length>1,null,true);},removeData:function removeData(key){return this.each(function(){dataUser.remove(this,key);});}});jQuery.extend({queue:function queue(elem,type,data){var queue;if(elem){type=(type||"fx")+"queue";queue=dataPriv.get(elem,type);// Speed up dequeue by getting out quickly if this is just a lookup
if(data){if(!queue||Array.isArray(data)){queue=dataPriv.access(elem,type,jQuery.makeArray(data));}else{queue.push(data);}}return queue||[];}},dequeue:function dequeue(elem,type){type=type||"fx";var queue=jQuery.queue(elem,type),startLength=queue.length,fn=queue.shift(),hooks=jQuery._queueHooks(elem,type),next=function next(){jQuery.dequeue(elem,type);};// If the fx queue is dequeued, always remove the progress sentinel
if(fn==="inprogress"){fn=queue.shift();startLength--;}if(fn){// Add a progress sentinel to prevent the fx queue from being
// automatically dequeued
if(type==="fx"){queue.unshift("inprogress");}// Clear up the last queue stop function
delete hooks.stop;fn.call(elem,next,hooks);}if(!startLength&&hooks){hooks.empty.fire();}},// Not public - generate a queueHooks object, or return the current one
_queueHooks:function _queueHooks(elem,type){var key=type+"queueHooks";return dataPriv.get(elem,key)||dataPriv.access(elem,key,{empty:jQuery.Callbacks("once memory").add(function(){dataPriv.remove(elem,[type+"queue",key]);})});}});jQuery.fn.extend({queue:function queue(type,data){var setter=2;if(typeof type!=="string"){data=type;type="fx";setter--;}if(arguments.length<setter){return jQuery.queue(this[0],type);}return data===undefined?this:this.each(function(){var queue=jQuery.queue(this,type,data);// Ensure a hooks for this queue
jQuery._queueHooks(this,type);if(type==="fx"&&queue[0]!=="inprogress"){jQuery.dequeue(this,type);}});},dequeue:function dequeue(type){return this.each(function(){jQuery.dequeue(this,type);});},clearQueue:function clearQueue(type){return this.queue(type||"fx",[]);},// Get a promise resolved when queues of a certain type
// are emptied (fx is the type by default)
promise:function promise(type,obj){var tmp,count=1,defer=jQuery.Deferred(),elements=this,i=this.length,resolve=function resolve(){if(! --count){defer.resolveWith(elements,[elements]);}};if(typeof type!=="string"){obj=type;type=undefined;}type=type||"fx";while(i--){tmp=dataPriv.get(elements[i],type+"queueHooks");if(tmp&&tmp.empty){count++;tmp.empty.add(resolve);}}resolve();return defer.promise(obj);}});var pnum=/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source;var rcssNum=new RegExp("^(?:([+-])=|)("+pnum+")([a-z%]*)$","i");var cssExpand=["Top","Right","Bottom","Left"];var documentElement=document.documentElement;var isAttached=function isAttached(elem){return jQuery.contains(elem.ownerDocument,elem);},composed={composed:true};// Support: IE 9 - 11+, Edge 12 - 18+, iOS 10.0 - 10.2 only
// Check attachment across shadow DOM boundaries when possible (gh-3504)
// Support: iOS 10.0-10.2 only
// Early iOS 10 versions support `attachShadow` but not `getRootNode`,
// leading to errors. We need to check for `getRootNode`.
if(documentElement.getRootNode){isAttached=function isAttached(elem){return jQuery.contains(elem.ownerDocument,elem)||elem.getRootNode(composed)===elem.ownerDocument;};}var isHiddenWithinTree=function isHiddenWithinTree(elem,el){// isHiddenWithinTree might be called from jQuery#filter function;
// in that case, element will be second argument
elem=el||elem;// Inline style trumps all
return elem.style.display==="none"||elem.style.display===""&&// Otherwise, check computed style
// Support: Firefox <=43 - 45
// Disconnected elements can have computed display: none, so first confirm that elem is
// in the document.
isAttached(elem)&&jQuery.css(elem,"display")==="none";};function adjustCSS(elem,prop,valueParts,tween){var adjusted,scale,maxIterations=20,currentValue=tween?function(){return tween.cur();}:function(){return jQuery.css(elem,prop,"");},initial=currentValue(),unit=valueParts&&valueParts[3]||(jQuery.cssNumber[prop]?"":"px"),// Starting value computation is required for potential unit mismatches
initialInUnit=elem.nodeType&&(jQuery.cssNumber[prop]||unit!=="px"&&+initial)&&rcssNum.exec(jQuery.css(elem,prop));if(initialInUnit&&initialInUnit[3]!==unit){// Support: Firefox <=54
// Halve the iteration target value to prevent interference from CSS upper bounds (gh-2144)
initial=initial/2;// Trust units reported by jQuery.css
unit=unit||initialInUnit[3];// Iteratively approximate from a nonzero starting point
initialInUnit=+initial||1;while(maxIterations--){// Evaluate and update our best guess (doubling guesses that zero out).
// Finish if the scale equals or crosses 1 (making the old*new product non-positive).
jQuery.style(elem,prop,initialInUnit+unit);if((1-scale)*(1-(scale=currentValue()/initial||0.5))<=0){maxIterations=0;}initialInUnit=initialInUnit/scale;}initialInUnit=initialInUnit*2;jQuery.style(elem,prop,initialInUnit+unit);// Make sure we update the tween properties later on
valueParts=valueParts||[];}if(valueParts){initialInUnit=+initialInUnit||+initial||0;// Apply relative offset (+=/-=) if specified
adjusted=valueParts[1]?initialInUnit+(valueParts[1]+1)*valueParts[2]:+valueParts[2];if(tween){tween.unit=unit;tween.start=initialInUnit;tween.end=adjusted;}}return adjusted;}var defaultDisplayMap={};function getDefaultDisplay(elem){var temp,doc=elem.ownerDocument,nodeName=elem.nodeName,display=defaultDisplayMap[nodeName];if(display){return display;}temp=doc.body.appendChild(doc.createElement(nodeName));display=jQuery.css(temp,"display");temp.parentNode.removeChild(temp);if(display==="none"){display="block";}defaultDisplayMap[nodeName]=display;return display;}function showHide(elements,show){var display,elem,values=[],index=0,length=elements.length;// Determine new display value for elements that need to change
for(;index<length;index++){elem=elements[index];if(!elem.style){continue;}display=elem.style.display;if(show){// Since we force visibility upon cascade-hidden elements, an immediate (and slow)
// check is required in this first loop unless we have a nonempty display value (either
// inline or about-to-be-restored)
if(display==="none"){values[index]=dataPriv.get(elem,"display")||null;if(!values[index]){elem.style.display="";}}if(elem.style.display===""&&isHiddenWithinTree(elem)){values[index]=getDefaultDisplay(elem);}}else{if(display!=="none"){values[index]="none";// Remember what we're overwriting
dataPriv.set(elem,"display",display);}}}// Set the display of the elements in a second loop to avoid constant reflow
for(index=0;index<length;index++){if(values[index]!=null){elements[index].style.display=values[index];}}return elements;}jQuery.fn.extend({show:function show(){return showHide(this,true);},hide:function hide(){return showHide(this);},toggle:function toggle(state){if(typeof state==="boolean"){return state?this.show():this.hide();}return this.each(function(){if(isHiddenWithinTree(this)){jQuery(this).show();}else{jQuery(this).hide();}});}});var rcheckableType=/^(?:checkbox|radio)$/i;var rtagName=/<([a-z][^\/\0>\x20\t\r\n\f]*)/i;var rscriptType=/^$|^module$|\/(?:java|ecma)script/i;(function(){var fragment=document.createDocumentFragment(),div=fragment.appendChild(document.createElement("div")),input=document.createElement("input");// Support: Android 4.0 - 4.3 only
// Check state lost if the name is set (#11217)
// Support: Windows Web Apps (WWA)
// `name` and `type` must use .setAttribute for WWA (#14901)
input.setAttribute("type","radio");input.setAttribute("checked","checked");input.setAttribute("name","t");div.appendChild(input);// Support: Android <=4.1 only
// Older WebKit doesn't clone checked state correctly in fragments
support.checkClone=div.cloneNode(true).cloneNode(true).lastChild.checked;// Support: IE <=11 only
// Make sure textarea (and checkbox) defaultValue is properly cloned
div.innerHTML="<textarea>x</textarea>";support.noCloneChecked=!!div.cloneNode(true).lastChild.defaultValue;// Support: IE <=9 only
// IE <=9 replaces <option> tags with their contents when inserted outside of
// the select element.
div.innerHTML="<option></option>";support.option=!!div.lastChild;})();// We have to close these tags to support XHTML (#13200)
var wrapMap={// XHTML parsers do not magically insert elements in the
// same way that tag soup parsers do. So we cannot shorten
// this by omitting <tbody> or other required elements.
thead:[1,"<table>","</table>"],col:[2,"<table><colgroup>","</colgroup></table>"],tr:[2,"<table><tbody>","</tbody></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],_default:[0,"",""]};wrapMap.tbody=wrapMap.tfoot=wrapMap.colgroup=wrapMap.caption=wrapMap.thead;wrapMap.th=wrapMap.td;// Support: IE <=9 only
if(!support.option){wrapMap.optgroup=wrapMap.option=[1,"<select multiple='multiple'>","</select>"];}function getAll(context,tag){// Support: IE <=9 - 11 only
// Use typeof to avoid zero-argument method invocation on host objects (#15151)
var ret;if(typeof context.getElementsByTagName!=="undefined"){ret=context.getElementsByTagName(tag||"*");}else if(typeof context.querySelectorAll!=="undefined"){ret=context.querySelectorAll(tag||"*");}else{ret=[];}if(tag===undefined||tag&&nodeName(context,tag)){return jQuery.merge([context],ret);}return ret;}// Mark scripts as having already been evaluated
function setGlobalEval(elems,refElements){var i=0,l=elems.length;for(;i<l;i++){dataPriv.set(elems[i],"globalEval",!refElements||dataPriv.get(refElements[i],"globalEval"));}}var rhtml=/<|&#?\w+;/;function buildFragment(elems,context,scripts,selection,ignored){var elem,tmp,tag,wrap,attached,j,fragment=context.createDocumentFragment(),nodes=[],i=0,l=elems.length;for(;i<l;i++){elem=elems[i];if(elem||elem===0){// Add nodes directly
if(toType(elem)==="object"){// Support: Android <=4.0 only, PhantomJS 1 only
// push.apply(_, arraylike) throws on ancient WebKit
jQuery.merge(nodes,elem.nodeType?[elem]:elem);// Convert non-html into a text node
}else if(!rhtml.test(elem)){nodes.push(context.createTextNode(elem));// Convert html into DOM nodes
}else{tmp=tmp||fragment.appendChild(context.createElement("div"));// Deserialize a standard representation
tag=(rtagName.exec(elem)||["",""])[1].toLowerCase();wrap=wrapMap[tag]||wrapMap._default;tmp.innerHTML=wrap[1]+jQuery.htmlPrefilter(elem)+wrap[2];// Descend through wrappers to the right content
j=wrap[0];while(j--){tmp=tmp.lastChild;}// Support: Android <=4.0 only, PhantomJS 1 only
// push.apply(_, arraylike) throws on ancient WebKit
jQuery.merge(nodes,tmp.childNodes);// Remember the top-level container
tmp=fragment.firstChild;// Ensure the created nodes are orphaned (#12392)
tmp.textContent="";}}}// Remove wrapper from fragment
fragment.textContent="";i=0;while(elem=nodes[i++]){// Skip elements already in the context collection (trac-4087)
if(selection&&jQuery.inArray(elem,selection)>-1){if(ignored){ignored.push(elem);}continue;}attached=isAttached(elem);// Append to fragment
tmp=getAll(fragment.appendChild(elem),"script");// Preserve script evaluation history
if(attached){setGlobalEval(tmp);}// Capture executables
if(scripts){j=0;while(elem=tmp[j++]){if(rscriptType.test(elem.type||"")){scripts.push(elem);}}}}return fragment;}var rkeyEvent=/^key/,rmouseEvent=/^(?:mouse|pointer|contextmenu|drag|drop)|click/,rtypenamespace=/^([^.]*)(?:\.(.+)|)/;function returnTrue(){return true;}function returnFalse(){return false;}// Support: IE <=9 - 11+
// focus() and blur() are asynchronous, except when they are no-op.
// So expect focus to be synchronous when the element is already active,
// and blur to be synchronous when the element is not already active.
// (focus and blur are always synchronous in other supported browsers,
// this just defines when we can count on it).
function expectSync(elem,type){return elem===safeActiveElement()===(type==="focus");}// Support: IE <=9 only
// Accessing document.activeElement can throw unexpectedly
// https://bugs.jquery.com/ticket/13393
function safeActiveElement(){try{return document.activeElement;}catch(err){}}function _on(elem,types,selector,data,fn,one){var origFn,type;// Types can be a map of types/handlers
if(_typeof(types)==="object"){// ( types-Object, selector, data )
if(typeof selector!=="string"){// ( types-Object, data )
data=data||selector;selector=undefined;}for(type in types){_on(elem,type,selector,data,types[type],one);}return elem;}if(data==null&&fn==null){// ( types, fn )
fn=selector;data=selector=undefined;}else if(fn==null){if(typeof selector==="string"){// ( types, selector, fn )
fn=data;data=undefined;}else{// ( types, data, fn )
fn=data;data=selector;selector=undefined;}}if(fn===false){fn=returnFalse;}else if(!fn){return elem;}if(one===1){origFn=fn;fn=function fn(event){// Can use an empty set, since event contains the info
jQuery().off(event);return origFn.apply(this,arguments);};// Use same guid so caller can remove using origFn
fn.guid=origFn.guid||(origFn.guid=jQuery.guid++);}return elem.each(function(){jQuery.event.add(this,types,fn,data,selector);});}/*
 * Helper functions for managing events -- not part of the public interface.
 * Props to Dean Edwards' addEvent library for many of the ideas.
 */jQuery.event={global:{},add:function add(elem,types,handler,data,selector){var handleObjIn,eventHandle,tmp,events,t,handleObj,special,handlers,type,namespaces,origType,elemData=dataPriv.get(elem);// Only attach events to objects that accept data
if(!acceptData(elem)){return;}// Caller can pass in an object of custom data in lieu of the handler
if(handler.handler){handleObjIn=handler;handler=handleObjIn.handler;selector=handleObjIn.selector;}// Ensure that invalid selectors throw exceptions at attach time
// Evaluate against documentElement in case elem is a non-element node (e.g., document)
if(selector){jQuery.find.matchesSelector(documentElement,selector);}// Make sure that the handler has a unique ID, used to find/remove it later
if(!handler.guid){handler.guid=jQuery.guid++;}// Init the element's event structure and main handler, if this is the first
if(!(events=elemData.events)){events=elemData.events=Object.create(null);}if(!(eventHandle=elemData.handle)){eventHandle=elemData.handle=function(e){// Discard the second event of a jQuery.event.trigger() and
// when an event is called after a page has unloaded
return typeof jQuery!=="undefined"&&jQuery.event.triggered!==e.type?jQuery.event.dispatch.apply(elem,arguments):undefined;};}// Handle multiple events separated by a space
types=(types||"").match(rnothtmlwhite)||[""];t=types.length;while(t--){tmp=rtypenamespace.exec(types[t])||[];type=origType=tmp[1];namespaces=(tmp[2]||"").split(".").sort();// There *must* be a type, no attaching namespace-only handlers
if(!type){continue;}// If event changes its type, use the special event handlers for the changed type
special=jQuery.event.special[type]||{};// If selector defined, determine special event api type, otherwise given type
type=(selector?special.delegateType:special.bindType)||type;// Update special based on newly reset type
special=jQuery.event.special[type]||{};// handleObj is passed to all event handlers
handleObj=jQuery.extend({type:type,origType:origType,data:data,handler:handler,guid:handler.guid,selector:selector,needsContext:selector&&jQuery.expr.match.needsContext.test(selector),namespace:namespaces.join(".")},handleObjIn);// Init the event handler queue if we're the first
if(!(handlers=events[type])){handlers=events[type]=[];handlers.delegateCount=0;// Only use addEventListener if the special events handler returns false
if(!special.setup||special.setup.call(elem,data,namespaces,eventHandle)===false){if(elem.addEventListener){elem.addEventListener(type,eventHandle);}}}if(special.add){special.add.call(elem,handleObj);if(!handleObj.handler.guid){handleObj.handler.guid=handler.guid;}}// Add to the element's handler list, delegates in front
if(selector){handlers.splice(handlers.delegateCount++,0,handleObj);}else{handlers.push(handleObj);}// Keep track of which events have ever been used, for event optimization
jQuery.event.global[type]=true;}},// Detach an event or set of events from an element
remove:function remove(elem,types,handler,selector,mappedTypes){var j,origCount,tmp,events,t,handleObj,special,handlers,type,namespaces,origType,elemData=dataPriv.hasData(elem)&&dataPriv.get(elem);if(!elemData||!(events=elemData.events)){return;}// Once for each type.namespace in types; type may be omitted
types=(types||"").match(rnothtmlwhite)||[""];t=types.length;while(t--){tmp=rtypenamespace.exec(types[t])||[];type=origType=tmp[1];namespaces=(tmp[2]||"").split(".").sort();// Unbind all events (on this namespace, if provided) for the element
if(!type){for(type in events){jQuery.event.remove(elem,type+types[t],handler,selector,true);}continue;}special=jQuery.event.special[type]||{};type=(selector?special.delegateType:special.bindType)||type;handlers=events[type]||[];tmp=tmp[2]&&new RegExp("(^|\\.)"+namespaces.join("\\.(?:.*\\.|)")+"(\\.|$)");// Remove matching events
origCount=j=handlers.length;while(j--){handleObj=handlers[j];if((mappedTypes||origType===handleObj.origType)&&(!handler||handler.guid===handleObj.guid)&&(!tmp||tmp.test(handleObj.namespace))&&(!selector||selector===handleObj.selector||selector==="**"&&handleObj.selector)){handlers.splice(j,1);if(handleObj.selector){handlers.delegateCount--;}if(special.remove){special.remove.call(elem,handleObj);}}}// Remove generic event handler if we removed something and no more handlers exist
// (avoids potential for endless recursion during removal of special event handlers)
if(origCount&&!handlers.length){if(!special.teardown||special.teardown.call(elem,namespaces,elemData.handle)===false){jQuery.removeEvent(elem,type,elemData.handle);}delete events[type];}}// Remove data and the expando if it's no longer used
if(jQuery.isEmptyObject(events)){dataPriv.remove(elem,"handle events");}},dispatch:function dispatch(nativeEvent){var i,j,ret,matched,handleObj,handlerQueue,args=new Array(arguments.length),// Make a writable jQuery.Event from the native event object
event=jQuery.event.fix(nativeEvent),handlers=(dataPriv.get(this,"events")||Object.create(null))[event.type]||[],special=jQuery.event.special[event.type]||{};// Use the fix-ed jQuery.Event rather than the (read-only) native event
args[0]=event;for(i=1;i<arguments.length;i++){args[i]=arguments[i];}event.delegateTarget=this;// Call the preDispatch hook for the mapped type, and let it bail if desired
if(special.preDispatch&&special.preDispatch.call(this,event)===false){return;}// Determine handlers
handlerQueue=jQuery.event.handlers.call(this,event,handlers);// Run delegates first; they may want to stop propagation beneath us
i=0;while((matched=handlerQueue[i++])&&!event.isPropagationStopped()){event.currentTarget=matched.elem;j=0;while((handleObj=matched.handlers[j++])&&!event.isImmediatePropagationStopped()){// If the event is namespaced, then each handler is only invoked if it is
// specially universal or its namespaces are a superset of the event's.
if(!event.rnamespace||handleObj.namespace===false||event.rnamespace.test(handleObj.namespace)){event.handleObj=handleObj;event.data=handleObj.data;ret=((jQuery.event.special[handleObj.origType]||{}).handle||handleObj.handler).apply(matched.elem,args);if(ret!==undefined){if((event.result=ret)===false){event.preventDefault();event.stopPropagation();}}}}}// Call the postDispatch hook for the mapped type
if(special.postDispatch){special.postDispatch.call(this,event);}return event.result;},handlers:function handlers(event,_handlers){var i,handleObj,sel,matchedHandlers,matchedSelectors,handlerQueue=[],delegateCount=_handlers.delegateCount,cur=event.target;// Find delegate handlers
if(delegateCount&&// Support: IE <=9
// Black-hole SVG <use> instance trees (trac-13180)
cur.nodeType&&// Support: Firefox <=42
// Suppress spec-violating clicks indicating a non-primary pointer button (trac-3861)
// https://www.w3.org/TR/DOM-Level-3-Events/#event-type-click
// Support: IE 11 only
// ...but not arrow key "clicks" of radio inputs, which can have `button` -1 (gh-2343)
!(event.type==="click"&&event.button>=1)){for(;cur!==this;cur=cur.parentNode||this){// Don't check non-elements (#13208)
// Don't process clicks on disabled elements (#6911, #8165, #11382, #11764)
if(cur.nodeType===1&&!(event.type==="click"&&cur.disabled===true)){matchedHandlers=[];matchedSelectors={};for(i=0;i<delegateCount;i++){handleObj=_handlers[i];// Don't conflict with Object.prototype properties (#13203)
sel=handleObj.selector+" ";if(matchedSelectors[sel]===undefined){matchedSelectors[sel]=handleObj.needsContext?jQuery(sel,this).index(cur)>-1:jQuery.find(sel,this,null,[cur]).length;}if(matchedSelectors[sel]){matchedHandlers.push(handleObj);}}if(matchedHandlers.length){handlerQueue.push({elem:cur,handlers:matchedHandlers});}}}}// Add the remaining (directly-bound) handlers
cur=this;if(delegateCount<_handlers.length){handlerQueue.push({elem:cur,handlers:_handlers.slice(delegateCount)});}return handlerQueue;},addProp:function addProp(name,hook){Object.defineProperty(jQuery.Event.prototype,name,{enumerable:true,configurable:true,get:isFunction(hook)?function(){if(this.originalEvent){return hook(this.originalEvent);}}:function(){if(this.originalEvent){return this.originalEvent[name];}},set:function set(value){Object.defineProperty(this,name,{enumerable:true,configurable:true,writable:true,value:value});}});},fix:function fix(originalEvent){return originalEvent[jQuery.expando]?originalEvent:new jQuery.Event(originalEvent);},special:{load:{// Prevent triggered image.load events from bubbling to window.load
noBubble:true},click:{// Utilize native event to ensure correct state for checkable inputs
setup:function setup(data){// For mutual compressibility with _default, replace `this` access with a local var.
// `|| data` is dead code meant only to preserve the variable through minification.
var el=this||data;// Claim the first handler
if(rcheckableType.test(el.type)&&el.click&&nodeName(el,"input")){// dataPriv.set( el, "click", ... )
leverageNative(el,"click",returnTrue);}// Return false to allow normal processing in the caller
return false;},trigger:function trigger(data){// For mutual compressibility with _default, replace `this` access with a local var.
// `|| data` is dead code meant only to preserve the variable through minification.
var el=this||data;// Force setup before triggering a click
if(rcheckableType.test(el.type)&&el.click&&nodeName(el,"input")){leverageNative(el,"click");}// Return non-false to allow normal event-path propagation
return true;},// For cross-browser consistency, suppress native .click() on links
// Also prevent it if we're currently inside a leveraged native-event stack
_default:function _default(event){var target=event.target;return rcheckableType.test(target.type)&&target.click&&nodeName(target,"input")&&dataPriv.get(target,"click")||nodeName(target,"a");}},beforeunload:{postDispatch:function postDispatch(event){// Support: Firefox 20+
// Firefox doesn't alert if the returnValue field is not set.
if(event.result!==undefined&&event.originalEvent){event.originalEvent.returnValue=event.result;}}}}};// Ensure the presence of an event listener that handles manually-triggered
// synthetic events by interrupting progress until reinvoked in response to
// *native* events that it fires directly, ensuring that state changes have
// already occurred before other listeners are invoked.
function leverageNative(el,type,expectSync){// Missing expectSync indicates a trigger call, which must force setup through jQuery.event.add
if(!expectSync){if(dataPriv.get(el,type)===undefined){jQuery.event.add(el,type,returnTrue);}return;}// Register the controller as a special universal handler for all event namespaces
dataPriv.set(el,type,false);jQuery.event.add(el,type,{namespace:false,handler:function handler(event){var notAsync,result,saved=dataPriv.get(this,type);if(event.isTrigger&1&&this[type]){// Interrupt processing of the outer synthetic .trigger()ed event
// Saved data should be false in such cases, but might be a leftover capture object
// from an async native handler (gh-4350)
if(!saved.length){// Store arguments for use when handling the inner native event
// There will always be at least one argument (an event object), so this array
// will not be confused with a leftover capture object.
saved=_slice.call(arguments);dataPriv.set(this,type,saved);// Trigger the native event and capture its result
// Support: IE <=9 - 11+
// focus() and blur() are asynchronous
notAsync=expectSync(this,type);this[type]();result=dataPriv.get(this,type);if(saved!==result||notAsync){dataPriv.set(this,type,false);}else{result={};}if(saved!==result){// Cancel the outer synthetic event
event.stopImmediatePropagation();event.preventDefault();return result.value;}// If this is an inner synthetic event for an event with a bubbling surrogate
// (focus or blur), assume that the surrogate already propagated from triggering the
// native event and prevent that from happening again here.
// This technically gets the ordering wrong w.r.t. to `.trigger()` (in which the
// bubbling surrogate propagates *after* the non-bubbling base), but that seems
// less bad than duplication.
}else if((jQuery.event.special[type]||{}).delegateType){event.stopPropagation();}// If this is a native event triggered above, everything is now in order
// Fire an inner synthetic event with the original arguments
}else if(saved.length){// ...and capture the result
dataPriv.set(this,type,{value:jQuery.event.trigger(// Support: IE <=9 - 11+
// Extend with the prototype to reset the above stopImmediatePropagation()
jQuery.extend(saved[0],jQuery.Event.prototype),saved.slice(1),this)});// Abort handling of the native event
event.stopImmediatePropagation();}}});}jQuery.removeEvent=function(elem,type,handle){// This "if" is needed for plain objects
if(elem.removeEventListener){elem.removeEventListener(type,handle);}};jQuery.Event=function(src,props){// Allow instantiation without the 'new' keyword
if(!(this instanceof jQuery.Event)){return new jQuery.Event(src,props);}// Event object
if(src&&src.type){this.originalEvent=src;this.type=src.type;// Events bubbling up the document may have been marked as prevented
// by a handler lower down the tree; reflect the correct value.
this.isDefaultPrevented=src.defaultPrevented||src.defaultPrevented===undefined&&// Support: Android <=2.3 only
src.returnValue===false?returnTrue:returnFalse;// Create target properties
// Support: Safari <=6 - 7 only
// Target should not be a text node (#504, #13143)
this.target=src.target&&src.target.nodeType===3?src.target.parentNode:src.target;this.currentTarget=src.currentTarget;this.relatedTarget=src.relatedTarget;// Event type
}else{this.type=src;}// Put explicitly provided properties onto the event object
if(props){jQuery.extend(this,props);}// Create a timestamp if incoming event doesn't have one
this.timeStamp=src&&src.timeStamp||Date.now();// Mark it as fixed
this[jQuery.expando]=true;};// jQuery.Event is based on DOM3 Events as specified by the ECMAScript Language Binding
// https://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/ecma-script-binding.html
jQuery.Event.prototype={constructor:jQuery.Event,isDefaultPrevented:returnFalse,isPropagationStopped:returnFalse,isImmediatePropagationStopped:returnFalse,isSimulated:false,preventDefault:function preventDefault(){var e=this.originalEvent;this.isDefaultPrevented=returnTrue;if(e&&!this.isSimulated){e.preventDefault();}},stopPropagation:function stopPropagation(){var e=this.originalEvent;this.isPropagationStopped=returnTrue;if(e&&!this.isSimulated){e.stopPropagation();}},stopImmediatePropagation:function stopImmediatePropagation(){var e=this.originalEvent;this.isImmediatePropagationStopped=returnTrue;if(e&&!this.isSimulated){e.stopImmediatePropagation();}this.stopPropagation();}};// Includes all common event props including KeyEvent and MouseEvent specific props
jQuery.each({altKey:true,bubbles:true,cancelable:true,changedTouches:true,ctrlKey:true,detail:true,eventPhase:true,metaKey:true,pageX:true,pageY:true,shiftKey:true,view:true,"char":true,code:true,charCode:true,key:true,keyCode:true,button:true,buttons:true,clientX:true,clientY:true,offsetX:true,offsetY:true,pointerId:true,pointerType:true,screenX:true,screenY:true,targetTouches:true,toElement:true,touches:true,which:function which(event){var button=event.button;// Add which for key events
if(event.which==null&&rkeyEvent.test(event.type)){return event.charCode!=null?event.charCode:event.keyCode;}// Add which for click: 1 === left; 2 === middle; 3 === right
if(!event.which&&button!==undefined&&rmouseEvent.test(event.type)){if(button&1){return 1;}if(button&2){return 3;}if(button&4){return 2;}return 0;}return event.which;}},jQuery.event.addProp);jQuery.each({focus:"focusin",blur:"focusout"},function(type,delegateType){jQuery.event.special[type]={// Utilize native event if possible so blur/focus sequence is correct
setup:function setup(){// Claim the first handler
// dataPriv.set( this, "focus", ... )
// dataPriv.set( this, "blur", ... )
leverageNative(this,type,expectSync);// Return false to allow normal processing in the caller
return false;},trigger:function trigger(){// Force setup before trigger
leverageNative(this,type);// Return non-false to allow normal event-path propagation
return true;},delegateType:delegateType};});// Create mouseenter/leave events using mouseover/out and event-time checks
// so that event delegation works in jQuery.
// Do the same for pointerenter/pointerleave and pointerover/pointerout
//
// Support: Safari 7 only
// Safari sends mouseenter too often; see:
// https://bugs.chromium.org/p/chromium/issues/detail?id=470258
// for the description of the bug (it existed in older Chrome versions as well).
jQuery.each({mouseenter:"mouseover",mouseleave:"mouseout",pointerenter:"pointerover",pointerleave:"pointerout"},function(orig,fix){jQuery.event.special[orig]={delegateType:fix,bindType:fix,handle:function handle(event){var ret,target=this,related=event.relatedTarget,handleObj=event.handleObj;// For mouseenter/leave call the handler if related is outside the target.
// NB: No relatedTarget if the mouse left/entered the browser window
if(!related||related!==target&&!jQuery.contains(target,related)){event.type=handleObj.origType;ret=handleObj.handler.apply(this,arguments);event.type=fix;}return ret;}};});jQuery.fn.extend({on:function on(types,selector,data,fn){return _on(this,types,selector,data,fn);},one:function one(types,selector,data,fn){return _on(this,types,selector,data,fn,1);},off:function off(types,selector,fn){var handleObj,type;if(types&&types.preventDefault&&types.handleObj){// ( event )  dispatched jQuery.Event
handleObj=types.handleObj;jQuery(types.delegateTarget).off(handleObj.namespace?handleObj.origType+"."+handleObj.namespace:handleObj.origType,handleObj.selector,handleObj.handler);return this;}if(_typeof(types)==="object"){// ( types-object [, selector] )
for(type in types){this.off(type,selector,types[type]);}return this;}if(selector===false||typeof selector==="function"){// ( types [, fn] )
fn=selector;selector=undefined;}if(fn===false){fn=returnFalse;}return this.each(function(){jQuery.event.remove(this,types,fn,selector);});}});var// Support: IE <=10 - 11, Edge 12 - 13 only
// In IE/Edge using regex groups here causes severe slowdowns.
// See https://connect.microsoft.com/IE/feedback/details/1736512/
rnoInnerhtml=/<script|<style|<link/i,// checked="checked" or checked
rchecked=/checked\s*(?:[^=]|=\s*.checked.)/i,rcleanScript=/^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;// Prefer a tbody over its parent table for containing new rows
function manipulationTarget(elem,content){if(nodeName(elem,"table")&&nodeName(content.nodeType!==11?content:content.firstChild,"tr")){return jQuery(elem).children("tbody")[0]||elem;}return elem;}// Replace/restore the type attribute of script elements for safe DOM manipulation
function disableScript(elem){elem.type=(elem.getAttribute("type")!==null)+"/"+elem.type;return elem;}function restoreScript(elem){if((elem.type||"").slice(0,5)==="true/"){elem.type=elem.type.slice(5);}else{elem.removeAttribute("type");}return elem;}function cloneCopyEvent(src,dest){var i,l,type,pdataOld,udataOld,udataCur,events;if(dest.nodeType!==1){return;}// 1. Copy private data: events, handlers, etc.
if(dataPriv.hasData(src)){pdataOld=dataPriv.get(src);events=pdataOld.events;if(events){dataPriv.remove(dest,"handle events");for(type in events){for(i=0,l=events[type].length;i<l;i++){jQuery.event.add(dest,type,events[type][i]);}}}}// 2. Copy user data
if(dataUser.hasData(src)){udataOld=dataUser.access(src);udataCur=jQuery.extend({},udataOld);dataUser.set(dest,udataCur);}}// Fix IE bugs, see support tests
function fixInput(src,dest){var nodeName=dest.nodeName.toLowerCase();// Fails to persist the checked state of a cloned checkbox or radio button.
if(nodeName==="input"&&rcheckableType.test(src.type)){dest.checked=src.checked;// Fails to return the selected option to the default selected state when cloning options
}else if(nodeName==="input"||nodeName==="textarea"){dest.defaultValue=src.defaultValue;}}function domManip(collection,args,callback,ignored){// Flatten any nested arrays
args=flat(args);var fragment,first,scripts,hasScripts,node,doc,i=0,l=collection.length,iNoClone=l-1,value=args[0],valueIsFunction=isFunction(value);// We can't cloneNode fragments that contain checked, in WebKit
if(valueIsFunction||l>1&&typeof value==="string"&&!support.checkClone&&rchecked.test(value)){return collection.each(function(index){var self=collection.eq(index);if(valueIsFunction){args[0]=value.call(this,index,self.html());}domManip(self,args,callback,ignored);});}if(l){fragment=buildFragment(args,collection[0].ownerDocument,false,collection,ignored);first=fragment.firstChild;if(fragment.childNodes.length===1){fragment=first;}// Require either new content or an interest in ignored elements to invoke the callback
if(first||ignored){scripts=jQuery.map(getAll(fragment,"script"),disableScript);hasScripts=scripts.length;// Use the original fragment for the last item
// instead of the first because it can end up
// being emptied incorrectly in certain situations (#8070).
for(;i<l;i++){node=fragment;if(i!==iNoClone){node=jQuery.clone(node,true,true);// Keep references to cloned scripts for later restoration
if(hasScripts){// Support: Android <=4.0 only, PhantomJS 1 only
// push.apply(_, arraylike) throws on ancient WebKit
jQuery.merge(scripts,getAll(node,"script"));}}callback.call(collection[i],node,i);}if(hasScripts){doc=scripts[scripts.length-1].ownerDocument;// Reenable scripts
jQuery.map(scripts,restoreScript);// Evaluate executable scripts on first document insertion
for(i=0;i<hasScripts;i++){node=scripts[i];if(rscriptType.test(node.type||"")&&!dataPriv.access(node,"globalEval")&&jQuery.contains(doc,node)){if(node.src&&(node.type||"").toLowerCase()!=="module"){// Optional AJAX dependency, but won't run scripts if not present
if(jQuery._evalUrl&&!node.noModule){jQuery._evalUrl(node.src,{nonce:node.nonce||node.getAttribute("nonce")},doc);}}else{DOMEval(node.textContent.replace(rcleanScript,""),node,doc);}}}}}}return collection;}function _remove(elem,selector,keepData){var node,nodes=selector?jQuery.filter(selector,elem):elem,i=0;for(;(node=nodes[i])!=null;i++){if(!keepData&&node.nodeType===1){jQuery.cleanData(getAll(node));}if(node.parentNode){if(keepData&&isAttached(node)){setGlobalEval(getAll(node,"script"));}node.parentNode.removeChild(node);}}return elem;}jQuery.extend({htmlPrefilter:function htmlPrefilter(html){return html;},clone:function clone(elem,dataAndEvents,deepDataAndEvents){var i,l,srcElements,destElements,clone=elem.cloneNode(true),inPage=isAttached(elem);// Fix IE cloning issues
if(!support.noCloneChecked&&(elem.nodeType===1||elem.nodeType===11)&&!jQuery.isXMLDoc(elem)){// We eschew Sizzle here for performance reasons: https://jsperf.com/getall-vs-sizzle/2
destElements=getAll(clone);srcElements=getAll(elem);for(i=0,l=srcElements.length;i<l;i++){fixInput(srcElements[i],destElements[i]);}}// Copy the events from the original to the clone
if(dataAndEvents){if(deepDataAndEvents){srcElements=srcElements||getAll(elem);destElements=destElements||getAll(clone);for(i=0,l=srcElements.length;i<l;i++){cloneCopyEvent(srcElements[i],destElements[i]);}}else{cloneCopyEvent(elem,clone);}}// Preserve script evaluation history
destElements=getAll(clone,"script");if(destElements.length>0){setGlobalEval(destElements,!inPage&&getAll(elem,"script"));}// Return the cloned set
return clone;},cleanData:function cleanData(elems){var data,elem,type,special=jQuery.event.special,i=0;for(;(elem=elems[i])!==undefined;i++){if(acceptData(elem)){if(data=elem[dataPriv.expando]){if(data.events){for(type in data.events){if(special[type]){jQuery.event.remove(elem,type);// This is a shortcut to avoid jQuery.event.remove's overhead
}else{jQuery.removeEvent(elem,type,data.handle);}}}// Support: Chrome <=35 - 45+
// Assign undefined instead of using delete, see Data#remove
elem[dataPriv.expando]=undefined;}if(elem[dataUser.expando]){// Support: Chrome <=35 - 45+
// Assign undefined instead of using delete, see Data#remove
elem[dataUser.expando]=undefined;}}}}});jQuery.fn.extend({detach:function detach(selector){return _remove(this,selector,true);},remove:function remove(selector){return _remove(this,selector);},text:function text(value){return access(this,function(value){return value===undefined?jQuery.text(this):this.empty().each(function(){if(this.nodeType===1||this.nodeType===11||this.nodeType===9){this.textContent=value;}});},null,value,arguments.length);},append:function append(){return domManip(this,arguments,function(elem){if(this.nodeType===1||this.nodeType===11||this.nodeType===9){var target=manipulationTarget(this,elem);target.appendChild(elem);}});},prepend:function prepend(){return domManip(this,arguments,function(elem){if(this.nodeType===1||this.nodeType===11||this.nodeType===9){var target=manipulationTarget(this,elem);target.insertBefore(elem,target.firstChild);}});},before:function before(){return domManip(this,arguments,function(elem){if(this.parentNode){this.parentNode.insertBefore(elem,this);}});},after:function after(){return domManip(this,arguments,function(elem){if(this.parentNode){this.parentNode.insertBefore(elem,this.nextSibling);}});},empty:function empty(){var elem,i=0;for(;(elem=this[i])!=null;i++){if(elem.nodeType===1){// Prevent memory leaks
jQuery.cleanData(getAll(elem,false));// Remove any remaining nodes
elem.textContent="";}}return this;},clone:function clone(dataAndEvents,deepDataAndEvents){dataAndEvents=dataAndEvents==null?false:dataAndEvents;deepDataAndEvents=deepDataAndEvents==null?dataAndEvents:deepDataAndEvents;return this.map(function(){return jQuery.clone(this,dataAndEvents,deepDataAndEvents);});},html:function html(value){return access(this,function(value){var elem=this[0]||{},i=0,l=this.length;if(value===undefined&&elem.nodeType===1){return elem.innerHTML;}// See if we can take a shortcut and just use innerHTML
if(typeof value==="string"&&!rnoInnerhtml.test(value)&&!wrapMap[(rtagName.exec(value)||["",""])[1].toLowerCase()]){value=jQuery.htmlPrefilter(value);try{for(;i<l;i++){elem=this[i]||{};// Remove element nodes and prevent memory leaks
if(elem.nodeType===1){jQuery.cleanData(getAll(elem,false));elem.innerHTML=value;}}elem=0;// If using innerHTML throws an exception, use the fallback method
}catch(e){}}if(elem){this.empty().append(value);}},null,value,arguments.length);},replaceWith:function replaceWith(){var ignored=[];// Make the changes, replacing each non-ignored context element with the new content
return domManip(this,arguments,function(elem){var parent=this.parentNode;if(jQuery.inArray(this,ignored)<0){jQuery.cleanData(getAll(this));if(parent){parent.replaceChild(elem,this);}}// Force callback invocation
},ignored);}});jQuery.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},function(name,original){jQuery.fn[name]=function(selector){var elems,ret=[],insert=jQuery(selector),last=insert.length-1,i=0;for(;i<=last;i++){elems=i===last?this:this.clone(true);jQuery(insert[i])[original](elems);// Support: Android <=4.0 only, PhantomJS 1 only
// .get() because push.apply(_, arraylike) throws on ancient WebKit
push.apply(ret,elems.get());}return this.pushStack(ret);};});var rnumnonpx=new RegExp("^("+pnum+")(?!px)[a-z%]+$","i");var getStyles=function getStyles(elem){// Support: IE <=11 only, Firefox <=30 (#15098, #14150)
// IE throws on elements created in popups
// FF meanwhile throws on frame elements through "defaultView.getComputedStyle"
var view=elem.ownerDocument.defaultView;if(!view||!view.opener){view=window;}return view.getComputedStyle(elem);};var swap=function swap(elem,options,callback){var ret,name,old={};// Remember the old values, and insert the new ones
for(name in options){old[name]=elem.style[name];elem.style[name]=options[name];}ret=callback.call(elem);// Revert the old values
for(name in options){elem.style[name]=old[name];}return ret;};var rboxStyle=new RegExp(cssExpand.join("|"),"i");(function(){// Executing both pixelPosition & boxSizingReliable tests require only one layout
// so they're executed at the same time to save the second computation.
function computeStyleTests(){// This is a singleton, we need to execute it only once
if(!div){return;}container.style.cssText="position:absolute;left:-11111px;width:60px;"+"margin-top:1px;padding:0;border:0";div.style.cssText="position:relative;display:block;box-sizing:border-box;overflow:scroll;"+"margin:auto;border:1px;padding:1px;"+"width:60%;top:1%";documentElement.appendChild(container).appendChild(div);var divStyle=window.getComputedStyle(div);pixelPositionVal=divStyle.top!=="1%";// Support: Android 4.0 - 4.3 only, Firefox <=3 - 44
reliableMarginLeftVal=roundPixelMeasures(divStyle.marginLeft)===12;// Support: Android 4.0 - 4.3 only, Safari <=9.1 - 10.1, iOS <=7.0 - 9.3
// Some styles come back with percentage values, even though they shouldn't
div.style.right="60%";pixelBoxStylesVal=roundPixelMeasures(divStyle.right)===36;// Support: IE 9 - 11 only
// Detect misreporting of content dimensions for box-sizing:border-box elements
boxSizingReliableVal=roundPixelMeasures(divStyle.width)===36;// Support: IE 9 only
// Detect overflow:scroll screwiness (gh-3699)
// Support: Chrome <=64
// Don't get tricked when zoom affects offsetWidth (gh-4029)
div.style.position="absolute";scrollboxSizeVal=roundPixelMeasures(div.offsetWidth/3)===12;documentElement.removeChild(container);// Nullify the div so it wouldn't be stored in the memory and
// it will also be a sign that checks already performed
div=null;}function roundPixelMeasures(measure){return Math.round(parseFloat(measure));}var pixelPositionVal,boxSizingReliableVal,scrollboxSizeVal,pixelBoxStylesVal,reliableTrDimensionsVal,reliableMarginLeftVal,container=document.createElement("div"),div=document.createElement("div");// Finish early in limited (non-browser) environments
if(!div.style){return;}// Support: IE <=9 - 11 only
// Style of cloned element affects source element cloned (#8908)
div.style.backgroundClip="content-box";div.cloneNode(true).style.backgroundClip="";support.clearCloneStyle=div.style.backgroundClip==="content-box";jQuery.extend(support,{boxSizingReliable:function boxSizingReliable(){computeStyleTests();return boxSizingReliableVal;},pixelBoxStyles:function pixelBoxStyles(){computeStyleTests();return pixelBoxStylesVal;},pixelPosition:function pixelPosition(){computeStyleTests();return pixelPositionVal;},reliableMarginLeft:function reliableMarginLeft(){computeStyleTests();return reliableMarginLeftVal;},scrollboxSize:function scrollboxSize(){computeStyleTests();return scrollboxSizeVal;},// Support: IE 9 - 11+, Edge 15 - 18+
// IE/Edge misreport `getComputedStyle` of table rows with width/height
// set in CSS while `offset*` properties report correct values.
// Behavior in IE 9 is more subtle than in newer versions & it passes
// some versions of this test; make sure not to make it pass there!
reliableTrDimensions:function reliableTrDimensions(){var table,tr,trChild,trStyle;if(reliableTrDimensionsVal==null){table=document.createElement("table");tr=document.createElement("tr");trChild=document.createElement("div");table.style.cssText="position:absolute;left:-11111px";tr.style.height="1px";trChild.style.height="9px";documentElement.appendChild(table).appendChild(tr).appendChild(trChild);trStyle=window.getComputedStyle(tr);reliableTrDimensionsVal=parseInt(trStyle.height)>3;documentElement.removeChild(table);}return reliableTrDimensionsVal;}});})();function curCSS(elem,name,computed){var width,minWidth,maxWidth,ret,// Support: Firefox 51+
// Retrieving style before computed somehow
// fixes an issue with getting wrong values
// on detached elements
style=elem.style;computed=computed||getStyles(elem);// getPropertyValue is needed for:
//   .css('filter') (IE 9 only, #12537)
//   .css('--customProperty) (#3144)
if(computed){ret=computed.getPropertyValue(name)||computed[name];if(ret===""&&!isAttached(elem)){ret=jQuery.style(elem,name);}// A tribute to the "awesome hack by Dean Edwards"
// Android Browser returns percentage for some values,
// but width seems to be reliably pixels.
// This is against the CSSOM draft spec:
// https://drafts.csswg.org/cssom/#resolved-values
if(!support.pixelBoxStyles()&&rnumnonpx.test(ret)&&rboxStyle.test(name)){// Remember the original values
width=style.width;minWidth=style.minWidth;maxWidth=style.maxWidth;// Put in the new values to get a computed value out
style.minWidth=style.maxWidth=style.width=ret;ret=computed.width;// Revert the changed values
style.width=width;style.minWidth=minWidth;style.maxWidth=maxWidth;}}return ret!==undefined?// Support: IE <=9 - 11 only
// IE returns zIndex value as an integer.
ret+"":ret;}function addGetHookIf(conditionFn,hookFn){// Define the hook, we'll check on the first run if it's really needed.
return{get:function get(){if(conditionFn()){// Hook not needed (or it's not possible to use it due
// to missing dependency), remove it.
delete this.get;return;}// Hook needed; redefine it so that the support test is not executed again.
return(this.get=hookFn).apply(this,arguments);}};}var cssPrefixes=["Webkit","Moz","ms"],emptyStyle=document.createElement("div").style,vendorProps={};// Return a vendor-prefixed property or undefined
function vendorPropName(name){// Check for vendor prefixed names
var capName=name[0].toUpperCase()+name.slice(1),i=cssPrefixes.length;while(i--){name=cssPrefixes[i]+capName;if(name in emptyStyle){return name;}}}// Return a potentially-mapped jQuery.cssProps or vendor prefixed property
function finalPropName(name){var _final=jQuery.cssProps[name]||vendorProps[name];if(_final){return _final;}if(name in emptyStyle){return name;}return vendorProps[name]=vendorPropName(name)||name;}var// Swappable if display is none or starts with table
// except "table", "table-cell", or "table-caption"
// See here for display values: https://developer.mozilla.org/en-US/docs/CSS/display
rdisplayswap=/^(none|table(?!-c[ea]).+)/,rcustomProp=/^--/,cssShow={position:"absolute",visibility:"hidden",display:"block"},cssNormalTransform={letterSpacing:"0",fontWeight:"400"};function setPositiveNumber(_elem,value,subtract){// Any relative (+/-) values have already been
// normalized at this point
var matches=rcssNum.exec(value);return matches?// Guard against undefined "subtract", e.g., when used as in cssHooks
Math.max(0,matches[2]-(subtract||0))+(matches[3]||"px"):value;}function boxModelAdjustment(elem,dimension,box,isBorderBox,styles,computedVal){var i=dimension==="width"?1:0,extra=0,delta=0;// Adjustment may not be necessary
if(box===(isBorderBox?"border":"content")){return 0;}for(;i<4;i+=2){// Both box models exclude margin
if(box==="margin"){delta+=jQuery.css(elem,box+cssExpand[i],true,styles);}// If we get here with a content-box, we're seeking "padding" or "border" or "margin"
if(!isBorderBox){// Add padding
delta+=jQuery.css(elem,"padding"+cssExpand[i],true,styles);// For "border" or "margin", add border
if(box!=="padding"){delta+=jQuery.css(elem,"border"+cssExpand[i]+"Width",true,styles);// But still keep track of it otherwise
}else{extra+=jQuery.css(elem,"border"+cssExpand[i]+"Width",true,styles);}// If we get here with a border-box (content + padding + border), we're seeking "content" or
// "padding" or "margin"
}else{// For "content", subtract padding
if(box==="content"){delta-=jQuery.css(elem,"padding"+cssExpand[i],true,styles);}// For "content" or "padding", subtract border
if(box!=="margin"){delta-=jQuery.css(elem,"border"+cssExpand[i]+"Width",true,styles);}}}// Account for positive content-box scroll gutter when requested by providing computedVal
if(!isBorderBox&&computedVal>=0){// offsetWidth/offsetHeight is a rounded sum of content, padding, scroll gutter, and border
// Assuming integer scroll gutter, subtract the rest and round down
delta+=Math.max(0,Math.ceil(elem["offset"+dimension[0].toUpperCase()+dimension.slice(1)]-computedVal-delta-extra-0.5// If offsetWidth/offsetHeight is unknown, then we can't determine content-box scroll gutter
// Use an explicit zero to avoid NaN (gh-3964)
))||0;}return delta;}function getWidthOrHeight(elem,dimension,extra){// Start with computed style
var styles=getStyles(elem),// To avoid forcing a reflow, only fetch boxSizing if we need it (gh-4322).
// Fake content-box until we know it's needed to know the true value.
boxSizingNeeded=!support.boxSizingReliable()||extra,isBorderBox=boxSizingNeeded&&jQuery.css(elem,"boxSizing",false,styles)==="border-box",valueIsBorderBox=isBorderBox,val=curCSS(elem,dimension,styles),offsetProp="offset"+dimension[0].toUpperCase()+dimension.slice(1);// Support: Firefox <=54
// Return a confounding non-pixel value or feign ignorance, as appropriate.
if(rnumnonpx.test(val)){if(!extra){return val;}val="auto";}// Support: IE 9 - 11 only
// Use offsetWidth/offsetHeight for when box sizing is unreliable.
// In those cases, the computed value can be trusted to be border-box.
if((!support.boxSizingReliable()&&isBorderBox||// Support: IE 10 - 11+, Edge 15 - 18+
// IE/Edge misreport `getComputedStyle` of table rows with width/height
// set in CSS while `offset*` properties report correct values.
// Interestingly, in some cases IE 9 doesn't suffer from this issue.
!support.reliableTrDimensions()&&nodeName(elem,"tr")||// Fall back to offsetWidth/offsetHeight when value is "auto"
// This happens for inline elements with no explicit setting (gh-3571)
val==="auto"||// Support: Android <=4.1 - 4.3 only
// Also use offsetWidth/offsetHeight for misreported inline dimensions (gh-3602)
!parseFloat(val)&&jQuery.css(elem,"display",false,styles)==="inline")&&// Make sure the element is visible & connected
elem.getClientRects().length){isBorderBox=jQuery.css(elem,"boxSizing",false,styles)==="border-box";// Where available, offsetWidth/offsetHeight approximate border box dimensions.
// Where not available (e.g., SVG), assume unreliable box-sizing and interpret the
// retrieved value as a content box dimension.
valueIsBorderBox=offsetProp in elem;if(valueIsBorderBox){val=elem[offsetProp];}}// Normalize "" and auto
val=parseFloat(val)||0;// Adjust for the element's box model
return val+boxModelAdjustment(elem,dimension,extra||(isBorderBox?"border":"content"),valueIsBorderBox,styles,// Provide the current computed size to request scroll gutter calculation (gh-3589)
val)+"px";}jQuery.extend({// Add in style property hooks for overriding the default
// behavior of getting and setting a style property
cssHooks:{opacity:{get:function get(elem,computed){if(computed){// We should always get a number back from opacity
var ret=curCSS(elem,"opacity");return ret===""?"1":ret;}}}},// Don't automatically add "px" to these possibly-unitless properties
cssNumber:{"animationIterationCount":true,"columnCount":true,"fillOpacity":true,"flexGrow":true,"flexShrink":true,"fontWeight":true,"gridArea":true,"gridColumn":true,"gridColumnEnd":true,"gridColumnStart":true,"gridRow":true,"gridRowEnd":true,"gridRowStart":true,"lineHeight":true,"opacity":true,"order":true,"orphans":true,"widows":true,"zIndex":true,"zoom":true},// Add in properties whose names you wish to fix before
// setting or getting the value
cssProps:{},// Get and set the style property on a DOM Node
style:function style(elem,name,value,extra){// Don't set styles on text and comment nodes
if(!elem||elem.nodeType===3||elem.nodeType===8||!elem.style){return;}// Make sure that we're working with the right name
var ret,type,hooks,origName=camelCase(name),isCustomProp=rcustomProp.test(name),style=elem.style;// Make sure that we're working with the right name. We don't
// want to query the value if it is a CSS custom property
// since they are user-defined.
if(!isCustomProp){name=finalPropName(origName);}// Gets hook for the prefixed version, then unprefixed version
hooks=jQuery.cssHooks[name]||jQuery.cssHooks[origName];// Check if we're setting a value
if(value!==undefined){type=_typeof(value);// Convert "+=" or "-=" to relative numbers (#7345)
if(type==="string"&&(ret=rcssNum.exec(value))&&ret[1]){value=adjustCSS(elem,name,ret);// Fixes bug #9237
type="number";}// Make sure that null and NaN values aren't set (#7116)
if(value==null||value!==value){return;}// If a number was passed in, add the unit (except for certain CSS properties)
// The isCustomProp check can be removed in jQuery 4.0 when we only auto-append
// "px" to a few hardcoded values.
if(type==="number"&&!isCustomProp){value+=ret&&ret[3]||(jQuery.cssNumber[origName]?"":"px");}// background-* props affect original clone's values
if(!support.clearCloneStyle&&value===""&&name.indexOf("background")===0){style[name]="inherit";}// If a hook was provided, use that value, otherwise just set the specified value
if(!hooks||!("set"in hooks)||(value=hooks.set(elem,value,extra))!==undefined){if(isCustomProp){style.setProperty(name,value);}else{style[name]=value;}}}else{// If a hook was provided get the non-computed value from there
if(hooks&&"get"in hooks&&(ret=hooks.get(elem,false,extra))!==undefined){return ret;}// Otherwise just get the value from the style object
return style[name];}},css:function css(elem,name,extra,styles){var val,num,hooks,origName=camelCase(name),isCustomProp=rcustomProp.test(name);// Make sure that we're working with the right name. We don't
// want to modify the value if it is a CSS custom property
// since they are user-defined.
if(!isCustomProp){name=finalPropName(origName);}// Try prefixed name followed by the unprefixed name
hooks=jQuery.cssHooks[name]||jQuery.cssHooks[origName];// If a hook was provided get the computed value from there
if(hooks&&"get"in hooks){val=hooks.get(elem,true,extra);}// Otherwise, if a way to get the computed value exists, use that
if(val===undefined){val=curCSS(elem,name,styles);}// Convert "normal" to computed value
if(val==="normal"&&name in cssNormalTransform){val=cssNormalTransform[name];}// Make numeric if forced or a qualifier was provided and val looks numeric
if(extra===""||extra){num=parseFloat(val);return extra===true||isFinite(num)?num||0:val;}return val;}});jQuery.each(["height","width"],function(_i,dimension){jQuery.cssHooks[dimension]={get:function get(elem,computed,extra){if(computed){// Certain elements can have dimension info if we invisibly show them
// but it must have a current display style that would benefit
return rdisplayswap.test(jQuery.css(elem,"display"))&&(// Support: Safari 8+
// Table columns in Safari have non-zero offsetWidth & zero
// getBoundingClientRect().width unless display is changed.
// Support: IE <=11 only
// Running getBoundingClientRect on a disconnected node
// in IE throws an error.
!elem.getClientRects().length||!elem.getBoundingClientRect().width)?swap(elem,cssShow,function(){return getWidthOrHeight(elem,dimension,extra);}):getWidthOrHeight(elem,dimension,extra);}},set:function set(elem,value,extra){var matches,styles=getStyles(elem),// Only read styles.position if the test has a chance to fail
// to avoid forcing a reflow.
scrollboxSizeBuggy=!support.scrollboxSize()&&styles.position==="absolute",// To avoid forcing a reflow, only fetch boxSizing if we need it (gh-3991)
boxSizingNeeded=scrollboxSizeBuggy||extra,isBorderBox=boxSizingNeeded&&jQuery.css(elem,"boxSizing",false,styles)==="border-box",subtract=extra?boxModelAdjustment(elem,dimension,extra,isBorderBox,styles):0;// Account for unreliable border-box dimensions by comparing offset* to computed and
// faking a content-box to get border and padding (gh-3699)
if(isBorderBox&&scrollboxSizeBuggy){subtract-=Math.ceil(elem["offset"+dimension[0].toUpperCase()+dimension.slice(1)]-parseFloat(styles[dimension])-boxModelAdjustment(elem,dimension,"border",false,styles)-0.5);}// Convert to pixels if value adjustment is needed
if(subtract&&(matches=rcssNum.exec(value))&&(matches[3]||"px")!=="px"){elem.style[dimension]=value;value=jQuery.css(elem,dimension);}return setPositiveNumber(elem,value,subtract);}};});jQuery.cssHooks.marginLeft=addGetHookIf(support.reliableMarginLeft,function(elem,computed){if(computed){return(parseFloat(curCSS(elem,"marginLeft"))||elem.getBoundingClientRect().left-swap(elem,{marginLeft:0},function(){return elem.getBoundingClientRect().left;}))+"px";}});// These hooks are used by animate to expand properties
jQuery.each({margin:"",padding:"",border:"Width"},function(prefix,suffix){jQuery.cssHooks[prefix+suffix]={expand:function expand(value){var i=0,expanded={},// Assumes a single number if not a string
parts=typeof value==="string"?value.split(" "):[value];for(;i<4;i++){expanded[prefix+cssExpand[i]+suffix]=parts[i]||parts[i-2]||parts[0];}return expanded;}};if(prefix!=="margin"){jQuery.cssHooks[prefix+suffix].set=setPositiveNumber;}});jQuery.fn.extend({css:function css(name,value){return access(this,function(elem,name,value){var styles,len,map={},i=0;if(Array.isArray(name)){styles=getStyles(elem);len=name.length;for(;i<len;i++){map[name[i]]=jQuery.css(elem,name[i],false,styles);}return map;}return value!==undefined?jQuery.style(elem,name,value):jQuery.css(elem,name);},name,value,arguments.length>1);}});function Tween(elem,options,prop,end,easing){return new Tween.prototype.init(elem,options,prop,end,easing);}jQuery.Tween=Tween;Tween.prototype={constructor:Tween,init:function init(elem,options,prop,end,easing,unit){this.elem=elem;this.prop=prop;this.easing=easing||jQuery.easing._default;this.options=options;this.start=this.now=this.cur();this.end=end;this.unit=unit||(jQuery.cssNumber[prop]?"":"px");},cur:function cur(){var hooks=Tween.propHooks[this.prop];return hooks&&hooks.get?hooks.get(this):Tween.propHooks._default.get(this);},run:function run(percent){var eased,hooks=Tween.propHooks[this.prop];if(this.options.duration){this.pos=eased=jQuery.easing[this.easing](percent,this.options.duration*percent,0,1,this.options.duration);}else{this.pos=eased=percent;}this.now=(this.end-this.start)*eased+this.start;if(this.options.step){this.options.step.call(this.elem,this.now,this);}if(hooks&&hooks.set){hooks.set(this);}else{Tween.propHooks._default.set(this);}return this;}};Tween.prototype.init.prototype=Tween.prototype;Tween.propHooks={_default:{get:function get(tween){var result;// Use a property on the element directly when it is not a DOM element,
// or when there is no matching style property that exists.
if(tween.elem.nodeType!==1||tween.elem[tween.prop]!=null&&tween.elem.style[tween.prop]==null){return tween.elem[tween.prop];}// Passing an empty string as a 3rd parameter to .css will automatically
// attempt a parseFloat and fallback to a string if the parse fails.
// Simple values such as "10px" are parsed to Float;
// complex values such as "rotate(1rad)" are returned as-is.
result=jQuery.css(tween.elem,tween.prop,"");// Empty strings, null, undefined and "auto" are converted to 0.
return!result||result==="auto"?0:result;},set:function set(tween){// Use step hook for back compat.
// Use cssHook if its there.
// Use .style if available and use plain properties where available.
if(jQuery.fx.step[tween.prop]){jQuery.fx.step[tween.prop](tween);}else if(tween.elem.nodeType===1&&(jQuery.cssHooks[tween.prop]||tween.elem.style[finalPropName(tween.prop)]!=null)){jQuery.style(tween.elem,tween.prop,tween.now+tween.unit);}else{tween.elem[tween.prop]=tween.now;}}}};// Support: IE <=9 only
// Panic based approach to setting things on disconnected nodes
Tween.propHooks.scrollTop=Tween.propHooks.scrollLeft={set:function set(tween){if(tween.elem.nodeType&&tween.elem.parentNode){tween.elem[tween.prop]=tween.now;}}};jQuery.easing={linear:function linear(p){return p;},swing:function swing(p){return 0.5-Math.cos(p*Math.PI)/2;},_default:"swing"};jQuery.fx=Tween.prototype.init;// Back compat <1.8 extension point
jQuery.fx.step={};var fxNow,inProgress,rfxtypes=/^(?:toggle|show|hide)$/,rrun=/queueHooks$/;function schedule(){if(inProgress){if(document.hidden===false&&window.requestAnimationFrame){window.requestAnimationFrame(schedule);}else{window.setTimeout(schedule,jQuery.fx.interval);}jQuery.fx.tick();}}// Animations created synchronously will run synchronously
function createFxNow(){window.setTimeout(function(){fxNow=undefined;});return fxNow=Date.now();}// Generate parameters to create a standard animation
function genFx(type,includeWidth){var which,i=0,attrs={height:type};// If we include width, step value is 1 to do all cssExpand values,
// otherwise step value is 2 to skip over Left and Right
includeWidth=includeWidth?1:0;for(;i<4;i+=2-includeWidth){which=cssExpand[i];attrs["margin"+which]=attrs["padding"+which]=type;}if(includeWidth){attrs.opacity=attrs.width=type;}return attrs;}function createTween(value,prop,animation){var tween,collection=(Animation.tweeners[prop]||[]).concat(Animation.tweeners["*"]),index=0,length=collection.length;for(;index<length;index++){if(tween=collection[index].call(animation,prop,value)){// We're done with this property
return tween;}}}function defaultPrefilter(elem,props,opts){var prop,value,toggle,hooks,oldfire,propTween,restoreDisplay,display,isBox="width"in props||"height"in props,anim=this,orig={},style=elem.style,hidden=elem.nodeType&&isHiddenWithinTree(elem),dataShow=dataPriv.get(elem,"fxshow");// Queue-skipping animations hijack the fx hooks
if(!opts.queue){hooks=jQuery._queueHooks(elem,"fx");if(hooks.unqueued==null){hooks.unqueued=0;oldfire=hooks.empty.fire;hooks.empty.fire=function(){if(!hooks.unqueued){oldfire();}};}hooks.unqueued++;anim.always(function(){// Ensure the complete handler is called before this completes
anim.always(function(){hooks.unqueued--;if(!jQuery.queue(elem,"fx").length){hooks.empty.fire();}});});}// Detect show/hide animations
for(prop in props){value=props[prop];if(rfxtypes.test(value)){delete props[prop];toggle=toggle||value==="toggle";if(value===(hidden?"hide":"show")){// Pretend to be hidden if this is a "show" and
// there is still data from a stopped show/hide
if(value==="show"&&dataShow&&dataShow[prop]!==undefined){hidden=true;// Ignore all other no-op show/hide data
}else{continue;}}orig[prop]=dataShow&&dataShow[prop]||jQuery.style(elem,prop);}}// Bail out if this is a no-op like .hide().hide()
propTween=!jQuery.isEmptyObject(props);if(!propTween&&jQuery.isEmptyObject(orig)){return;}// Restrict "overflow" and "display" styles during box animations
if(isBox&&elem.nodeType===1){// Support: IE <=9 - 11, Edge 12 - 15
// Record all 3 overflow attributes because IE does not infer the shorthand
// from identically-valued overflowX and overflowY and Edge just mirrors
// the overflowX value there.
opts.overflow=[style.overflow,style.overflowX,style.overflowY];// Identify a display type, preferring old show/hide data over the CSS cascade
restoreDisplay=dataShow&&dataShow.display;if(restoreDisplay==null){restoreDisplay=dataPriv.get(elem,"display");}display=jQuery.css(elem,"display");if(display==="none"){if(restoreDisplay){display=restoreDisplay;}else{// Get nonempty value(s) by temporarily forcing visibility
showHide([elem],true);restoreDisplay=elem.style.display||restoreDisplay;display=jQuery.css(elem,"display");showHide([elem]);}}// Animate inline elements as inline-block
if(display==="inline"||display==="inline-block"&&restoreDisplay!=null){if(jQuery.css(elem,"float")==="none"){// Restore the original display value at the end of pure show/hide animations
if(!propTween){anim.done(function(){style.display=restoreDisplay;});if(restoreDisplay==null){display=style.display;restoreDisplay=display==="none"?"":display;}}style.display="inline-block";}}}if(opts.overflow){style.overflow="hidden";anim.always(function(){style.overflow=opts.overflow[0];style.overflowX=opts.overflow[1];style.overflowY=opts.overflow[2];});}// Implement show/hide animations
propTween=false;for(prop in orig){// General show/hide setup for this element animation
if(!propTween){if(dataShow){if("hidden"in dataShow){hidden=dataShow.hidden;}}else{dataShow=dataPriv.access(elem,"fxshow",{display:restoreDisplay});}// Store hidden/visible for toggle so `.stop().toggle()` "reverses"
if(toggle){dataShow.hidden=!hidden;}// Show elements before animating them
if(hidden){showHide([elem],true);}/* eslint-disable no-loop-func */anim.done(function(){/* eslint-enable no-loop-func */ // The final step of a "hide" animation is actually hiding the element
if(!hidden){showHide([elem]);}dataPriv.remove(elem,"fxshow");for(prop in orig){jQuery.style(elem,prop,orig[prop]);}});}// Per-property setup
propTween=createTween(hidden?dataShow[prop]:0,prop,anim);if(!(prop in dataShow)){dataShow[prop]=propTween.start;if(hidden){propTween.end=propTween.start;propTween.start=0;}}}}function propFilter(props,specialEasing){var index,name,easing,value,hooks;// camelCase, specialEasing and expand cssHook pass
for(index in props){name=camelCase(index);easing=specialEasing[name];value=props[index];if(Array.isArray(value)){easing=value[1];value=props[index]=value[0];}if(index!==name){props[name]=value;delete props[index];}hooks=jQuery.cssHooks[name];if(hooks&&"expand"in hooks){value=hooks.expand(value);delete props[name];// Not quite $.extend, this won't overwrite existing keys.
// Reusing 'index' because we have the correct "name"
for(index in value){if(!(index in props)){props[index]=value[index];specialEasing[index]=easing;}}}else{specialEasing[name]=easing;}}}function Animation(elem,properties,options){var result,stopped,index=0,length=Animation.prefilters.length,deferred=jQuery.Deferred().always(function(){// Don't match elem in the :animated selector
delete tick.elem;}),tick=function tick(){if(stopped){return false;}var currentTime=fxNow||createFxNow(),remaining=Math.max(0,animation.startTime+animation.duration-currentTime),// Support: Android 2.3 only
// Archaic crash bug won't allow us to use `1 - ( 0.5 || 0 )` (#12497)
temp=remaining/animation.duration||0,percent=1-temp,index=0,length=animation.tweens.length;for(;index<length;index++){animation.tweens[index].run(percent);}deferred.notifyWith(elem,[animation,percent,remaining]);// If there's more to do, yield
if(percent<1&&length){return remaining;}// If this was an empty animation, synthesize a final progress notification
if(!length){deferred.notifyWith(elem,[animation,1,0]);}// Resolve the animation and report its conclusion
deferred.resolveWith(elem,[animation]);return false;},animation=deferred.promise({elem:elem,props:jQuery.extend({},properties),opts:jQuery.extend(true,{specialEasing:{},easing:jQuery.easing._default},options),originalProperties:properties,originalOptions:options,startTime:fxNow||createFxNow(),duration:options.duration,tweens:[],createTween:function createTween(prop,end){var tween=jQuery.Tween(elem,animation.opts,prop,end,animation.opts.specialEasing[prop]||animation.opts.easing);animation.tweens.push(tween);return tween;},stop:function stop(gotoEnd){var index=0,// If we are going to the end, we want to run all the tweens
// otherwise we skip this part
length=gotoEnd?animation.tweens.length:0;if(stopped){return this;}stopped=true;for(;index<length;index++){animation.tweens[index].run(1);}// Resolve when we played the last frame; otherwise, reject
if(gotoEnd){deferred.notifyWith(elem,[animation,1,0]);deferred.resolveWith(elem,[animation,gotoEnd]);}else{deferred.rejectWith(elem,[animation,gotoEnd]);}return this;}}),props=animation.props;propFilter(props,animation.opts.specialEasing);for(;index<length;index++){result=Animation.prefilters[index].call(animation,elem,props,animation.opts);if(result){if(isFunction(result.stop)){jQuery._queueHooks(animation.elem,animation.opts.queue).stop=result.stop.bind(result);}return result;}}jQuery.map(props,createTween,animation);if(isFunction(animation.opts.start)){animation.opts.start.call(elem,animation);}// Attach callbacks from options
animation.progress(animation.opts.progress).done(animation.opts.done,animation.opts.complete).fail(animation.opts.fail).always(animation.opts.always);jQuery.fx.timer(jQuery.extend(tick,{elem:elem,anim:animation,queue:animation.opts.queue}));return animation;}jQuery.Animation=jQuery.extend(Animation,{tweeners:{"*":[function(prop,value){var tween=this.createTween(prop,value);adjustCSS(tween.elem,prop,rcssNum.exec(value),tween);return tween;}]},tweener:function tweener(props,callback){if(isFunction(props)){callback=props;props=["*"];}else{props=props.match(rnothtmlwhite);}var prop,index=0,length=props.length;for(;index<length;index++){prop=props[index];Animation.tweeners[prop]=Animation.tweeners[prop]||[];Animation.tweeners[prop].unshift(callback);}},prefilters:[defaultPrefilter],prefilter:function prefilter(callback,prepend){if(prepend){Animation.prefilters.unshift(callback);}else{Animation.prefilters.push(callback);}}});jQuery.speed=function(speed,easing,fn){var opt=speed&&_typeof(speed)==="object"?jQuery.extend({},speed):{complete:fn||!fn&&easing||isFunction(speed)&&speed,duration:speed,easing:fn&&easing||easing&&!isFunction(easing)&&easing};// Go to the end state if fx are off
if(jQuery.fx.off){opt.duration=0;}else{if(typeof opt.duration!=="number"){if(opt.duration in jQuery.fx.speeds){opt.duration=jQuery.fx.speeds[opt.duration];}else{opt.duration=jQuery.fx.speeds._default;}}}// Normalize opt.queue - true/undefined/null -> "fx"
if(opt.queue==null||opt.queue===true){opt.queue="fx";}// Queueing
opt.old=opt.complete;opt.complete=function(){if(isFunction(opt.old)){opt.old.call(this);}if(opt.queue){jQuery.dequeue(this,opt.queue);}};return opt;};jQuery.fn.extend({fadeTo:function fadeTo(speed,to,easing,callback){// Show any hidden elements after setting opacity to 0
return this.filter(isHiddenWithinTree).css("opacity",0).show()// Animate to the value specified
.end().animate({opacity:to},speed,easing,callback);},animate:function animate(prop,speed,easing,callback){var empty=jQuery.isEmptyObject(prop),optall=jQuery.speed(speed,easing,callback),doAnimation=function doAnimation(){// Operate on a copy of prop so per-property easing won't be lost
var anim=Animation(this,jQuery.extend({},prop),optall);// Empty animations, or finishing resolves immediately
if(empty||dataPriv.get(this,"finish")){anim.stop(true);}};doAnimation.finish=doAnimation;return empty||optall.queue===false?this.each(doAnimation):this.queue(optall.queue,doAnimation);},stop:function stop(type,clearQueue,gotoEnd){var stopQueue=function stopQueue(hooks){var stop=hooks.stop;delete hooks.stop;stop(gotoEnd);};if(typeof type!=="string"){gotoEnd=clearQueue;clearQueue=type;type=undefined;}if(clearQueue){this.queue(type||"fx",[]);}return this.each(function(){var dequeue=true,index=type!=null&&type+"queueHooks",timers=jQuery.timers,data=dataPriv.get(this);if(index){if(data[index]&&data[index].stop){stopQueue(data[index]);}}else{for(index in data){if(data[index]&&data[index].stop&&rrun.test(index)){stopQueue(data[index]);}}}for(index=timers.length;index--;){if(timers[index].elem===this&&(type==null||timers[index].queue===type)){timers[index].anim.stop(gotoEnd);dequeue=false;timers.splice(index,1);}}// Start the next in the queue if the last step wasn't forced.
// Timers currently will call their complete callbacks, which
// will dequeue but only if they were gotoEnd.
if(dequeue||!gotoEnd){jQuery.dequeue(this,type);}});},finish:function finish(type){if(type!==false){type=type||"fx";}return this.each(function(){var index,data=dataPriv.get(this),queue=data[type+"queue"],hooks=data[type+"queueHooks"],timers=jQuery.timers,length=queue?queue.length:0;// Enable finishing flag on private data
data.finish=true;// Empty the queue first
jQuery.queue(this,type,[]);if(hooks&&hooks.stop){hooks.stop.call(this,true);}// Look for any active animations, and finish them
for(index=timers.length;index--;){if(timers[index].elem===this&&timers[index].queue===type){timers[index].anim.stop(true);timers.splice(index,1);}}// Look for any animations in the old queue and finish them
for(index=0;index<length;index++){if(queue[index]&&queue[index].finish){queue[index].finish.call(this);}}// Turn off finishing flag
delete data.finish;});}});jQuery.each(["toggle","show","hide"],function(_i,name){var cssFn=jQuery.fn[name];jQuery.fn[name]=function(speed,easing,callback){return speed==null||typeof speed==="boolean"?cssFn.apply(this,arguments):this.animate(genFx(name,true),speed,easing,callback);};});// Generate shortcuts for custom animations
jQuery.each({slideDown:genFx("show"),slideUp:genFx("hide"),slideToggle:genFx("toggle"),fadeIn:{opacity:"show"},fadeOut:{opacity:"hide"},fadeToggle:{opacity:"toggle"}},function(name,props){jQuery.fn[name]=function(speed,easing,callback){return this.animate(props,speed,easing,callback);};});jQuery.timers=[];jQuery.fx.tick=function(){var timer,i=0,timers=jQuery.timers;fxNow=Date.now();for(;i<timers.length;i++){timer=timers[i];// Run the timer and safely remove it when done (allowing for external removal)
if(!timer()&&timers[i]===timer){timers.splice(i--,1);}}if(!timers.length){jQuery.fx.stop();}fxNow=undefined;};jQuery.fx.timer=function(timer){jQuery.timers.push(timer);jQuery.fx.start();};jQuery.fx.interval=13;jQuery.fx.start=function(){if(inProgress){return;}inProgress=true;schedule();};jQuery.fx.stop=function(){inProgress=null;};jQuery.fx.speeds={slow:600,fast:200,// Default speed
_default:400};// Based off of the plugin by Clint Helfers, with permission.
// https://web.archive.org/web/20100324014747/http://blindsignals.com/index.php/2009/07/jquery-delay/
jQuery.fn.delay=function(time,type){time=jQuery.fx?jQuery.fx.speeds[time]||time:time;type=type||"fx";return this.queue(type,function(next,hooks){var timeout=window.setTimeout(next,time);hooks.stop=function(){window.clearTimeout(timeout);};});};(function(){var input=document.createElement("input"),select=document.createElement("select"),opt=select.appendChild(document.createElement("option"));input.type="checkbox";// Support: Android <=4.3 only
// Default value for a checkbox should be "on"
support.checkOn=input.value!=="";// Support: IE <=11 only
// Must access selectedIndex to make default options select
support.optSelected=opt.selected;// Support: IE <=11 only
// An input loses its value after becoming a radio
input=document.createElement("input");input.value="t";input.type="radio";support.radioValue=input.value==="t";})();var boolHook,attrHandle=jQuery.expr.attrHandle;jQuery.fn.extend({attr:function attr(name,value){return access(this,jQuery.attr,name,value,arguments.length>1);},removeAttr:function removeAttr(name){return this.each(function(){jQuery.removeAttr(this,name);});}});jQuery.extend({attr:function attr(elem,name,value){var ret,hooks,nType=elem.nodeType;// Don't get/set attributes on text, comment and attribute nodes
if(nType===3||nType===8||nType===2){return;}// Fallback to prop when attributes are not supported
if(typeof elem.getAttribute==="undefined"){return jQuery.prop(elem,name,value);}// Attribute hooks are determined by the lowercase version
// Grab necessary hook if one is defined
if(nType!==1||!jQuery.isXMLDoc(elem)){hooks=jQuery.attrHooks[name.toLowerCase()]||(jQuery.expr.match.bool.test(name)?boolHook:undefined);}if(value!==undefined){if(value===null){jQuery.removeAttr(elem,name);return;}if(hooks&&"set"in hooks&&(ret=hooks.set(elem,value,name))!==undefined){return ret;}elem.setAttribute(name,value+"");return value;}if(hooks&&"get"in hooks&&(ret=hooks.get(elem,name))!==null){return ret;}ret=jQuery.find.attr(elem,name);// Non-existent attributes return null, we normalize to undefined
return ret==null?undefined:ret;},attrHooks:{type:{set:function set(elem,value){if(!support.radioValue&&value==="radio"&&nodeName(elem,"input")){var val=elem.value;elem.setAttribute("type",value);if(val){elem.value=val;}return value;}}}},removeAttr:function removeAttr(elem,value){var name,i=0,// Attribute names can contain non-HTML whitespace characters
// https://html.spec.whatwg.org/multipage/syntax.html#attributes-2
attrNames=value&&value.match(rnothtmlwhite);if(attrNames&&elem.nodeType===1){while(name=attrNames[i++]){elem.removeAttribute(name);}}}});// Hooks for boolean attributes
boolHook={set:function set(elem,value,name){if(value===false){// Remove boolean attributes when set to false
jQuery.removeAttr(elem,name);}else{elem.setAttribute(name,name);}return name;}};jQuery.each(jQuery.expr.match.bool.source.match(/\w+/g),function(_i,name){var getter=attrHandle[name]||jQuery.find.attr;attrHandle[name]=function(elem,name,isXML){var ret,handle,lowercaseName=name.toLowerCase();if(!isXML){// Avoid an infinite loop by temporarily removing this function from the getter
handle=attrHandle[lowercaseName];attrHandle[lowercaseName]=ret;ret=getter(elem,name,isXML)!=null?lowercaseName:null;attrHandle[lowercaseName]=handle;}return ret;};});var rfocusable=/^(?:input|select|textarea|button)$/i,rclickable=/^(?:a|area)$/i;jQuery.fn.extend({prop:function prop(name,value){return access(this,jQuery.prop,name,value,arguments.length>1);},removeProp:function removeProp(name){return this.each(function(){delete this[jQuery.propFix[name]||name];});}});jQuery.extend({prop:function prop(elem,name,value){var ret,hooks,nType=elem.nodeType;// Don't get/set properties on text, comment and attribute nodes
if(nType===3||nType===8||nType===2){return;}if(nType!==1||!jQuery.isXMLDoc(elem)){// Fix name and attach hooks
name=jQuery.propFix[name]||name;hooks=jQuery.propHooks[name];}if(value!==undefined){if(hooks&&"set"in hooks&&(ret=hooks.set(elem,value,name))!==undefined){return ret;}return elem[name]=value;}if(hooks&&"get"in hooks&&(ret=hooks.get(elem,name))!==null){return ret;}return elem[name];},propHooks:{tabIndex:{get:function get(elem){// Support: IE <=9 - 11 only
// elem.tabIndex doesn't always return the
// correct value when it hasn't been explicitly set
// https://web.archive.org/web/20141116233347/http://fluidproject.org/blog/2008/01/09/getting-setting-and-removing-tabindex-values-with-javascript/
// Use proper attribute retrieval(#12072)
var tabindex=jQuery.find.attr(elem,"tabindex");if(tabindex){return parseInt(tabindex,10);}if(rfocusable.test(elem.nodeName)||rclickable.test(elem.nodeName)&&elem.href){return 0;}return-1;}}},propFix:{"for":"htmlFor","class":"className"}});// Support: IE <=11 only
// Accessing the selectedIndex property
// forces the browser to respect setting selected
// on the option
// The getter ensures a default option is selected
// when in an optgroup
// eslint rule "no-unused-expressions" is disabled for this code
// since it considers such accessions noop
if(!support.optSelected){jQuery.propHooks.selected={get:function get(elem){/* eslint no-unused-expressions: "off" */var parent=elem.parentNode;if(parent&&parent.parentNode){parent.parentNode.selectedIndex;}return null;},set:function set(elem){/* eslint no-unused-expressions: "off" */var parent=elem.parentNode;if(parent){parent.selectedIndex;if(parent.parentNode){parent.parentNode.selectedIndex;}}}};}jQuery.each(["tabIndex","readOnly","maxLength","cellSpacing","cellPadding","rowSpan","colSpan","useMap","frameBorder","contentEditable"],function(){jQuery.propFix[this.toLowerCase()]=this;});// Strip and collapse whitespace according to HTML spec
// https://infra.spec.whatwg.org/#strip-and-collapse-ascii-whitespace
function stripAndCollapse(value){var tokens=value.match(rnothtmlwhite)||[];return tokens.join(" ");}function getClass(elem){return elem.getAttribute&&elem.getAttribute("class")||"";}function classesToArray(value){if(Array.isArray(value)){return value;}if(typeof value==="string"){return value.match(rnothtmlwhite)||[];}return[];}jQuery.fn.extend({addClass:function addClass(value){var classes,elem,cur,curValue,clazz,j,finalValue,i=0;if(isFunction(value)){return this.each(function(j){jQuery(this).addClass(value.call(this,j,getClass(this)));});}classes=classesToArray(value);if(classes.length){while(elem=this[i++]){curValue=getClass(elem);cur=elem.nodeType===1&&" "+stripAndCollapse(curValue)+" ";if(cur){j=0;while(clazz=classes[j++]){if(cur.indexOf(" "+clazz+" ")<0){cur+=clazz+" ";}}// Only assign if different to avoid unneeded rendering.
finalValue=stripAndCollapse(cur);if(curValue!==finalValue){elem.setAttribute("class",finalValue);}}}}return this;},removeClass:function removeClass(value){var classes,elem,cur,curValue,clazz,j,finalValue,i=0;if(isFunction(value)){return this.each(function(j){jQuery(this).removeClass(value.call(this,j,getClass(this)));});}if(!arguments.length){return this.attr("class","");}classes=classesToArray(value);if(classes.length){while(elem=this[i++]){curValue=getClass(elem);// This expression is here for better compressibility (see addClass)
cur=elem.nodeType===1&&" "+stripAndCollapse(curValue)+" ";if(cur){j=0;while(clazz=classes[j++]){// Remove *all* instances
while(cur.indexOf(" "+clazz+" ")>-1){cur=cur.replace(" "+clazz+" "," ");}}// Only assign if different to avoid unneeded rendering.
finalValue=stripAndCollapse(cur);if(curValue!==finalValue){elem.setAttribute("class",finalValue);}}}}return this;},toggleClass:function toggleClass(value,stateVal){var type=_typeof(value),isValidValue=type==="string"||Array.isArray(value);if(typeof stateVal==="boolean"&&isValidValue){return stateVal?this.addClass(value):this.removeClass(value);}if(isFunction(value)){return this.each(function(i){jQuery(this).toggleClass(value.call(this,i,getClass(this),stateVal),stateVal);});}return this.each(function(){var className,i,self,classNames;if(isValidValue){// Toggle individual class names
i=0;self=jQuery(this);classNames=classesToArray(value);while(className=classNames[i++]){// Check each className given, space separated list
if(self.hasClass(className)){self.removeClass(className);}else{self.addClass(className);}}// Toggle whole class name
}else if(value===undefined||type==="boolean"){className=getClass(this);if(className){// Store className if set
dataPriv.set(this,"__className__",className);}// If the element has a class name or if we're passed `false`,
// then remove the whole classname (if there was one, the above saved it).
// Otherwise bring back whatever was previously saved (if anything),
// falling back to the empty string if nothing was stored.
if(this.setAttribute){this.setAttribute("class",className||value===false?"":dataPriv.get(this,"__className__")||"");}}});},hasClass:function hasClass(selector){var className,elem,i=0;className=" "+selector+" ";while(elem=this[i++]){if(elem.nodeType===1&&(" "+stripAndCollapse(getClass(elem))+" ").indexOf(className)>-1){return true;}}return false;}});var rreturn=/\r/g;jQuery.fn.extend({val:function val(value){var hooks,ret,valueIsFunction,elem=this[0];if(!arguments.length){if(elem){hooks=jQuery.valHooks[elem.type]||jQuery.valHooks[elem.nodeName.toLowerCase()];if(hooks&&"get"in hooks&&(ret=hooks.get(elem,"value"))!==undefined){return ret;}ret=elem.value;// Handle most common string cases
if(typeof ret==="string"){return ret.replace(rreturn,"");}// Handle cases where value is null/undef or number
return ret==null?"":ret;}return;}valueIsFunction=isFunction(value);return this.each(function(i){var val;if(this.nodeType!==1){return;}if(valueIsFunction){val=value.call(this,i,jQuery(this).val());}else{val=value;}// Treat null/undefined as ""; convert numbers to string
if(val==null){val="";}else if(typeof val==="number"){val+="";}else if(Array.isArray(val)){val=jQuery.map(val,function(value){return value==null?"":value+"";});}hooks=jQuery.valHooks[this.type]||jQuery.valHooks[this.nodeName.toLowerCase()];// If set returns undefined, fall back to normal setting
if(!hooks||!("set"in hooks)||hooks.set(this,val,"value")===undefined){this.value=val;}});}});jQuery.extend({valHooks:{option:{get:function get(elem){var val=jQuery.find.attr(elem,"value");return val!=null?val:// Support: IE <=10 - 11 only
// option.text throws exceptions (#14686, #14858)
// Strip and collapse whitespace
// https://html.spec.whatwg.org/#strip-and-collapse-whitespace
stripAndCollapse(jQuery.text(elem));}},select:{get:function get(elem){var value,option,i,options=elem.options,index=elem.selectedIndex,one=elem.type==="select-one",values=one?null:[],max=one?index+1:options.length;if(index<0){i=max;}else{i=one?index:0;}// Loop through all the selected options
for(;i<max;i++){option=options[i];// Support: IE <=9 only
// IE8-9 doesn't update selected after form reset (#2551)
if((option.selected||i===index)&&// Don't return options that are disabled or in a disabled optgroup
!option.disabled&&(!option.parentNode.disabled||!nodeName(option.parentNode,"optgroup"))){// Get the specific value for the option
value=jQuery(option).val();// We don't need an array for one selects
if(one){return value;}// Multi-Selects return an array
values.push(value);}}return values;},set:function set(elem,value){var optionSet,option,options=elem.options,values=jQuery.makeArray(value),i=options.length;while(i--){option=options[i];/* eslint-disable no-cond-assign */if(option.selected=jQuery.inArray(jQuery.valHooks.option.get(option),values)>-1){optionSet=true;}/* eslint-enable no-cond-assign */}// Force browsers to behave consistently when non-matching value is set
if(!optionSet){elem.selectedIndex=-1;}return values;}}}});// Radios and checkboxes getter/setter
jQuery.each(["radio","checkbox"],function(){jQuery.valHooks[this]={set:function set(elem,value){if(Array.isArray(value)){return elem.checked=jQuery.inArray(jQuery(elem).val(),value)>-1;}}};if(!support.checkOn){jQuery.valHooks[this].get=function(elem){return elem.getAttribute("value")===null?"on":elem.value;};}});// Return jQuery for attributes-only inclusion
support.focusin="onfocusin"in window;var rfocusMorph=/^(?:focusinfocus|focusoutblur)$/,stopPropagationCallback=function stopPropagationCallback(e){e.stopPropagation();};jQuery.extend(jQuery.event,{trigger:function trigger(event,data,elem,onlyHandlers){var i,cur,tmp,bubbleType,ontype,handle,special,lastElement,eventPath=[elem||document],type=hasOwn.call(event,"type")?event.type:event,namespaces=hasOwn.call(event,"namespace")?event.namespace.split("."):[];cur=lastElement=tmp=elem=elem||document;// Don't do events on text and comment nodes
if(elem.nodeType===3||elem.nodeType===8){return;}// focus/blur morphs to focusin/out; ensure we're not firing them right now
if(rfocusMorph.test(type+jQuery.event.triggered)){return;}if(type.indexOf(".")>-1){// Namespaced trigger; create a regexp to match event type in handle()
namespaces=type.split(".");type=namespaces.shift();namespaces.sort();}ontype=type.indexOf(":")<0&&"on"+type;// Caller can pass in a jQuery.Event object, Object, or just an event type string
event=event[jQuery.expando]?event:new jQuery.Event(type,_typeof(event)==="object"&&event);// Trigger bitmask: & 1 for native handlers; & 2 for jQuery (always true)
event.isTrigger=onlyHandlers?2:3;event.namespace=namespaces.join(".");event.rnamespace=event.namespace?new RegExp("(^|\\.)"+namespaces.join("\\.(?:.*\\.|)")+"(\\.|$)"):null;// Clean up the event in case it is being reused
event.result=undefined;if(!event.target){event.target=elem;}// Clone any incoming data and prepend the event, creating the handler arg list
data=data==null?[event]:jQuery.makeArray(data,[event]);// Allow special events to draw outside the lines
special=jQuery.event.special[type]||{};if(!onlyHandlers&&special.trigger&&special.trigger.apply(elem,data)===false){return;}// Determine event propagation path in advance, per W3C events spec (#9951)
// Bubble up to document, then to window; watch for a global ownerDocument var (#9724)
if(!onlyHandlers&&!special.noBubble&&!isWindow(elem)){bubbleType=special.delegateType||type;if(!rfocusMorph.test(bubbleType+type)){cur=cur.parentNode;}for(;cur;cur=cur.parentNode){eventPath.push(cur);tmp=cur;}// Only add window if we got to document (e.g., not plain obj or detached DOM)
if(tmp===(elem.ownerDocument||document)){eventPath.push(tmp.defaultView||tmp.parentWindow||window);}}// Fire handlers on the event path
i=0;while((cur=eventPath[i++])&&!event.isPropagationStopped()){lastElement=cur;event.type=i>1?bubbleType:special.bindType||type;// jQuery handler
handle=(dataPriv.get(cur,"events")||Object.create(null))[event.type]&&dataPriv.get(cur,"handle");if(handle){handle.apply(cur,data);}// Native handler
handle=ontype&&cur[ontype];if(handle&&handle.apply&&acceptData(cur)){event.result=handle.apply(cur,data);if(event.result===false){event.preventDefault();}}}event.type=type;// If nobody prevented the default action, do it now
if(!onlyHandlers&&!event.isDefaultPrevented()){if((!special._default||special._default.apply(eventPath.pop(),data)===false)&&acceptData(elem)){// Call a native DOM method on the target with the same name as the event.
// Don't do default actions on window, that's where global variables be (#6170)
if(ontype&&isFunction(elem[type])&&!isWindow(elem)){// Don't re-trigger an onFOO event when we call its FOO() method
tmp=elem[ontype];if(tmp){elem[ontype]=null;}// Prevent re-triggering of the same event, since we already bubbled it above
jQuery.event.triggered=type;if(event.isPropagationStopped()){lastElement.addEventListener(type,stopPropagationCallback);}elem[type]();if(event.isPropagationStopped()){lastElement.removeEventListener(type,stopPropagationCallback);}jQuery.event.triggered=undefined;if(tmp){elem[ontype]=tmp;}}}}return event.result;},// Piggyback on a donor event to simulate a different one
// Used only for `focus(in | out)` events
simulate:function simulate(type,elem,event){var e=jQuery.extend(new jQuery.Event(),event,{type:type,isSimulated:true});jQuery.event.trigger(e,null,elem);}});jQuery.fn.extend({trigger:function trigger(type,data){return this.each(function(){jQuery.event.trigger(type,data,this);});},triggerHandler:function triggerHandler(type,data){var elem=this[0];if(elem){return jQuery.event.trigger(type,data,elem,true);}}});// Support: Firefox <=44
// Firefox doesn't have focus(in | out) events
// Related ticket - https://bugzilla.mozilla.org/show_bug.cgi?id=687787
//
// Support: Chrome <=48 - 49, Safari <=9.0 - 9.1
// focus(in | out) events fire after focus & blur events,
// which is spec violation - http://www.w3.org/TR/DOM-Level-3-Events/#events-focusevent-event-order
// Related ticket - https://bugs.chromium.org/p/chromium/issues/detail?id=449857
if(!support.focusin){jQuery.each({focus:"focusin",blur:"focusout"},function(orig,fix){// Attach a single capturing handler on the document while someone wants focusin/focusout
var handler=function handler(event){jQuery.event.simulate(fix,event.target,jQuery.event.fix(event));};jQuery.event.special[fix]={setup:function setup(){// Handle: regular nodes (via `this.ownerDocument`), window
// (via `this.document`) & document (via `this`).
var doc=this.ownerDocument||this.document||this,attaches=dataPriv.access(doc,fix);if(!attaches){doc.addEventListener(orig,handler,true);}dataPriv.access(doc,fix,(attaches||0)+1);},teardown:function teardown(){var doc=this.ownerDocument||this.document||this,attaches=dataPriv.access(doc,fix)-1;if(!attaches){doc.removeEventListener(orig,handler,true);dataPriv.remove(doc,fix);}else{dataPriv.access(doc,fix,attaches);}}};});}var location=window.location;var nonce={guid:Date.now()};var rquery=/\?/;// Cross-browser xml parsing
jQuery.parseXML=function(data){var xml;if(!data||typeof data!=="string"){return null;}// Support: IE 9 - 11 only
// IE throws on parseFromString with invalid input.
try{xml=new window.DOMParser().parseFromString(data,"text/xml");}catch(e){xml=undefined;}if(!xml||xml.getElementsByTagName("parsererror").length){jQuery.error("Invalid XML: "+data);}return xml;};var rbracket=/\[\]$/,rCRLF=/\r?\n/g,rsubmitterTypes=/^(?:submit|button|image|reset|file)$/i,rsubmittable=/^(?:input|select|textarea|keygen)/i;function buildParams(prefix,obj,traditional,add){var name;if(Array.isArray(obj)){// Serialize array item.
jQuery.each(obj,function(i,v){if(traditional||rbracket.test(prefix)){// Treat each array item as a scalar.
add(prefix,v);}else{// Item is non-scalar (array or object), encode its numeric index.
buildParams(prefix+"["+(_typeof(v)==="object"&&v!=null?i:"")+"]",v,traditional,add);}});}else if(!traditional&&toType(obj)==="object"){// Serialize object item.
for(name in obj){buildParams(prefix+"["+name+"]",obj[name],traditional,add);}}else{// Serialize scalar item.
add(prefix,obj);}}// Serialize an array of form elements or a set of
// key/values into a query string
jQuery.param=function(a,traditional){var prefix,s=[],add=function add(key,valueOrFunction){// If value is a function, invoke it and use its return value
var value=isFunction(valueOrFunction)?valueOrFunction():valueOrFunction;s[s.length]=encodeURIComponent(key)+"="+encodeURIComponent(value==null?"":value);};if(a==null){return"";}// If an array was passed in, assume that it is an array of form elements.
if(Array.isArray(a)||a.jquery&&!jQuery.isPlainObject(a)){// Serialize the form elements
jQuery.each(a,function(){add(this.name,this.value);});}else{// If traditional, encode the "old" way (the way 1.3.2 or older
// did it), otherwise encode params recursively.
for(prefix in a){buildParams(prefix,a[prefix],traditional,add);}}// Return the resulting serialization
return s.join("&");};jQuery.fn.extend({serialize:function serialize(){return jQuery.param(this.serializeArray());},serializeArray:function serializeArray(){return this.map(function(){// Can add propHook for "elements" to filter or add form elements
var elements=jQuery.prop(this,"elements");return elements?jQuery.makeArray(elements):this;}).filter(function(){var type=this.type;// Use .is( ":disabled" ) so that fieldset[disabled] works
return this.name&&!jQuery(this).is(":disabled")&&rsubmittable.test(this.nodeName)&&!rsubmitterTypes.test(type)&&(this.checked||!rcheckableType.test(type));}).map(function(_i,elem){var val=jQuery(this).val();if(val==null){return null;}if(Array.isArray(val)){return jQuery.map(val,function(val){return{name:elem.name,value:val.replace(rCRLF,"\r\n")};});}return{name:elem.name,value:val.replace(rCRLF,"\r\n")};}).get();}});var r20=/%20/g,rhash=/#.*$/,rantiCache=/([?&])_=[^&]*/,rheaders=/^(.*?):[ \t]*([^\r\n]*)$/mg,// #7653, #8125, #8152: local protocol detection
rlocalProtocol=/^(?:about|app|app-storage|.+-extension|file|res|widget):$/,rnoContent=/^(?:GET|HEAD)$/,rprotocol=/^\/\//,/* Prefilters
	 * 1) They are useful to introduce custom dataTypes (see ajax/jsonp.js for an example)
	 * 2) These are called:
	 *    - BEFORE asking for a transport
	 *    - AFTER param serialization (s.data is a string if s.processData is true)
	 * 3) key is the dataType
	 * 4) the catchall symbol "*" can be used
	 * 5) execution will start with transport dataType and THEN continue down to "*" if needed
	 */prefilters={},/* Transports bindings
	 * 1) key is the dataType
	 * 2) the catchall symbol "*" can be used
	 * 3) selection will start with transport dataType and THEN go to "*" if needed
	 */transports={},// Avoid comment-prolog char sequence (#10098); must appease lint and evade compression
allTypes="*/".concat("*"),// Anchor tag for parsing the document origin
originAnchor=document.createElement("a");originAnchor.href=location.href;// Base "constructor" for jQuery.ajaxPrefilter and jQuery.ajaxTransport
function addToPrefiltersOrTransports(structure){// dataTypeExpression is optional and defaults to "*"
return function(dataTypeExpression,func){if(typeof dataTypeExpression!=="string"){func=dataTypeExpression;dataTypeExpression="*";}var dataType,i=0,dataTypes=dataTypeExpression.toLowerCase().match(rnothtmlwhite)||[];if(isFunction(func)){// For each dataType in the dataTypeExpression
while(dataType=dataTypes[i++]){// Prepend if requested
if(dataType[0]==="+"){dataType=dataType.slice(1)||"*";(structure[dataType]=structure[dataType]||[]).unshift(func);// Otherwise append
}else{(structure[dataType]=structure[dataType]||[]).push(func);}}}};}// Base inspection function for prefilters and transports
function inspectPrefiltersOrTransports(structure,options,originalOptions,jqXHR){var inspected={},seekingTransport=structure===transports;function inspect(dataType){var selected;inspected[dataType]=true;jQuery.each(structure[dataType]||[],function(_,prefilterOrFactory){var dataTypeOrTransport=prefilterOrFactory(options,originalOptions,jqXHR);if(typeof dataTypeOrTransport==="string"&&!seekingTransport&&!inspected[dataTypeOrTransport]){options.dataTypes.unshift(dataTypeOrTransport);inspect(dataTypeOrTransport);return false;}else if(seekingTransport){return!(selected=dataTypeOrTransport);}});return selected;}return inspect(options.dataTypes[0])||!inspected["*"]&&inspect("*");}// A special extend for ajax options
// that takes "flat" options (not to be deep extended)
// Fixes #9887
function ajaxExtend(target,src){var key,deep,flatOptions=jQuery.ajaxSettings.flatOptions||{};for(key in src){if(src[key]!==undefined){(flatOptions[key]?target:deep||(deep={}))[key]=src[key];}}if(deep){jQuery.extend(true,target,deep);}return target;}/* Handles responses to an ajax request:
 * - finds the right dataType (mediates between content-type and expected dataType)
 * - returns the corresponding response
 */function ajaxHandleResponses(s,jqXHR,responses){var ct,type,finalDataType,firstDataType,contents=s.contents,dataTypes=s.dataTypes;// Remove auto dataType and get content-type in the process
while(dataTypes[0]==="*"){dataTypes.shift();if(ct===undefined){ct=s.mimeType||jqXHR.getResponseHeader("Content-Type");}}// Check if we're dealing with a known content-type
if(ct){for(type in contents){if(contents[type]&&contents[type].test(ct)){dataTypes.unshift(type);break;}}}// Check to see if we have a response for the expected dataType
if(dataTypes[0]in responses){finalDataType=dataTypes[0];}else{// Try convertible dataTypes
for(type in responses){if(!dataTypes[0]||s.converters[type+" "+dataTypes[0]]){finalDataType=type;break;}if(!firstDataType){firstDataType=type;}}// Or just use first one
finalDataType=finalDataType||firstDataType;}// If we found a dataType
// We add the dataType to the list if needed
// and return the corresponding response
if(finalDataType){if(finalDataType!==dataTypes[0]){dataTypes.unshift(finalDataType);}return responses[finalDataType];}}/* Chain conversions given the request and the original response
 * Also sets the responseXXX fields on the jqXHR instance
 */function ajaxConvert(s,response,jqXHR,isSuccess){var conv2,current,conv,tmp,prev,converters={},// Work with a copy of dataTypes in case we need to modify it for conversion
dataTypes=s.dataTypes.slice();// Create converters map with lowercased keys
if(dataTypes[1]){for(conv in s.converters){converters[conv.toLowerCase()]=s.converters[conv];}}current=dataTypes.shift();// Convert to each sequential dataType
while(current){if(s.responseFields[current]){jqXHR[s.responseFields[current]]=response;}// Apply the dataFilter if provided
if(!prev&&isSuccess&&s.dataFilter){response=s.dataFilter(response,s.dataType);}prev=current;current=dataTypes.shift();if(current){// There's only work to do if current dataType is non-auto
if(current==="*"){current=prev;// Convert response if prev dataType is non-auto and differs from current
}else if(prev!=="*"&&prev!==current){// Seek a direct converter
conv=converters[prev+" "+current]||converters["* "+current];// If none found, seek a pair
if(!conv){for(conv2 in converters){// If conv2 outputs current
tmp=conv2.split(" ");if(tmp[1]===current){// If prev can be converted to accepted input
conv=converters[prev+" "+tmp[0]]||converters["* "+tmp[0]];if(conv){// Condense equivalence converters
if(conv===true){conv=converters[conv2];// Otherwise, insert the intermediate dataType
}else if(converters[conv2]!==true){current=tmp[0];dataTypes.unshift(tmp[1]);}break;}}}}// Apply converter (if not an equivalence)
if(conv!==true){// Unless errors are allowed to bubble, catch and return them
if(conv&&s["throws"]){response=conv(response);}else{try{response=conv(response);}catch(e){return{state:"parsererror",error:conv?e:"No conversion from "+prev+" to "+current};}}}}}}return{state:"success",data:response};}jQuery.extend({// Counter for holding the number of active queries
active:0,// Last-Modified header cache for next request
lastModified:{},etag:{},ajaxSettings:{url:location.href,type:"GET",isLocal:rlocalProtocol.test(location.protocol),global:true,processData:true,async:true,contentType:"application/x-www-form-urlencoded; charset=UTF-8",/*
		timeout: 0,
		data: null,
		dataType: null,
		username: null,
		password: null,
		cache: null,
		throws: false,
		traditional: false,
		headers: {},
		*/accepts:{"*":allTypes,text:"text/plain",html:"text/html",xml:"application/xml, text/xml",json:"application/json, text/javascript"},contents:{xml:/\bxml\b/,html:/\bhtml/,json:/\bjson\b/},responseFields:{xml:"responseXML",text:"responseText",json:"responseJSON"},// Data converters
// Keys separate source (or catchall "*") and destination types with a single space
converters:{// Convert anything to text
"* text":String,// Text to html (true = no transformation)
"text html":true,// Evaluate text as a json expression
"text json":JSON.parse,// Parse text as xml
"text xml":jQuery.parseXML},// For options that shouldn't be deep extended:
// you can add your own custom options here if
// and when you create one that shouldn't be
// deep extended (see ajaxExtend)
flatOptions:{url:true,context:true}},// Creates a full fledged settings object into target
// with both ajaxSettings and settings fields.
// If target is omitted, writes into ajaxSettings.
ajaxSetup:function ajaxSetup(target,settings){return settings?// Building a settings object
ajaxExtend(ajaxExtend(target,jQuery.ajaxSettings),settings):// Extending ajaxSettings
ajaxExtend(jQuery.ajaxSettings,target);},ajaxPrefilter:addToPrefiltersOrTransports(prefilters),ajaxTransport:addToPrefiltersOrTransports(transports),// Main method
ajax:function ajax(url,options){// If url is an object, simulate pre-1.5 signature
if(_typeof(url)==="object"){options=url;url=undefined;}// Force options to be an object
options=options||{};var transport,// URL without anti-cache param
cacheURL,// Response headers
responseHeadersString,responseHeaders,// timeout handle
timeoutTimer,// Url cleanup var
urlAnchor,// Request state (becomes false upon send and true upon completion)
completed,// To know if global events are to be dispatched
fireGlobals,// Loop variable
i,// uncached part of the url
uncached,// Create the final options object
s=jQuery.ajaxSetup({},options),// Callbacks context
callbackContext=s.context||s,// Context for global events is callbackContext if it is a DOM node or jQuery collection
globalEventContext=s.context&&(callbackContext.nodeType||callbackContext.jquery)?jQuery(callbackContext):jQuery.event,// Deferreds
deferred=jQuery.Deferred(),completeDeferred=jQuery.Callbacks("once memory"),// Status-dependent callbacks
_statusCode=s.statusCode||{},// Headers (they are sent all at once)
requestHeaders={},requestHeadersNames={},// Default abort message
strAbort="canceled",// Fake xhr
jqXHR={readyState:0,// Builds headers hashtable if needed
getResponseHeader:function getResponseHeader(key){var match;if(completed){if(!responseHeaders){responseHeaders={};while(match=rheaders.exec(responseHeadersString)){responseHeaders[match[1].toLowerCase()+" "]=(responseHeaders[match[1].toLowerCase()+" "]||[]).concat(match[2]);}}match=responseHeaders[key.toLowerCase()+" "];}return match==null?null:match.join(", ");},// Raw string
getAllResponseHeaders:function getAllResponseHeaders(){return completed?responseHeadersString:null;},// Caches the header
setRequestHeader:function setRequestHeader(name,value){if(completed==null){name=requestHeadersNames[name.toLowerCase()]=requestHeadersNames[name.toLowerCase()]||name;requestHeaders[name]=value;}return this;},// Overrides response content-type header
overrideMimeType:function overrideMimeType(type){if(completed==null){s.mimeType=type;}return this;},// Status-dependent callbacks
statusCode:function statusCode(map){var code;if(map){if(completed){// Execute the appropriate callbacks
jqXHR.always(map[jqXHR.status]);}else{// Lazy-add the new callbacks in a way that preserves old ones
for(code in map){_statusCode[code]=[_statusCode[code],map[code]];}}}return this;},// Cancel the request
abort:function abort(statusText){var finalText=statusText||strAbort;if(transport){transport.abort(finalText);}done(0,finalText);return this;}};// Attach deferreds
deferred.promise(jqXHR);// Add protocol if not provided (prefilters might expect it)
// Handle falsy url in the settings object (#10093: consistency with old signature)
// We also use the url parameter if available
s.url=((url||s.url||location.href)+"").replace(rprotocol,location.protocol+"//");// Alias method option to type as per ticket #12004
s.type=options.method||options.type||s.method||s.type;// Extract dataTypes list
s.dataTypes=(s.dataType||"*").toLowerCase().match(rnothtmlwhite)||[""];// A cross-domain request is in order when the origin doesn't match the current origin.
if(s.crossDomain==null){urlAnchor=document.createElement("a");// Support: IE <=8 - 11, Edge 12 - 15
// IE throws exception on accessing the href property if url is malformed,
// e.g. http://example.com:80x/
try{urlAnchor.href=s.url;// Support: IE <=8 - 11 only
// Anchor's host property isn't correctly set when s.url is relative
urlAnchor.href=urlAnchor.href;s.crossDomain=originAnchor.protocol+"//"+originAnchor.host!==urlAnchor.protocol+"//"+urlAnchor.host;}catch(e){// If there is an error parsing the URL, assume it is crossDomain,
// it can be rejected by the transport if it is invalid
s.crossDomain=true;}}// Convert data if not already a string
if(s.data&&s.processData&&typeof s.data!=="string"){s.data=jQuery.param(s.data,s.traditional);}// Apply prefilters
inspectPrefiltersOrTransports(prefilters,s,options,jqXHR);// If request was aborted inside a prefilter, stop there
if(completed){return jqXHR;}// We can fire global events as of now if asked to
// Don't fire events if jQuery.event is undefined in an AMD-usage scenario (#15118)
fireGlobals=jQuery.event&&s.global;// Watch for a new set of requests
if(fireGlobals&&jQuery.active++===0){jQuery.event.trigger("ajaxStart");}// Uppercase the type
s.type=s.type.toUpperCase();// Determine if request has content
s.hasContent=!rnoContent.test(s.type);// Save the URL in case we're toying with the If-Modified-Since
// and/or If-None-Match header later on
// Remove hash to simplify url manipulation
cacheURL=s.url.replace(rhash,"");// More options handling for requests with no content
if(!s.hasContent){// Remember the hash so we can put it back
uncached=s.url.slice(cacheURL.length);// If data is available and should be processed, append data to url
if(s.data&&(s.processData||typeof s.data==="string")){cacheURL+=(rquery.test(cacheURL)?"&":"?")+s.data;// #9682: remove data so that it's not used in an eventual retry
delete s.data;}// Add or update anti-cache param if needed
if(s.cache===false){cacheURL=cacheURL.replace(rantiCache,"$1");uncached=(rquery.test(cacheURL)?"&":"?")+"_="+nonce.guid++ +uncached;}// Put hash and anti-cache on the URL that will be requested (gh-1732)
s.url=cacheURL+uncached;// Change '%20' to '+' if this is encoded form body content (gh-2658)
}else if(s.data&&s.processData&&(s.contentType||"").indexOf("application/x-www-form-urlencoded")===0){s.data=s.data.replace(r20,"+");}// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
if(s.ifModified){if(jQuery.lastModified[cacheURL]){jqXHR.setRequestHeader("If-Modified-Since",jQuery.lastModified[cacheURL]);}if(jQuery.etag[cacheURL]){jqXHR.setRequestHeader("If-None-Match",jQuery.etag[cacheURL]);}}// Set the correct header, if data is being sent
if(s.data&&s.hasContent&&s.contentType!==false||options.contentType){jqXHR.setRequestHeader("Content-Type",s.contentType);}// Set the Accepts header for the server, depending on the dataType
jqXHR.setRequestHeader("Accept",s.dataTypes[0]&&s.accepts[s.dataTypes[0]]?s.accepts[s.dataTypes[0]]+(s.dataTypes[0]!=="*"?", "+allTypes+"; q=0.01":""):s.accepts["*"]);// Check for headers option
for(i in s.headers){jqXHR.setRequestHeader(i,s.headers[i]);}// Allow custom headers/mimetypes and early abort
if(s.beforeSend&&(s.beforeSend.call(callbackContext,jqXHR,s)===false||completed)){// Abort if not done already and return
return jqXHR.abort();}// Aborting is no longer a cancellation
strAbort="abort";// Install callbacks on deferreds
completeDeferred.add(s.complete);jqXHR.done(s.success);jqXHR.fail(s.error);// Get transport
transport=inspectPrefiltersOrTransports(transports,s,options,jqXHR);// If no transport, we auto-abort
if(!transport){done(-1,"No Transport");}else{jqXHR.readyState=1;// Send global event
if(fireGlobals){globalEventContext.trigger("ajaxSend",[jqXHR,s]);}// If request was aborted inside ajaxSend, stop there
if(completed){return jqXHR;}// Timeout
if(s.async&&s.timeout>0){timeoutTimer=window.setTimeout(function(){jqXHR.abort("timeout");},s.timeout);}try{completed=false;transport.send(requestHeaders,done);}catch(e){// Rethrow post-completion exceptions
if(completed){throw e;}// Propagate others as results
done(-1,e);}}// Callback for when everything is done
function done(status,nativeStatusText,responses,headers){var isSuccess,success,error,response,modified,statusText=nativeStatusText;// Ignore repeat invocations
if(completed){return;}completed=true;// Clear timeout if it exists
if(timeoutTimer){window.clearTimeout(timeoutTimer);}// Dereference transport for early garbage collection
// (no matter how long the jqXHR object will be used)
transport=undefined;// Cache response headers
responseHeadersString=headers||"";// Set readyState
jqXHR.readyState=status>0?4:0;// Determine if successful
isSuccess=status>=200&&status<300||status===304;// Get response data
if(responses){response=ajaxHandleResponses(s,jqXHR,responses);}// Use a noop converter for missing script
if(!isSuccess&&jQuery.inArray("script",s.dataTypes)>-1){s.converters["text script"]=function(){};}// Convert no matter what (that way responseXXX fields are always set)
response=ajaxConvert(s,response,jqXHR,isSuccess);// If successful, handle type chaining
if(isSuccess){// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
if(s.ifModified){modified=jqXHR.getResponseHeader("Last-Modified");if(modified){jQuery.lastModified[cacheURL]=modified;}modified=jqXHR.getResponseHeader("etag");if(modified){jQuery.etag[cacheURL]=modified;}}// if no content
if(status===204||s.type==="HEAD"){statusText="nocontent";// if not modified
}else if(status===304){statusText="notmodified";// If we have data, let's convert it
}else{statusText=response.state;success=response.data;error=response.error;isSuccess=!error;}}else{// Extract error from statusText and normalize for non-aborts
error=statusText;if(status||!statusText){statusText="error";if(status<0){status=0;}}}// Set data for the fake xhr object
jqXHR.status=status;jqXHR.statusText=(nativeStatusText||statusText)+"";// Success/Error
if(isSuccess){deferred.resolveWith(callbackContext,[success,statusText,jqXHR]);}else{deferred.rejectWith(callbackContext,[jqXHR,statusText,error]);}// Status-dependent callbacks
jqXHR.statusCode(_statusCode);_statusCode=undefined;if(fireGlobals){globalEventContext.trigger(isSuccess?"ajaxSuccess":"ajaxError",[jqXHR,s,isSuccess?success:error]);}// Complete
completeDeferred.fireWith(callbackContext,[jqXHR,statusText]);if(fireGlobals){globalEventContext.trigger("ajaxComplete",[jqXHR,s]);// Handle the global AJAX counter
if(! --jQuery.active){jQuery.event.trigger("ajaxStop");}}}return jqXHR;},getJSON:function getJSON(url,data,callback){return jQuery.get(url,data,callback,"json");},getScript:function getScript(url,callback){return jQuery.get(url,undefined,callback,"script");}});jQuery.each(["get","post"],function(_i,method){jQuery[method]=function(url,data,callback,type){// Shift arguments if data argument was omitted
if(isFunction(data)){type=type||callback;callback=data;data=undefined;}// The url can be an options object (which then must have .url)
return jQuery.ajax(jQuery.extend({url:url,type:method,dataType:type,data:data,success:callback},jQuery.isPlainObject(url)&&url));};});jQuery.ajaxPrefilter(function(s){var i;for(i in s.headers){if(i.toLowerCase()==="content-type"){s.contentType=s.headers[i]||"";}}});jQuery._evalUrl=function(url,options,doc){return jQuery.ajax({url:url,// Make this explicit, since user can override this through ajaxSetup (#11264)
type:"GET",dataType:"script",cache:true,async:false,global:false,// Only evaluate the response if it is successful (gh-4126)
// dataFilter is not invoked for failure responses, so using it instead
// of the default converter is kludgy but it works.
converters:{"text script":function textScript(){}},dataFilter:function dataFilter(response){jQuery.globalEval(response,options,doc);}});};jQuery.fn.extend({wrapAll:function wrapAll(html){var wrap;if(this[0]){if(isFunction(html)){html=html.call(this[0]);}// The elements to wrap the target around
wrap=jQuery(html,this[0].ownerDocument).eq(0).clone(true);if(this[0].parentNode){wrap.insertBefore(this[0]);}wrap.map(function(){var elem=this;while(elem.firstElementChild){elem=elem.firstElementChild;}return elem;}).append(this);}return this;},wrapInner:function wrapInner(html){if(isFunction(html)){return this.each(function(i){jQuery(this).wrapInner(html.call(this,i));});}return this.each(function(){var self=jQuery(this),contents=self.contents();if(contents.length){contents.wrapAll(html);}else{self.append(html);}});},wrap:function wrap(html){var htmlIsFunction=isFunction(html);return this.each(function(i){jQuery(this).wrapAll(htmlIsFunction?html.call(this,i):html);});},unwrap:function unwrap(selector){this.parent(selector).not("body").each(function(){jQuery(this).replaceWith(this.childNodes);});return this;}});jQuery.expr.pseudos.hidden=function(elem){return!jQuery.expr.pseudos.visible(elem);};jQuery.expr.pseudos.visible=function(elem){return!!(elem.offsetWidth||elem.offsetHeight||elem.getClientRects().length);};jQuery.ajaxSettings.xhr=function(){try{return new window.XMLHttpRequest();}catch(e){}};var xhrSuccessStatus={// File protocol always yields status code 0, assume 200
0:200,// Support: IE <=9 only
// #1450: sometimes IE returns 1223 when it should be 204
1223:204},xhrSupported=jQuery.ajaxSettings.xhr();support.cors=!!xhrSupported&&"withCredentials"in xhrSupported;support.ajax=xhrSupported=!!xhrSupported;jQuery.ajaxTransport(function(options){var _callback,errorCallback;// Cross domain only allowed if supported through XMLHttpRequest
if(support.cors||xhrSupported&&!options.crossDomain){return{send:function send(headers,complete){var i,xhr=options.xhr();xhr.open(options.type,options.url,options.async,options.username,options.password);// Apply custom fields if provided
if(options.xhrFields){for(i in options.xhrFields){xhr[i]=options.xhrFields[i];}}// Override mime type if needed
if(options.mimeType&&xhr.overrideMimeType){xhr.overrideMimeType(options.mimeType);}// X-Requested-With header
// For cross-domain requests, seeing as conditions for a preflight are
// akin to a jigsaw puzzle, we simply never set it to be sure.
// (it can always be set on a per-request basis or even using ajaxSetup)
// For same-domain requests, won't change header if already provided.
if(!options.crossDomain&&!headers["X-Requested-With"]){headers["X-Requested-With"]="XMLHttpRequest";}// Set headers
for(i in headers){xhr.setRequestHeader(i,headers[i]);}// Callback
_callback=function callback(type){return function(){if(_callback){_callback=errorCallback=xhr.onload=xhr.onerror=xhr.onabort=xhr.ontimeout=xhr.onreadystatechange=null;if(type==="abort"){xhr.abort();}else if(type==="error"){// Support: IE <=9 only
// On a manual native abort, IE9 throws
// errors on any property access that is not readyState
if(typeof xhr.status!=="number"){complete(0,"error");}else{complete(// File: protocol always yields status 0; see #8605, #14207
xhr.status,xhr.statusText);}}else{complete(xhrSuccessStatus[xhr.status]||xhr.status,xhr.statusText,// Support: IE <=9 only
// IE9 has no XHR2 but throws on binary (trac-11426)
// For XHR2 non-text, let the caller handle it (gh-2498)
(xhr.responseType||"text")!=="text"||typeof xhr.responseText!=="string"?{binary:xhr.response}:{text:xhr.responseText},xhr.getAllResponseHeaders());}}};};// Listen to events
xhr.onload=_callback();errorCallback=xhr.onerror=xhr.ontimeout=_callback("error");// Support: IE 9 only
// Use onreadystatechange to replace onabort
// to handle uncaught aborts
if(xhr.onabort!==undefined){xhr.onabort=errorCallback;}else{xhr.onreadystatechange=function(){// Check readyState before timeout as it changes
if(xhr.readyState===4){// Allow onerror to be called first,
// but that will not handle a native abort
// Also, save errorCallback to a variable
// as xhr.onerror cannot be accessed
window.setTimeout(function(){if(_callback){errorCallback();}});}};}// Create the abort callback
_callback=_callback("abort");try{// Do send the request (this may raise an exception)
xhr.send(options.hasContent&&options.data||null);}catch(e){// #14683: Only rethrow if this hasn't been notified as an error yet
if(_callback){throw e;}}},abort:function abort(){if(_callback){_callback();}}};}});// Prevent auto-execution of scripts when no explicit dataType was provided (See gh-2432)
jQuery.ajaxPrefilter(function(s){if(s.crossDomain){s.contents.script=false;}});// Install script dataType
jQuery.ajaxSetup({accepts:{script:"text/javascript, application/javascript, "+"application/ecmascript, application/x-ecmascript"},contents:{script:/\b(?:java|ecma)script\b/},converters:{"text script":function textScript(text){jQuery.globalEval(text);return text;}}});// Handle cache's special case and crossDomain
jQuery.ajaxPrefilter("script",function(s){if(s.cache===undefined){s.cache=false;}if(s.crossDomain){s.type="GET";}});// Bind script tag hack transport
jQuery.ajaxTransport("script",function(s){// This transport only deals with cross domain or forced-by-attrs requests
if(s.crossDomain||s.scriptAttrs){var script,_callback2;return{send:function send(_,complete){script=jQuery("<script>").attr(s.scriptAttrs||{}).prop({charset:s.scriptCharset,src:s.url}).on("load error",_callback2=function callback(evt){script.remove();_callback2=null;if(evt){complete(evt.type==="error"?404:200,evt.type);}});// Use native DOM manipulation to avoid our domManip AJAX trickery
document.head.appendChild(script[0]);},abort:function abort(){if(_callback2){_callback2();}}};}});var oldCallbacks=[],rjsonp=/(=)\?(?=&|$)|\?\?/;// Default jsonp settings
jQuery.ajaxSetup({jsonp:"callback",jsonpCallback:function jsonpCallback(){var callback=oldCallbacks.pop()||jQuery.expando+"_"+nonce.guid++;this[callback]=true;return callback;}});// Detect, normalize options and install callbacks for jsonp requests
jQuery.ajaxPrefilter("json jsonp",function(s,originalSettings,jqXHR){var callbackName,overwritten,responseContainer,jsonProp=s.jsonp!==false&&(rjsonp.test(s.url)?"url":typeof s.data==="string"&&(s.contentType||"").indexOf("application/x-www-form-urlencoded")===0&&rjsonp.test(s.data)&&"data");// Handle iff the expected data type is "jsonp" or we have a parameter to set
if(jsonProp||s.dataTypes[0]==="jsonp"){// Get callback name, remembering preexisting value associated with it
callbackName=s.jsonpCallback=isFunction(s.jsonpCallback)?s.jsonpCallback():s.jsonpCallback;// Insert callback into url or form data
if(jsonProp){s[jsonProp]=s[jsonProp].replace(rjsonp,"$1"+callbackName);}else if(s.jsonp!==false){s.url+=(rquery.test(s.url)?"&":"?")+s.jsonp+"="+callbackName;}// Use data converter to retrieve json after script execution
s.converters["script json"]=function(){if(!responseContainer){jQuery.error(callbackName+" was not called");}return responseContainer[0];};// Force json dataType
s.dataTypes[0]="json";// Install callback
overwritten=window[callbackName];window[callbackName]=function(){responseContainer=arguments;};// Clean-up function (fires after converters)
jqXHR.always(function(){// If previous value didn't exist - remove it
if(overwritten===undefined){jQuery(window).removeProp(callbackName);// Otherwise restore preexisting value
}else{window[callbackName]=overwritten;}// Save back as free
if(s[callbackName]){// Make sure that re-using the options doesn't screw things around
s.jsonpCallback=originalSettings.jsonpCallback;// Save the callback name for future use
oldCallbacks.push(callbackName);}// Call if it was a function and we have a response
if(responseContainer&&isFunction(overwritten)){overwritten(responseContainer[0]);}responseContainer=overwritten=undefined;});// Delegate to script
return"script";}});// Support: Safari 8 only
// In Safari 8 documents created via document.implementation.createHTMLDocument
// collapse sibling forms: the second one becomes a child of the first one.
// Because of that, this security measure has to be disabled in Safari 8.
// https://bugs.webkit.org/show_bug.cgi?id=137337
support.createHTMLDocument=function(){var body=document.implementation.createHTMLDocument("").body;body.innerHTML="<form></form><form></form>";return body.childNodes.length===2;}();// Argument "data" should be string of html
// context (optional): If specified, the fragment will be created in this context,
// defaults to document
// keepScripts (optional): If true, will include scripts passed in the html string
jQuery.parseHTML=function(data,context,keepScripts){if(typeof data!=="string"){return[];}if(typeof context==="boolean"){keepScripts=context;context=false;}var base,parsed,scripts;if(!context){// Stop scripts or inline event handlers from being executed immediately
// by using document.implementation
if(support.createHTMLDocument){context=document.implementation.createHTMLDocument("");// Set the base href for the created document
// so any parsed elements with URLs
// are based on the document's URL (gh-2965)
base=context.createElement("base");base.href=document.location.href;context.head.appendChild(base);}else{context=document;}}parsed=rsingleTag.exec(data);scripts=!keepScripts&&[];// Single tag
if(parsed){return[context.createElement(parsed[1])];}parsed=buildFragment([data],context,scripts);if(scripts&&scripts.length){jQuery(scripts).remove();}return jQuery.merge([],parsed.childNodes);};/**
 * Load a url into a page
 */jQuery.fn.load=function(url,params,callback){var selector,type,response,self=this,off=url.indexOf(" ");if(off>-1){selector=stripAndCollapse(url.slice(off));url=url.slice(0,off);}// If it's a function
if(isFunction(params)){// We assume that it's the callback
callback=params;params=undefined;// Otherwise, build a param string
}else if(params&&_typeof(params)==="object"){type="POST";}// If we have elements to modify, make the request
if(self.length>0){jQuery.ajax({url:url,// If "type" variable is undefined, then "GET" method will be used.
// Make value of this field explicit since
// user can override it through ajaxSetup method
type:type||"GET",dataType:"html",data:params}).done(function(responseText){// Save response for use in complete callback
response=arguments;self.html(selector?// If a selector was specified, locate the right elements in a dummy div
// Exclude scripts to avoid IE 'Permission Denied' errors
jQuery("<div>").append(jQuery.parseHTML(responseText)).find(selector):// Otherwise use the full result
responseText);// If the request succeeds, this function gets "data", "status", "jqXHR"
// but they are ignored because response was set above.
// If it fails, this function gets "jqXHR", "status", "error"
}).always(callback&&function(jqXHR,status){self.each(function(){callback.apply(this,response||[jqXHR.responseText,status,jqXHR]);});});}return this;};jQuery.expr.pseudos.animated=function(elem){return jQuery.grep(jQuery.timers,function(fn){return elem===fn.elem;}).length;};jQuery.offset={setOffset:function setOffset(elem,options,i){var curPosition,curLeft,curCSSTop,curTop,curOffset,curCSSLeft,calculatePosition,position=jQuery.css(elem,"position"),curElem=jQuery(elem),props={};// Set position first, in-case top/left are set even on static elem
if(position==="static"){elem.style.position="relative";}curOffset=curElem.offset();curCSSTop=jQuery.css(elem,"top");curCSSLeft=jQuery.css(elem,"left");calculatePosition=(position==="absolute"||position==="fixed")&&(curCSSTop+curCSSLeft).indexOf("auto")>-1;// Need to be able to calculate position if either
// top or left is auto and position is either absolute or fixed
if(calculatePosition){curPosition=curElem.position();curTop=curPosition.top;curLeft=curPosition.left;}else{curTop=parseFloat(curCSSTop)||0;curLeft=parseFloat(curCSSLeft)||0;}if(isFunction(options)){// Use jQuery.extend here to allow modification of coordinates argument (gh-1848)
options=options.call(elem,i,jQuery.extend({},curOffset));}if(options.top!=null){props.top=options.top-curOffset.top+curTop;}if(options.left!=null){props.left=options.left-curOffset.left+curLeft;}if("using"in options){options.using.call(elem,props);}else{if(typeof props.top==="number"){props.top+="px";}if(typeof props.left==="number"){props.left+="px";}curElem.css(props);}}};jQuery.fn.extend({// offset() relates an element's border box to the document origin
offset:function offset(options){// Preserve chaining for setter
if(arguments.length){return options===undefined?this:this.each(function(i){jQuery.offset.setOffset(this,options,i);});}var rect,win,elem=this[0];if(!elem){return;}// Return zeros for disconnected and hidden (display: none) elements (gh-2310)
// Support: IE <=11 only
// Running getBoundingClientRect on a
// disconnected node in IE throws an error
if(!elem.getClientRects().length){return{top:0,left:0};}// Get document-relative position by adding viewport scroll to viewport-relative gBCR
rect=elem.getBoundingClientRect();win=elem.ownerDocument.defaultView;return{top:rect.top+win.pageYOffset,left:rect.left+win.pageXOffset};},// position() relates an element's margin box to its offset parent's padding box
// This corresponds to the behavior of CSS absolute positioning
position:function position(){if(!this[0]){return;}var offsetParent,offset,doc,elem=this[0],parentOffset={top:0,left:0};// position:fixed elements are offset from the viewport, which itself always has zero offset
if(jQuery.css(elem,"position")==="fixed"){// Assume position:fixed implies availability of getBoundingClientRect
offset=elem.getBoundingClientRect();}else{offset=this.offset();// Account for the *real* offset parent, which can be the document or its root element
// when a statically positioned element is identified
doc=elem.ownerDocument;offsetParent=elem.offsetParent||doc.documentElement;while(offsetParent&&(offsetParent===doc.body||offsetParent===doc.documentElement)&&jQuery.css(offsetParent,"position")==="static"){offsetParent=offsetParent.parentNode;}if(offsetParent&&offsetParent!==elem&&offsetParent.nodeType===1){// Incorporate borders into its offset, since they are outside its content origin
parentOffset=jQuery(offsetParent).offset();parentOffset.top+=jQuery.css(offsetParent,"borderTopWidth",true);parentOffset.left+=jQuery.css(offsetParent,"borderLeftWidth",true);}}// Subtract parent offsets and element margins
return{top:offset.top-parentOffset.top-jQuery.css(elem,"marginTop",true),left:offset.left-parentOffset.left-jQuery.css(elem,"marginLeft",true)};},// This method will return documentElement in the following cases:
// 1) For the element inside the iframe without offsetParent, this method will return
//    documentElement of the parent window
// 2) For the hidden or detached element
// 3) For body or html element, i.e. in case of the html node - it will return itself
//
// but those exceptions were never presented as a real life use-cases
// and might be considered as more preferable results.
//
// This logic, however, is not guaranteed and can change at any point in the future
offsetParent:function offsetParent(){return this.map(function(){var offsetParent=this.offsetParent;while(offsetParent&&jQuery.css(offsetParent,"position")==="static"){offsetParent=offsetParent.offsetParent;}return offsetParent||documentElement;});}});// Create scrollLeft and scrollTop methods
jQuery.each({scrollLeft:"pageXOffset",scrollTop:"pageYOffset"},function(method,prop){var top="pageYOffset"===prop;jQuery.fn[method]=function(val){return access(this,function(elem,method,val){// Coalesce documents and windows
var win;if(isWindow(elem)){win=elem;}else if(elem.nodeType===9){win=elem.defaultView;}if(val===undefined){return win?win[prop]:elem[method];}if(win){win.scrollTo(!top?val:win.pageXOffset,top?val:win.pageYOffset);}else{elem[method]=val;}},method,val,arguments.length);};});// Support: Safari <=7 - 9.1, Chrome <=37 - 49
// Add the top/left cssHooks using jQuery.fn.position
// Webkit bug: https://bugs.webkit.org/show_bug.cgi?id=29084
// Blink bug: https://bugs.chromium.org/p/chromium/issues/detail?id=589347
// getComputedStyle returns percent when specified for top/left/bottom/right;
// rather than make the css module depend on the offset module, just check for it here
jQuery.each(["top","left"],function(_i,prop){jQuery.cssHooks[prop]=addGetHookIf(support.pixelPosition,function(elem,computed){if(computed){computed=curCSS(elem,prop);// If curCSS returns percentage, fallback to offset
return rnumnonpx.test(computed)?jQuery(elem).position()[prop]+"px":computed;}});});// Create innerHeight, innerWidth, height, width, outerHeight and outerWidth methods
jQuery.each({Height:"height",Width:"width"},function(name,type){jQuery.each({padding:"inner"+name,content:type,"":"outer"+name},function(defaultExtra,funcName){// Margin is only for outerHeight, outerWidth
jQuery.fn[funcName]=function(margin,value){var chainable=arguments.length&&(defaultExtra||typeof margin!=="boolean"),extra=defaultExtra||(margin===true||value===true?"margin":"border");return access(this,function(elem,type,value){var doc;if(isWindow(elem)){// $( window ).outerWidth/Height return w/h including scrollbars (gh-1729)
return funcName.indexOf("outer")===0?elem["inner"+name]:elem.document.documentElement["client"+name];}// Get document width or height
if(elem.nodeType===9){doc=elem.documentElement;// Either scroll[Width/Height] or offset[Width/Height] or client[Width/Height],
// whichever is greatest
return Math.max(elem.body["scroll"+name],doc["scroll"+name],elem.body["offset"+name],doc["offset"+name],doc["client"+name]);}return value===undefined?// Get width or height on the element, requesting but not forcing parseFloat
jQuery.css(elem,type,extra):// Set width or height on the element
jQuery.style(elem,type,value,extra);},type,chainable?margin:undefined,chainable);};});});jQuery.each(["ajaxStart","ajaxStop","ajaxComplete","ajaxError","ajaxSuccess","ajaxSend"],function(_i,type){jQuery.fn[type]=function(fn){return this.on(type,fn);};});jQuery.fn.extend({bind:function bind(types,data,fn){return this.on(types,null,data,fn);},unbind:function unbind(types,fn){return this.off(types,null,fn);},delegate:function delegate(selector,types,data,fn){return this.on(types,selector,data,fn);},undelegate:function undelegate(selector,types,fn){// ( namespace ) or ( selector, types [, fn] )
return arguments.length===1?this.off(selector,"**"):this.off(types,selector||"**",fn);},hover:function hover(fnOver,fnOut){return this.mouseenter(fnOver).mouseleave(fnOut||fnOver);}});jQuery.each(("blur focus focusin focusout resize scroll click dblclick "+"mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave "+"change select submit keydown keypress keyup contextmenu").split(" "),function(_i,name){// Handle event binding
jQuery.fn[name]=function(data,fn){return arguments.length>0?this.on(name,null,data,fn):this.trigger(name);};});// Support: Android <=4.0 only
// Make sure we trim BOM and NBSP
var rtrim=/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g;// Bind a function to a context, optionally partially applying any
// arguments.
// jQuery.proxy is deprecated to promote standards (specifically Function#bind)
// However, it is not slated for removal any time soon
jQuery.proxy=function(fn,context){var tmp,args,proxy;if(typeof context==="string"){tmp=fn[context];context=fn;fn=tmp;}// Quick check to determine if target is callable, in the spec
// this throws a TypeError, but we will just return undefined.
if(!isFunction(fn)){return undefined;}// Simulated bind
args=_slice.call(arguments,2);proxy=function proxy(){return fn.apply(context||this,args.concat(_slice.call(arguments)));};// Set the guid of unique handler to the same of original handler, so it can be removed
proxy.guid=fn.guid=fn.guid||jQuery.guid++;return proxy;};jQuery.holdReady=function(hold){if(hold){jQuery.readyWait++;}else{jQuery.ready(true);}};jQuery.isArray=Array.isArray;jQuery.parseJSON=JSON.parse;jQuery.nodeName=nodeName;jQuery.isFunction=isFunction;jQuery.isWindow=isWindow;jQuery.camelCase=camelCase;jQuery.type=toType;jQuery.now=Date.now;jQuery.isNumeric=function(obj){// As of jQuery 3.0, isNumeric is limited to
// strings and numbers (primitives or objects)
// that can be coerced to finite numbers (gh-2662)
var type=jQuery.type(obj);return(type==="number"||type==="string")&&// parseFloat NaNs numeric-cast false positives ("")
// ...but misinterprets leading-number strings, particularly hex literals ("0x...")
// subtraction forces infinities to NaN
!isNaN(obj-parseFloat(obj));};jQuery.trim=function(text){return text==null?"":(text+"").replace(rtrim,"");};// Register as a named AMD module, since jQuery can be concatenated with other
// files that may use define, but not via a proper concatenation script that
// understands anonymous AMD modules. A named AMD is safest and most robust
// way to register. Lowercase jquery is used because AMD module names are
// derived from file names, and jQuery is normally delivered in a lowercase
// file name. Do this after creating the global so that if an AMD module wants
// to call noConflict to hide this version of jQuery, it will work.
// Note that for maximum portability, libraries that are not jQuery should
// declare themselves as anonymous modules, and avoid setting a global if an
// AMD loader is present. jQuery is a special case. For more information, see
// https://github.com/jrburke/requirejs/wiki/Updating-existing-libraries#wiki-anon
if(typeof define==="function"&&define.amd){define("jquery",[],function(){return jQuery;});}var// Map over jQuery in case of overwrite
_jQuery=window.jQuery,// Map over the $ in case of overwrite
_$=window.$;jQuery.noConflict=function(deep){if(window.$===jQuery){window.$=_$;}if(deep&&window.jQuery===jQuery){window.jQuery=_jQuery;}return jQuery;};// Expose jQuery and $ identifiers, even in AMD
// (#7102#comment:10, https://github.com/jquery/jquery/pull/557)
// and CommonJS for browser emulators (#13566)
if(typeof noGlobal==="undefined"){window.jQuery=window.$=jQuery;}return jQuery;});/**
 * bxSlider v4.2.1d
 * Copyright 2013-2017 Steven Wanderski
 * Written while drinking Belgian ales and listening to jazz
 * Licensed under MIT (http://opensource.org/licenses/MIT)
 */;(function($){var defaults={// GENERAL
mode:'horizontal',slideSelector:'',infiniteLoop:true,hideControlOnEnd:false,speed:500,easing:null,slideMargin:0,startSlide:0,randomStart:false,captions:false,ticker:false,tickerHover:false,adaptiveHeight:false,adaptiveHeightSpeed:500,video:false,useCSS:true,preloadImages:'visible',responsive:true,slideZIndex:50,wrapperClass:'bx-wrapper',// TOUCH
touchEnabled:true,swipeThreshold:50,oneToOneTouch:true,preventDefaultSwipeX:true,preventDefaultSwipeY:false,// ACCESSIBILITY
ariaLive:true,ariaHidden:true,// KEYBOARD
keyboardEnabled:false,// PAGER
pager:true,pagerType:'full',pagerShortSeparator:' / ',pagerSelector:null,buildPager:null,pagerCustom:null,// CONTROLS
controls:true,nextText:'Next',prevText:'Prev',nextSelector:null,prevSelector:null,autoControls:false,startText:'Start',stopText:'Stop',autoControlsCombine:false,autoControlsSelector:null,// AUTO
auto:false,pause:4000,autoStart:true,autoDirection:'next',stopAutoOnClick:false,autoHover:false,autoDelay:0,autoSlideForOnePage:false,// CAROUSEL
minSlides:1,maxSlides:1,moveSlides:0,slideWidth:0,shrinkItems:false,// CALLBACKS
onSliderLoad:function onSliderLoad(){return true;},onSlideBefore:function onSlideBefore(){return true;},onSlideAfter:function onSlideAfter(){return true;},onSlideNext:function onSlideNext(){return true;},onSlidePrev:function onSlidePrev(){return true;},onSliderResize:function onSliderResize(){return true;},onAutoChange:function onAutoChange(){return true;}//calls when auto slides starts and stops
};$.fn.bxSlider=function(options){if(this.length===0){return this;}// support multiple elements
if(this.length>1){this.each(function(){$(this).bxSlider(options);});return this;}// create a namespace to be used throughout the plugin
var slider={},// set a reference to our slider element
el=this,// get the original window dimens (thanks a lot IE)
windowWidth=$(window).width(),windowHeight=$(window).height();// Return if slider is already initialized
if($(el).data('bxSlider')){return;}/**
     * ===================================================================================
     * = PRIVATE FUNCTIONS
     * ===================================================================================
     */ /**
     * Initializes namespace settings to be used throughout plugin
     */var init=function init(){// Return if slider is already initialized
if($(el).data('bxSlider')){return;}// merge user-supplied options with the defaults
slider.settings=$.extend({},defaults,options);// parse slideWidth setting
slider.settings.slideWidth=parseInt(slider.settings.slideWidth);// store the original children
slider.children=el.children(slider.settings.slideSelector);// check if actual number of slides is less than minSlides / maxSlides
if(slider.children.length<slider.settings.minSlides){slider.settings.minSlides=slider.children.length;}if(slider.children.length<slider.settings.maxSlides){slider.settings.maxSlides=slider.children.length;}// if random start, set the startSlide setting to random number
if(slider.settings.randomStart){slider.settings.startSlide=Math.floor(Math.random()*slider.children.length);}// store active slide information
slider.active={index:slider.settings.startSlide};// store if the slider is in carousel mode (displaying / moving multiple slides)
slider.carousel=slider.settings.minSlides>1||slider.settings.maxSlides>1;// if carousel, force preloadImages = 'all'
if(slider.carousel){slider.settings.preloadImages='all';}// calculate the min / max width thresholds based on min / max number of slides
// used to setup and update carousel slides dimensions
slider.minThreshold=slider.settings.minSlides*slider.settings.slideWidth+(slider.settings.minSlides-1)*slider.settings.slideMargin;slider.maxThreshold=slider.settings.maxSlides*slider.settings.slideWidth+(slider.settings.maxSlides-1)*slider.settings.slideMargin;// store the current state of the slider (if currently animating, working is true)
slider.working=false;// initialize the controls object
slider.controls={};// initialize an auto interval
slider.interval=null;// determine which property to use for transitions
slider.animProp=slider.settings.mode==='vertical'?'top':'left';// determine if hardware acceleration can be used
slider.usingCSS=slider.settings.useCSS&&slider.settings.mode!=='fade'&&function(){// create our test div element
var div=document.createElement('div'),// css transition properties
props=['WebkitPerspective','MozPerspective','OPerspective','msPerspective'];// test for each property
for(var i=0;i<props.length;i++){if(div.style[props[i]]!==undefined){slider.cssPrefix=props[i].replace('Perspective','').toLowerCase();slider.animProp='-'+slider.cssPrefix+'-transform';return true;}}return false;}();// if vertical mode always make maxSlides and minSlides equal
if(slider.settings.mode==='vertical'){slider.settings.maxSlides=slider.settings.minSlides;}// save original style data
el.data('origStyle',el.attr('style'));el.children(slider.settings.slideSelector).each(function(){$(this).data('origStyle',$(this).attr('style'));});// perform all DOM / CSS modifications
setup();};/**
     * Performs all DOM and CSS modifications
     */var setup=function setup(){var preloadSelector=slider.children.eq(slider.settings.startSlide);// set the default preload selector (visible)
// wrap el in a wrapper
el.wrap('<div class="'+slider.settings.wrapperClass+'"><div class="bx-viewport"></div></div>');// store a namespace reference to .bx-viewport
slider.viewport=el.parent();// add aria-live if the setting is enabled and ticker mode is disabled
if(slider.settings.ariaLive&&!slider.settings.ticker){slider.viewport.attr('aria-live','polite');}// add a loading div to display while images are loading
slider.loader=$('<div class="bx-loading" />');slider.viewport.prepend(slider.loader);// set el to a massive width, to hold any needed slides
// also strip any margin and padding from el
el.css({width:slider.settings.mode==='horizontal'?slider.children.length*1000+215+'%':'auto',position:'relative'});// if using CSS, add the easing property
if(slider.usingCSS&&slider.settings.easing){el.css('-'+slider.cssPrefix+'-transition-timing-function',slider.settings.easing);// if not using CSS and no easing value was supplied, use the default JS animation easing (swing)
}else if(!slider.settings.easing){slider.settings.easing='swing';}// make modifications to the viewport (.bx-viewport)
slider.viewport.css({width:'100%',overflow:'hidden',position:'relative'});slider.viewport.parent().css({maxWidth:getViewportMaxWidth()});// apply css to all slider children
slider.children.css({// the float attribute is a reserved word in compressors like YUI compressor and need to be quoted #48
'float':slider.settings.mode==='horizontal'?'left':'none',listStyle:'none',position:'relative'});// apply the calculated width after the float is applied to prevent scrollbar interference
slider.children.css('width',getSlideWidth());// if slideMargin is supplied, add the css
if(slider.settings.mode==='horizontal'&&slider.settings.slideMargin>0){slider.children.css('marginRight',slider.settings.slideMargin);}if(slider.settings.mode==='vertical'&&slider.settings.slideMargin>0){slider.children.css('marginBottom',slider.settings.slideMargin);}// if "fade" mode, add positioning and z-index CSS
if(slider.settings.mode==='fade'){slider.children.css({position:'absolute',zIndex:0,display:'none'});// prepare the z-index on the showing element
slider.children.eq(slider.settings.startSlide).css({zIndex:slider.settings.slideZIndex,display:'block'});}// create an element to contain all slider controls (pager, start / stop, etc)
slider.controls.el=$('<div class="bx-controls" />');// if captions are requested, add them
if(slider.settings.captions){appendCaptions();}// check if startSlide is last slide
slider.active.last=slider.settings.startSlide===getPagerQty()-1;// if video is true, set up the fitVids plugin
if(slider.settings.video){el.fitVids();}//preloadImages
if(slider.settings.preloadImages==='none'){preloadSelector=null;}else if(slider.settings.preloadImages==='all'||slider.settings.ticker){preloadSelector=slider.children;}// only check for control addition if not in "ticker" mode
if(!slider.settings.ticker){// if controls are requested, add them
if(slider.settings.controls){appendControls();}// if auto is true, and auto controls are requested, add them
if(slider.settings.auto&&slider.settings.autoControls){appendControlsAuto();}// if pager is requested, add it
if(slider.settings.pager){appendPager();}// if any control option is requested, add the controls wrapper
if(slider.settings.controls||slider.settings.autoControls||slider.settings.pager){slider.viewport.after(slider.controls.el);}// if ticker mode, do not allow a pager
}else{slider.settings.pager=false;}if(preloadSelector===null){start();}else{loadElements(preloadSelector,start);}};var loadElements=function loadElements(selector,callback){var total=selector.find('img:not([src=""]), iframe').length,count=0;if(total===0){callback();return;}selector.find('img:not([src=""]), iframe').each(function(){$(this).one('load error',function(){if(++count===total){callback();}}).each(function(){if(this.complete||this.src==''){$(this).trigger('load');}});});};/**
     * Start the slider
     */var start=function start(){// if infinite loop, prepare additional slides
if(slider.settings.infiniteLoop&&slider.settings.mode!=='fade'&&!slider.settings.ticker){var slice=slider.settings.mode==='vertical'?slider.settings.minSlides:slider.settings.maxSlides,sliceAppend=slider.children.slice(0,slice).clone(true).addClass('bx-clone'),slicePrepend=slider.children.slice(-slice).clone(true).addClass('bx-clone');if(slider.settings.ariaHidden){sliceAppend.attr('aria-hidden',true);slicePrepend.attr('aria-hidden',true);}el.append(sliceAppend).prepend(slicePrepend);}// remove the loading DOM element
slider.loader.remove();// set the left / top position of "el"
setSlidePosition();// if "vertical" mode, always use adaptiveHeight to prevent odd behavior
if(slider.settings.mode==='vertical'){slider.settings.adaptiveHeight=true;}// set the viewport height
slider.viewport.height(getViewportHeight());// make sure everything is positioned just right (same as a window resize)
el.redrawSlider();// onSliderLoad callback
slider.settings.onSliderLoad.call(el,slider.active.index);// slider has been fully initialized
slider.initialized=true;// add the resize call to the window
if(slider.settings.responsive){$(window).on('resize',resizeWindow);}// if auto is true and has more than 1 page, start the show
if(slider.settings.auto&&slider.settings.autoStart&&(getPagerQty()>1||slider.settings.autoSlideForOnePage)){initAuto();}// if ticker is true, start the ticker
if(slider.settings.ticker){initTicker();}// if pager is requested, make the appropriate pager link active
if(slider.settings.pager){updatePagerActive(slider.settings.startSlide);}// check for any updates to the controls (like hideControlOnEnd updates)
if(slider.settings.controls){updateDirectionControls();}// if touchEnabled is true, setup the touch events
if(slider.settings.touchEnabled&&!slider.settings.ticker){initTouch();}// if keyboardEnabled is true, setup the keyboard events
if(slider.settings.keyboardEnabled&&!slider.settings.ticker){$(document).keydown(keyPress);}};/**
     * Returns the calculated height of the viewport, used to determine either adaptiveHeight or the maxHeight value
     */var getViewportHeight=function getViewportHeight(){var height=0;// first determine which children (slides) should be used in our height calculation
var children=$();// if mode is not "vertical" and adaptiveHeight is false, include all children
if(slider.settings.mode!=='vertical'&&!slider.settings.adaptiveHeight){children=slider.children;}else{// if not carousel, return the single active child
if(!slider.carousel){children=slider.children.eq(slider.active.index);// if carousel, return a slice of children
}else{// get the individual slide index
var currentIndex=slider.settings.moveSlides===1?slider.active.index:slider.active.index*getMoveBy();// add the current slide to the children
children=slider.children.eq(currentIndex);// cycle through the remaining "showing" slides
for(i=1;i<=slider.settings.maxSlides-1;i++){// if looped back to the start
if(currentIndex+i>=slider.children.length){children=children.add(slider.children.eq(i-1));}else{children=children.add(slider.children.eq(currentIndex+i));}}}}// if "vertical" mode, calculate the sum of the heights of the children
if(slider.settings.mode==='vertical'){children.each(function(index){height+=$(this).outerHeight();});// add user-supplied margins
if(slider.settings.slideMargin>0){height+=slider.settings.slideMargin*(slider.settings.minSlides-1);}// if not "vertical" mode, calculate the max height of the children
}else{height=Math.max.apply(Math,children.map(function(){return $(this).outerHeight(false);}).get());}if(slider.viewport.css('box-sizing')==='border-box'){height+=parseFloat(slider.viewport.css('padding-top'))+parseFloat(slider.viewport.css('padding-bottom'))+parseFloat(slider.viewport.css('border-top-width'))+parseFloat(slider.viewport.css('border-bottom-width'));}else if(slider.viewport.css('box-sizing')==='padding-box'){height+=parseFloat(slider.viewport.css('padding-top'))+parseFloat(slider.viewport.css('padding-bottom'));}return height;};/**
     * Returns the calculated width to be used for the outer wrapper / viewport
     */var getViewportMaxWidth=function getViewportMaxWidth(){var width='100%';if(slider.settings.slideWidth>0){if(slider.settings.mode==='horizontal'){width=slider.settings.maxSlides*slider.settings.slideWidth+(slider.settings.maxSlides-1)*slider.settings.slideMargin;}else{width=slider.settings.slideWidth;}}return width;};/**
     * Returns the calculated width to be applied to each slide
     */var getSlideWidth=function getSlideWidth(){var newElWidth=slider.settings.slideWidth,// start with any user-supplied slide width
wrapWidth=slider.viewport.width();// get the current viewport width
// if slide width was not supplied, or is larger than the viewport use the viewport width
if(slider.settings.slideWidth===0||slider.settings.slideWidth>wrapWidth&&!slider.carousel||slider.settings.mode==='vertical'){newElWidth=wrapWidth;// if carousel, use the thresholds to determine the width
}else if(slider.settings.maxSlides>1&&slider.settings.mode==='horizontal'){if(wrapWidth>slider.maxThreshold){return newElWidth;}else if(wrapWidth<slider.minThreshold){newElWidth=(wrapWidth-slider.settings.slideMargin*(slider.settings.minSlides-1))/slider.settings.minSlides;}else if(slider.settings.shrinkItems){newElWidth=Math.floor((wrapWidth+slider.settings.slideMargin)/Math.ceil((wrapWidth+slider.settings.slideMargin)/(newElWidth+slider.settings.slideMargin))-slider.settings.slideMargin);}}return newElWidth;};/**
     * Returns the number of slides currently visible in the viewport (includes partially visible slides)
     */var getNumberSlidesShowing=function getNumberSlidesShowing(){var slidesShowing=1,childWidth=null;if(slider.settings.mode==='horizontal'&&slider.settings.slideWidth>0){// if viewport is smaller than minThreshold, return minSlides
if(slider.viewport.width()<slider.minThreshold){slidesShowing=slider.settings.minSlides;// if viewport is larger than maxThreshold, return maxSlides
}else if(slider.viewport.width()>slider.maxThreshold){slidesShowing=slider.settings.maxSlides;// if viewport is between min / max thresholds, divide viewport width by first child width
}else{childWidth=slider.children.first().width()+slider.settings.slideMargin;slidesShowing=Math.floor((slider.viewport.width()+slider.settings.slideMargin)/childWidth)||1;}// if "vertical" mode, slides showing will always be minSlides
}else if(slider.settings.mode==='vertical'){slidesShowing=slider.settings.minSlides;}return slidesShowing;};/**
     * Returns the number of pages (one full viewport of slides is one "page")
     */var getPagerQty=function getPagerQty(){var pagerQty=0,breakPoint=0,counter=0;// if moveSlides is specified by the user
if(slider.settings.moveSlides>0){if(slider.settings.infiniteLoop){pagerQty=Math.ceil(slider.children.length/getMoveBy());}else{// when breakpoint goes above children length, counter is the number of pages
while(breakPoint<slider.children.length){++pagerQty;breakPoint=counter+getNumberSlidesShowing();counter+=slider.settings.moveSlides<=getNumberSlidesShowing()?slider.settings.moveSlides:getNumberSlidesShowing();}return counter;}// if moveSlides is 0 (auto) divide children length by sides showing, then round up
}else{pagerQty=Math.ceil(slider.children.length/getNumberSlidesShowing());}return pagerQty;};/**
     * Returns the number of individual slides by which to shift the slider
     */var getMoveBy=function getMoveBy(){// if moveSlides was set by the user and moveSlides is less than number of slides showing
if(slider.settings.moveSlides>0&&slider.settings.moveSlides<=getNumberSlidesShowing()){return slider.settings.moveSlides;}// if moveSlides is 0 (auto)
return getNumberSlidesShowing();};/**
     * Sets the slider's (el) left or top position
     */var setSlidePosition=function setSlidePosition(){var position,lastChild,lastShowingIndex;// if last slide, not infinite loop, and number of children is larger than specified maxSlides
if(slider.children.length>slider.settings.maxSlides&&slider.active.last&&!slider.settings.infiniteLoop){if(slider.settings.mode==='horizontal'){// get the last child's position
lastChild=slider.children.last();position=lastChild.position();// set the left position
setPositionProperty(-(position.left-(slider.viewport.width()-lastChild.outerWidth())),'reset',0);}else if(slider.settings.mode==='vertical'){// get the last showing index's position
lastShowingIndex=slider.children.length-slider.settings.minSlides;position=slider.children.eq(lastShowingIndex).position();// set the top position
setPositionProperty(-position.top,'reset',0);}// if not last slide
}else{// get the position of the first showing slide
position=slider.children.eq(slider.active.index*getMoveBy()).position();// check for last slide
if(slider.active.index===getPagerQty()-1){slider.active.last=true;}// set the respective position
if(position!==undefined){if(slider.settings.mode==='horizontal'){setPositionProperty(-position.left,'reset',0);}else if(slider.settings.mode==='vertical'){setPositionProperty(-position.top,'reset',0);}}}};/**
     * Sets the el's animating property position (which in turn will sometimes animate el).
     * If using CSS, sets the transform property. If not using CSS, sets the top / left property.
     *
     * @param value (int)
     *  - the animating property's value
     *
     * @param type (string) 'slide', 'reset', 'ticker'
     *  - the type of instance for which the function is being
     *
     * @param duration (int)
     *  - the amount of time (in ms) the transition should occupy
     *
     * @param params (array) optional
     *  - an optional parameter containing any variables that need to be passed in
     */var setPositionProperty=function setPositionProperty(value,type,duration,params){var animateObj,propValue;// use CSS transform
if(slider.usingCSS){// determine the translate3d value
propValue=slider.settings.mode==='vertical'?'translate3d(0, '+value+'px, 0)':'translate3d('+value+'px, 0, 0)';// add the CSS transition-duration
el.css('-'+slider.cssPrefix+'-transition-duration',duration/1000+'s');if(type==='slide'){// set the property value
el.css(slider.animProp,propValue);if(duration!==0){// add a callback method - executes when CSS transition completes
el.on('transitionend webkitTransitionEnd oTransitionEnd MSTransitionEnd',function(e){//make sure it's the correct one
if(!$(e.target).is(el)){return;}// remove the callback
el.off('transitionend webkitTransitionEnd oTransitionEnd MSTransitionEnd');updateAfterSlideTransition();});}else{//duration = 0
updateAfterSlideTransition();}}else if(type==='reset'){el.css(slider.animProp,propValue);}else if(type==='ticker'){// make the transition use 'linear'
el.css('-'+slider.cssPrefix+'-transition-timing-function','linear');el.css(slider.animProp,propValue);if(duration!==0){el.on('transitionend webkitTransitionEnd oTransitionEnd MSTransitionEnd',function(e){//make sure it's the correct one
if(!$(e.target).is(el)){return;}// remove the callback
el.off('transitionend webkitTransitionEnd oTransitionEnd MSTransitionEnd');// reset the position
setPositionProperty(params.resetValue,'reset',0);// start the loop again
tickerLoop();});}else{//duration = 0
setPositionProperty(params.resetValue,'reset',0);tickerLoop();}}// use JS animate
}else{animateObj={};animateObj[slider.animProp]=value;if(type==='slide'){el.animate(animateObj,duration,slider.settings.easing,function(){updateAfterSlideTransition();});}else if(type==='reset'){el.css(slider.animProp,value);}else if(type==='ticker'){el.animate(animateObj,duration,'linear',function(){setPositionProperty(params.resetValue,'reset',0);// run the recursive loop after animation
tickerLoop();});}}};/**
     * Populates the pager with proper amount of pages
     */var populatePager=function populatePager(){var pagerHtml='',linkContent='',pagerQty=getPagerQty();// loop through each pager item
for(var i=0;i<pagerQty;i++){linkContent='';// if a buildPager function is supplied, use it to get pager link value, else use index + 1
if(slider.settings.buildPager&&$.isFunction(slider.settings.buildPager)||slider.settings.pagerCustom){linkContent=slider.settings.buildPager(i);slider.pagerEl.addClass('bx-custom-pager');}else{linkContent=i+1;slider.pagerEl.addClass('bx-default-pager');}// var linkContent = slider.settings.buildPager && $.isFunction(slider.settings.buildPager) ? slider.settings.buildPager(i) : i + 1;
// add the markup to the string
pagerHtml+='<div class="bx-pager-item"><a href="" data-slide-index="'+i+'" class="bx-pager-link">'+linkContent+'</a></div>';}// populate the pager element with pager links
slider.pagerEl.html(pagerHtml);};/**
     * Appends the pager to the controls element
     */var appendPager=function appendPager(){if(!slider.settings.pagerCustom){// create the pager DOM element
slider.pagerEl=$('<div class="bx-pager" />');// if a pager selector was supplied, populate it with the pager
if(slider.settings.pagerSelector){$(slider.settings.pagerSelector).html(slider.pagerEl);// if no pager selector was supplied, add it after the wrapper
}else{slider.controls.el.addClass('bx-has-pager').append(slider.pagerEl);}// populate the pager
populatePager();}else{slider.pagerEl=$(slider.settings.pagerCustom);}// assign the pager click binding
slider.pagerEl.on('click touchend','a',clickPagerBind);};/**
     * Appends prev / next controls to the controls element
     */var appendControls=function appendControls(){slider.controls.next=$('<a class="bx-next" href="">'+slider.settings.nextText+'</a>');slider.controls.prev=$('<a class="bx-prev" href="">'+slider.settings.prevText+'</a>');// add click actions to the controls
slider.controls.next.on('click touchend',clickNextBind);slider.controls.prev.on('click touchend',clickPrevBind);// if nextSelector was supplied, populate it
if(slider.settings.nextSelector){$(slider.settings.nextSelector).append(slider.controls.next);}// if prevSelector was supplied, populate it
if(slider.settings.prevSelector){$(slider.settings.prevSelector).append(slider.controls.prev);}// if no custom selectors were supplied
if(!slider.settings.nextSelector&&!slider.settings.prevSelector){// add the controls to the DOM
slider.controls.directionEl=$('<div class="bx-controls-direction" />');// add the control elements to the directionEl
slider.controls.directionEl.append(slider.controls.prev).append(slider.controls.next);// slider.viewport.append(slider.controls.directionEl);
slider.controls.el.addClass('bx-has-controls-direction').append(slider.controls.directionEl);}};/**
     * Appends start / stop auto controls to the controls element
     */var appendControlsAuto=function appendControlsAuto(){slider.controls.start=$('<div class="bx-controls-auto-item"><a class="bx-start" href="">'+slider.settings.startText+'</a></div>');slider.controls.stop=$('<div class="bx-controls-auto-item"><a class="bx-stop" href="">'+slider.settings.stopText+'</a></div>');// add the controls to the DOM
slider.controls.autoEl=$('<div class="bx-controls-auto" />');// on click actions to the controls
slider.controls.autoEl.on('click','.bx-start',clickStartBind);slider.controls.autoEl.on('click','.bx-stop',clickStopBind);// if autoControlsCombine, insert only the "start" control
if(slider.settings.autoControlsCombine){slider.controls.autoEl.append(slider.controls.start);// if autoControlsCombine is false, insert both controls
}else{slider.controls.autoEl.append(slider.controls.start).append(slider.controls.stop);}// if auto controls selector was supplied, populate it with the controls
if(slider.settings.autoControlsSelector){$(slider.settings.autoControlsSelector).html(slider.controls.autoEl);// if auto controls selector was not supplied, add it after the wrapper
}else{slider.controls.el.addClass('bx-has-controls-auto').append(slider.controls.autoEl);}// update the auto controls
updateAutoControls(slider.settings.autoStart?'stop':'start');};/**
     * Appends image captions to the DOM
     */var appendCaptions=function appendCaptions(){// cycle through each child
slider.children.each(function(index){// get the image title attribute
var title=$(this).find('img:first').attr('title');// append the caption
if(title!==undefined&&(''+title).length){$(this).append('<div class="bx-caption"><span>'+title+'</span></div>');}});};/**
     * Click next binding
     *
     * @param e (event)
     *  - DOM event object
     */var clickNextBind=function clickNextBind(e){e.preventDefault();if(slider.controls.el.hasClass('disabled')){return;}// if auto show is running, stop it
if(slider.settings.auto&&slider.settings.stopAutoOnClick){el.stopAuto();}el.goToNextSlide();};/**
     * Click prev binding
     *
     * @param e (event)
     *  - DOM event object
     */var clickPrevBind=function clickPrevBind(e){e.preventDefault();if(slider.controls.el.hasClass('disabled')){return;}// if auto show is running, stop it
if(slider.settings.auto&&slider.settings.stopAutoOnClick){el.stopAuto();}el.goToPrevSlide();};/**
     * Click start binding
     *
     * @param e (event)
     *  - DOM event object
     */var clickStartBind=function clickStartBind(e){el.startAuto();e.preventDefault();};/**
     * Click stop binding
     *
     * @param e (event)
     *  - DOM event object
     */var clickStopBind=function clickStopBind(e){el.stopAuto();e.preventDefault();};/**
     * Click pager binding
     *
     * @param e (event)
     *  - DOM event object
     */var clickPagerBind=function clickPagerBind(e){var pagerLink,pagerIndex;e.preventDefault();if(slider.controls.el.hasClass('disabled')){return;}// if auto show is running, stop it
if(slider.settings.auto&&slider.settings.stopAutoOnClick){el.stopAuto();}pagerLink=$(e.currentTarget);if(pagerLink.attr('data-slide-index')!==undefined){pagerIndex=parseInt(pagerLink.attr('data-slide-index'));// if clicked pager link is not active, continue with the goToSlide call
if(pagerIndex!==slider.active.index){el.goToSlide(pagerIndex);}}};/**
     * Updates the pager links with an active class
     *
     * @param slideIndex (int)
     *  - index of slide to make active
     */var updatePagerActive=function updatePagerActive(slideIndex){// if "short" pager type
var len=slider.children.length;// nb of children
if(slider.settings.pagerType==='short'){if(slider.settings.maxSlides>1){len=Math.ceil(slider.children.length/slider.settings.maxSlides);}slider.pagerEl.html(slideIndex+1+slider.settings.pagerShortSeparator+len);return;}// remove all pager active classes
slider.pagerEl.find('a').removeClass('active');// apply the active class for all pagers
slider.pagerEl.each(function(i,el){$(el).find('a').eq(slideIndex).addClass('active');});};/**
     * Performs needed actions after a slide transition
     */var updateAfterSlideTransition=function updateAfterSlideTransition(){// if infinite loop is true
if(slider.settings.infiniteLoop){var position='';// first slide
if(slider.active.index===0){// set the new position
position=slider.children.eq(0).position();// carousel, last slide
}else if(slider.active.index===getPagerQty()-1&&slider.carousel){position=slider.children.eq((getPagerQty()-1)*getMoveBy()).position();// last slide
}else if(slider.active.index===slider.children.length-1){position=slider.children.eq(slider.children.length-1).position();}if(position){if(slider.settings.mode==='horizontal'){setPositionProperty(-position.left,'reset',0);}else if(slider.settings.mode==='vertical'){setPositionProperty(-position.top,'reset',0);}}}// declare that the transition is complete
slider.working=false;// onSlideAfter callback
slider.settings.onSlideAfter.call(el,slider.children.eq(slider.active.index),slider.oldIndex,slider.active.index);};/**
     * Updates the auto controls state (either active, or combined switch)
     *
     * @param state (string) "start", "stop"
     *  - the new state of the auto show
     */var updateAutoControls=function updateAutoControls(state){// if autoControlsCombine is true, replace the current control with the new state
if(slider.settings.autoControlsCombine){slider.controls.autoEl.html(slider.controls[state]);// if autoControlsCombine is false, apply the "active" class to the appropriate control
}else{slider.controls.autoEl.find('a').removeClass('active');slider.controls.autoEl.find('a:not(.bx-'+state+')').addClass('active');}};/**
     * Updates the direction controls (checks if either should be hidden)
     */var updateDirectionControls=function updateDirectionControls(){if(getPagerQty()===1){slider.controls.prev.addClass('disabled');slider.controls.next.addClass('disabled');}else if(!slider.settings.infiniteLoop&&slider.settings.hideControlOnEnd){// if first slide
if(slider.active.index===0){slider.controls.prev.addClass('disabled');slider.controls.next.removeClass('disabled');// if last slide
}else if(slider.active.index===getPagerQty()-1){slider.controls.next.addClass('disabled');slider.controls.prev.removeClass('disabled');// if any slide in the middle
}else{slider.controls.prev.removeClass('disabled');slider.controls.next.removeClass('disabled');}}};/* auto start and stop functions */var windowFocusHandler=function windowFocusHandler(){el.startAuto();};var windowBlurHandler=function windowBlurHandler(){el.stopAuto();};/**
     * Initializes the auto process
     */var initAuto=function initAuto(){// if autoDelay was supplied, launch the auto show using a setTimeout() call
if(slider.settings.autoDelay>0){setTimeout(el.startAuto,slider.settings.autoDelay);// if autoDelay was not supplied, start the auto show normally
}else{el.startAuto();//add focus and blur events to ensure its running if timeout gets paused
$(window).focus(windowFocusHandler).blur(windowBlurHandler);}// if autoHover is requested
if(slider.settings.autoHover){// on el hover
el.hover(function(){// if the auto show is currently playing (has an active interval)
if(slider.interval){// stop the auto show and pass true argument which will prevent control update
el.stopAuto(true);// create a new autoPaused value which will be used by the relative "mouseout" event
slider.autoPaused=true;}},function(){// if the autoPaused value was created be the prior "mouseover" event
if(slider.autoPaused){// start the auto show and pass true argument which will prevent control update
el.startAuto(true);// reset the autoPaused value
slider.autoPaused=null;}});}};/**
     * Initializes the ticker process
     */var initTicker=function initTicker(){var startPosition=0,position,transform,value,idx,ratio,property,newSpeed,totalDimens;// if autoDirection is "next", append a clone of the entire slider
if(slider.settings.autoDirection==='next'){el.append(slider.children.clone().addClass('bx-clone'));// if autoDirection is "prev", prepend a clone of the entire slider, and set the left position
}else{el.prepend(slider.children.clone().addClass('bx-clone'));position=slider.children.first().position();startPosition=slider.settings.mode==='horizontal'?-position.left:-position.top;}setPositionProperty(startPosition,'reset',0);// do not allow controls in ticker mode
slider.settings.pager=false;slider.settings.controls=false;slider.settings.autoControls=false;// if autoHover is requested
if(slider.settings.tickerHover){if(slider.usingCSS){idx=slider.settings.mode==='horizontal'?4:5;slider.viewport.hover(function(){transform=el.css('-'+slider.cssPrefix+'-transform');value=parseFloat(transform.split(',')[idx]);setPositionProperty(value,'reset',0);},function(){totalDimens=0;slider.children.each(function(index){totalDimens+=slider.settings.mode==='horizontal'?$(this).outerWidth(true):$(this).outerHeight(true);});// calculate the speed ratio (used to determine the new speed to finish the paused animation)
ratio=slider.settings.speed/totalDimens;// determine which property to use
property=slider.settings.mode==='horizontal'?'left':'top';// calculate the new speed
newSpeed=ratio*(totalDimens-Math.abs(parseInt(value)));tickerLoop(newSpeed);});}else{// on el hover
slider.viewport.hover(function(){el.stop();},function(){// calculate the total width of children (used to calculate the speed ratio)
totalDimens=0;slider.children.each(function(index){totalDimens+=slider.settings.mode==='horizontal'?$(this).outerWidth(true):$(this).outerHeight(true);});// calculate the speed ratio (used to determine the new speed to finish the paused animation)
ratio=slider.settings.speed/totalDimens;// determine which property to use
property=slider.settings.mode==='horizontal'?'left':'top';// calculate the new speed
newSpeed=ratio*(totalDimens-Math.abs(parseInt(el.css(property))));tickerLoop(newSpeed);});}}// start the ticker loop
tickerLoop();};/**
     * Runs a continuous loop, news ticker-style
     */var tickerLoop=function tickerLoop(resumeSpeed){var speed=resumeSpeed?resumeSpeed:slider.settings.speed,position={left:0,top:0},reset={left:0,top:0},animateProperty,resetValue,params;// if "next" animate left position to last child, then reset left to 0
if(slider.settings.autoDirection==='next'){position=el.find('.bx-clone').first().position();// if "prev" animate left position to 0, then reset left to first non-clone child
}else{reset=slider.children.first().position();}animateProperty=slider.settings.mode==='horizontal'?-position.left:-position.top;resetValue=slider.settings.mode==='horizontal'?-reset.left:-reset.top;params={resetValue:resetValue};setPositionProperty(animateProperty,'ticker',speed,params);};/**
     * Check if el is on screen
     */var isOnScreen=function isOnScreen(el){var win=$(window),viewport={top:win.scrollTop(),left:win.scrollLeft()},bounds=el.offset();viewport.right=viewport.left+win.width();viewport.bottom=viewport.top+win.height();bounds.right=bounds.left+el.outerWidth();bounds.bottom=bounds.top+el.outerHeight();return!(viewport.right<bounds.left||viewport.left>bounds.right||viewport.bottom<bounds.top||viewport.top>bounds.bottom);};/**
     * Initializes keyboard events
     */var keyPress=function keyPress(e){var activeElementTag=document.activeElement.tagName.toLowerCase(),tagFilters='input|textarea',p=new RegExp(activeElementTag,['i']),result=p.exec(tagFilters);if(result==null&&isOnScreen(el)){if(e.keyCode===39){clickNextBind(e);return false;}else if(e.keyCode===37){clickPrevBind(e);return false;}}};/**
     * Initializes touch events
     */var initTouch=function initTouch(){// initialize object to contain all touch values
slider.touch={start:{x:0,y:0},end:{x:0,y:0}};slider.viewport.on('touchstart MSPointerDown pointerdown',onTouchStart);//for browsers that have implemented pointer events and fire a click after
//every pointerup regardless of whether pointerup is on same screen location as pointerdown or not
slider.viewport.on('click','.bxslider a',function(e){if(slider.viewport.hasClass('click-disabled')){e.preventDefault();slider.viewport.removeClass('click-disabled');}});};/**
     * Event handler for "touchstart"
     *
     * @param e (event)
     *  - DOM event object
     */var onTouchStart=function onTouchStart(e){// watch only for left mouse, touch contact and pen contact
// touchstart event object doesn`t have button property
if(e.type!=='touchstart'&&e.button!==0){return;}e.preventDefault();//disable slider controls while user is interacting with slides to avoid slider freeze that happens on touch devices when a slide swipe happens immediately after interacting with slider controls
slider.controls.el.addClass('disabled');if(slider.working){slider.controls.el.removeClass('disabled');}else{// record the original position when touch starts
slider.touch.originalPos=el.position();var orig=e.originalEvent,touchPoints=typeof orig.changedTouches!=='undefined'?orig.changedTouches:[orig];var chromePointerEvents=typeof PointerEvent==='function';if(chromePointerEvents){if(orig.pointerId===undefined){return;}}// record the starting touch x, y coordinates
slider.touch.start.x=touchPoints[0].pageX;slider.touch.start.y=touchPoints[0].pageY;if(slider.viewport.get(0).setPointerCapture){slider.pointerId=orig.pointerId;slider.viewport.get(0).setPointerCapture(slider.pointerId);}// store original event data for click fixation
slider.originalClickTarget=orig.originalTarget||orig.target;slider.originalClickButton=orig.button;slider.originalClickButtons=orig.buttons;slider.originalEventType=orig.type;// at this moment we don`t know what it is click or swipe
slider.hasMove=false;// on a "touchmove" event to the viewport
slider.viewport.on('touchmove MSPointerMove pointermove',onTouchMove);// on a "touchend" event to the viewport
slider.viewport.on('touchend MSPointerUp pointerup',onTouchEnd);slider.viewport.on('MSPointerCancel pointercancel',onPointerCancel);}};/**
     * Cancel Pointer for Windows Phone
     *
     * @param e (event)
     *  - DOM event object
     */var onPointerCancel=function onPointerCancel(e){e.preventDefault();/* onPointerCancel handler is needed to deal with situations when a touchend
      doesn't fire after a touchstart (this happens on windows phones only) */setPositionProperty(slider.touch.originalPos.left,'reset',0);//remove handlers
slider.controls.el.removeClass('disabled');slider.viewport.off('MSPointerCancel pointercancel',onPointerCancel);slider.viewport.off('touchmove MSPointerMove pointermove',onTouchMove);slider.viewport.off('touchend MSPointerUp pointerup',onTouchEnd);if(slider.viewport.get(0).releasePointerCapture){slider.viewport.get(0).releasePointerCapture(slider.pointerId);}};/**
     * Event handler for "touchmove"
     *
     * @param e (event)
     *  - DOM event object
     */var onTouchMove=function onTouchMove(e){var orig=e.originalEvent,touchPoints=typeof orig.changedTouches!=='undefined'?orig.changedTouches:[orig],// if scrolling on y axis, do not prevent default
xMovement=Math.abs(touchPoints[0].pageX-slider.touch.start.x),yMovement=Math.abs(touchPoints[0].pageY-slider.touch.start.y),value=0,change=0;// this is swipe
slider.hasMove=true;// x axis swipe
if(xMovement*3>yMovement&&slider.settings.preventDefaultSwipeX){e.preventDefault();// y axis swipe
}else if(yMovement*3>xMovement&&slider.settings.preventDefaultSwipeY){e.preventDefault();}if(e.type!=='touchmove'){e.preventDefault();}if(slider.settings.mode!=='fade'&&slider.settings.oneToOneTouch){// if horizontal, drag along x axis
if(slider.settings.mode==='horizontal'){change=touchPoints[0].pageX-slider.touch.start.x;value=slider.touch.originalPos.left+change;// if vertical, drag along y axis
}else{change=touchPoints[0].pageY-slider.touch.start.y;value=slider.touch.originalPos.top+change;}setPositionProperty(value,'reset',0);}};/**
     * Event handler for "touchend"
     *
     * @param e (event)
     *  - DOM event object
     */var onTouchEnd=function onTouchEnd(e){e.preventDefault();slider.viewport.off('touchmove MSPointerMove pointermove',onTouchMove);//enable slider controls as soon as user stops interacing with slides
slider.controls.el.removeClass('disabled');var orig=e.originalEvent,touchPoints=typeof orig.changedTouches!=='undefined'?orig.changedTouches:[orig],value=0,distance=0;// record end x, y positions
slider.touch.end.x=touchPoints[0].pageX;slider.touch.end.y=touchPoints[0].pageY;// if fade mode, check if absolute x distance clears the threshold
if(slider.settings.mode==='fade'){distance=Math.abs(slider.touch.start.x-slider.touch.end.x);if(distance>=slider.settings.swipeThreshold){if(slider.touch.start.x>slider.touch.end.x){el.goToNextSlide();}else{el.goToPrevSlide();}el.stopAuto();}// not fade mode
}else{// calculate distance and el's animate property
if(slider.settings.mode==='horizontal'){distance=slider.touch.end.x-slider.touch.start.x;value=slider.touch.originalPos.left;}else{distance=slider.touch.end.y-slider.touch.start.y;value=slider.touch.originalPos.top;}// if not infinite loop and first / last slide, do not attempt a slide transition
if(!slider.settings.infiniteLoop&&(slider.active.index===0&&distance>0||slider.active.last&&distance<0)){setPositionProperty(value,'reset',200);}else{// check if distance clears threshold
if(Math.abs(distance)>=slider.settings.swipeThreshold){if(distance<0){el.goToNextSlide();}else{el.goToPrevSlide();}el.stopAuto();}else{// el.animate(property, 200);
setPositionProperty(value,'reset',200);}}}slider.viewport.off('touchend MSPointerUp pointerup',onTouchEnd);if(slider.viewport.get(0).releasePointerCapture){slider.viewport.get(0).releasePointerCapture(slider.pointerId);}// if slider had swipe with left mouse, touch contact and pen contact
if(slider.hasMove===false&&(slider.originalClickButton===0||slider.originalEventType==='touchstart')){// trigger click event (fix for Firefox59 and PointerEvent standard compatibility)
$(slider.originalClickTarget).trigger({type:'click',button:slider.originalClickButton,buttons:slider.originalClickButtons});}};/**
     * Window resize event callback
     */var resizeWindow=function resizeWindow(e){// don't do anything if slider isn't initialized.
if(!slider.initialized){return;}// Delay if slider working.
if(slider.working){window.setTimeout(resizeWindow,10);}else{// get the new window dimens (again, thank you IE)
var windowWidthNew=$(window).width(),windowHeightNew=$(window).height();// make sure that it is a true window resize
// *we must check this because our dinosaur friend IE fires a window resize event when certain DOM elements
// are resized. Can you just die already?*
if(windowWidth!==windowWidthNew||windowHeight!==windowHeightNew){// set the new window dimens
windowWidth=windowWidthNew;windowHeight=windowHeightNew;// update all dynamic elements
el.redrawSlider();// Call user resize handler
slider.settings.onSliderResize.call(el,slider.active.index);}}};/**
     * Adds an aria-hidden=true attribute to each element
     *
     * @param startVisibleIndex (int)
     *  - the first visible element's index
     */var applyAriaHiddenAttributes=function applyAriaHiddenAttributes(startVisibleIndex){var numberOfSlidesShowing=getNumberSlidesShowing();// only apply attributes if the setting is enabled and not in ticker mode
if(slider.settings.ariaHidden&&!slider.settings.ticker){// add aria-hidden=true to all elements
slider.children.attr('aria-hidden','true');// get the visible elements and change to aria-hidden=false
slider.children.slice(startVisibleIndex,startVisibleIndex+numberOfSlidesShowing).attr('aria-hidden','false');}};/**
     * Returns index according to present page range
     *
     * @param slideOndex (int)
     *  - the desired slide index
     */var setSlideIndex=function setSlideIndex(slideIndex){if(slideIndex<0){if(slider.settings.infiniteLoop){return getPagerQty()-1;}else{//we don't go to undefined slides
return slider.active.index;}// if slideIndex is greater than children length, set active index to 0 (this happens during infinite loop)
}else if(slideIndex>=getPagerQty()){if(slider.settings.infiniteLoop){return 0;}else{//we don't move to undefined pages
return slider.active.index;}// set active index to requested slide
}else{return slideIndex;}};/**
     * ===================================================================================
     * = PUBLIC FUNCTIONS
     * ===================================================================================
     */ /**
     * Performs slide transition to the specified slide
     *
     * @param slideIndex (int)
     *  - the destination slide's index (zero-based)
     *
     * @param direction (string)
     *  - INTERNAL USE ONLY - the direction of travel ("prev" / "next")
     */el.goToSlide=function(slideIndex,direction){// onSlideBefore, onSlideNext, onSlidePrev callbacks
// Allow transition canceling based on returned value
var performTransition=true,moveBy=0,position={left:0,top:0},lastChild=null,lastShowingIndex,eq,value,requestEl;// store the old index
slider.oldIndex=slider.active.index;//set new index
slider.active.index=setSlideIndex(slideIndex);// if plugin is currently in motion, ignore request
if(slider.working||slider.active.index===slider.oldIndex){return;}// declare that plugin is in motion
slider.working=true;performTransition=slider.settings.onSlideBefore.call(el,slider.children.eq(slider.active.index),slider.oldIndex,slider.active.index);// If transitions canceled, reset and return
if(typeof performTransition!=='undefined'&&!performTransition){slider.active.index=slider.oldIndex;// restore old index
slider.working=false;// is not in motion
return;}if(direction==='next'){// Prevent canceling in future functions or lack there-of from negating previous commands to cancel
if(!slider.settings.onSlideNext.call(el,slider.children.eq(slider.active.index),slider.oldIndex,slider.active.index)){performTransition=false;}}else if(direction==='prev'){// Prevent canceling in future functions or lack there-of from negating previous commands to cancel
if(!slider.settings.onSlidePrev.call(el,slider.children.eq(slider.active.index),slider.oldIndex,slider.active.index)){performTransition=false;}}// check if last slide
slider.active.last=slider.active.index>=getPagerQty()-1;// update the pager with active class
if(slider.settings.pager||slider.settings.pagerCustom){updatePagerActive(slider.active.index);}// // check for direction control update
if(slider.settings.controls){updateDirectionControls();}// if slider is set to mode: "fade"
if(slider.settings.mode==='fade'){// if adaptiveHeight is true and next height is different from current height, animate to the new height
if(slider.settings.adaptiveHeight&&slider.viewport.height()!==getViewportHeight()){slider.viewport.animate({height:getViewportHeight()},slider.settings.adaptiveHeightSpeed);}// fade out the visible child and reset its z-index value
slider.children.filter(':visible').fadeOut(slider.settings.speed).css({zIndex:0});// fade in the newly requested slide
slider.children.eq(slider.active.index).css('zIndex',slider.settings.slideZIndex+1).fadeIn(slider.settings.speed,function(){$(this).css('zIndex',slider.settings.slideZIndex);updateAfterSlideTransition();});// slider mode is not "fade"
}else{// if adaptiveHeight is true and next height is different from current height, animate to the new height
if(slider.settings.adaptiveHeight&&slider.viewport.height()!==getViewportHeight()){slider.viewport.animate({height:getViewportHeight()},slider.settings.adaptiveHeightSpeed);}// if carousel and not infinite loop
if(!slider.settings.infiniteLoop&&slider.carousel&&slider.active.last){if(slider.settings.mode==='horizontal'){// get the last child position
lastChild=slider.children.eq(slider.children.length-1);position=lastChild.position();// calculate the position of the last slide
moveBy=slider.viewport.width()-lastChild.outerWidth();}else{// get last showing index position
lastShowingIndex=slider.children.length-slider.settings.minSlides;position=slider.children.eq(lastShowingIndex).position();}// horizontal carousel, going previous while on first slide (infiniteLoop mode)
}else if(slider.carousel&&slider.active.last&&direction==='prev'){// get the last child position
eq=slider.settings.moveSlides===1?slider.settings.maxSlides-getMoveBy():(getPagerQty()-1)*getMoveBy()-(slider.children.length-slider.settings.maxSlides);lastChild=el.children('.bx-clone').eq(eq);position=lastChild.position();// if infinite loop and "Next" is clicked on the last slide
}else if(direction==='next'&&slider.active.index===0){// get the last clone position
position=el.find('> .bx-clone').eq(slider.settings.maxSlides).position();slider.active.last=false;// normal non-zero requests
}else if(slideIndex>=0){//parseInt is applied to allow floats for slides/page
requestEl=slideIndex*parseInt(getMoveBy());position=slider.children.eq(requestEl).position();}/* If the position doesn't exist
         * (e.g. if you destroy the slider on a next click),
         * it doesn't throw an error.
         */if(typeof position!=='undefined'){value=slider.settings.mode==='horizontal'?-(position.left-moveBy):-position.top;// plugin values to be animated
setPositionProperty(value,'slide',slider.settings.speed);}slider.working=false;}if(slider.settings.ariaHidden){applyAriaHiddenAttributes(slider.active.index*getMoveBy());}};/**
     * Transitions to the next slide in the show
     */el.goToNextSlide=function(){// if infiniteLoop is false and last page is showing, disregard call
if(!slider.settings.infiniteLoop&&slider.active.last){return;}if(slider.working===true){return;}var pagerIndex=parseInt(slider.active.index)+1;el.goToSlide(pagerIndex,'next');};/**
     * Transitions to the prev slide in the show
     */el.goToPrevSlide=function(){// if infiniteLoop is false and last page is showing, disregard call
if(!slider.settings.infiniteLoop&&slider.active.index===0){return;}if(slider.working===true){return;}var pagerIndex=parseInt(slider.active.index)-1;el.goToSlide(pagerIndex,'prev');};/**
     * Starts the auto show
     *
     * @param preventControlUpdate (boolean)
     *  - if true, auto controls state will not be updated
     */el.startAuto=function(preventControlUpdate){// if an interval already exists, disregard call
if(slider.interval){return;}// create an interval
slider.interval=setInterval(function(){if(slider.settings.autoDirection==='next'){el.goToNextSlide();}else{el.goToPrevSlide();}},slider.settings.pause);//allback for when the auto rotate status changes
slider.settings.onAutoChange.call(el,true);// if auto controls are displayed and preventControlUpdate is not true
if(slider.settings.autoControls&&preventControlUpdate!==true){updateAutoControls('stop');}};/**
     * Stops the auto show
     *
     * @param preventControlUpdate (boolean)
     *  - if true, auto controls state will not be updated
     */el.stopAuto=function(preventControlUpdate){// if slider is auto paused, just clear that state
if(slider.autoPaused)slider.autoPaused=false;// if no interval exists, disregard call
if(!slider.interval){return;}// clear the interval
clearInterval(slider.interval);slider.interval=null;//allback for when the auto rotate status changes
slider.settings.onAutoChange.call(el,false);// if auto controls are displayed and preventControlUpdate is not true
if(slider.settings.autoControls&&preventControlUpdate!==true){updateAutoControls('start');}};/**
     * Returns current slide index (zero-based)
     */el.getCurrentSlide=function(){return slider.active.index;};/**
     * Returns current slide element
     */el.getCurrentSlideElement=function(){return slider.children.eq(slider.active.index);};/**
     * Returns a slide element
     * @param index (int)
     *  - The index (zero-based) of the element you want returned.
     */el.getSlideElement=function(index){return slider.children.eq(index);};/**
     * Returns number of slides in show
     */el.getSlideCount=function(){return slider.children.length;};/**
     * Return slider.working variable
     */el.isWorking=function(){return slider.working;};/**
     * Update all dynamic slider elements
     */el.redrawSlider=function(){// resize all children in ratio to new screen size
slider.children.add(el.find('.bx-clone')).outerWidth(getSlideWidth());// adjust the height
slider.viewport.css('height',getViewportHeight());// update the slide position
if(!slider.settings.ticker){setSlidePosition();}// if active.last was true before the screen resize, we want
// to keep it last no matter what screen size we end on
if(slider.active.last){slider.active.index=getPagerQty()-1;}// if the active index (page) no longer exists due to the resize, simply set the index as last
if(slider.active.index>=getPagerQty()){slider.active.last=true;}// if a pager is being displayed and a custom pager is not being used, update it
if(slider.settings.pager&&!slider.settings.pagerCustom){populatePager();updatePagerActive(slider.active.index);}if(slider.settings.ariaHidden){applyAriaHiddenAttributes(slider.active.index*getMoveBy());}};/**
     * Destroy the current instance of the slider (revert everything back to original state)
     */el.destroySlider=function(){// don't do anything if slider has already been destroyed
if(!slider.initialized){return;}slider.initialized=false;$('.bx-clone',this).remove();slider.children.each(function(){if($(this).data('origStyle')!==undefined){$(this).attr('style',$(this).data('origStyle'));}else{$(this).removeAttr('style');}});if($(this).data('origStyle')!==undefined){this.attr('style',$(this).data('origStyle'));}else{$(this).removeAttr('style');}$(this).unwrap().unwrap();if(slider.controls.el){slider.controls.el.remove();}if(slider.controls.next){slider.controls.next.remove();}if(slider.controls.prev){slider.controls.prev.remove();}if(slider.pagerEl&&slider.settings.controls&&!slider.settings.pagerCustom){slider.pagerEl.remove();}$('.bx-caption',this).remove();if(slider.controls.autoEl){slider.controls.autoEl.remove();}clearInterval(slider.interval);if(slider.settings.responsive){$(window).off('resize',resizeWindow);}if(slider.settings.keyboardEnabled){$(document).off('keydown',keyPress);}//remove self reference in data
$(this).removeData('bxSlider');// remove global window handlers
$(window).off('blur',windowBlurHandler).off('focus',windowFocusHandler);};/**
     * Reload the slider (revert all DOM changes, and re-initialize)
     */el.reloadSlider=function(settings){if(settings!==undefined){options=settings;}el.destroySlider();init();//store reference to self in order to access public functions later
$(el).data('bxSlider',this);};init();$(el).data('bxSlider',this);// returns the current jQuery object
return this;};})(jQuery);// ==================================================
// fancyBox v3.5.7
//
// Licensed GPLv3 for open source use
// or fancyBox Commercial License for commercial use
//
// http://fancyapps.com/fancybox/
// Copyright 2019 fancyApps
//
// ==================================================
!function(t,e,n,o){"use strict";function i(t,e){var o,i,a,s=[],r=0;t&&t.isDefaultPrevented()||(t.preventDefault(),e=e||{},t&&t.data&&(e=h(t.data.options,e)),o=e.$target||n(t.currentTarget).trigger("blur"),(a=n.fancybox.getInstance())&&a.$trigger&&a.$trigger.is(o)||(e.selector?s=n(e.selector):(i=o.attr("data-fancybox")||"",i?(s=t.data?t.data.items:[],s=s.length?s.filter('[data-fancybox="'+i+'"]'):n('[data-fancybox="'+i+'"]')):s=[o]),r=n(s).index(o),r<0&&(r=0),a=n.fancybox.open(s,e,r),a.$trigger=o));}if(t.console=t.console||{info:function info(t){}},n){if(n.fn.fancybox)return void console.info("fancyBox already initialized");var a={closeExisting:!1,loop:!1,gutter:50,keyboard:!0,preventCaptionOverlap:!0,arrows:!0,infobar:!0,smallBtn:"auto",toolbar:"auto",buttons:["zoom","slideShow","thumbs","close"],idleTime:3,protect:!1,modal:!1,image:{preload:!1},ajax:{settings:{data:{fancybox:!0}}},iframe:{tpl:'<iframe id="fancybox-frame{rnd}" name="fancybox-frame{rnd}" class="fancybox-iframe" allowfullscreen="allowfullscreen" allow="autoplay; fullscreen" src=""></iframe>',preload:!0,css:{},attr:{scrolling:"auto"}},video:{tpl:'<video class="fancybox-video" controls controlsList="nodownload" poster="{{poster}}"><source src="{{src}}" type="{{format}}" />Sorry, your browser doesn\'t support embedded videos, <a href="{{src}}">download</a> and watch with your favorite video player!</video>',format:"",autoStart:!0},defaultType:"image",animationEffect:"zoom",animationDuration:366,zoomOpacity:"auto",transitionEffect:"fade",transitionDuration:366,slideClass:"",baseClass:"",baseTpl:'<div class="fancybox-container" role="dialog" tabindex="-1"><div class="fancybox-bg"></div><div class="fancybox-inner"><div class="fancybox-infobar"><span data-fancybox-index></span>&nbsp;/&nbsp;<span data-fancybox-count></span></div><div class="fancybox-toolbar">{{buttons}}</div><div class="fancybox-navigation">{{arrows}}</div><div class="fancybox-stage"></div><div class="fancybox-caption"><div class="fancybox-caption__body"></div></div></div></div>',spinnerTpl:'<div class="fancybox-loading"></div>',errorTpl:'<div class="fancybox-error"><p>{{ERROR}}</p></div>',btnTpl:{download:'<a download data-fancybox-download class="fancybox-button fancybox-button--download" title="{{DOWNLOAD}}" href="javascript:;"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M18.62 17.09V19H5.38v-1.91zm-2.97-6.96L17 11.45l-5 4.87-5-4.87 1.36-1.32 2.68 2.64V5h1.92v7.77z"/></svg></a>',zoom:'<button data-fancybox-zoom class="fancybox-button fancybox-button--zoom" title="{{ZOOM}}"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M18.7 17.3l-3-3a5.9 5.9 0 0 0-.6-7.6 5.9 5.9 0 0 0-8.4 0 5.9 5.9 0 0 0 0 8.4 5.9 5.9 0 0 0 7.7.7l3 3a1 1 0 0 0 1.3 0c.4-.5.4-1 0-1.5zM8.1 13.8a4 4 0 0 1 0-5.7 4 4 0 0 1 5.7 0 4 4 0 0 1 0 5.7 4 4 0 0 1-5.7 0z"/></svg></button>',close:'<button data-fancybox-close class="fancybox-button fancybox-button--close" title="{{CLOSE}}"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M12 10.6L6.6 5.2 5.2 6.6l5.4 5.4-5.4 5.4 1.4 1.4 5.4-5.4 5.4 5.4 1.4-1.4-5.4-5.4 5.4-5.4-1.4-1.4-5.4 5.4z"/></svg></button>',arrowLeft:'<button data-fancybox-prev class="fancybox-button fancybox-button--arrow_left" title="{{PREV}}"><div><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M11.28 15.7l-1.34 1.37L5 12l4.94-5.07 1.34 1.38-2.68 2.72H19v1.94H8.6z"/></svg></div></button>',arrowRight:'<button data-fancybox-next class="fancybox-button fancybox-button--arrow_right" title="{{NEXT}}"><div><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M15.4 12.97l-2.68 2.72 1.34 1.38L19 12l-4.94-5.07-1.34 1.38 2.68 2.72H5v1.94z"/></svg></div></button>',smallBtn:'<button type="button" data-fancybox-close class="fancybox-button fancybox-close-small" title="{{CLOSE}}"><svg xmlns="http://www.w3.org/2000/svg" version="1" viewBox="0 0 24 24"><path d="M13 12l5-5-1-1-5 5-5-5-1 1 5 5-5 5 1 1 5-5 5 5 1-1z"/></svg></button>'},parentEl:"body",hideScrollbar:!0,autoFocus:!0,backFocus:!0,trapFocus:!0,fullScreen:{autoStart:!1},touch:{vertical:!0,momentum:!0},hash:null,media:{},slideShow:{autoStart:!1,speed:3e3},thumbs:{autoStart:!1,hideOnClose:!0,parentEl:".fancybox-container",axis:"y"},wheel:"auto",onInit:n.noop,beforeLoad:n.noop,afterLoad:n.noop,beforeShow:n.noop,afterShow:n.noop,beforeClose:n.noop,afterClose:n.noop,onActivate:n.noop,onDeactivate:n.noop,clickContent:function clickContent(t,e){return"image"===t.type&&"zoom";},clickSlide:"close",clickOutside:"close",dblclickContent:!1,dblclickSlide:!1,dblclickOutside:!1,mobile:{preventCaptionOverlap:!1,idleTime:!1,clickContent:function clickContent(t,e){return"image"===t.type&&"toggleControls";},clickSlide:function clickSlide(t,e){return"image"===t.type?"toggleControls":"close";},dblclickContent:function dblclickContent(t,e){return"image"===t.type&&"zoom";},dblclickSlide:function dblclickSlide(t,e){return"image"===t.type&&"zoom";}},lang:"en",i18n:{en:{CLOSE:"Close",NEXT:"Next",PREV:"Previous",ERROR:"The requested content cannot be loaded. <br/> Please try again later.",PLAY_START:"Start slideshow",PLAY_STOP:"Pause slideshow",FULL_SCREEN:"Full screen",THUMBS:"Thumbnails",DOWNLOAD:"Download",SHARE:"Share",ZOOM:"Zoom"},de:{CLOSE:"Schlie&szlig;en",NEXT:"Weiter",PREV:"Zur&uuml;ck",ERROR:"Die angeforderten Daten konnten nicht geladen werden. <br/> Bitte versuchen Sie es sp&auml;ter nochmal.",PLAY_START:"Diaschau starten",PLAY_STOP:"Diaschau beenden",FULL_SCREEN:"Vollbild",THUMBS:"Vorschaubilder",DOWNLOAD:"Herunterladen",SHARE:"Teilen",ZOOM:"Vergr&ouml;&szlig;ern"}}},s=n(t),r=n(e),c=0,l=function l(t){return t&&t.hasOwnProperty&&t instanceof n;},d=function(){return t.requestAnimationFrame||t.webkitRequestAnimationFrame||t.mozRequestAnimationFrame||t.oRequestAnimationFrame||function(e){return t.setTimeout(e,1e3/60);};}(),u=function(){return t.cancelAnimationFrame||t.webkitCancelAnimationFrame||t.mozCancelAnimationFrame||t.oCancelAnimationFrame||function(e){t.clearTimeout(e);};}(),f=function(){var t,n=e.createElement("fakeelement"),o={transition:"transitionend",OTransition:"oTransitionEnd",MozTransition:"transitionend",WebkitTransition:"webkitTransitionEnd"};for(t in o){if(void 0!==n.style[t])return o[t];}return"transitionend";}(),p=function p(t){return t&&t.length&&t[0].offsetHeight;},h=function h(t,e){var o=n.extend(!0,{},t,e);return n.each(e,function(t,e){n.isArray(e)&&(o[t]=e);}),o;},g=function g(t){var o,i;return!(!t||t.ownerDocument!==e)&&(n(".fancybox-container").css("pointer-events","none"),o={x:t.getBoundingClientRect().left+t.offsetWidth/2,y:t.getBoundingClientRect().top+t.offsetHeight/2},i=e.elementFromPoint(o.x,o.y)===t,n(".fancybox-container").css("pointer-events",""),i);},b=function b(t,e,o){var i=this;i.opts=h({index:o},n.fancybox.defaults),n.isPlainObject(e)&&(i.opts=h(i.opts,e)),n.fancybox.isMobile&&(i.opts=h(i.opts,i.opts.mobile)),i.id=i.opts.id||++c,i.currIndex=parseInt(i.opts.index,10)||0,i.prevIndex=null,i.prevPos=null,i.currPos=0,i.firstRun=!0,i.group=[],i.slides={},i.addContent(t),i.group.length&&i.init();};n.extend(b.prototype,{init:function init(){var o,i,a=this,s=a.group[a.currIndex],r=s.opts;r.closeExisting&&n.fancybox.close(!0),n("body").addClass("fancybox-active"),!n.fancybox.getInstance()&&!1!==r.hideScrollbar&&!n.fancybox.isMobile&&e.body.scrollHeight>t.innerHeight&&(n("head").append('<style id="fancybox-style-noscroll" type="text/css">.compensate-for-scrollbar{margin-right:'+(t.innerWidth-e.documentElement.clientWidth)+"px;}</style>"),n("body").addClass("compensate-for-scrollbar")),i="",n.each(r.buttons,function(t,e){i+=r.btnTpl[e]||"";}),o=n(a.translate(a,r.baseTpl.replace("{{buttons}}",i).replace("{{arrows}}",r.btnTpl.arrowLeft+r.btnTpl.arrowRight))).attr("id","fancybox-container-"+a.id).addClass(r.baseClass).data("FancyBox",a).appendTo(r.parentEl),a.$refs={container:o},["bg","inner","infobar","toolbar","stage","caption","navigation"].forEach(function(t){a.$refs[t]=o.find(".fancybox-"+t);}),a.trigger("onInit"),a.activate(),a.jumpTo(a.currIndex);},translate:function translate(t,e){var n=t.opts.i18n[t.opts.lang]||t.opts.i18n.en;return e.replace(/\{\{(\w+)\}\}/g,function(t,e){return void 0===n[e]?t:n[e];});},addContent:function addContent(t){var e,o=this,i=n.makeArray(t);n.each(i,function(t,e){var i,a,s,r,c,l={},d={};n.isPlainObject(e)?(l=e,d=e.opts||e):"object"===n.type(e)&&n(e).length?(i=n(e),d=i.data()||{},d=n.extend(!0,{},d,d.options),d.$orig=i,l.src=o.opts.src||d.src||i.attr("href"),l.type||l.src||(l.type="inline",l.src=e)):l={type:"html",src:e+""},l.opts=n.extend(!0,{},o.opts,d),n.isArray(d.buttons)&&(l.opts.buttons=d.buttons),n.fancybox.isMobile&&l.opts.mobile&&(l.opts=h(l.opts,l.opts.mobile)),a=l.type||l.opts.type,r=l.src||"",!a&&r&&((s=r.match(/\.(mp4|mov|ogv|webm)((\?|#).*)?$/i))?(a="video",l.opts.video.format||(l.opts.video.format="video/"+("ogv"===s[1]?"ogg":s[1]))):r.match(/(^data:image\/[a-z0-9+\/=]*,)|(\.(jp(e|g|eg)|gif|png|bmp|webp|svg|ico)((\?|#).*)?$)/i)?a="image":r.match(/\.(pdf)((\?|#).*)?$/i)?(a="iframe",l=n.extend(!0,l,{contentType:"pdf",opts:{iframe:{preload:!1}}})):"#"===r.charAt(0)&&(a="inline")),a?l.type=a:o.trigger("objectNeedsType",l),l.contentType||(l.contentType=n.inArray(l.type,["html","inline","ajax"])>-1?"html":l.type),l.index=o.group.length,"auto"==l.opts.smallBtn&&(l.opts.smallBtn=n.inArray(l.type,["html","inline","ajax"])>-1),"auto"===l.opts.toolbar&&(l.opts.toolbar=!l.opts.smallBtn),l.$thumb=l.opts.$thumb||null,l.opts.$trigger&&l.index===o.opts.index&&(l.$thumb=l.opts.$trigger.find("img:first"),l.$thumb.length&&(l.opts.$orig=l.opts.$trigger)),l.$thumb&&l.$thumb.length||!l.opts.$orig||(l.$thumb=l.opts.$orig.find("img:first")),l.$thumb&&!l.$thumb.length&&(l.$thumb=null),l.thumb=l.opts.thumb||(l.$thumb?l.$thumb[0].src:null),"function"===n.type(l.opts.caption)&&(l.opts.caption=l.opts.caption.apply(e,[o,l])),"function"===n.type(o.opts.caption)&&(l.opts.caption=o.opts.caption.apply(e,[o,l])),l.opts.caption instanceof n||(l.opts.caption=void 0===l.opts.caption?"":l.opts.caption+""),"ajax"===l.type&&(c=r.split(/\s+/,2),c.length>1&&(l.src=c.shift(),l.opts.filter=c.shift())),l.opts.modal&&(l.opts=n.extend(!0,l.opts,{trapFocus:!0,infobar:0,toolbar:0,smallBtn:0,keyboard:0,slideShow:0,fullScreen:0,thumbs:0,touch:0,clickContent:!1,clickSlide:!1,clickOutside:!1,dblclickContent:!1,dblclickSlide:!1,dblclickOutside:!1})),o.group.push(l);}),Object.keys(o.slides).length&&(o.updateControls(),(e=o.Thumbs)&&e.isActive&&(e.create(),e.focus()));},addEvents:function addEvents(){var e=this;e.removeEvents(),e.$refs.container.on("click.fb-close","[data-fancybox-close]",function(t){t.stopPropagation(),t.preventDefault(),e.close(t);}).on("touchstart.fb-prev click.fb-prev","[data-fancybox-prev]",function(t){t.stopPropagation(),t.preventDefault(),e.previous();}).on("touchstart.fb-next click.fb-next","[data-fancybox-next]",function(t){t.stopPropagation(),t.preventDefault(),e.next();}).on("click.fb","[data-fancybox-zoom]",function(t){e[e.isScaledDown()?"scaleToActual":"scaleToFit"]();}),s.on("orientationchange.fb resize.fb",function(t){t&&t.originalEvent&&"resize"===t.originalEvent.type?(e.requestId&&u(e.requestId),e.requestId=d(function(){e.update(t);})):(e.current&&"iframe"===e.current.type&&e.$refs.stage.hide(),setTimeout(function(){e.$refs.stage.show(),e.update(t);},n.fancybox.isMobile?600:250));}),r.on("keydown.fb",function(t){var o=n.fancybox?n.fancybox.getInstance():null,i=o.current,a=t.keyCode||t.which;if(9==a)return void(i.opts.trapFocus&&e.focus(t));if(!(!i.opts.keyboard||t.ctrlKey||t.altKey||t.shiftKey||n(t.target).is("input,textarea,video,audio,select")))return 8===a||27===a?(t.preventDefault(),void e.close(t)):37===a||38===a?(t.preventDefault(),void e.previous()):39===a||40===a?(t.preventDefault(),void e.next()):void e.trigger("afterKeydown",t,a);}),e.group[e.currIndex].opts.idleTime&&(e.idleSecondsCounter=0,r.on("mousemove.fb-idle mouseleave.fb-idle mousedown.fb-idle touchstart.fb-idle touchmove.fb-idle scroll.fb-idle keydown.fb-idle",function(t){e.idleSecondsCounter=0,e.isIdle&&e.showControls(),e.isIdle=!1;}),e.idleInterval=t.setInterval(function(){++e.idleSecondsCounter>=e.group[e.currIndex].opts.idleTime&&!e.isDragging&&(e.isIdle=!0,e.idleSecondsCounter=0,e.hideControls());},1e3));},removeEvents:function removeEvents(){var e=this;s.off("orientationchange.fb resize.fb"),r.off("keydown.fb .fb-idle"),this.$refs.container.off(".fb-close .fb-prev .fb-next"),e.idleInterval&&(t.clearInterval(e.idleInterval),e.idleInterval=null);},previous:function previous(t){return this.jumpTo(this.currPos-1,t);},next:function next(t){return this.jumpTo(this.currPos+1,t);},jumpTo:function jumpTo(t,e){var o,i,a,s,r,c,l,d,u,f=this,h=f.group.length;if(!(f.isDragging||f.isClosing||f.isAnimating&&f.firstRun)){if(t=parseInt(t,10),!(a=f.current?f.current.opts.loop:f.opts.loop)&&(t<0||t>=h))return!1;if(o=f.firstRun=!Object.keys(f.slides).length,r=f.current,f.prevIndex=f.currIndex,f.prevPos=f.currPos,s=f.createSlide(t),h>1&&((a||s.index<h-1)&&f.createSlide(t+1),(a||s.index>0)&&f.createSlide(t-1)),f.current=s,f.currIndex=s.index,f.currPos=s.pos,f.trigger("beforeShow",o),f.updateControls(),s.forcedDuration=void 0,n.isNumeric(e)?s.forcedDuration=e:e=s.opts[o?"animationDuration":"transitionDuration"],e=parseInt(e,10),i=f.isMoved(s),s.$slide.addClass("fancybox-slide--current"),o)return s.opts.animationEffect&&e&&f.$refs.container.css("transition-duration",e+"ms"),f.$refs.container.addClass("fancybox-is-open").trigger("focus"),f.loadSlide(s),void f.preload("image");c=n.fancybox.getTranslate(r.$slide),l=n.fancybox.getTranslate(f.$refs.stage),n.each(f.slides,function(t,e){n.fancybox.stop(e.$slide,!0);}),r.pos!==s.pos&&(r.isComplete=!1),r.$slide.removeClass("fancybox-slide--complete fancybox-slide--current"),i?(u=c.left-(r.pos*c.width+r.pos*r.opts.gutter),n.each(f.slides,function(t,o){o.$slide.removeClass("fancybox-animated").removeClass(function(t,e){return(e.match(/(^|\s)fancybox-fx-\S+/g)||[]).join(" ");});var i=o.pos*c.width+o.pos*o.opts.gutter;n.fancybox.setTranslate(o.$slide,{top:0,left:i-l.left+u}),o.pos!==s.pos&&o.$slide.addClass("fancybox-slide--"+(o.pos>s.pos?"next":"previous")),p(o.$slide),n.fancybox.animate(o.$slide,{top:0,left:(o.pos-s.pos)*c.width+(o.pos-s.pos)*o.opts.gutter},e,function(){o.$slide.css({transform:"",opacity:""}).removeClass("fancybox-slide--next fancybox-slide--previous"),o.pos===f.currPos&&f.complete();});})):e&&s.opts.transitionEffect&&(d="fancybox-animated fancybox-fx-"+s.opts.transitionEffect,r.$slide.addClass("fancybox-slide--"+(r.pos>s.pos?"next":"previous")),n.fancybox.animate(r.$slide,d,e,function(){r.$slide.removeClass(d).removeClass("fancybox-slide--next fancybox-slide--previous");},!1)),s.isLoaded?f.revealContent(s):f.loadSlide(s),f.preload("image");}},createSlide:function createSlide(t){var e,o,i=this;return o=t%i.group.length,o=o<0?i.group.length+o:o,!i.slides[t]&&i.group[o]&&(e=n('<div class="fancybox-slide"></div>').appendTo(i.$refs.stage),i.slides[t]=n.extend(!0,{},i.group[o],{pos:t,$slide:e,isLoaded:!1}),i.updateSlide(i.slides[t])),i.slides[t];},scaleToActual:function scaleToActual(t,e,o){var i,a,s,r,c,l=this,d=l.current,u=d.$content,f=n.fancybox.getTranslate(d.$slide).width,p=n.fancybox.getTranslate(d.$slide).height,h=d.width,g=d.height;l.isAnimating||l.isMoved()||!u||"image"!=d.type||!d.isLoaded||d.hasError||(l.isAnimating=!0,n.fancybox.stop(u),t=void 0===t?.5*f:t,e=void 0===e?.5*p:e,i=n.fancybox.getTranslate(u),i.top-=n.fancybox.getTranslate(d.$slide).top,i.left-=n.fancybox.getTranslate(d.$slide).left,r=h/i.width,c=g/i.height,a=.5*f-.5*h,s=.5*p-.5*g,h>f&&(a=i.left*r-(t*r-t),a>0&&(a=0),a<f-h&&(a=f-h)),g>p&&(s=i.top*c-(e*c-e),s>0&&(s=0),s<p-g&&(s=p-g)),l.updateCursor(h,g),n.fancybox.animate(u,{top:s,left:a,scaleX:r,scaleY:c},o||366,function(){l.isAnimating=!1;}),l.SlideShow&&l.SlideShow.isActive&&l.SlideShow.stop());},scaleToFit:function scaleToFit(t){var e,o=this,i=o.current,a=i.$content;o.isAnimating||o.isMoved()||!a||"image"!=i.type||!i.isLoaded||i.hasError||(o.isAnimating=!0,n.fancybox.stop(a),e=o.getFitPos(i),o.updateCursor(e.width,e.height),n.fancybox.animate(a,{top:e.top,left:e.left,scaleX:e.width/a.width(),scaleY:e.height/a.height()},t||366,function(){o.isAnimating=!1;}));},getFitPos:function getFitPos(t){var e,o,i,a,s=this,r=t.$content,c=t.$slide,l=t.width||t.opts.width,d=t.height||t.opts.height,u={};return!!(t.isLoaded&&r&&r.length)&&(e=n.fancybox.getTranslate(s.$refs.stage).width,o=n.fancybox.getTranslate(s.$refs.stage).height,e-=parseFloat(c.css("paddingLeft"))+parseFloat(c.css("paddingRight"))+parseFloat(r.css("marginLeft"))+parseFloat(r.css("marginRight")),o-=parseFloat(c.css("paddingTop"))+parseFloat(c.css("paddingBottom"))+parseFloat(r.css("marginTop"))+parseFloat(r.css("marginBottom")),l&&d||(l=e,d=o),i=Math.min(1,e/l,o/d),l*=i,d*=i,l>e-.5&&(l=e),d>o-.5&&(d=o),"image"===t.type?(u.top=Math.floor(.5*(o-d))+parseFloat(c.css("paddingTop")),u.left=Math.floor(.5*(e-l))+parseFloat(c.css("paddingLeft"))):"video"===t.contentType&&(a=t.opts.width&&t.opts.height?l/d:t.opts.ratio||16/9,d>l/a?d=l/a:l>d*a&&(l=d*a)),u.width=l,u.height=d,u);},update:function update(t){var e=this;n.each(e.slides,function(n,o){e.updateSlide(o,t);});},updateSlide:function updateSlide(t,e){var o=this,i=t&&t.$content,a=t.width||t.opts.width,s=t.height||t.opts.height,r=t.$slide;o.adjustCaption(t),i&&(a||s||"video"===t.contentType)&&!t.hasError&&(n.fancybox.stop(i),n.fancybox.setTranslate(i,o.getFitPos(t)),t.pos===o.currPos&&(o.isAnimating=!1,o.updateCursor())),o.adjustLayout(t),r.length&&(r.trigger("refresh"),t.pos===o.currPos&&o.$refs.toolbar.add(o.$refs.navigation.find(".fancybox-button--arrow_right")).toggleClass("compensate-for-scrollbar",r.get(0).scrollHeight>r.get(0).clientHeight)),o.trigger("onUpdate",t,e);},centerSlide:function centerSlide(t){var e=this,o=e.current,i=o.$slide;!e.isClosing&&o&&(i.siblings().css({transform:"",opacity:""}),i.parent().children().removeClass("fancybox-slide--previous fancybox-slide--next"),n.fancybox.animate(i,{top:0,left:0,opacity:1},void 0===t?0:t,function(){i.css({transform:"",opacity:""}),o.isComplete||e.complete();},!1));},isMoved:function isMoved(t){var e,o,i=t||this.current;return!!i&&(o=n.fancybox.getTranslate(this.$refs.stage),e=n.fancybox.getTranslate(i.$slide),!i.$slide.hasClass("fancybox-animated")&&(Math.abs(e.top-o.top)>.5||Math.abs(e.left-o.left)>.5));},updateCursor:function updateCursor(t,e){var o,i,a=this,s=a.current,r=a.$refs.container;s&&!a.isClosing&&a.Guestures&&(r.removeClass("fancybox-is-zoomable fancybox-can-zoomIn fancybox-can-zoomOut fancybox-can-swipe fancybox-can-pan"),o=a.canPan(t,e),i=!!o||a.isZoomable(),r.toggleClass("fancybox-is-zoomable",i),n("[data-fancybox-zoom]").prop("disabled",!i),o?r.addClass("fancybox-can-pan"):i&&("zoom"===s.opts.clickContent||n.isFunction(s.opts.clickContent)&&"zoom"==s.opts.clickContent(s))?r.addClass("fancybox-can-zoomIn"):s.opts.touch&&(s.opts.touch.vertical||a.group.length>1)&&"video"!==s.contentType&&r.addClass("fancybox-can-swipe"));},isZoomable:function isZoomable(){var t,e=this,n=e.current;if(n&&!e.isClosing&&"image"===n.type&&!n.hasError){if(!n.isLoaded)return!0;if((t=e.getFitPos(n))&&(n.width>t.width||n.height>t.height))return!0;}return!1;},isScaledDown:function isScaledDown(t,e){var o=this,i=!1,a=o.current,s=a.$content;return void 0!==t&&void 0!==e?i=t<a.width&&e<a.height:s&&(i=n.fancybox.getTranslate(s),i=i.width<a.width&&i.height<a.height),i;},canPan:function canPan(t,e){var o=this,i=o.current,a=null,s=!1;return"image"===i.type&&(i.isComplete||t&&e)&&!i.hasError&&(s=o.getFitPos(i),void 0!==t&&void 0!==e?a={width:t,height:e}:i.isComplete&&(a=n.fancybox.getTranslate(i.$content)),a&&s&&(s=Math.abs(a.width-s.width)>1.5||Math.abs(a.height-s.height)>1.5)),s;},loadSlide:function loadSlide(t){var e,o,i,a=this;if(!t.isLoading&&!t.isLoaded){if(t.isLoading=!0,!1===a.trigger("beforeLoad",t))return t.isLoading=!1,!1;switch(e=t.type,o=t.$slide,o.off("refresh").trigger("onReset").addClass(t.opts.slideClass),e){case"image":a.setImage(t);break;case"iframe":a.setIframe(t);break;case"html":a.setContent(t,t.src||t.content);break;case"video":a.setContent(t,t.opts.video.tpl.replace(/\{\{src\}\}/gi,t.src).replace("{{format}}",t.opts.videoFormat||t.opts.video.format||"").replace("{{poster}}",t.thumb||""));break;case"inline":n(t.src).length?a.setContent(t,n(t.src)):a.setError(t);break;case"ajax":a.showLoading(t),i=n.ajax(n.extend({},t.opts.ajax.settings,{url:t.src,success:function success(e,n){"success"===n&&a.setContent(t,e);},error:function error(e,n){e&&"abort"!==n&&a.setError(t);}})),o.one("onReset",function(){i.abort();});break;default:a.setError(t);}return!0;}},setImage:function setImage(t){var o,i=this;setTimeout(function(){var e=t.$image;i.isClosing||!t.isLoading||e&&e.length&&e[0].complete||t.hasError||i.showLoading(t);},50),i.checkSrcset(t),t.$content=n('<div class="fancybox-content"></div>').addClass("fancybox-is-hidden").appendTo(t.$slide.addClass("fancybox-slide--image")),!1!==t.opts.preload&&t.opts.width&&t.opts.height&&t.thumb&&(t.width=t.opts.width,t.height=t.opts.height,o=e.createElement("img"),o.onerror=function(){n(this).remove(),t.$ghost=null;},o.onload=function(){i.afterLoad(t);},t.$ghost=n(o).addClass("fancybox-image").appendTo(t.$content).attr("src",t.thumb)),i.setBigImage(t);},checkSrcset:function checkSrcset(e){var n,o,i,a,s=e.opts.srcset||e.opts.image.srcset;if(s){i=t.devicePixelRatio||1,a=t.innerWidth*i,o=s.split(",").map(function(t){var e={};return t.trim().split(/\s+/).forEach(function(t,n){var o=parseInt(t.substring(0,t.length-1),10);if(0===n)return e.url=t;o&&(e.value=o,e.postfix=t[t.length-1]);}),e;}),o.sort(function(t,e){return t.value-e.value;});for(var r=0;r<o.length;r++){var c=o[r];if("w"===c.postfix&&c.value>=a||"x"===c.postfix&&c.value>=i){n=c;break;}}!n&&o.length&&(n=o[o.length-1]),n&&(e.src=n.url,e.width&&e.height&&"w"==n.postfix&&(e.height=e.width/e.height*n.value,e.width=n.value),e.opts.srcset=s);}},setBigImage:function setBigImage(t){var o=this,i=e.createElement("img"),a=n(i);t.$image=a.one("error",function(){o.setError(t);}).one("load",function(){var e;t.$ghost||(o.resolveImageSlideSize(t,this.naturalWidth,this.naturalHeight),o.afterLoad(t)),o.isClosing||(t.opts.srcset&&(e=t.opts.sizes,e&&"auto"!==e||(e=(t.width/t.height>1&&s.width()/s.height()>1?"100":Math.round(t.width/t.height*100))+"vw"),a.attr("sizes",e).attr("srcset",t.opts.srcset)),t.$ghost&&setTimeout(function(){t.$ghost&&!o.isClosing&&t.$ghost.hide();},Math.min(300,Math.max(1e3,t.height/1600))),o.hideLoading(t));}).addClass("fancybox-image").attr("src",t.src).appendTo(t.$content),(i.complete||"complete"==i.readyState)&&a.naturalWidth&&a.naturalHeight?a.trigger("load"):i.error&&a.trigger("error");},resolveImageSlideSize:function resolveImageSlideSize(t,e,n){var o=parseInt(t.opts.width,10),i=parseInt(t.opts.height,10);t.width=e,t.height=n,o>0&&(t.width=o,t.height=Math.floor(o*n/e)),i>0&&(t.width=Math.floor(i*e/n),t.height=i);},setIframe:function setIframe(t){var e,o=this,i=t.opts.iframe,a=t.$slide;t.$content=n('<div class="fancybox-content'+(i.preload?" fancybox-is-hidden":"")+'"></div>').css(i.css).appendTo(a),a.addClass("fancybox-slide--"+t.contentType),t.$iframe=e=n(i.tpl.replace(/\{rnd\}/g,new Date().getTime())).attr(i.attr).appendTo(t.$content),i.preload?(o.showLoading(t),e.on("load.fb error.fb",function(e){this.isReady=1,t.$slide.trigger("refresh"),o.afterLoad(t);}),a.on("refresh.fb",function(){var n,o,s=t.$content,r=i.css.width,c=i.css.height;if(1===e[0].isReady){try{n=e.contents(),o=n.find("body");}catch(t){}o&&o.length&&o.children().length&&(a.css("overflow","visible"),s.css({width:"100%","max-width":"100%",height:"9999px"}),void 0===r&&(r=Math.ceil(Math.max(o[0].clientWidth,o.outerWidth(!0)))),s.css("width",r||"").css("max-width",""),void 0===c&&(c=Math.ceil(Math.max(o[0].clientHeight,o.outerHeight(!0)))),s.css("height",c||""),a.css("overflow","auto")),s.removeClass("fancybox-is-hidden");}})):o.afterLoad(t),e.attr("src",t.src),a.one("onReset",function(){try{n(this).find("iframe").hide().unbind().attr("src","//about:blank");}catch(t){}n(this).off("refresh.fb").empty(),t.isLoaded=!1,t.isRevealed=!1;});},setContent:function setContent(t,e){var o=this;o.isClosing||(o.hideLoading(t),t.$content&&n.fancybox.stop(t.$content),t.$slide.empty(),l(e)&&e.parent().length?((e.hasClass("fancybox-content")||e.parent().hasClass("fancybox-content"))&&e.parents(".fancybox-slide").trigger("onReset"),t.$placeholder=n("<div>").hide().insertAfter(e),e.css("display","inline-block")):t.hasError||("string"===n.type(e)&&(e=n("<div>").append(n.trim(e)).contents()),t.opts.filter&&(e=n("<div>").html(e).find(t.opts.filter))),t.$slide.one("onReset",function(){n(this).find("video,audio").trigger("pause"),t.$placeholder&&(t.$placeholder.after(e.removeClass("fancybox-content").hide()).remove(),t.$placeholder=null),t.$smallBtn&&(t.$smallBtn.remove(),t.$smallBtn=null),t.hasError||(n(this).empty(),t.isLoaded=!1,t.isRevealed=!1);}),n(e).appendTo(t.$slide),n(e).is("video,audio")&&(n(e).addClass("fancybox-video"),n(e).wrap("<div></div>"),t.contentType="video",t.opts.width=t.opts.width||n(e).attr("width"),t.opts.height=t.opts.height||n(e).attr("height")),t.$content=t.$slide.children().filter("div,form,main,video,audio,article,.fancybox-content").first(),t.$content.siblings().hide(),t.$content.length||(t.$content=t.$slide.wrapInner("<div></div>").children().first()),t.$content.addClass("fancybox-content"),t.$slide.addClass("fancybox-slide--"+t.contentType),o.afterLoad(t));},setError:function setError(t){t.hasError=!0,t.$slide.trigger("onReset").removeClass("fancybox-slide--"+t.contentType).addClass("fancybox-slide--error"),t.contentType="html",this.setContent(t,this.translate(t,t.opts.errorTpl)),t.pos===this.currPos&&(this.isAnimating=!1);},showLoading:function showLoading(t){var e=this;(t=t||e.current)&&!t.$spinner&&(t.$spinner=n(e.translate(e,e.opts.spinnerTpl)).appendTo(t.$slide).hide().fadeIn("fast"));},hideLoading:function hideLoading(t){var e=this;(t=t||e.current)&&t.$spinner&&(t.$spinner.stop().remove(),delete t.$spinner);},afterLoad:function afterLoad(t){var e=this;e.isClosing||(t.isLoading=!1,t.isLoaded=!0,e.trigger("afterLoad",t),e.hideLoading(t),!t.opts.smallBtn||t.$smallBtn&&t.$smallBtn.length||(t.$smallBtn=n(e.translate(t,t.opts.btnTpl.smallBtn)).appendTo(t.$content)),t.opts.protect&&t.$content&&!t.hasError&&(t.$content.on("contextmenu.fb",function(t){return 2==t.button&&t.preventDefault(),!0;}),"image"===t.type&&n('<div class="fancybox-spaceball"></div>').appendTo(t.$content)),e.adjustCaption(t),e.adjustLayout(t),t.pos===e.currPos&&e.updateCursor(),e.revealContent(t));},adjustCaption:function adjustCaption(t){var e,n=this,o=t||n.current,i=o.opts.caption,a=o.opts.preventCaptionOverlap,s=n.$refs.caption,r=!1;s.toggleClass("fancybox-caption--separate",a),a&&i&&i.length&&(o.pos!==n.currPos?(e=s.clone().appendTo(s.parent()),e.children().eq(0).empty().html(i),r=e.outerHeight(!0),e.empty().remove()):n.$caption&&(r=n.$caption.outerHeight(!0)),o.$slide.css("padding-bottom",r||""));},adjustLayout:function adjustLayout(t){var e,n,o,i,a=this,s=t||a.current;s.isLoaded&&!0!==s.opts.disableLayoutFix&&(s.$content.css("margin-bottom",""),s.$content.outerHeight()>s.$slide.height()+.5&&(o=s.$slide[0].style["padding-bottom"],i=s.$slide.css("padding-bottom"),parseFloat(i)>0&&(e=s.$slide[0].scrollHeight,s.$slide.css("padding-bottom",0),Math.abs(e-s.$slide[0].scrollHeight)<1&&(n=i),s.$slide.css("padding-bottom",o))),s.$content.css("margin-bottom",n));},revealContent:function revealContent(t){var e,o,i,a,s=this,r=t.$slide,c=!1,l=!1,d=s.isMoved(t),u=t.isRevealed;return t.isRevealed=!0,e=t.opts[s.firstRun?"animationEffect":"transitionEffect"],i=t.opts[s.firstRun?"animationDuration":"transitionDuration"],i=parseInt(void 0===t.forcedDuration?i:t.forcedDuration,10),!d&&t.pos===s.currPos&&i||(e=!1),"zoom"===e&&(t.pos===s.currPos&&i&&"image"===t.type&&!t.hasError&&(l=s.getThumbPos(t))?c=s.getFitPos(t):e="fade"),"zoom"===e?(s.isAnimating=!0,c.scaleX=c.width/l.width,c.scaleY=c.height/l.height,a=t.opts.zoomOpacity,"auto"==a&&(a=Math.abs(t.width/t.height-l.width/l.height)>.1),a&&(l.opacity=.1,c.opacity=1),n.fancybox.setTranslate(t.$content.removeClass("fancybox-is-hidden"),l),p(t.$content),void n.fancybox.animate(t.$content,c,i,function(){s.isAnimating=!1,s.complete();})):(s.updateSlide(t),e?(n.fancybox.stop(r),o="fancybox-slide--"+(t.pos>=s.prevPos?"next":"previous")+" fancybox-animated fancybox-fx-"+e,r.addClass(o).removeClass("fancybox-slide--current"),t.$content.removeClass("fancybox-is-hidden"),p(r),"image"!==t.type&&t.$content.hide().show(0),void n.fancybox.animate(r,"fancybox-slide--current",i,function(){r.removeClass(o).css({transform:"",opacity:""}),t.pos===s.currPos&&s.complete();},!0)):(t.$content.removeClass("fancybox-is-hidden"),u||!d||"image"!==t.type||t.hasError||t.$content.hide().fadeIn("fast"),void(t.pos===s.currPos&&s.complete())));},getThumbPos:function getThumbPos(t){var e,o,i,a,s,r=!1,c=t.$thumb;return!(!c||!g(c[0]))&&(e=n.fancybox.getTranslate(c),o=parseFloat(c.css("border-top-width")||0),i=parseFloat(c.css("border-right-width")||0),a=parseFloat(c.css("border-bottom-width")||0),s=parseFloat(c.css("border-left-width")||0),r={top:e.top+o,left:e.left+s,width:e.width-i-s,height:e.height-o-a,scaleX:1,scaleY:1},e.width>0&&e.height>0&&r);},complete:function complete(){var t,e=this,o=e.current,i={};!e.isMoved()&&o.isLoaded&&(o.isComplete||(o.isComplete=!0,o.$slide.siblings().trigger("onReset"),e.preload("inline"),p(o.$slide),o.$slide.addClass("fancybox-slide--complete"),n.each(e.slides,function(t,o){o.pos>=e.currPos-1&&o.pos<=e.currPos+1?i[o.pos]=o:o&&(n.fancybox.stop(o.$slide),o.$slide.off().remove());}),e.slides=i),e.isAnimating=!1,e.updateCursor(),e.trigger("afterShow"),o.opts.video.autoStart&&o.$slide.find("video,audio").filter(":visible:first").trigger("play").one("ended",function(){Document.exitFullscreen?Document.exitFullscreen():this.webkitExitFullscreen&&this.webkitExitFullscreen(),e.next();}),o.opts.autoFocus&&"html"===o.contentType&&(t=o.$content.find("input[autofocus]:enabled:visible:first"),t.length?t.trigger("focus"):e.focus(null,!0)),o.$slide.scrollTop(0).scrollLeft(0));},preload:function preload(t){var e,n,o=this;o.group.length<2||(n=o.slides[o.currPos+1],e=o.slides[o.currPos-1],e&&e.type===t&&o.loadSlide(e),n&&n.type===t&&o.loadSlide(n));},focus:function focus(t,o){var i,a,s=this,r=["a[href]","area[href]",'input:not([disabled]):not([type="hidden"]):not([aria-hidden])',"select:not([disabled]):not([aria-hidden])","textarea:not([disabled]):not([aria-hidden])","button:not([disabled]):not([aria-hidden])","iframe","object","embed","video","audio","[contenteditable]",'[tabindex]:not([tabindex^="-"])'].join(",");s.isClosing||(i=!t&&s.current&&s.current.isComplete?s.current.$slide.find("*:visible"+(o?":not(.fancybox-close-small)":"")):s.$refs.container.find("*:visible"),i=i.filter(r).filter(function(){return"hidden"!==n(this).css("visibility")&&!n(this).hasClass("disabled");}),i.length?(a=i.index(e.activeElement),t&&t.shiftKey?(a<0||0==a)&&(t.preventDefault(),i.eq(i.length-1).trigger("focus")):(a<0||a==i.length-1)&&(t&&t.preventDefault(),i.eq(0).trigger("focus"))):s.$refs.container.trigger("focus"));},activate:function activate(){var t=this;n(".fancybox-container").each(function(){var e=n(this).data("FancyBox");e&&e.id!==t.id&&!e.isClosing&&(e.trigger("onDeactivate"),e.removeEvents(),e.isVisible=!1);}),t.isVisible=!0,(t.current||t.isIdle)&&(t.update(),t.updateControls()),t.trigger("onActivate"),t.addEvents();},close:function close(t,e){var o,i,a,s,r,c,l,u=this,f=u.current,h=function h(){u.cleanUp(t);};return!u.isClosing&&(u.isClosing=!0,!1===u.trigger("beforeClose",t)?(u.isClosing=!1,d(function(){u.update();}),!1):(u.removeEvents(),a=f.$content,o=f.opts.animationEffect,i=n.isNumeric(e)?e:o?f.opts.animationDuration:0,f.$slide.removeClass("fancybox-slide--complete fancybox-slide--next fancybox-slide--previous fancybox-animated"),!0!==t?n.fancybox.stop(f.$slide):o=!1,f.$slide.siblings().trigger("onReset").remove(),i&&u.$refs.container.removeClass("fancybox-is-open").addClass("fancybox-is-closing").css("transition-duration",i+"ms"),u.hideLoading(f),u.hideControls(!0),u.updateCursor(),"zoom"!==o||a&&i&&"image"===f.type&&!u.isMoved()&&!f.hasError&&(l=u.getThumbPos(f))||(o="fade"),"zoom"===o?(n.fancybox.stop(a),s=n.fancybox.getTranslate(a),c={top:s.top,left:s.left,scaleX:s.width/l.width,scaleY:s.height/l.height,width:l.width,height:l.height},r=f.opts.zoomOpacity,"auto"==r&&(r=Math.abs(f.width/f.height-l.width/l.height)>.1),r&&(l.opacity=0),n.fancybox.setTranslate(a,c),p(a),n.fancybox.animate(a,l,i,h),!0):(o&&i?n.fancybox.animate(f.$slide.addClass("fancybox-slide--previous").removeClass("fancybox-slide--current"),"fancybox-animated fancybox-fx-"+o,i,h):!0===t?setTimeout(h,i):h(),!0)));},cleanUp:function cleanUp(e){var o,i,a,s=this,r=s.current.opts.$orig;s.current.$slide.trigger("onReset"),s.$refs.container.empty().remove(),s.trigger("afterClose",e),s.current.opts.backFocus&&(r&&r.length&&r.is(":visible")||(r=s.$trigger),r&&r.length&&(i=t.scrollX,a=t.scrollY,r.trigger("focus"),n("html, body").scrollTop(a).scrollLeft(i))),s.current=null,o=n.fancybox.getInstance(),o?o.activate():(n("body").removeClass("fancybox-active compensate-for-scrollbar"),n("#fancybox-style-noscroll").remove());},trigger:function trigger(t,e){var o,i=Array.prototype.slice.call(arguments,1),a=this,s=e&&e.opts?e:a.current;if(s?i.unshift(s):s=a,i.unshift(a),n.isFunction(s.opts[t])&&(o=s.opts[t].apply(s,i)),!1===o)return o;"afterClose"!==t&&a.$refs?a.$refs.container.trigger(t+".fb",i):r.trigger(t+".fb",i);},updateControls:function updateControls(){var t=this,o=t.current,i=o.index,a=t.$refs.container,s=t.$refs.caption,r=o.opts.caption;o.$slide.trigger("refresh"),r&&r.length?(t.$caption=s,s.children().eq(0).html(r)):t.$caption=null,t.hasHiddenControls||t.isIdle||t.showControls(),a.find("[data-fancybox-count]").html(t.group.length),a.find("[data-fancybox-index]").html(i+1),a.find("[data-fancybox-prev]").prop("disabled",!o.opts.loop&&i<=0),a.find("[data-fancybox-next]").prop("disabled",!o.opts.loop&&i>=t.group.length-1),"image"===o.type?a.find("[data-fancybox-zoom]").show().end().find("[data-fancybox-download]").attr("href",o.opts.image.src||o.src).show():o.opts.toolbar&&a.find("[data-fancybox-download],[data-fancybox-zoom]").hide(),n(e.activeElement).is(":hidden,[disabled]")&&t.$refs.container.trigger("focus");},hideControls:function hideControls(t){var e=this,n=["infobar","toolbar","nav"];!t&&e.current.opts.preventCaptionOverlap||n.push("caption"),this.$refs.container.removeClass(n.map(function(t){return"fancybox-show-"+t;}).join(" ")),this.hasHiddenControls=!0;},showControls:function showControls(){var t=this,e=t.current?t.current.opts:t.opts,n=t.$refs.container;t.hasHiddenControls=!1,t.idleSecondsCounter=0,n.toggleClass("fancybox-show-toolbar",!(!e.toolbar||!e.buttons)).toggleClass("fancybox-show-infobar",!!(e.infobar&&t.group.length>1)).toggleClass("fancybox-show-caption",!!t.$caption).toggleClass("fancybox-show-nav",!!(e.arrows&&t.group.length>1)).toggleClass("fancybox-is-modal",!!e.modal);},toggleControls:function toggleControls(){this.hasHiddenControls?this.showControls():this.hideControls();}}),n.fancybox={version:"3.5.7",defaults:a,getInstance:function getInstance(t){var e=n('.fancybox-container:not(".fancybox-is-closing"):last').data("FancyBox"),o=Array.prototype.slice.call(arguments,1);return e instanceof b&&("string"===n.type(t)?e[t].apply(e,o):"function"===n.type(t)&&t.apply(e,o),e);},open:function open(t,e,n){return new b(t,e,n);},close:function close(t){var e=this.getInstance();e&&(e.close(),!0===t&&this.close(t));},destroy:function destroy(){this.close(!0),r.add("body").off("click.fb-start","**");},isMobile:/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent),use3d:function(){var n=e.createElement("div");return t.getComputedStyle&&t.getComputedStyle(n)&&t.getComputedStyle(n).getPropertyValue("transform")&&!(e.documentMode&&e.documentMode<11);}(),getTranslate:function getTranslate(t){var e;return!(!t||!t.length)&&(e=t[0].getBoundingClientRect(),{top:e.top||0,left:e.left||0,width:e.width,height:e.height,opacity:parseFloat(t.css("opacity"))});},setTranslate:function setTranslate(t,e){var n="",o={};if(t&&e)return void 0===e.left&&void 0===e.top||(n=(void 0===e.left?t.position().left:e.left)+"px, "+(void 0===e.top?t.position().top:e.top)+"px",n=this.use3d?"translate3d("+n+", 0px)":"translate("+n+")"),void 0!==e.scaleX&&void 0!==e.scaleY?n+=" scale("+e.scaleX+", "+e.scaleY+")":void 0!==e.scaleX&&(n+=" scaleX("+e.scaleX+")"),n.length&&(o.transform=n),void 0!==e.opacity&&(o.opacity=e.opacity),void 0!==e.width&&(o.width=e.width),void 0!==e.height&&(o.height=e.height),t.css(o);},animate:function animate(t,e,o,i,a){var s,r=this;n.isFunction(o)&&(i=o,o=null),r.stop(t),s=r.getTranslate(t),t.on(f,function(c){(!c||!c.originalEvent||t.is(c.originalEvent.target)&&"z-index"!=c.originalEvent.propertyName)&&(r.stop(t),n.isNumeric(o)&&t.css("transition-duration",""),n.isPlainObject(e)?void 0!==e.scaleX&&void 0!==e.scaleY&&r.setTranslate(t,{top:e.top,left:e.left,width:s.width*e.scaleX,height:s.height*e.scaleY,scaleX:1,scaleY:1}):!0!==a&&t.removeClass(e),n.isFunction(i)&&i(c));}),n.isNumeric(o)&&t.css("transition-duration",o+"ms"),n.isPlainObject(e)?(void 0!==e.scaleX&&void 0!==e.scaleY&&(delete e.width,delete e.height,t.parent().hasClass("fancybox-slide--image")&&t.parent().addClass("fancybox-is-scaling")),n.fancybox.setTranslate(t,e)):t.addClass(e),t.data("timer",setTimeout(function(){t.trigger(f);},o+33));},stop:function stop(t,e){t&&t.length&&(clearTimeout(t.data("timer")),e&&t.trigger(f),t.off(f).css("transition-duration",""),t.parent().removeClass("fancybox-is-scaling"));}},n.fn.fancybox=function(t){var e;return t=t||{},e=t.selector||!1,e?n("body").off("click.fb-start",e).on("click.fb-start",e,{options:t},i):this.off("click.fb-start").on("click.fb-start",{items:this,options:t},i),this;},r.on("click.fb-start","[data-fancybox]",i),r.on("click.fb-start","[data-fancybox-trigger]",function(t){n('[data-fancybox="'+n(this).attr("data-fancybox-trigger")+'"]').eq(n(this).attr("data-fancybox-index")||0).trigger("click.fb-start",{$trigger:n(this)});}),function(){var t=null;r.on("mousedown mouseup focus blur",".fancybox-button",function(e){switch(e.type){case"mousedown":t=n(this);break;case"mouseup":t=null;break;case"focusin":n(".fancybox-button").removeClass("fancybox-focus"),n(this).is(t)||n(this).is("[disabled]")||n(this).addClass("fancybox-focus");break;case"focusout":n(".fancybox-button").removeClass("fancybox-focus");}});}();}}(window,document,jQuery),function(t){"use strict";var e={youtube:{matcher:/(youtube\.com|youtu\.be|youtube\-nocookie\.com)\/(watch\?(.*&)?v=|v\/|u\/|embed\/?)?(videoseries\?list=(.*)|[\w-]{11}|\?listType=(.*)&list=(.*))(.*)/i,params:{autoplay:1,autohide:1,fs:1,rel:0,hd:1,wmode:"transparent",enablejsapi:1,html5:1},paramPlace:8,type:"iframe",url:"https://www.youtube-nocookie.com/embed/$4",thumb:"https://img.youtube.com/vi/$4/hqdefault.jpg"},vimeo:{matcher:/^.+vimeo.com\/(.*\/)?([\d]+)(.*)?/,params:{autoplay:1,hd:1,show_title:1,show_byline:1,show_portrait:0,fullscreen:1},paramPlace:3,type:"iframe",url:"//player.vimeo.com/video/$2"},instagram:{matcher:/(instagr\.am|instagram\.com)\/p\/([a-zA-Z0-9_\-]+)\/?/i,type:"image",url:"//$1/p/$2/media/?size=l"},gmap_place:{matcher:/(maps\.)?google\.([a-z]{2,3}(\.[a-z]{2})?)\/(((maps\/(place\/(.*)\/)?\@(.*),(\d+.?\d+?)z))|(\?ll=))(.*)?/i,type:"iframe",url:function url(t){return"//maps.google."+t[2]+"/?ll="+(t[9]?t[9]+"&z="+Math.floor(t[10])+(t[12]?t[12].replace(/^\//,"&"):""):t[12]+"").replace(/\?/,"&")+"&output="+(t[12]&&t[12].indexOf("layer=c")>0?"svembed":"embed");}},gmap_search:{matcher:/(maps\.)?google\.([a-z]{2,3}(\.[a-z]{2})?)\/(maps\/search\/)(.*)/i,type:"iframe",url:function url(t){return"//maps.google."+t[2]+"/maps?q="+t[5].replace("query=","q=").replace("api=1","")+"&output=embed";}}},n=function n(e,_n,o){if(e)return o=o||"","object"===t.type(o)&&(o=t.param(o,!0)),t.each(_n,function(t,n){e=e.replace("$"+t,n||"");}),o.length&&(e+=(e.indexOf("?")>0?"&":"?")+o),e;};t(document).on("objectNeedsType.fb",function(o,i,a){var s,r,c,l,d,u,f,p=a.src||"",h=!1;s=t.extend(!0,{},e,a.opts.media),t.each(s,function(e,o){if(c=p.match(o.matcher)){if(h=o.type,f=e,u={},o.paramPlace&&c[o.paramPlace]){d=c[o.paramPlace],"?"==d[0]&&(d=d.substring(1)),d=d.split("&");for(var i=0;i<d.length;++i){var s=d[i].split("=",2);2==s.length&&(u[s[0]]=decodeURIComponent(s[1].replace(/\+/g," ")));}}return l=t.extend(!0,{},o.params,a.opts[e],u),p="function"===t.type(o.url)?o.url.call(this,c,l,a):n(o.url,c,l),r="function"===t.type(o.thumb)?o.thumb.call(this,c,l,a):n(o.thumb,c),"youtube"===e?p=p.replace(/&t=((\d+)m)?(\d+)s/,function(t,e,n,o){return"&start="+((n?60*parseInt(n,10):0)+parseInt(o,10));}):"vimeo"===e&&(p=p.replace("&%23","#")),!1;}}),h?(a.opts.thumb||a.opts.$thumb&&a.opts.$thumb.length||(a.opts.thumb=r),"iframe"===h&&(a.opts=t.extend(!0,a.opts,{iframe:{preload:!1,attr:{scrolling:"no"}}})),t.extend(a,{type:h,src:p,origSrc:a.src,contentSource:f,contentType:"image"===h?"image":"gmap_place"==f||"gmap_search"==f?"map":"video"})):p&&(a.type=a.opts.defaultType);});var o={youtube:{src:"https://www.youtube.com/iframe_api","class":"YT",loading:!1,loaded:!1},vimeo:{src:"https://player.vimeo.com/api/player.js","class":"Vimeo",loading:!1,loaded:!1},load:function load(t){var e,n=this;if(this[t].loaded)return void setTimeout(function(){n.done(t);});this[t].loading||(this[t].loading=!0,e=document.createElement("script"),e.type="text/javascript",e.src=this[t].src,"youtube"===t?window.onYouTubeIframeAPIReady=function(){n[t].loaded=!0,n.done(t);}:e.onload=function(){n[t].loaded=!0,n.done(t);},document.body.appendChild(e));},done:function done(e){var n,o,i;"youtube"===e&&delete window.onYouTubeIframeAPIReady,(n=t.fancybox.getInstance())&&(o=n.current.$content.find("iframe"),"youtube"===e&&void 0!==YT&&YT?i=new YT.Player(o.attr("id"),{events:{onStateChange:function onStateChange(t){0==t.data&&n.next();}}}):"vimeo"===e&&void 0!==Vimeo&&Vimeo&&(i=new Vimeo.Player(o),i.on("ended",function(){n.next();})));}};t(document).on({"afterShow.fb":function afterShowFb(t,e,n){e.group.length>1&&("youtube"===n.contentSource||"vimeo"===n.contentSource)&&o.load(n.contentSource);}});}(jQuery),function(t,e,n){"use strict";var o=function(){return t.requestAnimationFrame||t.webkitRequestAnimationFrame||t.mozRequestAnimationFrame||t.oRequestAnimationFrame||function(e){return t.setTimeout(e,1e3/60);};}(),i=function(){return t.cancelAnimationFrame||t.webkitCancelAnimationFrame||t.mozCancelAnimationFrame||t.oCancelAnimationFrame||function(e){t.clearTimeout(e);};}(),a=function a(e){var n=[];e=e.originalEvent||e||t.e,e=e.touches&&e.touches.length?e.touches:e.changedTouches&&e.changedTouches.length?e.changedTouches:[e];for(var o in e){e[o].pageX?n.push({x:e[o].pageX,y:e[o].pageY}):e[o].clientX&&n.push({x:e[o].clientX,y:e[o].clientY});}return n;},s=function s(t,e,n){return e&&t?"x"===n?t.x-e.x:"y"===n?t.y-e.y:Math.sqrt(Math.pow(t.x-e.x,2)+Math.pow(t.y-e.y,2)):0;},r=function r(t){if(t.is('a,area,button,[role="button"],input,label,select,summary,textarea,video,audio,iframe')||n.isFunction(t.get(0).onclick)||t.data("selectable"))return!0;for(var e=0,o=t[0].attributes,i=o.length;e<i;e++){if("data-fancybox-"===o[e].nodeName.substr(0,14))return!0;}return!1;},c=function c(e){var n=t.getComputedStyle(e)["overflow-y"],o=t.getComputedStyle(e)["overflow-x"],i=("scroll"===n||"auto"===n)&&e.scrollHeight>e.clientHeight,a=("scroll"===o||"auto"===o)&&e.scrollWidth>e.clientWidth;return i||a;},l=function l(t){for(var e=!1;;){if(e=c(t.get(0)))break;if(t=t.parent(),!t.length||t.hasClass("fancybox-stage")||t.is("body"))break;}return e;},d=function d(t){var e=this;e.instance=t,e.$bg=t.$refs.bg,e.$stage=t.$refs.stage,e.$container=t.$refs.container,e.destroy(),e.$container.on("touchstart.fb.touch mousedown.fb.touch",n.proxy(e,"ontouchstart"));};d.prototype.destroy=function(){var t=this;t.$container.off(".fb.touch"),n(e).off(".fb.touch"),t.requestId&&(i(t.requestId),t.requestId=null),t.tapped&&(clearTimeout(t.tapped),t.tapped=null);},d.prototype.ontouchstart=function(o){var i=this,c=n(o.target),d=i.instance,u=d.current,f=u.$slide,p=u.$content,h="touchstart"==o.type;if(h&&i.$container.off("mousedown.fb.touch"),(!o.originalEvent||2!=o.originalEvent.button)&&f.length&&c.length&&!r(c)&&!r(c.parent())&&(c.is("img")||!(o.originalEvent.clientX>c[0].clientWidth+c.offset().left))){if(!u||d.isAnimating||u.$slide.hasClass("fancybox-animated"))return o.stopPropagation(),void o.preventDefault();i.realPoints=i.startPoints=a(o),i.startPoints.length&&(u.touch&&o.stopPropagation(),i.startEvent=o,i.canTap=!0,i.$target=c,i.$content=p,i.opts=u.opts.touch,i.isPanning=!1,i.isSwiping=!1,i.isZooming=!1,i.isScrolling=!1,i.canPan=d.canPan(),i.startTime=new Date().getTime(),i.distanceX=i.distanceY=i.distance=0,i.canvasWidth=Math.round(f[0].clientWidth),i.canvasHeight=Math.round(f[0].clientHeight),i.contentLastPos=null,i.contentStartPos=n.fancybox.getTranslate(i.$content)||{top:0,left:0},i.sliderStartPos=n.fancybox.getTranslate(f),i.stagePos=n.fancybox.getTranslate(d.$refs.stage),i.sliderStartPos.top-=i.stagePos.top,i.sliderStartPos.left-=i.stagePos.left,i.contentStartPos.top-=i.stagePos.top,i.contentStartPos.left-=i.stagePos.left,n(e).off(".fb.touch").on(h?"touchend.fb.touch touchcancel.fb.touch":"mouseup.fb.touch mouseleave.fb.touch",n.proxy(i,"ontouchend")).on(h?"touchmove.fb.touch":"mousemove.fb.touch",n.proxy(i,"ontouchmove")),n.fancybox.isMobile&&e.addEventListener("scroll",i.onscroll,!0),((i.opts||i.canPan)&&(c.is(i.$stage)||i.$stage.find(c).length)||(c.is(".fancybox-image")&&o.preventDefault(),n.fancybox.isMobile&&c.parents(".fancybox-caption").length))&&(i.isScrollable=l(c)||l(c.parent()),n.fancybox.isMobile&&i.isScrollable||o.preventDefault(),(1===i.startPoints.length||u.hasError)&&(i.canPan?(n.fancybox.stop(i.$content),i.isPanning=!0):i.isSwiping=!0,i.$container.addClass("fancybox-is-grabbing")),2===i.startPoints.length&&"image"===u.type&&(u.isLoaded||u.$ghost)&&(i.canTap=!1,i.isSwiping=!1,i.isPanning=!1,i.isZooming=!0,n.fancybox.stop(i.$content),i.centerPointStartX=.5*(i.startPoints[0].x+i.startPoints[1].x)-n(t).scrollLeft(),i.centerPointStartY=.5*(i.startPoints[0].y+i.startPoints[1].y)-n(t).scrollTop(),i.percentageOfImageAtPinchPointX=(i.centerPointStartX-i.contentStartPos.left)/i.contentStartPos.width,i.percentageOfImageAtPinchPointY=(i.centerPointStartY-i.contentStartPos.top)/i.contentStartPos.height,i.startDistanceBetweenFingers=s(i.startPoints[0],i.startPoints[1]))));}},d.prototype.onscroll=function(t){var n=this;n.isScrolling=!0,e.removeEventListener("scroll",n.onscroll,!0);},d.prototype.ontouchmove=function(t){var e=this;return void 0!==t.originalEvent.buttons&&0===t.originalEvent.buttons?void e.ontouchend(t):e.isScrolling?void(e.canTap=!1):(e.newPoints=a(t),void((e.opts||e.canPan)&&e.newPoints.length&&e.newPoints.length&&(e.isSwiping&&!0===e.isSwiping||t.preventDefault(),e.distanceX=s(e.newPoints[0],e.startPoints[0],"x"),e.distanceY=s(e.newPoints[0],e.startPoints[0],"y"),e.distance=s(e.newPoints[0],e.startPoints[0]),e.distance>0&&(e.isSwiping?e.onSwipe(t):e.isPanning?e.onPan():e.isZooming&&e.onZoom()))));},d.prototype.onSwipe=function(e){var a,s=this,r=s.instance,c=s.isSwiping,l=s.sliderStartPos.left||0;if(!0!==c)"x"==c&&(s.distanceX>0&&(s.instance.group.length<2||0===s.instance.current.index&&!s.instance.current.opts.loop)?l+=Math.pow(s.distanceX,.8):s.distanceX<0&&(s.instance.group.length<2||s.instance.current.index===s.instance.group.length-1&&!s.instance.current.opts.loop)?l-=Math.pow(-s.distanceX,.8):l+=s.distanceX),s.sliderLastPos={top:"x"==c?0:s.sliderStartPos.top+s.distanceY,left:l},s.requestId&&(i(s.requestId),s.requestId=null),s.requestId=o(function(){s.sliderLastPos&&(n.each(s.instance.slides,function(t,e){var o=e.pos-s.instance.currPos;n.fancybox.setTranslate(e.$slide,{top:s.sliderLastPos.top,left:s.sliderLastPos.left+o*s.canvasWidth+o*e.opts.gutter});}),s.$container.addClass("fancybox-is-sliding"));});else if(Math.abs(s.distance)>10){if(s.canTap=!1,r.group.length<2&&s.opts.vertical?s.isSwiping="y":r.isDragging||!1===s.opts.vertical||"auto"===s.opts.vertical&&n(t).width()>800?s.isSwiping="x":(a=Math.abs(180*Math.atan2(s.distanceY,s.distanceX)/Math.PI),s.isSwiping=a>45&&a<135?"y":"x"),"y"===s.isSwiping&&n.fancybox.isMobile&&s.isScrollable)return void(s.isScrolling=!0);r.isDragging=s.isSwiping,s.startPoints=s.newPoints,n.each(r.slides,function(t,e){var o,i;n.fancybox.stop(e.$slide),o=n.fancybox.getTranslate(e.$slide),i=n.fancybox.getTranslate(r.$refs.stage),e.$slide.css({transform:"",opacity:"","transition-duration":""}).removeClass("fancybox-animated").removeClass(function(t,e){return(e.match(/(^|\s)fancybox-fx-\S+/g)||[]).join(" ");}),e.pos===r.current.pos&&(s.sliderStartPos.top=o.top-i.top,s.sliderStartPos.left=o.left-i.left),n.fancybox.setTranslate(e.$slide,{top:o.top-i.top,left:o.left-i.left});}),r.SlideShow&&r.SlideShow.isActive&&r.SlideShow.stop();}},d.prototype.onPan=function(){var t=this;if(s(t.newPoints[0],t.realPoints[0])<(n.fancybox.isMobile?10:5))return void(t.startPoints=t.newPoints);t.canTap=!1,t.contentLastPos=t.limitMovement(),t.requestId&&i(t.requestId),t.requestId=o(function(){n.fancybox.setTranslate(t.$content,t.contentLastPos);});},d.prototype.limitMovement=function(){var t,e,n,o,i,a,s=this,r=s.canvasWidth,c=s.canvasHeight,l=s.distanceX,d=s.distanceY,u=s.contentStartPos,f=u.left,p=u.top,h=u.width,g=u.height;return i=h>r?f+l:f,a=p+d,t=Math.max(0,.5*r-.5*h),e=Math.max(0,.5*c-.5*g),n=Math.min(r-h,.5*r-.5*h),o=Math.min(c-g,.5*c-.5*g),l>0&&i>t&&(i=t-1+Math.pow(-t+f+l,.8)||0),l<0&&i<n&&(i=n+1-Math.pow(n-f-l,.8)||0),d>0&&a>e&&(a=e-1+Math.pow(-e+p+d,.8)||0),d<0&&a<o&&(a=o+1-Math.pow(o-p-d,.8)||0),{top:a,left:i};},d.prototype.limitPosition=function(t,e,n,o){var i=this,a=i.canvasWidth,s=i.canvasHeight;return n>a?(t=t>0?0:t,t=t<a-n?a-n:t):t=Math.max(0,a/2-n/2),o>s?(e=e>0?0:e,e=e<s-o?s-o:e):e=Math.max(0,s/2-o/2),{top:e,left:t};},d.prototype.onZoom=function(){var e=this,a=e.contentStartPos,r=a.width,c=a.height,l=a.left,d=a.top,u=s(e.newPoints[0],e.newPoints[1]),f=u/e.startDistanceBetweenFingers,p=Math.floor(r*f),h=Math.floor(c*f),g=(r-p)*e.percentageOfImageAtPinchPointX,b=(c-h)*e.percentageOfImageAtPinchPointY,m=(e.newPoints[0].x+e.newPoints[1].x)/2-n(t).scrollLeft(),v=(e.newPoints[0].y+e.newPoints[1].y)/2-n(t).scrollTop(),y=m-e.centerPointStartX,x=v-e.centerPointStartY,w=l+(g+y),$=d+(b+x),S={top:$,left:w,scaleX:f,scaleY:f};e.canTap=!1,e.newWidth=p,e.newHeight=h,e.contentLastPos=S,e.requestId&&i(e.requestId),e.requestId=o(function(){n.fancybox.setTranslate(e.$content,e.contentLastPos);});},d.prototype.ontouchend=function(t){var o=this,s=o.isSwiping,r=o.isPanning,c=o.isZooming,l=o.isScrolling;if(o.endPoints=a(t),o.dMs=Math.max(new Date().getTime()-o.startTime,1),o.$container.removeClass("fancybox-is-grabbing"),n(e).off(".fb.touch"),e.removeEventListener("scroll",o.onscroll,!0),o.requestId&&(i(o.requestId),o.requestId=null),o.isSwiping=!1,o.isPanning=!1,o.isZooming=!1,o.isScrolling=!1,o.instance.isDragging=!1,o.canTap)return o.onTap(t);o.speed=100,o.velocityX=o.distanceX/o.dMs*.5,o.velocityY=o.distanceY/o.dMs*.5,r?o.endPanning():c?o.endZooming():o.endSwiping(s,l);},d.prototype.endSwiping=function(t,e){var o=this,i=!1,a=o.instance.group.length,s=Math.abs(o.distanceX),r="x"==t&&a>1&&(o.dMs>130&&s>10||s>50);o.sliderLastPos=null,"y"==t&&!e&&Math.abs(o.distanceY)>50?(n.fancybox.animate(o.instance.current.$slide,{top:o.sliderStartPos.top+o.distanceY+150*o.velocityY,opacity:0},200),i=o.instance.close(!0,250)):r&&o.distanceX>0?i=o.instance.previous(300):r&&o.distanceX<0&&(i=o.instance.next(300)),!1!==i||"x"!=t&&"y"!=t||o.instance.centerSlide(200),o.$container.removeClass("fancybox-is-sliding");},d.prototype.endPanning=function(){var t,e,o,i=this;i.contentLastPos&&(!1===i.opts.momentum||i.dMs>350?(t=i.contentLastPos.left,e=i.contentLastPos.top):(t=i.contentLastPos.left+500*i.velocityX,e=i.contentLastPos.top+500*i.velocityY),o=i.limitPosition(t,e,i.contentStartPos.width,i.contentStartPos.height),o.width=i.contentStartPos.width,o.height=i.contentStartPos.height,n.fancybox.animate(i.$content,o,366));},d.prototype.endZooming=function(){var t,e,o,i,a=this,s=a.instance.current,r=a.newWidth,c=a.newHeight;a.contentLastPos&&(t=a.contentLastPos.left,e=a.contentLastPos.top,i={top:e,left:t,width:r,height:c,scaleX:1,scaleY:1},n.fancybox.setTranslate(a.$content,i),r<a.canvasWidth&&c<a.canvasHeight?a.instance.scaleToFit(150):r>s.width||c>s.height?a.instance.scaleToActual(a.centerPointStartX,a.centerPointStartY,150):(o=a.limitPosition(t,e,r,c),n.fancybox.animate(a.$content,o,150)));},d.prototype.onTap=function(e){var o,i=this,s=n(e.target),r=i.instance,c=r.current,l=e&&a(e)||i.startPoints,d=l[0]?l[0].x-n(t).scrollLeft()-i.stagePos.left:0,u=l[0]?l[0].y-n(t).scrollTop()-i.stagePos.top:0,f=function f(t){var o=c.opts[t];if(n.isFunction(o)&&(o=o.apply(r,[c,e])),o)switch(o){case"close":r.close(i.startEvent);break;case"toggleControls":r.toggleControls();break;case"next":r.next();break;case"nextOrClose":r.group.length>1?r.next():r.close(i.startEvent);break;case"zoom":"image"==c.type&&(c.isLoaded||c.$ghost)&&(r.canPan()?r.scaleToFit():r.isScaledDown()?r.scaleToActual(d,u):r.group.length<2&&r.close(i.startEvent));}};if((!e.originalEvent||2!=e.originalEvent.button)&&(s.is("img")||!(d>s[0].clientWidth+s.offset().left))){if(s.is(".fancybox-bg,.fancybox-inner,.fancybox-outer,.fancybox-container"))o="Outside";else if(s.is(".fancybox-slide"))o="Slide";else{if(!r.current.$content||!r.current.$content.find(s).addBack().filter(s).length)return;o="Content";}if(i.tapped){if(clearTimeout(i.tapped),i.tapped=null,Math.abs(d-i.tapX)>50||Math.abs(u-i.tapY)>50)return this;f("dblclick"+o);}else i.tapX=d,i.tapY=u,c.opts["dblclick"+o]&&c.opts["dblclick"+o]!==c.opts["click"+o]?i.tapped=setTimeout(function(){i.tapped=null,r.isAnimating||f("click"+o);},500):f("click"+o);return this;}},n(e).on("onActivate.fb",function(t,e){e&&!e.Guestures&&(e.Guestures=new d(e));}).on("beforeClose.fb",function(t,e){e&&e.Guestures&&e.Guestures.destroy();});}(window,document,jQuery),function(t,e){"use strict";e.extend(!0,e.fancybox.defaults,{btnTpl:{slideShow:'<button data-fancybox-play class="fancybox-button fancybox-button--play" title="{{PLAY_START}}"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M6.5 5.4v13.2l11-6.6z"/></svg><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M8.33 5.75h2.2v12.5h-2.2V5.75zm5.15 0h2.2v12.5h-2.2V5.75z"/></svg></button>'},slideShow:{autoStart:!1,speed:3e3,progress:!0}});var n=function n(t){this.instance=t,this.init();};e.extend(n.prototype,{timer:null,isActive:!1,$button:null,init:function init(){var t=this,n=t.instance,o=n.group[n.currIndex].opts.slideShow;t.$button=n.$refs.toolbar.find("[data-fancybox-play]").on("click",function(){t.toggle();}),n.group.length<2||!o?t.$button.hide():o.progress&&(t.$progress=e('<div class="fancybox-progress"></div>').appendTo(n.$refs.inner));},set:function set(t){var n=this,o=n.instance,i=o.current;i&&(!0===t||i.opts.loop||o.currIndex<o.group.length-1)?n.isActive&&"video"!==i.contentType&&(n.$progress&&e.fancybox.animate(n.$progress.show(),{scaleX:1},i.opts.slideShow.speed),n.timer=setTimeout(function(){o.current.opts.loop||o.current.index!=o.group.length-1?o.next():o.jumpTo(0);},i.opts.slideShow.speed)):(n.stop(),o.idleSecondsCounter=0,o.showControls());},clear:function clear(){var t=this;clearTimeout(t.timer),t.timer=null,t.$progress&&t.$progress.removeAttr("style").hide();},start:function start(){var t=this,e=t.instance.current;e&&(t.$button.attr("title",(e.opts.i18n[e.opts.lang]||e.opts.i18n.en).PLAY_STOP).removeClass("fancybox-button--play").addClass("fancybox-button--pause"),t.isActive=!0,e.isComplete&&t.set(!0),t.instance.trigger("onSlideShowChange",!0));},stop:function stop(){var t=this,e=t.instance.current;t.clear(),t.$button.attr("title",(e.opts.i18n[e.opts.lang]||e.opts.i18n.en).PLAY_START).removeClass("fancybox-button--pause").addClass("fancybox-button--play"),t.isActive=!1,t.instance.trigger("onSlideShowChange",!1),t.$progress&&t.$progress.removeAttr("style").hide();},toggle:function toggle(){var t=this;t.isActive?t.stop():t.start();}}),e(t).on({"onInit.fb":function onInitFb(t,e){e&&!e.SlideShow&&(e.SlideShow=new n(e));},"beforeShow.fb":function beforeShowFb(t,e,n,o){var i=e&&e.SlideShow;o?i&&n.opts.slideShow.autoStart&&i.start():i&&i.isActive&&i.clear();},"afterShow.fb":function afterShowFb(t,e,n){var o=e&&e.SlideShow;o&&o.isActive&&o.set();},"afterKeydown.fb":function afterKeydownFb(n,o,i,a,s){var r=o&&o.SlideShow;!r||!i.opts.slideShow||80!==s&&32!==s||e(t.activeElement).is("button,a,input")||(a.preventDefault(),r.toggle());},"beforeClose.fb onDeactivate.fb":function beforeCloseFbOnDeactivateFb(t,e){var n=e&&e.SlideShow;n&&n.stop();}}),e(t).on("visibilitychange",function(){var n=e.fancybox.getInstance(),o=n&&n.SlideShow;o&&o.isActive&&(t.hidden?o.clear():o.set());});}(document,jQuery),function(t,e){"use strict";var n=function(){for(var e=[["requestFullscreen","exitFullscreen","fullscreenElement","fullscreenEnabled","fullscreenchange","fullscreenerror"],["webkitRequestFullscreen","webkitExitFullscreen","webkitFullscreenElement","webkitFullscreenEnabled","webkitfullscreenchange","webkitfullscreenerror"],["webkitRequestFullScreen","webkitCancelFullScreen","webkitCurrentFullScreenElement","webkitCancelFullScreen","webkitfullscreenchange","webkitfullscreenerror"],["mozRequestFullScreen","mozCancelFullScreen","mozFullScreenElement","mozFullScreenEnabled","mozfullscreenchange","mozfullscreenerror"],["msRequestFullscreen","msExitFullscreen","msFullscreenElement","msFullscreenEnabled","MSFullscreenChange","MSFullscreenError"]],n={},o=0;o<e.length;o++){var i=e[o];if(i&&i[1]in t){for(var a=0;a<i.length;a++){n[e[0][a]]=i[a];}return n;}}return!1;}();if(n){var o={request:function request(e){e=e||t.documentElement,e[n.requestFullscreen](e.ALLOW_KEYBOARD_INPUT);},exit:function exit(){t[n.exitFullscreen]();},toggle:function toggle(e){e=e||t.documentElement,this.isFullscreen()?this.exit():this.request(e);},isFullscreen:function isFullscreen(){return Boolean(t[n.fullscreenElement]);},enabled:function enabled(){return Boolean(t[n.fullscreenEnabled]);}};e.extend(!0,e.fancybox.defaults,{btnTpl:{fullScreen:'<button data-fancybox-fullscreen class="fancybox-button fancybox-button--fsenter" title="{{FULL_SCREEN}}"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M7 14H5v5h5v-2H7v-3zm-2-4h2V7h3V5H5v5zm12 7h-3v2h5v-5h-2v3zM14 5v2h3v3h2V5h-5z"/></svg><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M5 16h3v3h2v-5H5zm3-8H5v2h5V5H8zm6 11h2v-3h3v-2h-5zm2-11V5h-2v5h5V8z"/></svg></button>'},fullScreen:{autoStart:!1}}),e(t).on(n.fullscreenchange,function(){var t=o.isFullscreen(),n=e.fancybox.getInstance();n&&(n.current&&"image"===n.current.type&&n.isAnimating&&(n.isAnimating=!1,n.update(!0,!0,0),n.isComplete||n.complete()),n.trigger("onFullscreenChange",t),n.$refs.container.toggleClass("fancybox-is-fullscreen",t),n.$refs.toolbar.find("[data-fancybox-fullscreen]").toggleClass("fancybox-button--fsenter",!t).toggleClass("fancybox-button--fsexit",t));});}e(t).on({"onInit.fb":function onInitFb(t,e){var i;if(!n)return void e.$refs.toolbar.find("[data-fancybox-fullscreen]").remove();e&&e.group[e.currIndex].opts.fullScreen?(i=e.$refs.container,i.on("click.fb-fullscreen","[data-fancybox-fullscreen]",function(t){t.stopPropagation(),t.preventDefault(),o.toggle();}),e.opts.fullScreen&&!0===e.opts.fullScreen.autoStart&&o.request(),e.FullScreen=o):e&&e.$refs.toolbar.find("[data-fancybox-fullscreen]").hide();},"afterKeydown.fb":function afterKeydownFb(t,e,n,o,i){e&&e.FullScreen&&70===i&&(o.preventDefault(),e.FullScreen.toggle());},"beforeClose.fb":function beforeCloseFb(t,e){e&&e.FullScreen&&e.$refs.container.hasClass("fancybox-is-fullscreen")&&o.exit();}});}(document,jQuery),function(t,e){"use strict";var n="fancybox-thumbs";e.fancybox.defaults=e.extend(!0,{btnTpl:{thumbs:'<button data-fancybox-thumbs class="fancybox-button fancybox-button--thumbs" title="{{THUMBS}}"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M14.59 14.59h3.76v3.76h-3.76v-3.76zm-4.47 0h3.76v3.76h-3.76v-3.76zm-4.47 0h3.76v3.76H5.65v-3.76zm8.94-4.47h3.76v3.76h-3.76v-3.76zm-4.47 0h3.76v3.76h-3.76v-3.76zm-4.47 0h3.76v3.76H5.65v-3.76zm8.94-4.47h3.76v3.76h-3.76V5.65zm-4.47 0h3.76v3.76h-3.76V5.65zm-4.47 0h3.76v3.76H5.65V5.65z"/></svg></button>'},thumbs:{autoStart:!1,hideOnClose:!0,parentEl:".fancybox-container",axis:"y"}},e.fancybox.defaults);var o=function o(t){this.init(t);};e.extend(o.prototype,{$button:null,$grid:null,$list:null,isVisible:!1,isActive:!1,init:function init(t){var e=this,n=t.group,o=0;e.instance=t,e.opts=n[t.currIndex].opts.thumbs,t.Thumbs=e,e.$button=t.$refs.toolbar.find("[data-fancybox-thumbs]");for(var i=0,a=n.length;i<a&&(n[i].thumb&&o++,!(o>1));i++){;}o>1&&e.opts?(e.$button.removeAttr("style").on("click",function(){e.toggle();}),e.isActive=!0):e.$button.hide();},create:function create(){var t,o=this,i=o.instance,a=o.opts.parentEl,s=[];o.$grid||(o.$grid=e('<div class="'+n+" "+n+"-"+o.opts.axis+'"></div>').appendTo(i.$refs.container.find(a).addBack().filter(a)),o.$grid.on("click","a",function(){i.jumpTo(e(this).attr("data-index"));})),o.$list||(o.$list=e('<div class="'+n+'__list">').appendTo(o.$grid)),e.each(i.group,function(e,n){t=n.thumb,t||"image"!==n.type||(t=n.src),s.push('<a href="javascript:;" tabindex="0" data-index="'+e+'"'+(t&&t.length?' style="background-image:url('+t+')"':'class="fancybox-thumbs-missing"')+"></a>");}),o.$list[0].innerHTML=s.join(""),"x"===o.opts.axis&&o.$list.width(parseInt(o.$grid.css("padding-right"),10)+i.group.length*o.$list.children().eq(0).outerWidth(!0));},focus:function focus(t){var e,n,o=this,i=o.$list,a=o.$grid;o.instance.current&&(e=i.children().removeClass("fancybox-thumbs-active").filter('[data-index="'+o.instance.current.index+'"]').addClass("fancybox-thumbs-active"),n=e.position(),"y"===o.opts.axis&&(n.top<0||n.top>i.height()-e.outerHeight())?i.stop().animate({scrollTop:i.scrollTop()+n.top},t):"x"===o.opts.axis&&(n.left<a.scrollLeft()||n.left>a.scrollLeft()+(a.width()-e.outerWidth()))&&i.parent().stop().animate({scrollLeft:n.left},t));},update:function update(){var t=this;t.instance.$refs.container.toggleClass("fancybox-show-thumbs",this.isVisible),t.isVisible?(t.$grid||t.create(),t.instance.trigger("onThumbsShow"),t.focus(0)):t.$grid&&t.instance.trigger("onThumbsHide"),t.instance.update();},hide:function hide(){this.isVisible=!1,this.update();},show:function show(){this.isVisible=!0,this.update();},toggle:function toggle(){this.isVisible=!this.isVisible,this.update();}}),e(t).on({"onInit.fb":function onInitFb(t,e){var n;e&&!e.Thumbs&&(n=new o(e),n.isActive&&!0===n.opts.autoStart&&n.show());},"beforeShow.fb":function beforeShowFb(t,e,n,o){var i=e&&e.Thumbs;i&&i.isVisible&&i.focus(o?0:250);},"afterKeydown.fb":function afterKeydownFb(t,e,n,o,i){var a=e&&e.Thumbs;a&&a.isActive&&71===i&&(o.preventDefault(),a.toggle());},"beforeClose.fb":function beforeCloseFb(t,e){var n=e&&e.Thumbs;n&&n.isVisible&&!1!==n.opts.hideOnClose&&n.$grid.hide();}});}(document,jQuery),function(t,e){"use strict";function n(t){var e={"&":"&amp;","<":"&lt;",">":"&gt;",'"':"&quot;","'":"&#39;","/":"&#x2F;","`":"&#x60;","=":"&#x3D;"};return String(t).replace(/[&<>"'`=\/]/g,function(t){return e[t];});}e.extend(!0,e.fancybox.defaults,{btnTpl:{share:'<button data-fancybox-share class="fancybox-button fancybox-button--share" title="{{SHARE}}"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M2.55 19c1.4-8.4 9.1-9.8 11.9-9.8V5l7 7-7 6.3v-3.5c-2.8 0-10.5 2.1-11.9 4.2z"/></svg></button>'},share:{url:function url(t,e){return!t.currentHash&&"inline"!==e.type&&"html"!==e.type&&(e.origSrc||e.src)||window.location;},tpl:'<div class="fancybox-share"><h1>{{SHARE}}</h1><p><a class="fancybox-share__button fancybox-share__button--fb" href="https://www.facebook.com/sharer/sharer.php?u={{url}}"><svg viewBox="0 0 512 512" xmlns="http://www.w3.org/2000/svg"><path d="m287 456v-299c0-21 6-35 35-35h38v-63c-7-1-29-3-55-3-54 0-91 33-91 94v306m143-254h-205v72h196" /></svg><span>Facebook</span></a><a class="fancybox-share__button fancybox-share__button--tw" href="https://twitter.com/intent/tweet?url={{url}}&text={{descr}}"><svg viewBox="0 0 512 512" xmlns="http://www.w3.org/2000/svg"><path d="m456 133c-14 7-31 11-47 13 17-10 30-27 37-46-15 10-34 16-52 20-61-62-157-7-141 75-68-3-129-35-169-85-22 37-11 86 26 109-13 0-26-4-37-9 0 39 28 72 65 80-12 3-25 4-37 2 10 33 41 57 77 57-42 30-77 38-122 34 170 111 378-32 359-208 16-11 30-25 41-42z" /></svg><span>Twitter</span></a><a class="fancybox-share__button fancybox-share__button--pt" href="https://www.pinterest.com/pin/create/button/?url={{url}}&description={{descr}}&media={{media}}"><svg viewBox="0 0 512 512" xmlns="http://www.w3.org/2000/svg"><path d="m265 56c-109 0-164 78-164 144 0 39 15 74 47 87 5 2 10 0 12-5l4-19c2-6 1-8-3-13-9-11-15-25-15-45 0-58 43-110 113-110 62 0 96 38 96 88 0 67-30 122-73 122-24 0-42-19-36-44 6-29 20-60 20-81 0-19-10-35-31-35-25 0-44 26-44 60 0 21 7 36 7 36l-30 125c-8 37-1 83 0 87 0 3 4 4 5 2 2-3 32-39 42-75l16-64c8 16 31 29 56 29 74 0 124-67 124-157 0-69-58-132-146-132z" fill="#fff"/></svg><span>Pinterest</span></a></p><p><input class="fancybox-share__input" type="text" value="{{url_raw}}" onclick="select()" /></p></div>'}}),e(t).on("click","[data-fancybox-share]",function(){var t,o,i=e.fancybox.getInstance(),a=i.current||null;a&&("function"===e.type(a.opts.share.url)&&(t=a.opts.share.url.apply(a,[i,a])),o=a.opts.share.tpl.replace(/\{\{media\}\}/g,"image"===a.type?encodeURIComponent(a.src):"").replace(/\{\{url\}\}/g,encodeURIComponent(t)).replace(/\{\{url_raw\}\}/g,n(t)).replace(/\{\{descr\}\}/g,i.$caption?encodeURIComponent(i.$caption.text()):""),e.fancybox.open({src:i.translate(i,o),type:"html",opts:{touch:!1,animationEffect:!1,afterLoad:function afterLoad(t,e){i.$refs.container.one("beforeClose.fb",function(){t.close(null,0);}),e.$content.find(".fancybox-share__button").click(function(){return window.open(this.href,"Share","width=550, height=450"),!1;});},mobile:{autoFocus:!1}}}));});}(document,jQuery),function(t,e,n){"use strict";function o(){var e=t.location.hash.substr(1),n=e.split("-"),o=n.length>1&&/^\+?\d+$/.test(n[n.length-1])?parseInt(n.pop(-1),10)||1:1,i=n.join("-");return{hash:e,index:o<1?1:o,gallery:i};}function i(t){""!==t.gallery&&n("[data-fancybox='"+n.escapeSelector(t.gallery)+"']").eq(t.index-1).focus().trigger("click.fb-start");}function a(t){var e,n;return!!t&&(e=t.current?t.current.opts:t.opts,""!==(n=e.hash||(e.$orig?e.$orig.data("fancybox")||e.$orig.data("fancybox-trigger"):""))&&n);}n.escapeSelector||(n.escapeSelector=function(t){return(t+"").replace(/([\0-\x1f\x7f]|^-?\d)|^-$|[^\x80-\uFFFF\w-]/g,function(t,e){return e?"\0"===t?"�":t.slice(0,-1)+"\\"+t.charCodeAt(t.length-1).toString(16)+" ":"\\"+t;});}),n(function(){!1!==n.fancybox.defaults.hash&&(n(e).on({"onInit.fb":function onInitFb(t,e){var n,i;!1!==e.group[e.currIndex].opts.hash&&(n=o(),(i=a(e))&&n.gallery&&i==n.gallery&&(e.currIndex=n.index-1));},"beforeShow.fb":function beforeShowFb(n,o,i,s){var r;i&&!1!==i.opts.hash&&(r=a(o))&&(o.currentHash=r+(o.group.length>1?"-"+(i.index+1):""),t.location.hash!=="#"+o.currentHash&&(s&&!o.origHash&&(o.origHash=t.location.hash),o.hashTimer&&clearTimeout(o.hashTimer),o.hashTimer=setTimeout(function(){"replaceState"in t.history?(t.history[s?"pushState":"replaceState"]({},e.title,t.location.pathname+t.location.search+"#"+o.currentHash),s&&(o.hasCreatedHistory=!0)):t.location.hash=o.currentHash,o.hashTimer=null;},300)));},"beforeClose.fb":function beforeCloseFb(n,o,i){i&&!1!==i.opts.hash&&(clearTimeout(o.hashTimer),o.currentHash&&o.hasCreatedHistory?t.history.back():o.currentHash&&("replaceState"in t.history?t.history.replaceState({},e.title,t.location.pathname+t.location.search+(o.origHash||"")):t.location.hash=o.origHash),o.currentHash=null);}}),n(t).on("hashchange.fb",function(){var t=o(),e=null;n.each(n(".fancybox-container").get().reverse(),function(t,o){var i=n(o).data("FancyBox");if(i&&i.currentHash)return e=i,!1;}),e?e.currentHash===t.gallery+"-"+t.index||1===t.index&&e.currentHash==t.gallery||(e.currentHash=null,e.close()):""!==t.gallery&&i(t);}),setTimeout(function(){n.fancybox.getInstance()||i(o());},50));});}(window,document,jQuery),function(t,e){"use strict";var n=new Date().getTime();e(t).on({"onInit.fb":function onInitFb(t,e,o){e.$refs.stage.on("mousewheel DOMMouseScroll wheel MozMousePixelScroll",function(t){var o=e.current,i=new Date().getTime();e.group.length<2||!1===o.opts.wheel||"auto"===o.opts.wheel&&"image"!==o.type||(t.preventDefault(),t.stopPropagation(),o.$slide.hasClass("fancybox-animated")||(t=t.originalEvent||t,i-n<250||(n=i,e[(-t.deltaY||-t.deltaX||t.wheelDelta||-t.detail)<0?"next":"previous"]())));});}});}(document,jQuery);/*!
 * @fileOverview TouchSwipe - jQuery Plugin
 * @version 1.6.18
 *
 * @author Matt Bryson http://www.github.com/mattbryson
 * @see https://github.com/mattbryson/TouchSwipe-Jquery-Plugin
 * @see http://labs.rampinteractive.co.uk/touchSwipe/
 * @see http://plugins.jquery.com/project/touchSwipe
 * @license
 * Copyright (c) 2010-2015 Matt Bryson
 * Dual licensed under the MIT or GPL Version 2 licenses.
 *
 */ /*
 *
 * Changelog
 * $Date: 2010-12-12 (Wed, 12 Dec 2010) $
 * $version: 1.0.0
 * $version: 1.0.1 - removed multibyte comments
 *
 * $Date: 2011-21-02 (Mon, 21 Feb 2011) $
 * $version: 1.1.0 	- added allowPageScroll property to allow swiping and scrolling of page
 *					- changed handler signatures so one handler can be used for multiple events
 * $Date: 2011-23-02 (Wed, 23 Feb 2011) $
 * $version: 1.2.0 	- added click handler. This is fired if the user simply clicks and does not swipe. The event object and click target are passed to handler.
 *					- If you use the http://code.google.com/p/jquery-ui-for-ipad-and-iphone/ plugin, you can also assign jQuery mouse events to children of a touchSwipe object.
 * $version: 1.2.1 	- removed console log!
 *
 * $version: 1.2.2 	- Fixed bug where scope was not preserved in callback methods.
 *
 * $Date: 2011-28-04 (Thurs, 28 April 2011) $
 * $version: 1.2.4 	- Changed licence terms to be MIT or GPL inline with jQuery. Added check for support of touch events to stop non compatible browsers erroring.
 *
 * $Date: 2011-27-09 (Tues, 27 September 2011) $
 * $version: 1.2.5 	- Added support for testing swipes with mouse on desktop browser (thanks to https://github.com/joelhy)
 *
 * $Date: 2012-14-05 (Mon, 14 May 2012) $
 * $version: 1.2.6 	- Added timeThreshold between start and end touch, so user can ignore slow swipes (thanks to Mark Chase). Default is null, all swipes are detected
 *
 * $Date: 2012-05-06 (Tues, 05 June 2012) $
 * $version: 1.2.7 	- Changed time threshold to have null default for backwards compatibility. Added duration param passed back in events, and refactored how time is handled.
 *
 * $Date: 2012-05-06 (Tues, 05 June 2012) $
 * $version: 1.2.8 	- Added the possibility to return a value like null or false in the trigger callback. In that way we can control when the touch start/move should take effect or not (simply by returning in some cases return null; or return false;) This effects the ontouchstart/ontouchmove event.
 *
 * $Date: 2012-06-06 (Wed, 06 June 2012) $
 * $version: 1.3.0 	- Refactored whole plugin to allow for methods to be executed, as well as exposed defaults for user override. Added 'enable', 'disable', and 'destroy' methods
 *
 * $Date: 2012-05-06 (Fri, 05 June 2012) $
 * $version: 1.3.1 	- Bug fixes  - bind() with false as last argument is no longer supported in jQuery 1.6, also, if you just click, the duration is now returned correctly.
 *
 * $Date: 2012-29-07 (Sun, 29 July 2012) $
 * $version: 1.3.2	- Added fallbackToMouseEvents option to NOT capture mouse events on non touch devices.
 * 			- Added "all" fingers value to the fingers property, so any combination of fingers triggers the swipe, allowing event handlers to check the finger count
 *
 * $Date: 2012-09-08 (Thurs, 9 Aug 2012) $
 * $version: 1.3.3	- Code tidy prep for min version
 *
 * $Date: 2012-04-10 (wed, 4 Oct 2012) $
 * $version: 1.4.0	- Added pinch support, pinchIn and pinchOut
 *
 * $Date: 2012-11-10 (Thurs, 11 Oct 2012) $
 * $version: 1.5.0	- Added excludedElements, a jquery selector that specifies child elements that do NOT trigger swipes. By default, this is .noSwipe
 *
 * $Date: 2012-22-10 (Mon, 22 Oct 2012) $
 * $version: 1.5.1	- Fixed bug with jQuery 1.8 and trailing comma in excludedElements
 *					- Fixed bug with IE and eventPreventDefault()
 * $Date: 2013-01-12 (Fri, 12 Jan 2013) $
 * $version: 1.6.0	- Fixed bugs with pinching, mainly when both pinch and swipe enabled, as well as adding time threshold for multifinger gestures, so releasing one finger beofre the other doesnt trigger as single finger gesture.
 *					- made the demo site all static local HTML pages so they can be run locally by a developer
 *					- added jsDoc comments and added documentation for the plugin
 *					- code tidy
 *					- added triggerOnTouchLeave property that will end the event when the user swipes off the element.
 * $Date: 2013-03-23 (Sat, 23 Mar 2013) $
 * $version: 1.6.1	- Added support for ie8 touch events
 * $version: 1.6.2	- Added support for events binding with on / off / bind in jQ for all callback names.
 *                   - Deprecated the 'click' handler in favour of tap.
 *                   - added cancelThreshold property
 *                   - added option method to update init options at runtime
 * $version 1.6.3    - added doubletap, longtap events and longTapThreshold, doubleTapThreshold property
 *
 * $Date: 2013-04-04 (Thurs, 04 April 2013) $
 * $version 1.6.4    - Fixed bug with cancelThreshold introduced in 1.6.3, where swipe status no longer fired start event, and stopped once swiping back.
 *
 * $Date: 2013-08-24 (Sat, 24 Aug 2013) $
 * $version 1.6.5    - Merged a few pull requests fixing various bugs, added AMD support.
 *
 * $Date: 2014-06-04 (Wed, 04 June 2014) $
 * $version 1.6.6 	- Merge of pull requests.
 *    				- IE10 touch support
 *    				- Only prevent default event handling on valid swipe
 *    				- Separate license/changelog comment
 *    				- Detect if the swipe is valid at the end of the touch event.
 *    				- Pass fingerdata to event handlers.
 *    				- Add 'hold' gesture
 *    				- Be more tolerant about the tap distance
 *    				- Typos and minor fixes
 *
 * $Date: 2015-22-01 (Thurs, 22 Jan 2015) $
 * $version 1.6.7    - Added patch from https://github.com/mattbryson/TouchSwipe-Jquery-Plugin/issues/206 to fix memory leak
 *
 * $Date: 2015-2-2 (Mon, 2 Feb 2015) $
 * $version 1.6.8    - Added preventDefaultEvents option to proxy events regardless.
 *					- Fixed issue with swipe and pinch not triggering at the same time
 *
 * $Date: 2015-9-6 (Tues, 9 June 2015) $
 * $version 1.6.9    - Added PR from jdalton/hybrid to fix pointer events
 *					- Added scrolling demo
 *					- Added version property to plugin
 *
 * $Date: 2015-1-10 (Wed, 1 October 2015) $
 * $version 1.6.10    - Added PR from beatspace to fix tap events
 * $version 1.6.11    - Added PRs from indri-indri ( Doc tidyup), kkirsche ( Bower tidy up ), UziTech (preventDefaultEvents fixes )
 *					 - Allowed setting multiple options via .swipe("options", options_hash) and more simply .swipe(options_hash) or exisitng instances
 * $version 1.6.12    - Fixed bug with multi finger releases above 2 not triggering events
 *
 * $Date: 2015-12-18 (Fri, 18 December 2015) $
 * $version 1.6.13    - Added PRs
 *                    - Fixed #267 allowPageScroll not working correctly
 * $version 1.6.14    - Fixed #220 / #248 doubletap not firing with swipes, #223 commonJS compatible
 * $version 1.6.15    - More bug fixes
 *
 * $Date: 2016-04-29 (Fri, 29 April 2016) $
 * $version 1.6.16    - Swipes with 0 distance now allow default events to trigger.  So tapping any form elements or A tags will allow default interaction, but swiping will trigger a swipe.
 *                       Removed the a, input, select etc from the excluded Children list as the 0 distance tap solves that issue.
 * $Date: 2016-05-19  (Fri, 29 April 2016) $
 * $version 1.6.17     - Fixed context issue when calling instance methods via $("selector").swipe("method");
 * $version 1.6.18     - now honors fallbackToMouseEvents=false for MS Pointer events when a Mouse is used.
 * 
 * $Date: 2018-09-17  (Mon, 17 September 2018) $
 * $version 1.6.19     - replaced jQuery bind with on, replaced deprecated `navigator.pointerEvents` with `window.PointerEvents`

 */ /**
 * See (http://jquery.com/).
 * @name $
 * @class
 * See the jQuery Library  (http://jquery.com/) for full details.  This just
 * documents the function and classes that are added to jQuery by this plug-in.
 */ /**
 * See (http://jquery.com/)
 * @name fn
 * @class
 * See the jQuery Library  (http://jquery.com/) for full details.  This just
 * documents the function and classes that are added to jQuery by this plug-in.
 * @memberOf $
 */(function(factory){if(typeof define==='function'&&define.amd&&define.amd.jQuery){// AMD. Register as anonymous module.
define(['jquery'],factory);}else if(typeof module!=='undefined'&&module.exports){// CommonJS Module
factory(require("jquery"));}else{// Browser globals.
factory(jQuery);}})(function($){"use strict";//Constants
var VERSION="1.6.18",LEFT="left",RIGHT="right",UP="up",DOWN="down",IN="in",OUT="out",NONE="none",AUTO="auto",SWIPE="swipe",PINCH="pinch",TAP="tap",DOUBLE_TAP="doubletap",LONG_TAP="longtap",HOLD="hold",HORIZONTAL="horizontal",VERTICAL="vertical",ALL_FINGERS="all",DOUBLE_TAP_THRESHOLD=10,PHASE_START="start",PHASE_MOVE="move",PHASE_END="end",PHASE_CANCEL="cancel",SUPPORTS_TOUCH=('ontouchstart'in window),SUPPORTS_POINTER_IE10=window.navigator.msPointerEnabled&&!window.PointerEvent&&!SUPPORTS_TOUCH,SUPPORTS_POINTER=(window.PointerEvent||window.navigator.msPointerEnabled)&&!SUPPORTS_TOUCH,PLUGIN_NS='TouchSwipe';/**
  * The default configuration, and available options to configure touch swipe with.
  * You can set the default values by updating any of the properties prior to instantiation.
  * @name $.fn.swipe.defaults
  * @namespace
  * @property {int} [fingers=1] The number of fingers to detect in a swipe. Any swipes that do not meet this requirement will NOT trigger swipe handlers.
  * @property {int} [threshold=75] The number of pixels that the user must move their finger by before it is considered a swipe.
  * @property {int} [cancelThreshold=null] The number of pixels that the user must move their finger back from the original swipe direction to cancel the gesture.
  * @property {int} [pinchThreshold=20] The number of pixels that the user must pinch their finger by before it is considered a pinch.
  * @property {int} [maxTimeThreshold=null] Time, in milliseconds, between touchStart and touchEnd must NOT exceed in order to be considered a swipe.
  * @property {int} [fingerReleaseThreshold=250] Time in milliseconds between releasing multiple fingers.  If 2 fingers are down, and are released one after the other, if they are within this threshold, it counts as a simultaneous release.
  * @property {int} [longTapThreshold=500] Time in milliseconds between tap and release for a long tap
  * @property {int} [doubleTapThreshold=200] Time in milliseconds between 2 taps to count as a double tap
  * @property {function} [swipe=null] A handler to catch all swipes. See {@link $.fn.swipe#event:swipe}
  * @property {function} [swipeLeft=null] A handler that is triggered for "left" swipes. See {@link $.fn.swipe#event:swipeLeft}
  * @property {function} [swipeRight=null] A handler that is triggered for "right" swipes. See {@link $.fn.swipe#event:swipeRight}
  * @property {function} [swipeUp=null] A handler that is triggered for "up" swipes. See {@link $.fn.swipe#event:swipeUp}
  * @property {function} [swipeDown=null] A handler that is triggered for "down" swipes. See {@link $.fn.swipe#event:swipeDown}
  * @property {function} [swipeStatus=null] A handler triggered for every phase of the swipe. See {@link $.fn.swipe#event:swipeStatus}
  * @property {function} [pinchIn=null] A handler triggered for pinch in events. See {@link $.fn.swipe#event:pinchIn}
  * @property {function} [pinchOut=null] A handler triggered for pinch out events. See {@link $.fn.swipe#event:pinchOut}
  * @property {function} [pinchStatus=null] A handler triggered for every phase of a pinch. See {@link $.fn.swipe#event:pinchStatus}
  * @property {function} [tap=null] A handler triggered when a user just taps on the item, rather than swipes it. If they do not move, tap is triggered, if they do move, it is not.
  * @property {function} [doubleTap=null] A handler triggered when a user double taps on the item. The delay between taps can be set with the doubleTapThreshold property. See {@link $.fn.swipe.defaults#doubleTapThreshold}
  * @property {function} [longTap=null] A handler triggered when a user long taps on the item. The delay between start and end can be set with the longTapThreshold property. See {@link $.fn.swipe.defaults#longTapThreshold}
  * @property (function) [hold=null] A handler triggered when a user reaches longTapThreshold on the item. See {@link $.fn.swipe.defaults#longTapThreshold}
  * @property {boolean} [triggerOnTouchEnd=true] If true, the swipe events are triggered when the touch end event is received (user releases finger).  If false, it will be triggered on reaching the threshold, and then cancel the touch event automatically.
  * @property {boolean} [triggerOnTouchLeave=false] If true, then when the user leaves the swipe object, the swipe will end and trigger appropriate handlers.
  * @property {string|undefined} [allowPageScroll='auto'] How the browser handles page scrolls when the user is swiping on a touchSwipe object. See {@link $.fn.swipe.pageScroll}.  <br/><br/>
                    <code>"auto"</code> : all undefined swipes will cause the page to scroll in that direction. <br/>
                    <code>"none"</code> : the page will not scroll when user swipes. <br/>
                    <code>"horizontal"</code> : will force page to scroll on horizontal swipes. <br/>
                    <code>"vertical"</code> : will force page to scroll on vertical swipes. <br/>
  * @property {boolean} [fallbackToMouseEvents=true] If true mouse events are used when run on a non touch device, false will stop swipes being triggered by mouse events on non touch devices.
  * @property {string} [excludedElements=".noSwipe"] A jquery selector that specifies child elements that do NOT trigger swipes. By default this excludes elements with the class .noSwipe .
  * @property {boolean} [preventDefaultEvents=true] by default default events are cancelled, so the page doesn't move.  You can disable this so both native events fire as well as your handlers.

  */var defaults={fingers:1,threshold:75,cancelThreshold:null,pinchThreshold:20,maxTimeThreshold:null,fingerReleaseThreshold:250,longTapThreshold:500,doubleTapThreshold:200,swipe:null,swipeLeft:null,swipeRight:null,swipeUp:null,swipeDown:null,swipeStatus:null,pinchIn:null,pinchOut:null,pinchStatus:null,click:null,//Deprecated since 1.6.2
tap:null,doubleTap:null,longTap:null,hold:null,triggerOnTouchEnd:true,triggerOnTouchLeave:false,allowPageScroll:"auto",fallbackToMouseEvents:true,excludedElements:".noSwipe",preventDefaultEvents:true};/**
   * Applies TouchSwipe behaviour to one or more jQuery objects.
   * The TouchSwipe plugin can be instantiated via this method, or methods within
   * TouchSwipe can be executed via this method as per jQuery plugin architecture.
   * An existing plugin can have its options changed simply by re calling .swipe(options)
   * @see TouchSwipe
   * @class
   * @param {Mixed} method If the current DOMNode is a TouchSwipe object, and <code>method</code> is a TouchSwipe method, then
   * the <code>method</code> is executed, and any following arguments are passed to the TouchSwipe method.
   * If <code>method</code> is an object, then the TouchSwipe class is instantiated on the current DOMNode, passing the
   * configuration properties defined in the object. See TouchSwipe
   *
   */$.fn.swipe=function(method){var $this=$(this),plugin=$this.data(PLUGIN_NS);//Check if we are already instantiated and trying to execute a method
if(plugin&&typeof method==='string'){if(plugin[method]){return plugin[method].apply(plugin,Array.prototype.slice.call(arguments,1));}else{$.error('Method '+method+' does not exist on jQuery.swipe');}}//Else update existing plugin with new options hash
else if(plugin&&_typeof(method)==='object'){plugin['option'].apply(plugin,arguments);}//Else not instantiated and trying to pass init object (or nothing)
else if(!plugin&&(_typeof(method)==='object'||!method)){return init.apply(this,arguments);}return $this;};/**
   * The version of the plugin
   * @readonly
   */$.fn.swipe.version=VERSION;//Expose our defaults so a user could override the plugin defaults
$.fn.swipe.defaults=defaults;/**
   * The phases that a touch event goes through.  The <code>phase</code> is passed to the event handlers.
   * These properties are read only, attempting to change them will not alter the values passed to the event handlers.
   * @namespace
   * @readonly
   * @property {string} PHASE_START Constant indicating the start phase of the touch event. Value is <code>"start"</code>.
   * @property {string} PHASE_MOVE Constant indicating the move phase of the touch event. Value is <code>"move"</code>.
   * @property {string} PHASE_END Constant indicating the end phase of the touch event. Value is <code>"end"</code>.
   * @property {string} PHASE_CANCEL Constant indicating the cancel phase of the touch event. Value is <code>"cancel"</code>.
   */$.fn.swipe.phases={PHASE_START:PHASE_START,PHASE_MOVE:PHASE_MOVE,PHASE_END:PHASE_END,PHASE_CANCEL:PHASE_CANCEL};/**
   * The direction constants that are passed to the event handlers.
   * These properties are read only, attempting to change them will not alter the values passed to the event handlers.
   * @namespace
   * @readonly
   * @property {string} LEFT Constant indicating the left direction. Value is <code>"left"</code>.
   * @property {string} RIGHT Constant indicating the right direction. Value is <code>"right"</code>.
   * @property {string} UP Constant indicating the up direction. Value is <code>"up"</code>.
   * @property {string} DOWN Constant indicating the down direction. Value is <code>"cancel"</code>.
   * @property {string} IN Constant indicating the in direction. Value is <code>"in"</code>.
   * @property {string} OUT Constant indicating the out direction. Value is <code>"out"</code>.
   */$.fn.swipe.directions={LEFT:LEFT,RIGHT:RIGHT,UP:UP,DOWN:DOWN,IN:IN,OUT:OUT};/**
   * The page scroll constants that can be used to set the value of <code>allowPageScroll</code> option
   * These properties are read only
   * @namespace
   * @readonly
   * @see $.fn.swipe.defaults#allowPageScroll
   * @property {string} NONE Constant indicating no page scrolling is allowed. Value is <code>"none"</code>.
   * @property {string} HORIZONTAL Constant indicating horizontal page scrolling is allowed. Value is <code>"horizontal"</code>.
   * @property {string} VERTICAL Constant indicating vertical page scrolling is allowed. Value is <code>"vertical"</code>.
   * @property {string} AUTO Constant indicating either horizontal or vertical will be allowed, depending on the swipe handlers registered. Value is <code>"auto"</code>.
   */$.fn.swipe.pageScroll={NONE:NONE,HORIZONTAL:HORIZONTAL,VERTICAL:VERTICAL,AUTO:AUTO};/**
   * Constants representing the number of fingers used in a swipe.  These are used to set both the value of <code>fingers</code> in the
   * options object, as well as the value of the <code>fingers</code> event property.
   * These properties are read only, attempting to change them will not alter the values passed to the event handlers.
   * @namespace
   * @readonly
   * @see $.fn.swipe.defaults#fingers
   * @property {string} ONE Constant indicating 1 finger is to be detected / was detected. Value is <code>1</code>.
   * @property {string} TWO Constant indicating 2 fingers are to be detected / were detected. Value is <code>2</code>.
   * @property {string} THREE Constant indicating 3 finger are to be detected / were detected. Value is <code>3</code>.
   * @property {string} FOUR Constant indicating 4 finger are to be detected / were detected. Not all devices support this. Value is <code>4</code>.
   * @property {string} FIVE Constant indicating 5 finger are to be detected / were detected. Not all devices support this. Value is <code>5</code>.
   * @property {string} ALL Constant indicating any combination of finger are to be detected.  Value is <code>"all"</code>.
   */$.fn.swipe.fingers={ONE:1,TWO:2,THREE:3,FOUR:4,FIVE:5,ALL:ALL_FINGERS};/**
   * Initialise the plugin for each DOM element matched
   * This creates a new instance of the main TouchSwipe class for each DOM element, and then
   * saves a reference to that instance in the elements data property.
   * @internal
   */function init(options){//Prep and extend the options
if(options&&options.allowPageScroll===undefined&&(options.swipe!==undefined||options.swipeStatus!==undefined)){options.allowPageScroll=NONE;}//Check for deprecated options
//Ensure that any old click handlers are assigned to the new tap, unless we have a tap
if(options.click!==undefined&&options.tap===undefined){options.tap=options.click;}if(!options){options={};}//pass empty object so we dont modify the defaults
options=$.extend({},$.fn.swipe.defaults,options);//For each element instantiate the plugin
return this.each(function(){var $this=$(this);//Check we havent already initialised the plugin
var plugin=$this.data(PLUGIN_NS);if(!plugin){plugin=new TouchSwipe(this,options);$this.data(PLUGIN_NS,plugin);}});}/**
   * Main TouchSwipe Plugin Class.
   * Do not use this to construct your TouchSwipe object, use the jQuery plugin method $.fn.swipe(); {@link $.fn.swipe}
   * @private
   * @name TouchSwipe
   * @param {DOMNode} element The HTML DOM object to apply to plugin to
   * @param {Object} options The options to configure the plugin with.  @link {$.fn.swipe.defaults}
   * @see $.fh.swipe.defaults
   * @see $.fh.swipe
   * @class
   */function TouchSwipe(element,options){//take a local/instacne level copy of the options - should make it this.options really...
var options=$.extend({},options);var useTouchEvents=SUPPORTS_TOUCH||SUPPORTS_POINTER||!options.fallbackToMouseEvents,START_EV=useTouchEvents?SUPPORTS_POINTER?SUPPORTS_POINTER_IE10?'MSPointerDown':'pointerdown':'touchstart':'mousedown',MOVE_EV=useTouchEvents?SUPPORTS_POINTER?SUPPORTS_POINTER_IE10?'MSPointerMove':'pointermove':'touchmove':'mousemove',END_EV=useTouchEvents?SUPPORTS_POINTER?SUPPORTS_POINTER_IE10?'MSPointerUp':'pointerup':'touchend':'mouseup',LEAVE_EV=useTouchEvents?SUPPORTS_POINTER?'mouseleave':null:'mouseleave',//we manually detect leave on touch devices, so null event here
CANCEL_EV=SUPPORTS_POINTER?SUPPORTS_POINTER_IE10?'MSPointerCancel':'pointercancel':'touchcancel';//touch properties
var distance=0,direction=null,currentDirection=null,duration=0,startTouchesDistance=0,endTouchesDistance=0,pinchZoom=1,pinchDistance=0,pinchDirection=0,maximumsMap=null;//jQuery wrapped element for this instance
var $element=$(element);//Current phase of th touch cycle
var phase="start";// the current number of fingers being used.
var fingerCount=0;//track mouse points / delta
var fingerData={};//track times
var startTime=0,endTime=0,previousTouchEndTime=0,fingerCountAtRelease=0,doubleTapStartTime=0;//Timeouts
var singleTapTimeout=null,holdTimeout=null;// Add gestures to all swipable areas if supported
try{$element.on(START_EV,touchStart);$element.on(CANCEL_EV,touchCancel);}catch(e){$.error('events not supported '+START_EV+','+CANCEL_EV+' on jQuery.swipe');}//
//Public methods
//
/**
     * re-enables the swipe plugin with the previous configuration
     * @function
     * @name $.fn.swipe#enable
     * @return {DOMNode} The Dom element that was registered with TouchSwipe
     * @example $("#element").swipe("enable");
     */this.enable=function(){//Incase we are already enabled, clean up...
this.disable();$element.on(START_EV,touchStart);$element.on(CANCEL_EV,touchCancel);return $element;};/**
     * disables the swipe plugin
     * @function
     * @name $.fn.swipe#disable
     * @return {DOMNode} The Dom element that is now registered with TouchSwipe
     * @example $("#element").swipe("disable");
     */this.disable=function(){removeListeners();return $element;};/**
     * Destroy the swipe plugin completely. To use any swipe methods, you must re initialise the plugin.
     * @function
     * @name $.fn.swipe#destroy
     * @example $("#element").swipe("destroy");
     */this.destroy=function(){removeListeners();$element.data(PLUGIN_NS,null);$element=null;};/**
     * Allows run time updating of the swipe configuration options.
     * @function
     * @name $.fn.swipe#option
     * @param {String} property The option property to get or set, or a has of multiple options to set
     * @param {Object} [value] The value to set the property to
     * @return {Object} If only a property name is passed, then that property value is returned. If nothing is passed the current options hash is returned.
     * @example $("#element").swipe("option", "threshold"); // return the threshold
     * @example $("#element").swipe("option", "threshold", 100); // set the threshold after init
     * @example $("#element").swipe("option", {threshold:100, fingers:3} ); // set multiple properties after init
     * @example $("#element").swipe({threshold:100, fingers:3} ); // set multiple properties after init - the "option" method is optional!
     * @example $("#element").swipe("option"); // Return the current options hash
     * @see $.fn.swipe.defaults
     *
     */this.option=function(property,value){if(_typeof(property)==='object'){options=$.extend(options,property);}else if(options[property]!==undefined){if(value===undefined){return options[property];}else{options[property]=value;}}else if(!property){return options;}else{$.error('Option '+property+' does not exist on jQuery.swipe.options');}return null;};//
// Private methods
//
//
// EVENTS
//
/**
     * Event handler for a touch start event.
     * Stops the default click event from triggering and stores where we touched
     * @inner
     * @param {object} jqEvent The normalised jQuery event object.
     */function touchStart(jqEvent){//If we already in a touch event (a finger already in use) then ignore subsequent ones..
if(getTouchInProgress()){return;}//Check if this element matches any in the excluded elements selectors,  or its parent is excluded, if so, DON'T swipe
if($(jqEvent.target).closest(options.excludedElements,$element).length>0){return;}//As we use Jquery bind for events, we need to target the original event object
//If these events are being programmatically triggered, we don't have an original event object, so use the Jq one.
var event=jqEvent.originalEvent?jqEvent.originalEvent:jqEvent;//If we have a pointer event, whoes type is 'mouse' and we have said NO mouse events, then dont do anything.
if(event.pointerType&&event.pointerType=="mouse"&&options.fallbackToMouseEvents==false){return;};var ret,touches=event.touches,evt=touches?touches[0]:event;phase=PHASE_START;//If we support touches, get the finger count
if(touches){// get the total number of fingers touching the screen
fingerCount=touches.length;}//Else this is the desktop, so stop the browser from dragging content
else if(options.preventDefaultEvents!==false){jqEvent.preventDefault();//call this on jq event so we are cross browser
}//clear vars..
distance=0;direction=null;currentDirection=null;pinchDirection=null;duration=0;startTouchesDistance=0;endTouchesDistance=0;pinchZoom=1;pinchDistance=0;maximumsMap=createMaximumsData();cancelMultiFingerRelease();//Create the default finger data
createFingerData(0,evt);// check the number of fingers is what we are looking for, or we are capturing pinches
if(!touches||fingerCount===options.fingers||options.fingers===ALL_FINGERS||hasPinches()){// get the coordinates of the touch
startTime=getTimeStamp();if(fingerCount==2){//Keep track of the initial pinch distance, so we can calculate the diff later
//Store second finger data as start
createFingerData(1,touches[1]);startTouchesDistance=endTouchesDistance=calculateTouchesDistance(fingerData[0].start,fingerData[1].start);}if(options.swipeStatus||options.pinchStatus){ret=triggerHandler(event,phase);}}else{//A touch with more or less than the fingers we are looking for, so cancel
ret=false;}//If we have a return value from the users handler, then return and cancel
if(ret===false){phase=PHASE_CANCEL;triggerHandler(event,phase);return ret;}else{if(options.hold){holdTimeout=setTimeout($.proxy(function(){//Trigger the event
$element.trigger('hold',[event.target]);//Fire the callback
if(options.hold){ret=options.hold.call($element,event,event.target);}},this),options.longTapThreshold);}setTouchInProgress(true);}return null;};/**
     * Event handler for a touch move event.
     * If we change fingers during move, then cancel the event
     * @inner
     * @param {object} jqEvent The normalised jQuery event object.
     */function touchMove(jqEvent){//As we use Jquery bind for events, we need to target the original event object
//If these events are being programmatically triggered, we don't have an original event object, so use the Jq one.
var event=jqEvent.originalEvent?jqEvent.originalEvent:jqEvent;//If we are ending, cancelling, or within the threshold of 2 fingers being released, don't track anything..
if(phase===PHASE_END||phase===PHASE_CANCEL||inMultiFingerRelease())return;var ret,touches=event.touches,evt=touches?touches[0]:event;//Update the  finger data
var currentFinger=updateFingerData(evt);endTime=getTimeStamp();if(touches){fingerCount=touches.length;}if(options.hold){clearTimeout(holdTimeout);}phase=PHASE_MOVE;//If we have 2 fingers get Touches distance as well
if(fingerCount==2){//Keep track of the initial pinch distance, so we can calculate the diff later
//We do this here as well as the start event, in case they start with 1 finger, and the press 2 fingers
if(startTouchesDistance==0){//Create second finger if this is the first time...
createFingerData(1,touches[1]);startTouchesDistance=endTouchesDistance=calculateTouchesDistance(fingerData[0].start,fingerData[1].start);}else{//Else just update the second finger
updateFingerData(touches[1]);endTouchesDistance=calculateTouchesDistance(fingerData[0].end,fingerData[1].end);pinchDirection=calculatePinchDirection(fingerData[0].end,fingerData[1].end);}pinchZoom=calculatePinchZoom(startTouchesDistance,endTouchesDistance);pinchDistance=Math.abs(startTouchesDistance-endTouchesDistance);}if(fingerCount===options.fingers||options.fingers===ALL_FINGERS||!touches||hasPinches()){//The overall direction of the swipe. From start to now.
direction=calculateDirection(currentFinger.start,currentFinger.end);//The immediate direction of the swipe, direction between the last movement and this one.
currentDirection=calculateDirection(currentFinger.last,currentFinger.end);//Check if we need to prevent default event (page scroll / pinch zoom) or not
validateDefaultEvent(jqEvent,currentDirection);//Distance and duration are all off the main finger
distance=calculateDistance(currentFinger.start,currentFinger.end);duration=calculateDuration();//Cache the maximum distance we made in this direction
setMaxDistance(direction,distance);//Trigger status handler
ret=triggerHandler(event,phase);//If we trigger end events when threshold are met, or trigger events when touch leaves element
if(!options.triggerOnTouchEnd||options.triggerOnTouchLeave){var inBounds=true;//If checking if we leave the element, run the bounds check (we can use touchleave as its not supported on webkit)
if(options.triggerOnTouchLeave){var bounds=getbounds(this);inBounds=isInBounds(currentFinger.end,bounds);}//Trigger end handles as we swipe if thresholds met or if we have left the element if the user has asked to check these..
if(!options.triggerOnTouchEnd&&inBounds){phase=getNextPhase(PHASE_MOVE);}//We end if out of bounds here, so set current phase to END, and check if its modified
else if(options.triggerOnTouchLeave&&!inBounds){phase=getNextPhase(PHASE_END);}if(phase==PHASE_CANCEL||phase==PHASE_END){triggerHandler(event,phase);}}}else{phase=PHASE_CANCEL;triggerHandler(event,phase);}if(ret===false){phase=PHASE_CANCEL;triggerHandler(event,phase);}}/**
     * Event handler for a touch end event.
     * Calculate the direction and trigger events
     * @inner
     * @param {object} jqEvent The normalised jQuery event object.
     */function touchEnd(jqEvent){//As we use Jquery bind for events, we need to target the original event object
//If these events are being programmatically triggered, we don't have an original event object, so use the Jq one.
var event=jqEvent.originalEvent?jqEvent.originalEvent:jqEvent,touches=event.touches;//If we are still in a touch with the device wait a fraction and see if the other finger comes up
//if it does within the threshold, then we treat it as a multi release, not a single release and end the touch / swipe
if(touches){if(touches.length&&!inMultiFingerRelease()){startMultiFingerRelease(event);return true;}else if(touches.length&&inMultiFingerRelease()){return true;}}//If a previous finger has been released, check how long ago, if within the threshold, then assume it was a multifinger release.
//This is used to allow 2 fingers to release fractionally after each other, whilst maintaining the event as containing 2 fingers, not 1
if(inMultiFingerRelease()){fingerCount=fingerCountAtRelease;}//Set end of swipe
endTime=getTimeStamp();//Get duration incase move was never fired
duration=calculateDuration();//If we trigger handlers at end of swipe OR, we trigger during, but they didnt trigger and we are still in the move phase
if(didSwipeBackToCancel()||!validateSwipeDistance()){phase=PHASE_CANCEL;triggerHandler(event,phase);}else if(options.triggerOnTouchEnd||options.triggerOnTouchEnd===false&&phase===PHASE_MOVE){//call this on jq event so we are cross browser
if(options.preventDefaultEvents!==false&&jqEvent.cancelable!==false){jqEvent.preventDefault();}phase=PHASE_END;triggerHandler(event,phase);}//Special cases - A tap should always fire on touch end regardless,
//So here we manually trigger the tap end handler by itself
//We dont run trigger handler as it will re-trigger events that may have fired already
else if(!options.triggerOnTouchEnd&&hasTap()){//Trigger the pinch events...
phase=PHASE_END;triggerHandlerForGesture(event,phase,TAP);}else if(phase===PHASE_MOVE){phase=PHASE_CANCEL;triggerHandler(event,phase);}setTouchInProgress(false);return null;}/**
     * Event handler for a touch cancel event.
     * Clears current vars
     * @inner
     */function touchCancel(){// reset the variables back to default values
fingerCount=0;endTime=0;startTime=0;startTouchesDistance=0;endTouchesDistance=0;pinchZoom=1;//If we were in progress of tracking a possible multi touch end, then re set it.
cancelMultiFingerRelease();setTouchInProgress(false);}/**
     * Event handler for a touch leave event.
     * This is only triggered on desktops, in touch we work this out manually
     * as the touchleave event is not supported in webkit
     * @inner
     */function touchLeave(jqEvent){//If these events are being programmatically triggered, we don't have an original event object, so use the Jq one.
var event=jqEvent.originalEvent?jqEvent.originalEvent:jqEvent;//If we have the trigger on leave property set....
if(options.triggerOnTouchLeave){phase=getNextPhase(PHASE_END);triggerHandler(event,phase);}}/**
     * Removes all listeners that were associated with the plugin
     * @inner
     */function removeListeners(){$element.off(START_EV,touchStart);$element.off(CANCEL_EV,touchCancel);$element.off(MOVE_EV,touchMove);$element.off(END_EV,touchEnd);//we only have leave events on desktop, we manually calculate leave on touch as its not supported in webkit
if(LEAVE_EV){$element.off(LEAVE_EV,touchLeave);}setTouchInProgress(false);}/**
     * Checks if the time and distance thresholds have been met, and if so then the appropriate handlers are fired.
     */function getNextPhase(currentPhase){var nextPhase=currentPhase;// Ensure we have valid swipe (under time and over distance  and check if we are out of bound...)
var validTime=validateSwipeTime();var validDistance=validateSwipeDistance();var didCancel=didSwipeBackToCancel();//If we have exceeded our time, then cancel
if(!validTime||didCancel){nextPhase=PHASE_CANCEL;}//Else if we are moving, and have reached distance then end
else if(validDistance&&currentPhase==PHASE_MOVE&&(!options.triggerOnTouchEnd||options.triggerOnTouchLeave)){nextPhase=PHASE_END;}//Else if we have ended by leaving and didn't reach distance, then cancel
else if(!validDistance&&currentPhase==PHASE_END&&options.triggerOnTouchLeave){nextPhase=PHASE_CANCEL;}return nextPhase;}/**
     * Trigger the relevant event handler
     * The handlers are passed the original event, the element that was swiped, and in the case of the catch all handler, the direction that was swiped, "left", "right", "up", or "down"
     * @param {object} event the original event object
     * @param {string} phase the phase of the swipe (start, end cancel etc) {@link $.fn.swipe.phases}
     * @inner
     */function triggerHandler(event,phase){var ret,touches=event.touches;// SWIPE GESTURES
if(didSwipe()||hasSwipes()){ret=triggerHandlerForGesture(event,phase,SWIPE);}// PINCH GESTURES (if the above didn't cancel)
if((didPinch()||hasPinches())&&ret!==false){ret=triggerHandlerForGesture(event,phase,PINCH);}// CLICK / TAP (if the above didn't cancel)
if(didDoubleTap()&&ret!==false){//Trigger the tap events...
ret=triggerHandlerForGesture(event,phase,DOUBLE_TAP);}// CLICK / TAP (if the above didn't cancel)
else if(didLongTap()&&ret!==false){//Trigger the tap events...
ret=triggerHandlerForGesture(event,phase,LONG_TAP);}// CLICK / TAP (if the above didn't cancel)
else if(didTap()&&ret!==false){//Trigger the tap event..
ret=triggerHandlerForGesture(event,phase,TAP);}// If we are cancelling the gesture, then manually trigger the reset handler
if(phase===PHASE_CANCEL){touchCancel(event);}// If we are ending the gesture, then manually trigger the reset handler IF all fingers are off
if(phase===PHASE_END){//If we support touch, then check that all fingers are off before we cancel
if(touches){if(!touches.length){touchCancel(event);}}else{touchCancel(event);}}return ret;}/**
     * Trigger the relevant event handler
     * The handlers are passed the original event, the element that was swiped, and in the case of the catch all handler, the direction that was swiped, "left", "right", "up", or "down"
     * @param {object} event the original event object
     * @param {string} phase the phase of the swipe (start, end cancel etc) {@link $.fn.swipe.phases}
     * @param {string} gesture the gesture to trigger a handler for : PINCH or SWIPE {@link $.fn.swipe.gestures}
     * @return Boolean False, to indicate that the event should stop propagation, or void.
     * @inner
     */function triggerHandlerForGesture(event,phase,gesture){var ret;//SWIPES....
if(gesture==SWIPE){//Trigger status every time..
$element.trigger('swipeStatus',[phase,direction||null,distance||0,duration||0,fingerCount,fingerData,currentDirection]);if(options.swipeStatus){ret=options.swipeStatus.call($element,event,phase,direction||null,distance||0,duration||0,fingerCount,fingerData,currentDirection);//If the status cancels, then dont run the subsequent event handlers..
if(ret===false)return false;}if(phase==PHASE_END&&validateSwipe()){//Cancel any taps that were in progress...
clearTimeout(singleTapTimeout);clearTimeout(holdTimeout);$element.trigger('swipe',[direction,distance,duration,fingerCount,fingerData,currentDirection]);if(options.swipe){ret=options.swipe.call($element,event,direction,distance,duration,fingerCount,fingerData,currentDirection);//If the status cancels, then dont run the subsequent event handlers..
if(ret===false)return false;}//trigger direction specific event handlers
switch(direction){case LEFT:$element.trigger('swipeLeft',[direction,distance,duration,fingerCount,fingerData,currentDirection]);if(options.swipeLeft){ret=options.swipeLeft.call($element,event,direction,distance,duration,fingerCount,fingerData,currentDirection);}break;case RIGHT:$element.trigger('swipeRight',[direction,distance,duration,fingerCount,fingerData,currentDirection]);if(options.swipeRight){ret=options.swipeRight.call($element,event,direction,distance,duration,fingerCount,fingerData,currentDirection);}break;case UP:$element.trigger('swipeUp',[direction,distance,duration,fingerCount,fingerData,currentDirection]);if(options.swipeUp){ret=options.swipeUp.call($element,event,direction,distance,duration,fingerCount,fingerData,currentDirection);}break;case DOWN:$element.trigger('swipeDown',[direction,distance,duration,fingerCount,fingerData,currentDirection]);if(options.swipeDown){ret=options.swipeDown.call($element,event,direction,distance,duration,fingerCount,fingerData,currentDirection);}break;}}}//PINCHES....
if(gesture==PINCH){$element.trigger('pinchStatus',[phase,pinchDirection||null,pinchDistance||0,duration||0,fingerCount,pinchZoom,fingerData]);if(options.pinchStatus){ret=options.pinchStatus.call($element,event,phase,pinchDirection||null,pinchDistance||0,duration||0,fingerCount,pinchZoom,fingerData);//If the status cancels, then dont run the subsequent event handlers..
if(ret===false)return false;}if(phase==PHASE_END&&validatePinch()){switch(pinchDirection){case IN:$element.trigger('pinchIn',[pinchDirection||null,pinchDistance||0,duration||0,fingerCount,pinchZoom,fingerData]);if(options.pinchIn){ret=options.pinchIn.call($element,event,pinchDirection||null,pinchDistance||0,duration||0,fingerCount,pinchZoom,fingerData);}break;case OUT:$element.trigger('pinchOut',[pinchDirection||null,pinchDistance||0,duration||0,fingerCount,pinchZoom,fingerData]);if(options.pinchOut){ret=options.pinchOut.call($element,event,pinchDirection||null,pinchDistance||0,duration||0,fingerCount,pinchZoom,fingerData);}break;}}}if(gesture==TAP){if(phase===PHASE_CANCEL||phase===PHASE_END){clearTimeout(singleTapTimeout);clearTimeout(holdTimeout);//If we are also looking for doubelTaps, wait incase this is one...
if(hasDoubleTap()&&!inDoubleTap()){doubleTapStartTime=getTimeStamp();//Now wait for the double tap timeout, and trigger this single tap
//if its not cancelled by a double tap
singleTapTimeout=setTimeout($.proxy(function(){doubleTapStartTime=null;$element.trigger('tap',[event.target]);if(options.tap){ret=options.tap.call($element,event,event.target);}},this),options.doubleTapThreshold);}else{doubleTapStartTime=null;$element.trigger('tap',[event.target]);if(options.tap){ret=options.tap.call($element,event,event.target);}}}}else if(gesture==DOUBLE_TAP){if(phase===PHASE_CANCEL||phase===PHASE_END){clearTimeout(singleTapTimeout);clearTimeout(holdTimeout);doubleTapStartTime=null;$element.trigger('doubletap',[event.target]);if(options.doubleTap){ret=options.doubleTap.call($element,event,event.target);}}}else if(gesture==LONG_TAP){if(phase===PHASE_CANCEL||phase===PHASE_END){clearTimeout(singleTapTimeout);doubleTapStartTime=null;$element.trigger('longtap',[event.target]);if(options.longTap){ret=options.longTap.call($element,event,event.target);}}}return ret;}//
// GESTURE VALIDATION
//
/**
     * Checks the user has swipe far enough
     * @return Boolean if <code>threshold</code> has been set, return true if the threshold was met, else false.
     * If no threshold was set, then we return true.
     * @inner
     */function validateSwipeDistance(){var valid=true;//If we made it past the min swipe distance..
if(options.threshold!==null){valid=distance>=options.threshold;}return valid;}/**
     * Checks the user has swiped back to cancel.
     * @return Boolean if <code>cancelThreshold</code> has been set, return true if the cancelThreshold was met, else false.
     * If no cancelThreshold was set, then we return true.
     * @inner
     */function didSwipeBackToCancel(){var cancelled=false;if(options.cancelThreshold!==null&&direction!==null){cancelled=getMaxDistance(direction)-distance>=options.cancelThreshold;}return cancelled;}/**
     * Checks the user has pinched far enough
     * @return Boolean if <code>pinchThreshold</code> has been set, return true if the threshold was met, else false.
     * If no threshold was set, then we return true.
     * @inner
     */function validatePinchDistance(){if(options.pinchThreshold!==null){return pinchDistance>=options.pinchThreshold;}return true;}/**
     * Checks that the time taken to swipe meets the minimum / maximum requirements
     * @return Boolean
     * @inner
     */function validateSwipeTime(){var result;//If no time set, then return true
if(options.maxTimeThreshold){if(duration>=options.maxTimeThreshold){result=false;}else{result=true;}}else{result=true;}return result;}/**
     * Checks direction of the swipe and the value allowPageScroll to see if we should allow or prevent the default behaviour from occurring.
     * This will essentially allow page scrolling or not when the user is swiping on a touchSwipe object.
     * @param {object} jqEvent The normalised jQuery representation of the event object.
     * @param {string} direction The direction of the event. See {@link $.fn.swipe.directions}
     * @see $.fn.swipe.directions
     * @inner
     */function validateDefaultEvent(jqEvent,direction){//If the option is set, allways allow the event to bubble up (let user handle weirdness)
if(options.preventDefaultEvents===false){return;}if(options.allowPageScroll===NONE){jqEvent.preventDefault();}else{var auto=options.allowPageScroll===AUTO;switch(direction){case LEFT:if(options.swipeLeft&&auto||!auto&&options.allowPageScroll!=HORIZONTAL){jqEvent.preventDefault();}break;case RIGHT:if(options.swipeRight&&auto||!auto&&options.allowPageScroll!=HORIZONTAL){jqEvent.preventDefault();}break;case UP:if(options.swipeUp&&auto||!auto&&options.allowPageScroll!=VERTICAL){jqEvent.preventDefault();}break;case DOWN:if(options.swipeDown&&auto||!auto&&options.allowPageScroll!=VERTICAL){jqEvent.preventDefault();}break;case NONE:break;}}}// PINCHES
/**
     * Returns true of the current pinch meets the thresholds
     * @return Boolean
     * @inner
     */function validatePinch(){var hasCorrectFingerCount=validateFingers();var hasEndPoint=validateEndPoint();var hasCorrectDistance=validatePinchDistance();return hasCorrectFingerCount&&hasEndPoint&&hasCorrectDistance;}/**
     * Returns true if any Pinch events have been registered
     * @return Boolean
     * @inner
     */function hasPinches(){//Enure we dont return 0 or null for false values
return!!(options.pinchStatus||options.pinchIn||options.pinchOut);}/**
     * Returns true if we are detecting pinches, and have one
     * @return Boolean
     * @inner
     */function didPinch(){//Enure we dont return 0 or null for false values
return!!(validatePinch()&&hasPinches());}// SWIPES
/**
     * Returns true if the current swipe meets the thresholds
     * @return Boolean
     * @inner
     */function validateSwipe(){//Check validity of swipe
var hasValidTime=validateSwipeTime();var hasValidDistance=validateSwipeDistance();var hasCorrectFingerCount=validateFingers();var hasEndPoint=validateEndPoint();var didCancel=didSwipeBackToCancel();// if the user swiped more than the minimum length, perform the appropriate action
// hasValidDistance is null when no distance is set
var valid=!didCancel&&hasEndPoint&&hasCorrectFingerCount&&hasValidDistance&&hasValidTime;return valid;}/**
     * Returns true if any Swipe events have been registered
     * @return Boolean
     * @inner
     */function hasSwipes(){//Enure we dont return 0 or null for false values
return!!(options.swipe||options.swipeStatus||options.swipeLeft||options.swipeRight||options.swipeUp||options.swipeDown);}/**
     * Returns true if we are detecting swipes and have one
     * @return Boolean
     * @inner
     */function didSwipe(){//Enure we dont return 0 or null for false values
return!!(validateSwipe()&&hasSwipes());}/**
     * Returns true if we have matched the number of fingers we are looking for
     * @return Boolean
     * @inner
     */function validateFingers(){//The number of fingers we want were matched, or on desktop we ignore
return fingerCount===options.fingers||options.fingers===ALL_FINGERS||!SUPPORTS_TOUCH;}/**
     * Returns true if we have an end point for the swipe
     * @return Boolean
     * @inner
     */function validateEndPoint(){//We have an end value for the finger
return fingerData[0].end.x!==0;}// TAP / CLICK
/**
     * Returns true if a click / tap events have been registered
     * @return Boolean
     * @inner
     */function hasTap(){//Enure we dont return 0 or null for false values
return!!options.tap;}/**
     * Returns true if a double tap events have been registered
     * @return Boolean
     * @inner
     */function hasDoubleTap(){//Enure we dont return 0 or null for false values
return!!options.doubleTap;}/**
     * Returns true if any long tap events have been registered
     * @return Boolean
     * @inner
     */function hasLongTap(){//Enure we dont return 0 or null for false values
return!!options.longTap;}/**
     * Returns true if we could be in the process of a double tap (one tap has occurred, we are listening for double taps, and the threshold hasn't past.
     * @return Boolean
     * @inner
     */function validateDoubleTap(){if(doubleTapStartTime==null){return false;}var now=getTimeStamp();return hasDoubleTap()&&now-doubleTapStartTime<=options.doubleTapThreshold;}/**
     * Returns true if we could be in the process of a double tap (one tap has occurred, we are listening for double taps, and the threshold hasn't past.
     * @return Boolean
     * @inner
     */function inDoubleTap(){return validateDoubleTap();}/**
     * Returns true if we have a valid tap
     * @return Boolean
     * @inner
     */function validateTap(){return(fingerCount===1||!SUPPORTS_TOUCH)&&(isNaN(distance)||distance<options.threshold);}/**
     * Returns true if we have a valid long tap
     * @return Boolean
     * @inner
     */function validateLongTap(){//slight threshold on moving finger
return duration>options.longTapThreshold&&distance<DOUBLE_TAP_THRESHOLD;}/**
     * Returns true if we are detecting taps and have one
     * @return Boolean
     * @inner
     */function didTap(){//Enure we dont return 0 or null for false values
return!!(validateTap()&&hasTap());}/**
     * Returns true if we are detecting double taps and have one
     * @return Boolean
     * @inner
     */function didDoubleTap(){//Enure we dont return 0 or null for false values
return!!(validateDoubleTap()&&hasDoubleTap());}/**
     * Returns true if we are detecting long taps and have one
     * @return Boolean
     * @inner
     */function didLongTap(){//Enure we dont return 0 or null for false values
return!!(validateLongTap()&&hasLongTap());}// MULTI FINGER TOUCH
/**
     * Starts tracking the time between 2 finger releases, and keeps track of how many fingers we initially had up
     * @inner
     */function startMultiFingerRelease(event){previousTouchEndTime=getTimeStamp();fingerCountAtRelease=event.touches.length+1;}/**
     * Cancels the tracking of time between 2 finger releases, and resets counters
     * @inner
     */function cancelMultiFingerRelease(){previousTouchEndTime=0;fingerCountAtRelease=0;}/**
     * Checks if we are in the threshold between 2 fingers being released
     * @return Boolean
     * @inner
     */function inMultiFingerRelease(){var withinThreshold=false;if(previousTouchEndTime){var diff=getTimeStamp()-previousTouchEndTime;if(diff<=options.fingerReleaseThreshold){withinThreshold=true;}}return withinThreshold;}/**
     * gets a data flag to indicate that a touch is in progress
     * @return Boolean
     * @inner
     */function getTouchInProgress(){//strict equality to ensure only true and false are returned
return!!($element.data(PLUGIN_NS+'_intouch')===true);}/**
     * Sets a data flag to indicate that a touch is in progress
     * @param {boolean} val The value to set the property to
     * @inner
     */function setTouchInProgress(val){//If destroy is called in an event handler, we have no el, and we have already cleaned up, so return.
if(!$element){return;}//Add or remove event listeners depending on touch status
if(val===true){$element.on(MOVE_EV,touchMove);$element.on(END_EV,touchEnd);//we only have leave events on desktop, we manually calcuate leave on touch as its not supported in webkit
if(LEAVE_EV){$element.on(LEAVE_EV,touchLeave);}}else{$element.off(MOVE_EV,touchMove,false);$element.off(END_EV,touchEnd,false);//we only have leave events on desktop, we manually calcuate leave on touch as its not supported in webkit
if(LEAVE_EV){$element.off(LEAVE_EV,touchLeave,false);}}//strict equality to ensure only true and false can update the value
$element.data(PLUGIN_NS+'_intouch',val===true);}/**
     * Creates the finger data for the touch/finger in the event object.
     * @param {int} id The id to store the finger data under (usually the order the fingers were pressed)
     * @param {object} evt The event object containing finger data
     * @return finger data object
     * @inner
     */function createFingerData(id,evt){var f={start:{x:0,y:0},last:{x:0,y:0},end:{x:0,y:0}};f.start.x=f.last.x=f.end.x=evt.pageX||evt.clientX;f.start.y=f.last.y=f.end.y=evt.pageY||evt.clientY;fingerData[id]=f;return f;}/**
     * Updates the finger data for a particular event object
     * @param {object} evt The event object containing the touch/finger data to upadte
     * @return a finger data object.
     * @inner
     */function updateFingerData(evt){var id=evt.identifier!==undefined?evt.identifier:0;var f=getFingerData(id);if(f===null){f=createFingerData(id,evt);}f.last.x=f.end.x;f.last.y=f.end.y;f.end.x=evt.pageX||evt.clientX;f.end.y=evt.pageY||evt.clientY;return f;}/**
     * Returns a finger data object by its event ID.
     * Each touch event has an identifier property, which is used
     * to track repeat touches
     * @param {int} id The unique id of the finger in the sequence of touch events.
     * @return a finger data object.
     * @inner
     */function getFingerData(id){return fingerData[id]||null;}/**
     * Sets the maximum distance swiped in the given direction.
     * If the new value is lower than the current value, the max value is not changed.
     * @param {string}  direction The direction of the swipe
     * @param {int}  distance The distance of the swipe
     * @inner
     */function setMaxDistance(direction,distance){if(direction==NONE)return;distance=Math.max(distance,getMaxDistance(direction));maximumsMap[direction].distance=distance;}/**
     * gets the maximum distance swiped in the given direction.
     * @param {string}  direction The direction of the swipe
     * @return int  The distance of the swipe
     * @inner
     */function getMaxDistance(direction){if(maximumsMap[direction])return maximumsMap[direction].distance;return undefined;}/**
     * Creats a map of directions to maximum swiped values.
     * @return Object A dictionary of maximum values, indexed by direction.
     * @inner
     */function createMaximumsData(){var maxData={};maxData[LEFT]=createMaximumVO(LEFT);maxData[RIGHT]=createMaximumVO(RIGHT);maxData[UP]=createMaximumVO(UP);maxData[DOWN]=createMaximumVO(DOWN);return maxData;}/**
     * Creates a map maximum swiped values for a given swipe direction
     * @param {string} The direction that these values will be associated with
     * @return Object Maximum values
     * @inner
     */function createMaximumVO(dir){return{direction:dir,distance:0};}//
// MATHS / UTILS
//
/**
     * Calculate the duration of the swipe
     * @return int
     * @inner
     */function calculateDuration(){return endTime-startTime;}/**
     * Calculate the distance between 2 touches (pinch)
     * @param {point} startPoint A point object containing x and y co-ordinates
     * @param {point} endPoint A point object containing x and y co-ordinates
     * @return int;
     * @inner
     */function calculateTouchesDistance(startPoint,endPoint){var diffX=Math.abs(startPoint.x-endPoint.x);var diffY=Math.abs(startPoint.y-endPoint.y);return Math.round(Math.sqrt(diffX*diffX+diffY*diffY));}/**
     * Calculate the zoom factor between the start and end distances
     * @param {int} startDistance Distance (between 2 fingers) the user started pinching at
     * @param {int} endDistance Distance (between 2 fingers) the user ended pinching at
     * @return float The zoom value from 0 to 1.
     * @inner
     */function calculatePinchZoom(startDistance,endDistance){var percent=endDistance/startDistance*1;return percent.toFixed(2);}/**
     * Returns the pinch direction, either IN or OUT for the given points
     * @return string Either {@link $.fn.swipe.directions.IN} or {@link $.fn.swipe.directions.OUT}
     * @see $.fn.swipe.directions
     * @inner
     */function calculatePinchDirection(){if(pinchZoom<1){return OUT;}else{return IN;}}/**
     * Calculate the length / distance of the swipe
     * @param {point} startPoint A point object containing x and y co-ordinates
     * @param {point} endPoint A point object containing x and y co-ordinates
     * @return int
     * @inner
     */function calculateDistance(startPoint,endPoint){return Math.round(Math.sqrt(Math.pow(endPoint.x-startPoint.x,2)+Math.pow(endPoint.y-startPoint.y,2)));}/**
     * Calculate the angle of the swipe
     * @param {point} startPoint A point object containing x and y co-ordinates
     * @param {point} endPoint A point object containing x and y co-ordinates
     * @return int
     * @inner
     */function calculateAngle(startPoint,endPoint){var x=startPoint.x-endPoint.x;var y=endPoint.y-startPoint.y;var r=Math.atan2(y,x);//radians
var angle=Math.round(r*180/Math.PI);//degrees
//ensure value is positive
if(angle<0){angle=360-Math.abs(angle);}return angle;}/**
     * Calculate the direction of the swipe
     * This will also call calculateAngle to get the latest angle of swipe
     * @param {point} startPoint A point object containing x and y co-ordinates
     * @param {point} endPoint A point object containing x and y co-ordinates
     * @return string Either {@link $.fn.swipe.directions.LEFT} / {@link $.fn.swipe.directions.RIGHT} / {@link $.fn.swipe.directions.DOWN} / {@link $.fn.swipe.directions.UP}
     * @see $.fn.swipe.directions
     * @inner
     */function calculateDirection(startPoint,endPoint){if(comparePoints(startPoint,endPoint)){return NONE;}var angle=calculateAngle(startPoint,endPoint);if(angle<=45&&angle>=0){return LEFT;}else if(angle<=360&&angle>=315){return LEFT;}else if(angle>=135&&angle<=225){return RIGHT;}else if(angle>45&&angle<135){return DOWN;}else{return UP;}}/**
     * Returns a MS time stamp of the current time
     * @return int
     * @inner
     */function getTimeStamp(){var now=new Date();return now.getTime();}/**
     * Returns a bounds object with left, right, top and bottom properties for the element specified.
     * @param {DomNode} The DOM node to get the bounds for.
     */function getbounds(el){el=$(el);var offset=el.offset();var bounds={left:offset.left,right:offset.left+el.outerWidth(),top:offset.top,bottom:offset.top+el.outerHeight()};return bounds;}/**
     * Checks if the point object is in the bounds object.
     * @param {object} point A point object.
     * @param {int} point.x The x value of the point.
     * @param {int} point.y The x value of the point.
     * @param {object} bounds The bounds object to test
     * @param {int} bounds.left The leftmost value
     * @param {int} bounds.right The righttmost value
     * @param {int} bounds.top The topmost value
     * @param {int} bounds.bottom The bottommost value
     */function isInBounds(point,bounds){return point.x>bounds.left&&point.x<bounds.right&&point.y>bounds.top&&point.y<bounds.bottom;};/**
     * Checks if the two points are equal
     * @param {object} point A point object.
     * @param {object} point B point object.
     * @return true of the points match
     */function comparePoints(pointA,pointB){return pointA.x==pointB.x&&pointA.y==pointB.y;}}/**
   * A catch all handler that is triggered for all swipe directions.
   * @name $.fn.swipe#swipe
   * @event
   * @default null
   * @param {EventObject} event The original event object
   * @param {int} direction The direction the user swiped in. See {@link $.fn.swipe.directions}
   * @param {int} distance The distance the user swiped
   * @param {int} duration The duration of the swipe in milliseconds
   * @param {int} fingerCount The number of fingers used. See {@link $.fn.swipe.fingers}
   * @param {object} fingerData The coordinates of fingers in event
   * @param {string} currentDirection The current direction the user is swiping.
   */ /**
   * A handler that is triggered for "left" swipes.
   * @name $.fn.swipe#swipeLeft
   * @event
   * @default null
   * @param {EventObject} event The original event object
   * @param {int} direction The direction the user swiped in. See {@link $.fn.swipe.directions}
   * @param {int} distance The distance the user swiped
   * @param {int} duration The duration of the swipe in milliseconds
   * @param {int} fingerCount The number of fingers used. See {@link $.fn.swipe.fingers}
   * @param {object} fingerData The coordinates of fingers in event
   * @param {string} currentDirection The current direction the user is swiping.
   */ /**
   * A handler that is triggered for "right" swipes.
   * @name $.fn.swipe#swipeRight
   * @event
   * @default null
   * @param {EventObject} event The original event object
   * @param {int} direction The direction the user swiped in. See {@link $.fn.swipe.directions}
   * @param {int} distance The distance the user swiped
   * @param {int} duration The duration of the swipe in milliseconds
   * @param {int} fingerCount The number of fingers used. See {@link $.fn.swipe.fingers}
   * @param {object} fingerData The coordinates of fingers in event
   * @param {string} currentDirection The current direction the user is swiping.
   */ /**
   * A handler that is triggered for "up" swipes.
   * @name $.fn.swipe#swipeUp
   * @event
   * @default null
   * @param {EventObject} event The original event object
   * @param {int} direction The direction the user swiped in. See {@link $.fn.swipe.directions}
   * @param {int} distance The distance the user swiped
   * @param {int} duration The duration of the swipe in milliseconds
   * @param {int} fingerCount The number of fingers used. See {@link $.fn.swipe.fingers}
   * @param {object} fingerData The coordinates of fingers in event
   * @param {string} currentDirection The current direction the user is swiping.
   */ /**
   * A handler that is triggered for "down" swipes.
   * @name $.fn.swipe#swipeDown
   * @event
   * @default null
   * @param {EventObject} event The original event object
   * @param {int} direction The direction the user swiped in. See {@link $.fn.swipe.directions}
   * @param {int} distance The distance the user swiped
   * @param {int} duration The duration of the swipe in milliseconds
   * @param {int} fingerCount The number of fingers used. See {@link $.fn.swipe.fingers}
   * @param {object} fingerData The coordinates of fingers in event
   * @param {string} currentDirection The current direction the user is swiping.
   */ /**
   * A handler triggered for every phase of the swipe. This handler is constantly fired for the duration of the pinch.
   * This is triggered regardless of swipe thresholds.
   * @name $.fn.swipe#swipeStatus
   * @event
   * @default null
   * @param {EventObject} event The original event object
   * @param {string} phase The phase of the swipe event. See {@link $.fn.swipe.phases}
   * @param {string} direction The direction the user swiped in. This is null if the user has yet to move. See {@link $.fn.swipe.directions}
   * @param {int} distance The distance the user swiped. This is 0 if the user has yet to move.
   * @param {int} duration The duration of the swipe in milliseconds
   * @param {int} fingerCount The number of fingers used. See {@link $.fn.swipe.fingers}
   * @param {object} fingerData The coordinates of fingers in event
   * @param {string} currentDirection The current direction the user is swiping.
   */ /**
   * A handler triggered for pinch in events.
   * @name $.fn.swipe#pinchIn
   * @event
   * @default null
   * @param {EventObject} event The original event object
   * @param {int} direction The direction the user pinched in. See {@link $.fn.swipe.directions}
   * @param {int} distance The distance the user pinched
   * @param {int} duration The duration of the swipe in milliseconds
   * @param {int} fingerCount The number of fingers used. See {@link $.fn.swipe.fingers}
   * @param {int} zoom The zoom/scale level the user pinched too, 0-1.
   * @param {object} fingerData The coordinates of fingers in event
   */ /**
   * A handler triggered for pinch out events.
   * @name $.fn.swipe#pinchOut
   * @event
   * @default null
   * @param {EventObject} event The original event object
   * @param {int} direction The direction the user pinched in. See {@link $.fn.swipe.directions}
   * @param {int} distance The distance the user pinched
   * @param {int} duration The duration of the swipe in milliseconds
   * @param {int} fingerCount The number of fingers used. See {@link $.fn.swipe.fingers}
   * @param {int} zoom The zoom/scale level the user pinched too, 0-1.
   * @param {object} fingerData The coordinates of fingers in event
   */ /**
   * A handler triggered for all pinch events. This handler is constantly fired for the duration of the pinch. This is triggered regardless of thresholds.
   * @name $.fn.swipe#pinchStatus
   * @event
   * @default null
   * @param {EventObject} event The original event object
   * @param {int} direction The direction the user pinched in. See {@link $.fn.swipe.directions}
   * @param {int} distance The distance the user pinched
   * @param {int} duration The duration of the swipe in milliseconds
   * @param {int} fingerCount The number of fingers used. See {@link $.fn.swipe.fingers}
   * @param {int} zoom The zoom/scale level the user pinched too, 0-1.
   * @param {object} fingerData The coordinates of fingers in event
   */ /**
   * A click handler triggered when a user simply clicks, rather than swipes on an element.
   * This is deprecated since version 1.6.2, any assignment to click will be assigned to the tap handler.
   * You cannot use <code>on</code> to bind to this event as the default jQ <code>click</code> event will be triggered.
   * Use the <code>tap</code> event instead.
   * @name $.fn.swipe#click
   * @event
   * @deprecated since version 1.6.2, please use {@link $.fn.swipe#tap} instead
   * @default null
   * @param {EventObject} event The original event object
   * @param {DomObject} target The element clicked on.
   */ /**
   * A click / tap handler triggered when a user simply clicks or taps, rather than swipes on an element.
   * @name $.fn.swipe#tap
   * @event
   * @default null
   * @param {EventObject} event The original event object
   * @param {DomObject} target The element clicked on.
   */ /**
   * A double tap handler triggered when a user double clicks or taps on an element.
   * You can set the time delay for a double tap with the {@link $.fn.swipe.defaults#doubleTapThreshold} property.
   * Note: If you set both <code>doubleTap</code> and <code>tap</code> handlers, the <code>tap</code> event will be delayed by the <code>doubleTapThreshold</code>
   * as the script needs to check if its a double tap.
   * @name $.fn.swipe#doubleTap
   * @see  $.fn.swipe.defaults#doubleTapThreshold
   * @event
   * @default null
   * @param {EventObject} event The original event object
   * @param {DomObject} target The element clicked on.
   */ /**
   * A long tap handler triggered once a tap has been release if the tap was longer than the longTapThreshold.
   * You can set the time delay for a long tap with the {@link $.fn.swipe.defaults#longTapThreshold} property.
   * @name $.fn.swipe#longTap
   * @see  $.fn.swipe.defaults#longTapThreshold
   * @event
   * @default null
   * @param {EventObject} event The original event object
   * @param {DomObject} target The element clicked on.
   */ /**
   * A hold tap handler triggered as soon as the longTapThreshold is reached
   * You can set the time delay for a long tap with the {@link $.fn.swipe.defaults#longTapThreshold} property.
   * @name $.fn.swipe#hold
   * @see  $.fn.swipe.defaults#longTapThreshold
   * @event
   * @default null
   * @param {EventObject} event The original event object
   * @param {DomObject} target The element clicked on.
   */});// THIS FILE IS GENERATED - DO NOT EDIT!
/*!mobile-detect v1.4.4 2019-09-21*/ /*global module:false, define:false*/ /*jshint latedef:false*/ /*!@license Copyright 2013, Heinrich Goebl, License: MIT, see https://github.com/hgoebl/mobile-detect.js*/(function(define,undefined){define(function(){'use strict';var impl={};impl.mobileDetectRules={"phones":{"iPhone":"\\biPhone\\b|\\biPod\\b","BlackBerry":"BlackBerry|\\bBB10\\b|rim[0-9]+|\\b(BBA100|BBB100|BBD100|BBE100|BBF100|STH100)\\b-[0-9]+","HTC":"HTC|HTC.*(Sensation|Evo|Vision|Explorer|6800|8100|8900|A7272|S510e|C110e|Legend|Desire|T8282)|APX515CKT|Qtek9090|APA9292KT|HD_mini|Sensation.*Z710e|PG86100|Z715e|Desire.*(A8181|HD)|ADR6200|ADR6400L|ADR6425|001HT|Inspire 4G|Android.*\\bEVO\\b|T-Mobile G1|Z520m|Android [0-9.]+; Pixel","Nexus":"Nexus One|Nexus S|Galaxy.*Nexus|Android.*Nexus.*Mobile|Nexus 4|Nexus 5|Nexus 6","Dell":"Dell[;]? (Streak|Aero|Venue|Venue Pro|Flash|Smoke|Mini 3iX)|XCD28|XCD35|\\b001DL\\b|\\b101DL\\b|\\bGS01\\b","Motorola":"Motorola|DROIDX|DROID BIONIC|\\bDroid\\b.*Build|Android.*Xoom|HRI39|MOT-|A1260|A1680|A555|A853|A855|A953|A955|A956|Motorola.*ELECTRIFY|Motorola.*i1|i867|i940|MB200|MB300|MB501|MB502|MB508|MB511|MB520|MB525|MB526|MB611|MB612|MB632|MB810|MB855|MB860|MB861|MB865|MB870|ME501|ME502|ME511|ME525|ME600|ME632|ME722|ME811|ME860|ME863|ME865|MT620|MT710|MT716|MT720|MT810|MT870|MT917|Motorola.*TITANIUM|WX435|WX445|XT300|XT301|XT311|XT316|XT317|XT319|XT320|XT390|XT502|XT530|XT531|XT532|XT535|XT603|XT610|XT611|XT615|XT681|XT701|XT702|XT711|XT720|XT800|XT806|XT860|XT862|XT875|XT882|XT883|XT894|XT901|XT907|XT909|XT910|XT912|XT928|XT926|XT915|XT919|XT925|XT1021|\\bMoto E\\b|XT1068|XT1092|XT1052","Samsung":"\\bSamsung\\b|SM-G950F|SM-G955F|SM-G9250|GT-19300|SGH-I337|BGT-S5230|GT-B2100|GT-B2700|GT-B2710|GT-B3210|GT-B3310|GT-B3410|GT-B3730|GT-B3740|GT-B5510|GT-B5512|GT-B5722|GT-B6520|GT-B7300|GT-B7320|GT-B7330|GT-B7350|GT-B7510|GT-B7722|GT-B7800|GT-C3010|GT-C3011|GT-C3060|GT-C3200|GT-C3212|GT-C3212I|GT-C3262|GT-C3222|GT-C3300|GT-C3300K|GT-C3303|GT-C3303K|GT-C3310|GT-C3322|GT-C3330|GT-C3350|GT-C3500|GT-C3510|GT-C3530|GT-C3630|GT-C3780|GT-C5010|GT-C5212|GT-C6620|GT-C6625|GT-C6712|GT-E1050|GT-E1070|GT-E1075|GT-E1080|GT-E1081|GT-E1085|GT-E1087|GT-E1100|GT-E1107|GT-E1110|GT-E1120|GT-E1125|GT-E1130|GT-E1160|GT-E1170|GT-E1175|GT-E1180|GT-E1182|GT-E1200|GT-E1210|GT-E1225|GT-E1230|GT-E1390|GT-E2100|GT-E2120|GT-E2121|GT-E2152|GT-E2220|GT-E2222|GT-E2230|GT-E2232|GT-E2250|GT-E2370|GT-E2550|GT-E2652|GT-E3210|GT-E3213|GT-I5500|GT-I5503|GT-I5700|GT-I5800|GT-I5801|GT-I6410|GT-I6420|GT-I7110|GT-I7410|GT-I7500|GT-I8000|GT-I8150|GT-I8160|GT-I8190|GT-I8320|GT-I8330|GT-I8350|GT-I8530|GT-I8700|GT-I8703|GT-I8910|GT-I9000|GT-I9001|GT-I9003|GT-I9010|GT-I9020|GT-I9023|GT-I9070|GT-I9082|GT-I9100|GT-I9103|GT-I9220|GT-I9250|GT-I9300|GT-I9305|GT-I9500|GT-I9505|GT-M3510|GT-M5650|GT-M7500|GT-M7600|GT-M7603|GT-M8800|GT-M8910|GT-N7000|GT-S3110|GT-S3310|GT-S3350|GT-S3353|GT-S3370|GT-S3650|GT-S3653|GT-S3770|GT-S3850|GT-S5210|GT-S5220|GT-S5229|GT-S5230|GT-S5233|GT-S5250|GT-S5253|GT-S5260|GT-S5263|GT-S5270|GT-S5300|GT-S5330|GT-S5350|GT-S5360|GT-S5363|GT-S5369|GT-S5380|GT-S5380D|GT-S5560|GT-S5570|GT-S5600|GT-S5603|GT-S5610|GT-S5620|GT-S5660|GT-S5670|GT-S5690|GT-S5750|GT-S5780|GT-S5830|GT-S5839|GT-S6102|GT-S6500|GT-S7070|GT-S7200|GT-S7220|GT-S7230|GT-S7233|GT-S7250|GT-S7500|GT-S7530|GT-S7550|GT-S7562|GT-S7710|GT-S8000|GT-S8003|GT-S8500|GT-S8530|GT-S8600|SCH-A310|SCH-A530|SCH-A570|SCH-A610|SCH-A630|SCH-A650|SCH-A790|SCH-A795|SCH-A850|SCH-A870|SCH-A890|SCH-A930|SCH-A950|SCH-A970|SCH-A990|SCH-I100|SCH-I110|SCH-I400|SCH-I405|SCH-I500|SCH-I510|SCH-I515|SCH-I600|SCH-I730|SCH-I760|SCH-I770|SCH-I830|SCH-I910|SCH-I920|SCH-I959|SCH-LC11|SCH-N150|SCH-N300|SCH-R100|SCH-R300|SCH-R351|SCH-R400|SCH-R410|SCH-T300|SCH-U310|SCH-U320|SCH-U350|SCH-U360|SCH-U365|SCH-U370|SCH-U380|SCH-U410|SCH-U430|SCH-U450|SCH-U460|SCH-U470|SCH-U490|SCH-U540|SCH-U550|SCH-U620|SCH-U640|SCH-U650|SCH-U660|SCH-U700|SCH-U740|SCH-U750|SCH-U810|SCH-U820|SCH-U900|SCH-U940|SCH-U960|SCS-26UC|SGH-A107|SGH-A117|SGH-A127|SGH-A137|SGH-A157|SGH-A167|SGH-A177|SGH-A187|SGH-A197|SGH-A227|SGH-A237|SGH-A257|SGH-A437|SGH-A517|SGH-A597|SGH-A637|SGH-A657|SGH-A667|SGH-A687|SGH-A697|SGH-A707|SGH-A717|SGH-A727|SGH-A737|SGH-A747|SGH-A767|SGH-A777|SGH-A797|SGH-A817|SGH-A827|SGH-A837|SGH-A847|SGH-A867|SGH-A877|SGH-A887|SGH-A897|SGH-A927|SGH-B100|SGH-B130|SGH-B200|SGH-B220|SGH-C100|SGH-C110|SGH-C120|SGH-C130|SGH-C140|SGH-C160|SGH-C170|SGH-C180|SGH-C200|SGH-C207|SGH-C210|SGH-C225|SGH-C230|SGH-C417|SGH-C450|SGH-D307|SGH-D347|SGH-D357|SGH-D407|SGH-D415|SGH-D780|SGH-D807|SGH-D980|SGH-E105|SGH-E200|SGH-E315|SGH-E316|SGH-E317|SGH-E335|SGH-E590|SGH-E635|SGH-E715|SGH-E890|SGH-F300|SGH-F480|SGH-I200|SGH-I300|SGH-I320|SGH-I550|SGH-I577|SGH-I600|SGH-I607|SGH-I617|SGH-I627|SGH-I637|SGH-I677|SGH-I700|SGH-I717|SGH-I727|SGH-i747M|SGH-I777|SGH-I780|SGH-I827|SGH-I847|SGH-I857|SGH-I896|SGH-I897|SGH-I900|SGH-I907|SGH-I917|SGH-I927|SGH-I937|SGH-I997|SGH-J150|SGH-J200|SGH-L170|SGH-L700|SGH-M110|SGH-M150|SGH-M200|SGH-N105|SGH-N500|SGH-N600|SGH-N620|SGH-N625|SGH-N700|SGH-N710|SGH-P107|SGH-P207|SGH-P300|SGH-P310|SGH-P520|SGH-P735|SGH-P777|SGH-Q105|SGH-R210|SGH-R220|SGH-R225|SGH-S105|SGH-S307|SGH-T109|SGH-T119|SGH-T139|SGH-T209|SGH-T219|SGH-T229|SGH-T239|SGH-T249|SGH-T259|SGH-T309|SGH-T319|SGH-T329|SGH-T339|SGH-T349|SGH-T359|SGH-T369|SGH-T379|SGH-T409|SGH-T429|SGH-T439|SGH-T459|SGH-T469|SGH-T479|SGH-T499|SGH-T509|SGH-T519|SGH-T539|SGH-T559|SGH-T589|SGH-T609|SGH-T619|SGH-T629|SGH-T639|SGH-T659|SGH-T669|SGH-T679|SGH-T709|SGH-T719|SGH-T729|SGH-T739|SGH-T746|SGH-T749|SGH-T759|SGH-T769|SGH-T809|SGH-T819|SGH-T839|SGH-T919|SGH-T929|SGH-T939|SGH-T959|SGH-T989|SGH-U100|SGH-U200|SGH-U800|SGH-V205|SGH-V206|SGH-X100|SGH-X105|SGH-X120|SGH-X140|SGH-X426|SGH-X427|SGH-X475|SGH-X495|SGH-X497|SGH-X507|SGH-X600|SGH-X610|SGH-X620|SGH-X630|SGH-X700|SGH-X820|SGH-X890|SGH-Z130|SGH-Z150|SGH-Z170|SGH-ZX10|SGH-ZX20|SHW-M110|SPH-A120|SPH-A400|SPH-A420|SPH-A460|SPH-A500|SPH-A560|SPH-A600|SPH-A620|SPH-A660|SPH-A700|SPH-A740|SPH-A760|SPH-A790|SPH-A800|SPH-A820|SPH-A840|SPH-A880|SPH-A900|SPH-A940|SPH-A960|SPH-D600|SPH-D700|SPH-D710|SPH-D720|SPH-I300|SPH-I325|SPH-I330|SPH-I350|SPH-I500|SPH-I600|SPH-I700|SPH-L700|SPH-M100|SPH-M220|SPH-M240|SPH-M300|SPH-M305|SPH-M320|SPH-M330|SPH-M350|SPH-M360|SPH-M370|SPH-M380|SPH-M510|SPH-M540|SPH-M550|SPH-M560|SPH-M570|SPH-M580|SPH-M610|SPH-M620|SPH-M630|SPH-M800|SPH-M810|SPH-M850|SPH-M900|SPH-M910|SPH-M920|SPH-M930|SPH-N100|SPH-N200|SPH-N240|SPH-N300|SPH-N400|SPH-Z400|SWC-E100|SCH-i909|GT-N7100|GT-N7105|SCH-I535|SM-N900A|SGH-I317|SGH-T999L|GT-S5360B|GT-I8262|GT-S6802|GT-S6312|GT-S6310|GT-S5312|GT-S5310|GT-I9105|GT-I8510|GT-S6790N|SM-G7105|SM-N9005|GT-S5301|GT-I9295|GT-I9195|SM-C101|GT-S7392|GT-S7560|GT-B7610|GT-I5510|GT-S7582|GT-S7530E|GT-I8750|SM-G9006V|SM-G9008V|SM-G9009D|SM-G900A|SM-G900D|SM-G900F|SM-G900H|SM-G900I|SM-G900J|SM-G900K|SM-G900L|SM-G900M|SM-G900P|SM-G900R4|SM-G900S|SM-G900T|SM-G900V|SM-G900W8|SHV-E160K|SCH-P709|SCH-P729|SM-T2558|GT-I9205|SM-G9350|SM-J120F|SM-G920F|SM-G920V|SM-G930F|SM-N910C|SM-A310F|GT-I9190|SM-J500FN|SM-G903F|SM-J330F","LG":"\\bLG\\b;|LG[- ]?(C800|C900|E400|E610|E900|E-900|F160|F180K|F180L|F180S|730|855|L160|LS740|LS840|LS970|LU6200|MS690|MS695|MS770|MS840|MS870|MS910|P500|P700|P705|VM696|AS680|AS695|AX840|C729|E970|GS505|272|C395|E739BK|E960|L55C|L75C|LS696|LS860|P769BK|P350|P500|P509|P870|UN272|US730|VS840|VS950|LN272|LN510|LS670|LS855|LW690|MN270|MN510|P509|P769|P930|UN200|UN270|UN510|UN610|US670|US740|US760|UX265|UX840|VN271|VN530|VS660|VS700|VS740|VS750|VS910|VS920|VS930|VX9200|VX11000|AX840A|LW770|P506|P925|P999|E612|D955|D802|MS323|M257)|LM-G710","Sony":"SonyST|SonyLT|SonyEricsson|SonyEricssonLT15iv|LT18i|E10i|LT28h|LT26w|SonyEricssonMT27i|C5303|C6902|C6903|C6906|C6943|D2533","Asus":"Asus.*Galaxy|PadFone.*Mobile","NokiaLumia":"Lumia [0-9]{3,4}","Micromax":"Micromax.*\\b(A210|A92|A88|A72|A111|A110Q|A115|A116|A110|A90S|A26|A51|A35|A54|A25|A27|A89|A68|A65|A57|A90)\\b","Palm":"PalmSource|Palm","Vertu":"Vertu|Vertu.*Ltd|Vertu.*Ascent|Vertu.*Ayxta|Vertu.*Constellation(F|Quest)?|Vertu.*Monika|Vertu.*Signature","Pantech":"PANTECH|IM-A850S|IM-A840S|IM-A830L|IM-A830K|IM-A830S|IM-A820L|IM-A810K|IM-A810S|IM-A800S|IM-T100K|IM-A725L|IM-A780L|IM-A775C|IM-A770K|IM-A760S|IM-A750K|IM-A740S|IM-A730S|IM-A720L|IM-A710K|IM-A690L|IM-A690S|IM-A650S|IM-A630K|IM-A600S|VEGA PTL21|PT003|P8010|ADR910L|P6030|P6020|P9070|P4100|P9060|P5000|CDM8992|TXT8045|ADR8995|IS11PT|P2030|P6010|P8000|PT002|IS06|CDM8999|P9050|PT001|TXT8040|P2020|P9020|P2000|P7040|P7000|C790","Fly":"IQ230|IQ444|IQ450|IQ440|IQ442|IQ441|IQ245|IQ256|IQ236|IQ255|IQ235|IQ245|IQ275|IQ240|IQ285|IQ280|IQ270|IQ260|IQ250","Wiko":"KITE 4G|HIGHWAY|GETAWAY|STAIRWAY|DARKSIDE|DARKFULL|DARKNIGHT|DARKMOON|SLIDE|WAX 4G|RAINBOW|BLOOM|SUNSET|GOA(?!nna)|LENNY|BARRY|IGGY|OZZY|CINK FIVE|CINK PEAX|CINK PEAX 2|CINK SLIM|CINK SLIM 2|CINK +|CINK KING|CINK PEAX|CINK SLIM|SUBLIM","iMobile":"i-mobile (IQ|i-STYLE|idea|ZAA|Hitz)","SimValley":"\\b(SP-80|XT-930|SX-340|XT-930|SX-310|SP-360|SP60|SPT-800|SP-120|SPT-800|SP-140|SPX-5|SPX-8|SP-100|SPX-8|SPX-12)\\b","Wolfgang":"AT-B24D|AT-AS50HD|AT-AS40W|AT-AS55HD|AT-AS45q2|AT-B26D|AT-AS50Q","Alcatel":"Alcatel","Nintendo":"Nintendo (3DS|Switch)","Amoi":"Amoi","INQ":"INQ","OnePlus":"ONEPLUS","GenericPhone":"Tapatalk|PDA;|SAGEM|\\bmmp\\b|pocket|\\bpsp\\b|symbian|Smartphone|smartfon|treo|up.browser|up.link|vodafone|\\bwap\\b|nokia|Series40|Series60|S60|SonyEricsson|N900|MAUI.*WAP.*Browser"},"tablets":{"iPad":"iPad|iPad.*Mobile","NexusTablet":"Android.*Nexus[\\s]+(7|9|10)","GoogleTablet":"Android.*Pixel C","SamsungTablet":"SAMSUNG.*Tablet|Galaxy.*Tab|SC-01C|GT-P1000|GT-P1003|GT-P1010|GT-P3105|GT-P6210|GT-P6800|GT-P6810|GT-P7100|GT-P7300|GT-P7310|GT-P7500|GT-P7510|SCH-I800|SCH-I815|SCH-I905|SGH-I957|SGH-I987|SGH-T849|SGH-T859|SGH-T869|SPH-P100|GT-P3100|GT-P3108|GT-P3110|GT-P5100|GT-P5110|GT-P6200|GT-P7320|GT-P7511|GT-N8000|GT-P8510|SGH-I497|SPH-P500|SGH-T779|SCH-I705|SCH-I915|GT-N8013|GT-P3113|GT-P5113|GT-P8110|GT-N8010|GT-N8005|GT-N8020|GT-P1013|GT-P6201|GT-P7501|GT-N5100|GT-N5105|GT-N5110|SHV-E140K|SHV-E140L|SHV-E140S|SHV-E150S|SHV-E230K|SHV-E230L|SHV-E230S|SHW-M180K|SHW-M180L|SHW-M180S|SHW-M180W|SHW-M300W|SHW-M305W|SHW-M380K|SHW-M380S|SHW-M380W|SHW-M430W|SHW-M480K|SHW-M480S|SHW-M480W|SHW-M485W|SHW-M486W|SHW-M500W|GT-I9228|SCH-P739|SCH-I925|GT-I9200|GT-P5200|GT-P5210|GT-P5210X|SM-T311|SM-T310|SM-T310X|SM-T210|SM-T210R|SM-T211|SM-P600|SM-P601|SM-P605|SM-P900|SM-P901|SM-T217|SM-T217A|SM-T217S|SM-P6000|SM-T3100|SGH-I467|XE500|SM-T110|GT-P5220|GT-I9200X|GT-N5110X|GT-N5120|SM-P905|SM-T111|SM-T2105|SM-T315|SM-T320|SM-T320X|SM-T321|SM-T520|SM-T525|SM-T530NU|SM-T230NU|SM-T330NU|SM-T900|XE500T1C|SM-P605V|SM-P905V|SM-T337V|SM-T537V|SM-T707V|SM-T807V|SM-P600X|SM-P900X|SM-T210X|SM-T230|SM-T230X|SM-T325|GT-P7503|SM-T531|SM-T330|SM-T530|SM-T705|SM-T705C|SM-T535|SM-T331|SM-T800|SM-T700|SM-T537|SM-T807|SM-P907A|SM-T337A|SM-T537A|SM-T707A|SM-T807A|SM-T237|SM-T807P|SM-P607T|SM-T217T|SM-T337T|SM-T807T|SM-T116NQ|SM-T116BU|SM-P550|SM-T350|SM-T550|SM-T9000|SM-P9000|SM-T705Y|SM-T805|GT-P3113|SM-T710|SM-T810|SM-T815|SM-T360|SM-T533|SM-T113|SM-T335|SM-T715|SM-T560|SM-T670|SM-T677|SM-T377|SM-T567|SM-T357T|SM-T555|SM-T561|SM-T713|SM-T719|SM-T813|SM-T819|SM-T580|SM-T355Y?|SM-T280|SM-T817A|SM-T820|SM-W700|SM-P580|SM-T587|SM-P350|SM-P555M|SM-P355M|SM-T113NU|SM-T815Y|SM-T585|SM-T285|SM-T825|SM-W708|SM-T835|SM-T830|SM-T837V|SM-T720|SM-T510|SM-T387V","Kindle":"Kindle|Silk.*Accelerated|Android.*\\b(KFOT|KFTT|KFJWI|KFJWA|KFOTE|KFSOWI|KFTHWI|KFTHWA|KFAPWI|KFAPWA|WFJWAE|KFSAWA|KFSAWI|KFASWI|KFARWI|KFFOWI|KFGIWI|KFMEWI)\\b|Android.*Silk\/[0-9.]+ like Chrome\/[0-9.]+ (?!Mobile)","SurfaceTablet":"Windows NT [0-9.]+; ARM;.*(Tablet|ARMBJS)","HPTablet":"HP Slate (7|8|10)|HP ElitePad 900|hp-tablet|EliteBook.*Touch|HP 8|Slate 21|HP SlateBook 10","AsusTablet":"^.*PadFone((?!Mobile).)*$|Transformer|TF101|TF101G|TF300T|TF300TG|TF300TL|TF700T|TF700KL|TF701T|TF810C|ME171|ME301T|ME302C|ME371MG|ME370T|ME372MG|ME172V|ME173X|ME400C|Slider SL101|\\bK00F\\b|\\bK00C\\b|\\bK00E\\b|\\bK00L\\b|TX201LA|ME176C|ME102A|\\bM80TA\\b|ME372CL|ME560CG|ME372CG|ME302KL| K010 | K011 | K017 | K01E |ME572C|ME103K|ME170C|ME171C|\\bME70C\\b|ME581C|ME581CL|ME8510C|ME181C|P01Y|PO1MA|P01Z|\\bP027\\b|\\bP024\\b|\\bP00C\\b","BlackBerryTablet":"PlayBook|RIM Tablet","HTCtablet":"HTC_Flyer_P512|HTC Flyer|HTC Jetstream|HTC-P715a|HTC EVO View 4G|PG41200|PG09410","MotorolaTablet":"xoom|sholest|MZ615|MZ605|MZ505|MZ601|MZ602|MZ603|MZ604|MZ606|MZ607|MZ608|MZ609|MZ615|MZ616|MZ617","NookTablet":"Android.*Nook|NookColor|nook browser|BNRV200|BNRV200A|BNTV250|BNTV250A|BNTV400|BNTV600|LogicPD Zoom2","AcerTablet":"Android.*; \\b(A100|A101|A110|A200|A210|A211|A500|A501|A510|A511|A700|A701|W500|W500P|W501|W501P|W510|W511|W700|G100|G100W|B1-A71|B1-710|B1-711|A1-810|A1-811|A1-830)\\b|W3-810|\\bA3-A10\\b|\\bA3-A11\\b|\\bA3-A20\\b|\\bA3-A30","ToshibaTablet":"Android.*(AT100|AT105|AT200|AT205|AT270|AT275|AT300|AT305|AT1S5|AT500|AT570|AT700|AT830)|TOSHIBA.*FOLIO","LGTablet":"\\bL-06C|LG-V909|LG-V900|LG-V700|LG-V510|LG-V500|LG-V410|LG-V400|LG-VK810\\b","FujitsuTablet":"Android.*\\b(F-01D|F-02F|F-05E|F-10D|M532|Q572)\\b","PrestigioTablet":"PMP3170B|PMP3270B|PMP3470B|PMP7170B|PMP3370B|PMP3570C|PMP5870C|PMP3670B|PMP5570C|PMP5770D|PMP3970B|PMP3870C|PMP5580C|PMP5880D|PMP5780D|PMP5588C|PMP7280C|PMP7280C3G|PMP7280|PMP7880D|PMP5597D|PMP5597|PMP7100D|PER3464|PER3274|PER3574|PER3884|PER5274|PER5474|PMP5097CPRO|PMP5097|PMP7380D|PMP5297C|PMP5297C_QUAD|PMP812E|PMP812E3G|PMP812F|PMP810E|PMP880TD|PMT3017|PMT3037|PMT3047|PMT3057|PMT7008|PMT5887|PMT5001|PMT5002","LenovoTablet":"Lenovo TAB|Idea(Tab|Pad)( A1|A10| K1|)|ThinkPad([ ]+)?Tablet|YT3-850M|YT3-X90L|YT3-X90F|YT3-X90X|Lenovo.*(S2109|S2110|S5000|S6000|K3011|A3000|A3500|A1000|A2107|A2109|A1107|A5500|A7600|B6000|B8000|B8080)(-|)(FL|F|HV|H|)|TB-X103F|TB-X304X|TB-X304F|TB-X304L|TB-X505F|TB-X505L|TB-X505X|TB-X605F|TB-X605L|TB-8703F|TB-8703X|TB-8703N|TB-8704N|TB-8704F|TB-8704X|TB-8704V|TB-7304F|TB-7304I|TB-7304X|Tab2A7-10F|Tab2A7-20F|TB2-X30L|YT3-X50L|YT3-X50F|YT3-X50M|YT-X705F|YT-X703F|YT-X703L|YT-X705L|YT-X705X|TB2-X30F|TB2-X30L|TB2-X30M|A2107A-F|A2107A-H|TB3-730F|TB3-730M|TB3-730X|TB-7504F|TB-7504X","DellTablet":"Venue 11|Venue 8|Venue 7|Dell Streak 10|Dell Streak 7","YarvikTablet":"Android.*\\b(TAB210|TAB211|TAB224|TAB250|TAB260|TAB264|TAB310|TAB360|TAB364|TAB410|TAB411|TAB420|TAB424|TAB450|TAB460|TAB461|TAB464|TAB465|TAB467|TAB468|TAB07-100|TAB07-101|TAB07-150|TAB07-151|TAB07-152|TAB07-200|TAB07-201-3G|TAB07-210|TAB07-211|TAB07-212|TAB07-214|TAB07-220|TAB07-400|TAB07-485|TAB08-150|TAB08-200|TAB08-201-3G|TAB08-201-30|TAB09-100|TAB09-211|TAB09-410|TAB10-150|TAB10-201|TAB10-211|TAB10-400|TAB10-410|TAB13-201|TAB274EUK|TAB275EUK|TAB374EUK|TAB462EUK|TAB474EUK|TAB9-200)\\b","MedionTablet":"Android.*\\bOYO\\b|LIFE.*(P9212|P9514|P9516|S9512)|LIFETAB","ArnovaTablet":"97G4|AN10G2|AN7bG3|AN7fG3|AN8G3|AN8cG3|AN7G3|AN9G3|AN7dG3|AN7dG3ST|AN7dG3ChildPad|AN10bG3|AN10bG3DT|AN9G2","IntensoTablet":"INM8002KP|INM1010FP|INM805ND|Intenso Tab|TAB1004","IRUTablet":"M702pro","MegafonTablet":"MegaFon V9|\\bZTE V9\\b|Android.*\\bMT7A\\b","EbodaTablet":"E-Boda (Supreme|Impresspeed|Izzycomm|Essential)","AllViewTablet":"Allview.*(Viva|Alldro|City|Speed|All TV|Frenzy|Quasar|Shine|TX1|AX1|AX2)","ArchosTablet":"\\b(101G9|80G9|A101IT)\\b|Qilive 97R|Archos5|\\bARCHOS (70|79|80|90|97|101|FAMILYPAD|)(b|c|)(G10| Cobalt| TITANIUM(HD|)| Xenon| Neon|XSK| 2| XS 2| PLATINUM| CARBON|GAMEPAD)\\b","AinolTablet":"NOVO7|NOVO8|NOVO10|Novo7Aurora|Novo7Basic|NOVO7PALADIN|novo9-Spark","NokiaLumiaTablet":"Lumia 2520","SonyTablet":"Sony.*Tablet|Xperia Tablet|Sony Tablet S|SO-03E|SGPT12|SGPT13|SGPT114|SGPT121|SGPT122|SGPT123|SGPT111|SGPT112|SGPT113|SGPT131|SGPT132|SGPT133|SGPT211|SGPT212|SGPT213|SGP311|SGP312|SGP321|EBRD1101|EBRD1102|EBRD1201|SGP351|SGP341|SGP511|SGP512|SGP521|SGP541|SGP551|SGP621|SGP641|SGP612|SOT31|SGP771|SGP611|SGP612|SGP712","PhilipsTablet":"\\b(PI2010|PI3000|PI3100|PI3105|PI3110|PI3205|PI3210|PI3900|PI4010|PI7000|PI7100)\\b","CubeTablet":"Android.*(K8GT|U9GT|U10GT|U16GT|U17GT|U18GT|U19GT|U20GT|U23GT|U30GT)|CUBE U8GT","CobyTablet":"MID1042|MID1045|MID1125|MID1126|MID7012|MID7014|MID7015|MID7034|MID7035|MID7036|MID7042|MID7048|MID7127|MID8042|MID8048|MID8127|MID9042|MID9740|MID9742|MID7022|MID7010","MIDTablet":"M9701|M9000|M9100|M806|M1052|M806|T703|MID701|MID713|MID710|MID727|MID760|MID830|MID728|MID933|MID125|MID810|MID732|MID120|MID930|MID800|MID731|MID900|MID100|MID820|MID735|MID980|MID130|MID833|MID737|MID960|MID135|MID860|MID736|MID140|MID930|MID835|MID733|MID4X10","MSITablet":"MSI \\b(Primo 73K|Primo 73L|Primo 81L|Primo 77|Primo 93|Primo 75|Primo 76|Primo 73|Primo 81|Primo 91|Primo 90|Enjoy 71|Enjoy 7|Enjoy 10)\\b","SMiTTablet":"Android.*(\\bMID\\b|MID-560|MTV-T1200|MTV-PND531|MTV-P1101|MTV-PND530)","RockChipTablet":"Android.*(RK2818|RK2808A|RK2918|RK3066)|RK2738|RK2808A","FlyTablet":"IQ310|Fly Vision","bqTablet":"Android.*(bq)?.*\\b(Elcano|Curie|Edison|Maxwell|Kepler|Pascal|Tesla|Hypatia|Platon|Newton|Livingstone|Cervantes|Avant|Aquaris ([E|M]10|M8))\\b|Maxwell.*Lite|Maxwell.*Plus","HuaweiTablet":"MediaPad|MediaPad 7 Youth|IDEOS S7|S7-201c|S7-202u|S7-101|S7-103|S7-104|S7-105|S7-106|S7-201|S7-Slim|M2-A01L|BAH-L09|BAH-W09|AGS-L09|CMR-AL19","NecTablet":"\\bN-06D|\\bN-08D","PantechTablet":"Pantech.*P4100","BronchoTablet":"Broncho.*(N701|N708|N802|a710)","VersusTablet":"TOUCHPAD.*[78910]|\\bTOUCHTAB\\b","ZyncTablet":"z1000|Z99 2G|z930|z990|z909|Z919|z900","PositivoTablet":"TB07STA|TB10STA|TB07FTA|TB10FTA","NabiTablet":"Android.*\\bNabi","KoboTablet":"Kobo Touch|\\bK080\\b|\\bVox\\b Build|\\bArc\\b Build","DanewTablet":"DSlide.*\\b(700|701R|702|703R|704|802|970|971|972|973|974|1010|1012)\\b","TexetTablet":"NaviPad|TB-772A|TM-7045|TM-7055|TM-9750|TM-7016|TM-7024|TM-7026|TM-7041|TM-7043|TM-7047|TM-8041|TM-9741|TM-9747|TM-9748|TM-9751|TM-7022|TM-7021|TM-7020|TM-7011|TM-7010|TM-7023|TM-7025|TM-7037W|TM-7038W|TM-7027W|TM-9720|TM-9725|TM-9737W|TM-1020|TM-9738W|TM-9740|TM-9743W|TB-807A|TB-771A|TB-727A|TB-725A|TB-719A|TB-823A|TB-805A|TB-723A|TB-715A|TB-707A|TB-705A|TB-709A|TB-711A|TB-890HD|TB-880HD|TB-790HD|TB-780HD|TB-770HD|TB-721HD|TB-710HD|TB-434HD|TB-860HD|TB-840HD|TB-760HD|TB-750HD|TB-740HD|TB-730HD|TB-722HD|TB-720HD|TB-700HD|TB-500HD|TB-470HD|TB-431HD|TB-430HD|TB-506|TB-504|TB-446|TB-436|TB-416|TB-146SE|TB-126SE","PlaystationTablet":"Playstation.*(Portable|Vita)","TrekstorTablet":"ST10416-1|VT10416-1|ST70408-1|ST702xx-1|ST702xx-2|ST80208|ST97216|ST70104-2|VT10416-2|ST10216-2A|SurfTab","PyleAudioTablet":"\\b(PTBL10CEU|PTBL10C|PTBL72BC|PTBL72BCEU|PTBL7CEU|PTBL7C|PTBL92BC|PTBL92BCEU|PTBL9CEU|PTBL9CUK|PTBL9C)\\b","AdvanTablet":"Android.* \\b(E3A|T3X|T5C|T5B|T3E|T3C|T3B|T1J|T1F|T2A|T1H|T1i|E1C|T1-E|T5-A|T4|E1-B|T2Ci|T1-B|T1-D|O1-A|E1-A|T1-A|T3A|T4i)\\b ","DanyTechTablet":"Genius Tab G3|Genius Tab S2|Genius Tab Q3|Genius Tab G4|Genius Tab Q4|Genius Tab G-II|Genius TAB GII|Genius TAB GIII|Genius Tab S1","GalapadTablet":"Android.*\\bG1\\b(?!\\))","MicromaxTablet":"Funbook|Micromax.*\\b(P250|P560|P360|P362|P600|P300|P350|P500|P275)\\b","KarbonnTablet":"Android.*\\b(A39|A37|A34|ST8|ST10|ST7|Smart Tab3|Smart Tab2)\\b","AllFineTablet":"Fine7 Genius|Fine7 Shine|Fine7 Air|Fine8 Style|Fine9 More|Fine10 Joy|Fine11 Wide","PROSCANTablet":"\\b(PEM63|PLT1023G|PLT1041|PLT1044|PLT1044G|PLT1091|PLT4311|PLT4311PL|PLT4315|PLT7030|PLT7033|PLT7033D|PLT7035|PLT7035D|PLT7044K|PLT7045K|PLT7045KB|PLT7071KG|PLT7072|PLT7223G|PLT7225G|PLT7777G|PLT7810K|PLT7849G|PLT7851G|PLT7852G|PLT8015|PLT8031|PLT8034|PLT8036|PLT8080K|PLT8082|PLT8088|PLT8223G|PLT8234G|PLT8235G|PLT8816K|PLT9011|PLT9045K|PLT9233G|PLT9735|PLT9760G|PLT9770G)\\b","YONESTablet":"BQ1078|BC1003|BC1077|RK9702|BC9730|BC9001|IT9001|BC7008|BC7010|BC708|BC728|BC7012|BC7030|BC7027|BC7026","ChangJiaTablet":"TPC7102|TPC7103|TPC7105|TPC7106|TPC7107|TPC7201|TPC7203|TPC7205|TPC7210|TPC7708|TPC7709|TPC7712|TPC7110|TPC8101|TPC8103|TPC8105|TPC8106|TPC8203|TPC8205|TPC8503|TPC9106|TPC9701|TPC97101|TPC97103|TPC97105|TPC97106|TPC97111|TPC97113|TPC97203|TPC97603|TPC97809|TPC97205|TPC10101|TPC10103|TPC10106|TPC10111|TPC10203|TPC10205|TPC10503","GUTablet":"TX-A1301|TX-M9002|Q702|kf026","PointOfViewTablet":"TAB-P506|TAB-navi-7-3G-M|TAB-P517|TAB-P-527|TAB-P701|TAB-P703|TAB-P721|TAB-P731N|TAB-P741|TAB-P825|TAB-P905|TAB-P925|TAB-PR945|TAB-PL1015|TAB-P1025|TAB-PI1045|TAB-P1325|TAB-PROTAB[0-9]+|TAB-PROTAB25|TAB-PROTAB26|TAB-PROTAB27|TAB-PROTAB26XL|TAB-PROTAB2-IPS9|TAB-PROTAB30-IPS9|TAB-PROTAB25XXL|TAB-PROTAB26-IPS10|TAB-PROTAB30-IPS10","OvermaxTablet":"OV-(SteelCore|NewBase|Basecore|Baseone|Exellen|Quattor|EduTab|Solution|ACTION|BasicTab|TeddyTab|MagicTab|Stream|TB-08|TB-09)|Qualcore 1027","HCLTablet":"HCL.*Tablet|Connect-3G-2.0|Connect-2G-2.0|ME Tablet U1|ME Tablet U2|ME Tablet G1|ME Tablet X1|ME Tablet Y2|ME Tablet Sync","DPSTablet":"DPS Dream 9|DPS Dual 7","VistureTablet":"V97 HD|i75 3G|Visture V4( HD)?|Visture V5( HD)?|Visture V10","CrestaTablet":"CTP(-)?810|CTP(-)?818|CTP(-)?828|CTP(-)?838|CTP(-)?888|CTP(-)?978|CTP(-)?980|CTP(-)?987|CTP(-)?988|CTP(-)?989","MediatekTablet":"\\bMT8125|MT8389|MT8135|MT8377\\b","ConcordeTablet":"Concorde([ ]+)?Tab|ConCorde ReadMan","GoCleverTablet":"GOCLEVER TAB|A7GOCLEVER|M1042|M7841|M742|R1042BK|R1041|TAB A975|TAB A7842|TAB A741|TAB A741L|TAB M723G|TAB M721|TAB A1021|TAB I921|TAB R721|TAB I720|TAB T76|TAB R70|TAB R76.2|TAB R106|TAB R83.2|TAB M813G|TAB I721|GCTA722|TAB I70|TAB I71|TAB S73|TAB R73|TAB R74|TAB R93|TAB R75|TAB R76.1|TAB A73|TAB A93|TAB A93.2|TAB T72|TAB R83|TAB R974|TAB R973|TAB A101|TAB A103|TAB A104|TAB A104.2|R105BK|M713G|A972BK|TAB A971|TAB R974.2|TAB R104|TAB R83.3|TAB A1042","ModecomTablet":"FreeTAB 9000|FreeTAB 7.4|FreeTAB 7004|FreeTAB 7800|FreeTAB 2096|FreeTAB 7.5|FreeTAB 1014|FreeTAB 1001 |FreeTAB 8001|FreeTAB 9706|FreeTAB 9702|FreeTAB 7003|FreeTAB 7002|FreeTAB 1002|FreeTAB 7801|FreeTAB 1331|FreeTAB 1004|FreeTAB 8002|FreeTAB 8014|FreeTAB 9704|FreeTAB 1003","VoninoTablet":"\\b(Argus[ _]?S|Diamond[ _]?79HD|Emerald[ _]?78E|Luna[ _]?70C|Onyx[ _]?S|Onyx[ _]?Z|Orin[ _]?HD|Orin[ _]?S|Otis[ _]?S|SpeedStar[ _]?S|Magnet[ _]?M9|Primus[ _]?94[ _]?3G|Primus[ _]?94HD|Primus[ _]?QS|Android.*\\bQ8\\b|Sirius[ _]?EVO[ _]?QS|Sirius[ _]?QS|Spirit[ _]?S)\\b","ECSTablet":"V07OT2|TM105A|S10OT1|TR10CS1","StorexTablet":"eZee[_']?(Tab|Go)[0-9]+|TabLC7|Looney Tunes Tab","VodafoneTablet":"SmartTab([ ]+)?[0-9]+|SmartTabII10|SmartTabII7|VF-1497|VFD 1400","EssentielBTablet":"Smart[ ']?TAB[ ]+?[0-9]+|Family[ ']?TAB2","RossMoorTablet":"RM-790|RM-997|RMD-878G|RMD-974R|RMT-705A|RMT-701|RME-601|RMT-501|RMT-711","iMobileTablet":"i-mobile i-note","TolinoTablet":"tolino tab [0-9.]+|tolino shine","AudioSonicTablet":"\\bC-22Q|T7-QC|T-17B|T-17P\\b","AMPETablet":"Android.* A78 ","SkkTablet":"Android.* (SKYPAD|PHOENIX|CYCLOPS)","TecnoTablet":"TECNO P9|TECNO DP8D","JXDTablet":"Android.* \\b(F3000|A3300|JXD5000|JXD3000|JXD2000|JXD300B|JXD300|S5800|S7800|S602b|S5110b|S7300|S5300|S602|S603|S5100|S5110|S601|S7100a|P3000F|P3000s|P101|P200s|P1000m|P200m|P9100|P1000s|S6600b|S908|P1000|P300|S18|S6600|S9100)\\b","iJoyTablet":"Tablet (Spirit 7|Essentia|Galatea|Fusion|Onix 7|Landa|Titan|Scooby|Deox|Stella|Themis|Argon|Unique 7|Sygnus|Hexen|Finity 7|Cream|Cream X2|Jade|Neon 7|Neron 7|Kandy|Scape|Saphyr 7|Rebel|Biox|Rebel|Rebel 8GB|Myst|Draco 7|Myst|Tab7-004|Myst|Tadeo Jones|Tablet Boing|Arrow|Draco Dual Cam|Aurix|Mint|Amity|Revolution|Finity 9|Neon 9|T9w|Amity 4GB Dual Cam|Stone 4GB|Stone 8GB|Andromeda|Silken|X2|Andromeda II|Halley|Flame|Saphyr 9,7|Touch 8|Planet|Triton|Unique 10|Hexen 10|Memphis 4GB|Memphis 8GB|Onix 10)","FX2Tablet":"FX2 PAD7|FX2 PAD10","XoroTablet":"KidsPAD 701|PAD[ ]?712|PAD[ ]?714|PAD[ ]?716|PAD[ ]?717|PAD[ ]?718|PAD[ ]?720|PAD[ ]?721|PAD[ ]?722|PAD[ ]?790|PAD[ ]?792|PAD[ ]?900|PAD[ ]?9715D|PAD[ ]?9716DR|PAD[ ]?9718DR|PAD[ ]?9719QR|PAD[ ]?9720QR|TelePAD1030|Telepad1032|TelePAD730|TelePAD731|TelePAD732|TelePAD735Q|TelePAD830|TelePAD9730|TelePAD795|MegaPAD 1331|MegaPAD 1851|MegaPAD 2151","ViewsonicTablet":"ViewPad 10pi|ViewPad 10e|ViewPad 10s|ViewPad E72|ViewPad7|ViewPad E100|ViewPad 7e|ViewSonic VB733|VB100a","VerizonTablet":"QTAQZ3|QTAIR7|QTAQTZ3|QTASUN1|QTASUN2|QTAXIA1","OdysTablet":"LOOX|XENO10|ODYS[ -](Space|EVO|Xpress|NOON)|\\bXELIO\\b|Xelio10Pro|XELIO7PHONETAB|XELIO10EXTREME|XELIOPT2|NEO_QUAD10","CaptivaTablet":"CAPTIVA PAD","IconbitTablet":"NetTAB|NT-3702|NT-3702S|NT-3702S|NT-3603P|NT-3603P|NT-0704S|NT-0704S|NT-3805C|NT-3805C|NT-0806C|NT-0806C|NT-0909T|NT-0909T|NT-0907S|NT-0907S|NT-0902S|NT-0902S","TeclastTablet":"T98 4G|\\bP80\\b|\\bX90HD\\b|X98 Air|X98 Air 3G|\\bX89\\b|P80 3G|\\bX80h\\b|P98 Air|\\bX89HD\\b|P98 3G|\\bP90HD\\b|P89 3G|X98 3G|\\bP70h\\b|P79HD 3G|G18d 3G|\\bP79HD\\b|\\bP89s\\b|\\bA88\\b|\\bP10HD\\b|\\bP19HD\\b|G18 3G|\\bP78HD\\b|\\bA78\\b|\\bP75\\b|G17s 3G|G17h 3G|\\bP85t\\b|\\bP90\\b|\\bP11\\b|\\bP98t\\b|\\bP98HD\\b|\\bG18d\\b|\\bP85s\\b|\\bP11HD\\b|\\bP88s\\b|\\bA80HD\\b|\\bA80se\\b|\\bA10h\\b|\\bP89\\b|\\bP78s\\b|\\bG18\\b|\\bP85\\b|\\bA70h\\b|\\bA70\\b|\\bG17\\b|\\bP18\\b|\\bA80s\\b|\\bA11s\\b|\\bP88HD\\b|\\bA80h\\b|\\bP76s\\b|\\bP76h\\b|\\bP98\\b|\\bA10HD\\b|\\bP78\\b|\\bP88\\b|\\bA11\\b|\\bA10t\\b|\\bP76a\\b|\\bP76t\\b|\\bP76e\\b|\\bP85HD\\b|\\bP85a\\b|\\bP86\\b|\\bP75HD\\b|\\bP76v\\b|\\bA12\\b|\\bP75a\\b|\\bA15\\b|\\bP76Ti\\b|\\bP81HD\\b|\\bA10\\b|\\bT760VE\\b|\\bT720HD\\b|\\bP76\\b|\\bP73\\b|\\bP71\\b|\\bP72\\b|\\bT720SE\\b|\\bC520Ti\\b|\\bT760\\b|\\bT720VE\\b|T720-3GE|T720-WiFi","OndaTablet":"\\b(V975i|Vi30|VX530|V701|Vi60|V701s|Vi50|V801s|V719|Vx610w|VX610W|V819i|Vi10|VX580W|Vi10|V711s|V813|V811|V820w|V820|Vi20|V711|VI30W|V712|V891w|V972|V819w|V820w|Vi60|V820w|V711|V813s|V801|V819|V975s|V801|V819|V819|V818|V811|V712|V975m|V101w|V961w|V812|V818|V971|V971s|V919|V989|V116w|V102w|V973|Vi40)\\b[\\s]+|V10 \\b4G\\b","JaytechTablet":"TPC-PA762","BlaupunktTablet":"Endeavour 800NG|Endeavour 1010","DigmaTablet":"\\b(iDx10|iDx9|iDx8|iDx7|iDxD7|iDxD8|iDsQ8|iDsQ7|iDsQ8|iDsD10|iDnD7|3TS804H|iDsQ11|iDj7|iDs10)\\b","EvolioTablet":"ARIA_Mini_wifi|Aria[ _]Mini|Evolio X10|Evolio X7|Evolio X8|\\bEvotab\\b|\\bNeura\\b","LavaTablet":"QPAD E704|\\bIvoryS\\b|E-TAB IVORY|\\bE-TAB\\b","AocTablet":"MW0811|MW0812|MW0922|MTK8382|MW1031|MW0831|MW0821|MW0931|MW0712","MpmanTablet":"MP11 OCTA|MP10 OCTA|MPQC1114|MPQC1004|MPQC994|MPQC974|MPQC973|MPQC804|MPQC784|MPQC780|\\bMPG7\\b|MPDCG75|MPDCG71|MPDC1006|MP101DC|MPDC9000|MPDC905|MPDC706HD|MPDC706|MPDC705|MPDC110|MPDC100|MPDC99|MPDC97|MPDC88|MPDC8|MPDC77|MP709|MID701|MID711|MID170|MPDC703|MPQC1010","CelkonTablet":"CT695|CT888|CT[\\s]?910|CT7 Tab|CT9 Tab|CT3 Tab|CT2 Tab|CT1 Tab|C820|C720|\\bCT-1\\b","WolderTablet":"miTab \\b(DIAMOND|SPACE|BROOKLYN|NEO|FLY|MANHATTAN|FUNK|EVOLUTION|SKY|GOCAR|IRON|GENIUS|POP|MINT|EPSILON|BROADWAY|JUMP|HOP|LEGEND|NEW AGE|LINE|ADVANCE|FEEL|FOLLOW|LIKE|LINK|LIVE|THINK|FREEDOM|CHICAGO|CLEVELAND|BALTIMORE-GH|IOWA|BOSTON|SEATTLE|PHOENIX|DALLAS|IN 101|MasterChef)\\b","MediacomTablet":"M-MPI10C3G|M-SP10EG|M-SP10EGP|M-SP10HXAH|M-SP7HXAH|M-SP10HXBH|M-SP8HXAH|M-SP8MXA","MiTablet":"\\bMI PAD\\b|\\bHM NOTE 1W\\b","NibiruTablet":"Nibiru M1|Nibiru Jupiter One","NexoTablet":"NEXO NOVA|NEXO 10|NEXO AVIO|NEXO FREE|NEXO GO|NEXO EVO|NEXO 3G|NEXO SMART|NEXO KIDDO|NEXO MOBI","LeaderTablet":"TBLT10Q|TBLT10I|TBL-10WDKB|TBL-10WDKBO2013|TBL-W230V2|TBL-W450|TBL-W500|SV572|TBLT7I|TBA-AC7-8G|TBLT79|TBL-8W16|TBL-10W32|TBL-10WKB|TBL-W100","UbislateTablet":"UbiSlate[\\s]?7C","PocketBookTablet":"Pocketbook","KocasoTablet":"\\b(TB-1207)\\b","HisenseTablet":"\\b(F5281|E2371)\\b","Hudl":"Hudl HT7S3|Hudl 2","TelstraTablet":"T-Hub2","GenericTablet":"Android.*\\b97D\\b|Tablet(?!.*PC)|BNTV250A|MID-WCDMA|LogicPD Zoom2|\\bA7EB\\b|CatNova8|A1_07|CT704|CT1002|\\bM721\\b|rk30sdk|\\bEVOTAB\\b|M758A|ET904|ALUMIUM10|Smartfren Tab|Endeavour 1010|Tablet-PC-4|Tagi Tab|\\bM6pro\\b|CT1020W|arc 10HD|\\bTP750\\b|\\bQTAQZ3\\b|WVT101|TM1088|KT107"},"oss":{"AndroidOS":"Android","BlackBerryOS":"blackberry|\\bBB10\\b|rim tablet os","PalmOS":"PalmOS|avantgo|blazer|elaine|hiptop|palm|plucker|xiino","SymbianOS":"Symbian|SymbOS|Series60|Series40|SYB-[0-9]+|\\bS60\\b","WindowsMobileOS":"Windows CE.*(PPC|Smartphone|Mobile|[0-9]{3}x[0-9]{3})|Windows Mobile|Windows Phone [0-9.]+|WCE;","WindowsPhoneOS":"Windows Phone 10.0|Windows Phone 8.1|Windows Phone 8.0|Windows Phone OS|XBLWP7|ZuneWP7|Windows NT 6.[23]; ARM;","iOS":"\\biPhone.*Mobile|\\biPod|\\biPad|AppleCoreMedia","iPadOS":"CPU OS 13","MeeGoOS":"MeeGo","MaemoOS":"Maemo","JavaOS":"J2ME\/|\\bMIDP\\b|\\bCLDC\\b","webOS":"webOS|hpwOS","badaOS":"\\bBada\\b","BREWOS":"BREW"},"uas":{"Chrome":"\\bCrMo\\b|CriOS|Android.*Chrome\/[.0-9]* (Mobile)?","Dolfin":"\\bDolfin\\b","Opera":"Opera.*Mini|Opera.*Mobi|Android.*Opera|Mobile.*OPR\/[0-9.]+$|Coast\/[0-9.]+","Skyfire":"Skyfire","Edge":"Mobile Safari\/[.0-9]* Edge","IE":"IEMobile|MSIEMobile","Firefox":"fennec|firefox.*maemo|(Mobile|Tablet).*Firefox|Firefox.*Mobile|FxiOS","Bolt":"bolt","TeaShark":"teashark","Blazer":"Blazer","Safari":"Version.*Mobile.*Safari|Safari.*Mobile|MobileSafari","WeChat":"\\bMicroMessenger\\b","UCBrowser":"UC.*Browser|UCWEB","baiduboxapp":"baiduboxapp","baidubrowser":"baidubrowser","DiigoBrowser":"DiigoBrowser","Mercury":"\\bMercury\\b","ObigoBrowser":"Obigo","NetFront":"NF-Browser","GenericBrowser":"NokiaBrowser|OviBrowser|OneBrowser|TwonkyBeamBrowser|SEMC.*Browser|FlyFlow|Minimo|NetFront|Novarra-Vision|MQQBrowser|MicroMessenger","PaleMoon":"Android.*PaleMoon|Mobile.*PaleMoon"},"props":{"Mobile":"Mobile\/[VER]","Build":"Build\/[VER]","Version":"Version\/[VER]","VendorID":"VendorID\/[VER]","iPad":"iPad.*CPU[a-z ]+[VER]","iPhone":"iPhone.*CPU[a-z ]+[VER]","iPod":"iPod.*CPU[a-z ]+[VER]","Kindle":"Kindle\/[VER]","Chrome":["Chrome\/[VER]","CriOS\/[VER]","CrMo\/[VER]"],"Coast":["Coast\/[VER]"],"Dolfin":"Dolfin\/[VER]","Firefox":["Firefox\/[VER]","FxiOS\/[VER]"],"Fennec":"Fennec\/[VER]","Edge":"Edge\/[VER]","IE":["IEMobile\/[VER];","IEMobile [VER]","MSIE [VER];","Trident\/[0-9.]+;.*rv:[VER]"],"NetFront":"NetFront\/[VER]","NokiaBrowser":"NokiaBrowser\/[VER]","Opera":[" OPR\/[VER]","Opera Mini\/[VER]","Version\/[VER]"],"Opera Mini":"Opera Mini\/[VER]","Opera Mobi":"Version\/[VER]","UCBrowser":["UCWEB[VER]","UC.*Browser\/[VER]"],"MQQBrowser":"MQQBrowser\/[VER]","MicroMessenger":"MicroMessenger\/[VER]","baiduboxapp":"baiduboxapp\/[VER]","baidubrowser":"baidubrowser\/[VER]","SamsungBrowser":"SamsungBrowser\/[VER]","Iron":"Iron\/[VER]","Safari":["Version\/[VER]","Safari\/[VER]"],"Skyfire":"Skyfire\/[VER]","Tizen":"Tizen\/[VER]","Webkit":"webkit[ \/][VER]","PaleMoon":"PaleMoon\/[VER]","Gecko":"Gecko\/[VER]","Trident":"Trident\/[VER]","Presto":"Presto\/[VER]","Goanna":"Goanna\/[VER]","iOS":" \\bi?OS\\b [VER][ ;]{1}","Android":"Android [VER]","BlackBerry":["BlackBerry[\\w]+\/[VER]","BlackBerry.*Version\/[VER]","Version\/[VER]"],"BREW":"BREW [VER]","Java":"Java\/[VER]","Windows Phone OS":["Windows Phone OS [VER]","Windows Phone [VER]"],"Windows Phone":"Windows Phone [VER]","Windows CE":"Windows CE\/[VER]","Windows NT":"Windows NT [VER]","Symbian":["SymbianOS\/[VER]","Symbian\/[VER]"],"webOS":["webOS\/[VER]","hpwOS\/[VER];"]},"utils":{"Bot":"Googlebot|facebookexternalhit|Google-AMPHTML|s~amp-validator|AdsBot-Google|Google Keyword Suggestion|Facebot|YandexBot|YandexMobileBot|bingbot|ia_archiver|AhrefsBot|Ezooms|GSLFbot|WBSearchBot|Twitterbot|TweetmemeBot|Twikle|PaperLiBot|Wotbox|UnwindFetchor|Exabot|MJ12bot|YandexImages|TurnitinBot|Pingdom|contentkingapp","MobileBot":"Googlebot-Mobile|AdsBot-Google-Mobile|YahooSeeker\/M1A1-R2D2","DesktopMode":"WPDesktop","TV":"SonyDTV|HbbTV","WebKit":"(webkit)[ \/]([\\w.]+)","Console":"\\b(Nintendo|Nintendo WiiU|Nintendo 3DS|Nintendo Switch|PLAYSTATION|Xbox)\\b","Watch":"SM-V700"}};// following patterns come from http://detectmobilebrowsers.com/
impl.detectMobileBrowsers={fullPattern:/(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino/i,shortPattern:/1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i,tabletPattern:/android|ipad|playbook|silk/i};var hasOwnProp=Object.prototype.hasOwnProperty,isArray;impl.FALLBACK_PHONE='UnknownPhone';impl.FALLBACK_TABLET='UnknownTablet';impl.FALLBACK_MOBILE='UnknownMobile';isArray='isArray'in Array?Array.isArray:function(value){return Object.prototype.toString.call(value)==='[object Array]';};function equalIC(a,b){return a!=null&&b!=null&&a.toLowerCase()===b.toLowerCase();}function containsIC(array,value){var valueLC,i,len=array.length;if(!len||!value){return false;}valueLC=value.toLowerCase();for(i=0;i<len;++i){if(valueLC===array[i].toLowerCase()){return true;}}return false;}function convertPropsToRegExp(object){for(var key in object){if(hasOwnProp.call(object,key)){object[key]=new RegExp(object[key],'i');}}}function prepareUserAgent(userAgent){return(userAgent||'').substr(0,500);// mitigate vulnerable to ReDoS
}(function init(){var key,values,value,i,len,verPos,mobileDetectRules=impl.mobileDetectRules;for(key in mobileDetectRules.props){if(hasOwnProp.call(mobileDetectRules.props,key)){values=mobileDetectRules.props[key];if(!isArray(values)){values=[values];}len=values.length;for(i=0;i<len;++i){value=values[i];verPos=value.indexOf('[VER]');if(verPos>=0){value=value.substring(0,verPos)+'([\\w._\\+]+)'+value.substring(verPos+5);}values[i]=new RegExp(value,'i');}mobileDetectRules.props[key]=values;}}convertPropsToRegExp(mobileDetectRules.oss);convertPropsToRegExp(mobileDetectRules.phones);convertPropsToRegExp(mobileDetectRules.tablets);convertPropsToRegExp(mobileDetectRules.uas);convertPropsToRegExp(mobileDetectRules.utils);// copy some patterns to oss0 which are tested first (see issue#15)
mobileDetectRules.oss0={WindowsPhoneOS:mobileDetectRules.oss.WindowsPhoneOS,WindowsMobileOS:mobileDetectRules.oss.WindowsMobileOS};})();/**
     * Test userAgent string against a set of rules and find the first matched key.
     * @param {Object} rules (key is String, value is RegExp)
     * @param {String} userAgent the navigator.userAgent (or HTTP-Header 'User-Agent').
     * @returns {String|null} the matched key if found, otherwise <tt>null</tt>
     * @private
     */impl.findMatch=function(rules,userAgent){for(var key in rules){if(hasOwnProp.call(rules,key)){if(rules[key].test(userAgent)){return key;}}}return null;};/**
     * Test userAgent string against a set of rules and return an array of matched keys.
     * @param {Object} rules (key is String, value is RegExp)
     * @param {String} userAgent the navigator.userAgent (or HTTP-Header 'User-Agent').
     * @returns {Array} an array of matched keys, may be empty when there is no match, but not <tt>null</tt>
     * @private
     */impl.findMatches=function(rules,userAgent){var result=[];for(var key in rules){if(hasOwnProp.call(rules,key)){if(rules[key].test(userAgent)){result.push(key);}}}return result;};/**
     * Check the version of the given property in the User-Agent.
     *
     * @param {String} propertyName
     * @param {String} userAgent
     * @return {String} version or <tt>null</tt> if version not found
     * @private
     */impl.getVersionStr=function(propertyName,userAgent){var props=impl.mobileDetectRules.props,patterns,i,len,match;if(hasOwnProp.call(props,propertyName)){patterns=props[propertyName];len=patterns.length;for(i=0;i<len;++i){match=patterns[i].exec(userAgent);if(match!==null){return match[1];}}}return null;};/**
     * Check the version of the given property in the User-Agent.
     * Will return a float number. (eg. 2_0 will return 2.0, 4.3.1 will return 4.31)
     *
     * @param {String} propertyName
     * @param {String} userAgent
     * @return {Number} version or <tt>NaN</tt> if version not found
     * @private
     */impl.getVersion=function(propertyName,userAgent){var version=impl.getVersionStr(propertyName,userAgent);return version?impl.prepareVersionNo(version):NaN;};/**
     * Prepare the version number.
     *
     * @param {String} version
     * @return {Number} the version number as a floating number
     * @private
     */impl.prepareVersionNo=function(version){var numbers;numbers=version.split(/[a-z._ \/\-]/i);if(numbers.length===1){version=numbers[0];}if(numbers.length>1){version=numbers[0]+'.';numbers.shift();version+=numbers.join('');}return Number(version);};impl.isMobileFallback=function(userAgent){return impl.detectMobileBrowsers.fullPattern.test(userAgent)||impl.detectMobileBrowsers.shortPattern.test(userAgent.substr(0,4));};impl.isTabletFallback=function(userAgent){return impl.detectMobileBrowsers.tabletPattern.test(userAgent);};impl.prepareDetectionCache=function(cache,userAgent,maxPhoneWidth){if(cache.mobile!==undefined){return;}var phone,tablet,phoneSized;// first check for stronger tablet rules, then phone (see issue#5)
tablet=impl.findMatch(impl.mobileDetectRules.tablets,userAgent);if(tablet){cache.mobile=cache.tablet=tablet;cache.phone=null;return;// unambiguously identified as tablet
}phone=impl.findMatch(impl.mobileDetectRules.phones,userAgent);if(phone){cache.mobile=cache.phone=phone;cache.tablet=null;return;// unambiguously identified as phone
}// our rules haven't found a match -> try more general fallback rules
if(impl.isMobileFallback(userAgent)){phoneSized=MobileDetect.isPhoneSized(maxPhoneWidth);if(phoneSized===undefined){cache.mobile=impl.FALLBACK_MOBILE;cache.tablet=cache.phone=null;}else if(phoneSized){cache.mobile=cache.phone=impl.FALLBACK_PHONE;cache.tablet=null;}else{cache.mobile=cache.tablet=impl.FALLBACK_TABLET;cache.phone=null;}}else if(impl.isTabletFallback(userAgent)){cache.mobile=cache.tablet=impl.FALLBACK_TABLET;cache.phone=null;}else{// not mobile at all!
cache.mobile=cache.tablet=cache.phone=null;}};// t is a reference to a MobileDetect instance
impl.mobileGrade=function(t){// impl note:
// To keep in sync w/ Mobile_Detect.php easily, the following code is tightly aligned to the PHP version.
// When changes are made in Mobile_Detect.php, copy this method and replace:
//     $this-> / t.
//     self::MOBILE_GRADE_(.) / '$1'
//     , self::VERSION_TYPE_FLOAT / (nothing)
//     isIOS() / os('iOS')
//     [reg] / (nothing)   <-- jsdelivr complaining about unescaped unicode character U+00AE
var $isMobile=t.mobile()!==null;if(// Apple iOS 3.2-5.1 - Tested on the original iPad (4.3 / 5.0), iPad 2 (4.3), iPad 3 (5.1), original iPhone (3.1), iPhone 3 (3.2), 3GS (4.3), 4 (4.3 / 5.0), and 4S (5.1)
t.os('iOS')&&t.version('iPad')>=4.3||t.os('iOS')&&t.version('iPhone')>=3.1||t.os('iOS')&&t.version('iPod')>=3.1||// Android 2.1-2.3 - Tested on the HTC Incredible (2.2), original Droid (2.2), HTC Aria (2.1), Google Nexus S (2.3). Functional on 1.5 & 1.6 but performance may be sluggish, tested on Google G1 (1.5)
// Android 3.1 (Honeycomb)  - Tested on the Samsung Galaxy Tab 10.1 and Motorola XOOM
// Android 4.0 (ICS)  - Tested on a Galaxy Nexus. Note: transition performance can be poor on upgraded devices
// Android 4.1 (Jelly Bean)  - Tested on a Galaxy Nexus and Galaxy 7
t.version('Android')>2.1&&t.is('Webkit')||// Windows Phone 7-7.5 - Tested on the HTC Surround (7.0) HTC Trophy (7.5), LG-E900 (7.5), Nokia Lumia 800
t.version('Windows Phone OS')>=7.0||// Blackberry 7 - Tested on BlackBerry Torch 9810
// Blackberry 6.0 - Tested on the Torch 9800 and Style 9670
t.is('BlackBerry')&&t.version('BlackBerry')>=6.0||// Blackberry Playbook (1.0-2.0) - Tested on PlayBook
t.match('Playbook.*Tablet')||// Palm WebOS (1.4-2.0) - Tested on the Palm Pixi (1.4), Pre (1.4), Pre 2 (2.0)
t.version('webOS')>=1.4&&t.match('Palm|Pre|Pixi')||// Palm WebOS 3.0  - Tested on HP TouchPad
t.match('hp.*TouchPad')||// Firefox Mobile (12 Beta) - Tested on Android 2.3 device
t.is('Firefox')&&t.version('Firefox')>=12||// Chrome for Android - Tested on Android 4.0, 4.1 device
t.is('Chrome')&&t.is('AndroidOS')&&t.version('Android')>=4.0||// Skyfire 4.1 - Tested on Android 2.3 device
t.is('Skyfire')&&t.version('Skyfire')>=4.1&&t.is('AndroidOS')&&t.version('Android')>=2.3||// Opera Mobile 11.5-12: Tested on Android 2.3
t.is('Opera')&&t.version('Opera Mobi')>11&&t.is('AndroidOS')||// Meego 1.2 - Tested on Nokia 950 and N9
t.is('MeeGoOS')||// Tizen (pre-release) - Tested on early hardware
t.is('Tizen')||// Samsung Bada 2.0 - Tested on a Samsung Wave 3, Dolphin browser
// @todo: more tests here!
t.is('Dolfin')&&t.version('Bada')>=2.0||// UC Browser - Tested on Android 2.3 device
(t.is('UC Browser')||t.is('Dolfin'))&&t.version('Android')>=2.3||// Kindle 3 and Fire  - Tested on the built-in WebKit browser for each
t.match('Kindle Fire')||t.is('Kindle')&&t.version('Kindle')>=3.0||// Nook Color 1.4.1 - Tested on original Nook Color, not Nook Tablet
t.is('AndroidOS')&&t.is('NookTablet')||// Chrome Desktop 11-21 - Tested on OS X 10.7 and Windows 7
t.version('Chrome')>=11&&!$isMobile||// Safari Desktop 4-5 - Tested on OS X 10.7 and Windows 7
t.version('Safari')>=5.0&&!$isMobile||// Firefox Desktop 4-13 - Tested on OS X 10.7 and Windows 7
t.version('Firefox')>=4.0&&!$isMobile||// Internet Explorer 7-9 - Tested on Windows XP, Vista and 7
t.version('MSIE')>=7.0&&!$isMobile||// Opera Desktop 10-12 - Tested on OS X 10.7 and Windows 7
// @reference: http://my.opera.com/community/openweb/idopera/
t.version('Opera')>=10&&!$isMobile){return'A';}if(t.os('iOS')&&t.version('iPad')<4.3||t.os('iOS')&&t.version('iPhone')<3.1||t.os('iOS')&&t.version('iPod')<3.1||// Blackberry 5.0: Tested on the Storm 2 9550, Bold 9770
t.is('Blackberry')&&t.version('BlackBerry')>=5&&t.version('BlackBerry')<6||//Opera Mini (5.0-6.5) - Tested on iOS 3.2/4.3 and Android 2.3
t.version('Opera Mini')>=5.0&&t.version('Opera Mini')<=6.5&&(t.version('Android')>=2.3||t.is('iOS'))||// Nokia Symbian^3 - Tested on Nokia N8 (Symbian^3), C7 (Symbian^3), also works on N97 (Symbian^1)
t.match('NokiaN8|NokiaC7|N97.*Series60|Symbian/3')||// @todo: report this (tested on Nokia N71)
t.version('Opera Mobi')>=11&&t.is('SymbianOS')){return'B';}if(// Blackberry 4.x - Tested on the Curve 8330
t.version('BlackBerry')<5.0||// Windows Mobile - Tested on the HTC Leo (WinMo 5.2)
t.match('MSIEMobile|Windows CE.*Mobile')||t.version('Windows Mobile')<=5.2){return'C';}//All older smartphone platforms and featurephones - Any device that doesn't support media queries
//will receive the basic, C grade experience.
return'C';};impl.detectOS=function(ua){return impl.findMatch(impl.mobileDetectRules.oss0,ua)||impl.findMatch(impl.mobileDetectRules.oss,ua);};impl.getDeviceSmallerSide=function(){return window.screen.width<window.screen.height?window.screen.width:window.screen.height;};/**
     * Constructor for MobileDetect object.
     * <br>
     * Such an object will keep a reference to the given user-agent string and cache most of the detect queries.<br>
     * <div style="background-color: #d9edf7; border: 1px solid #bce8f1; color: #3a87ad; padding: 14px; border-radius: 2px; margin-top: 20px">
     *     <strong>Find information how to download and install:</strong>
     *     <a href="https://github.com/hgoebl/mobile-detect.js/">github.com/hgoebl/mobile-detect.js/</a>
     * </div>
     *
     * @example <pre>
     *     var md = new MobileDetect(window.navigator.userAgent);
     *     if (md.mobile()) {
     *         location.href = (md.mobileGrade() === 'A') ? '/mobile/' : '/lynx/';
     *     }
     * </pre>
     *
     * @param {string} userAgent typically taken from window.navigator.userAgent or http_header['User-Agent']
     * @param {number} [maxPhoneWidth=600] <strong>only for browsers</strong> specify a value for the maximum
     *        width of smallest device side (in logical "CSS" pixels) until a device detected as mobile will be handled
     *        as phone.
     *        This is only used in cases where the device cannot be classified as phone or tablet.<br>
     *        See <a href="http://developer.android.com/guide/practices/screens_support.html">Declaring Tablet Layouts
     *        for Android</a>.<br>
     *        If you provide a value < 0, then this "fuzzy" check is disabled.
     * @constructor
     * @global
     */function MobileDetect(userAgent,maxPhoneWidth){this.ua=prepareUserAgent(userAgent);this._cache={};//600dp is typical 7" tablet minimum width
this.maxPhoneWidth=maxPhoneWidth||600;}MobileDetect.prototype={constructor:MobileDetect,/**
         * Returns the detected phone or tablet type or <tt>null</tt> if it is not a mobile device.
         * <br>
         * For a list of possible return values see {@link MobileDetect#phone} and {@link MobileDetect#tablet}.<br>
         * <br>
         * If the device is not detected by the regular expressions from Mobile-Detect, a test is made against
         * the patterns of <a href="http://detectmobilebrowsers.com/">detectmobilebrowsers.com</a>. If this test
         * is positive, a value of <code>UnknownPhone</code>, <code>UnknownTablet</code> or
         * <code>UnknownMobile</code> is returned.<br>
         * When used in browser, the decision whether phone or tablet is made based on <code>screen.width/height</code>.<br>
         * <br>
         * When used server-side (node.js), there is no way to tell the difference between <code>UnknownTablet</code>
         * and <code>UnknownMobile</code>, so you will get <code>UnknownMobile</code> here.<br>
         * Be aware that since v1.0.0 in this special case you will get <code>UnknownMobile</code> only for:
         * {@link MobileDetect#mobile}, not for {@link MobileDetect#phone} and {@link MobileDetect#tablet}.
         * In versions before v1.0.0 all 3 methods returned <code>UnknownMobile</code> which was tedious to use.
         * <br>
         * In most cases you will use the return value just as a boolean.
         *
         * @returns {String} the key for the phone family or tablet family, e.g. "Nexus".
         * @function MobileDetect#mobile
         */mobile:function mobile(){impl.prepareDetectionCache(this._cache,this.ua,this.maxPhoneWidth);return this._cache.mobile;},/**
         * Returns the detected phone type/family string or <tt>null</tt>.
         * <br>
         * The returned tablet (family or producer) is one of following keys:<br>
         * <br><tt>iPhone, BlackBerry, HTC, Nexus, Dell, Motorola, Samsung, LG, Sony, Asus,
         * NokiaLumia, Micromax, Palm, Vertu, Pantech, Fly, Wiko, iMobile, SimValley,
         * Wolfgang, Alcatel, Nintendo, Amoi, INQ, OnePlus, GenericPhone</tt><br>
         * <br>
         * If the device is not detected by the regular expressions from Mobile-Detect, a test is made against
         * the patterns of <a href="http://detectmobilebrowsers.com/">detectmobilebrowsers.com</a>. If this test
         * is positive, a value of <code>UnknownPhone</code> or <code>UnknownMobile</code> is returned.<br>
         * When used in browser, the decision whether phone or tablet is made based on <code>screen.width/height</code>.<br>
         * <br>
         * When used server-side (node.js), there is no way to tell the difference between <code>UnknownTablet</code>
         * and <code>UnknownMobile</code>, so you will get <code>null</code> here, while {@link MobileDetect#mobile}
         * will return <code>UnknownMobile</code>.<br>
         * Be aware that since v1.0.0 in this special case you will get <code>UnknownMobile</code> only for:
         * {@link MobileDetect#mobile}, not for {@link MobileDetect#phone} and {@link MobileDetect#tablet}.
         * In versions before v1.0.0 all 3 methods returned <code>UnknownMobile</code> which was tedious to use.
         * <br>
         * In most cases you will use the return value just as a boolean.
         *
         * @returns {String} the key of the phone family or producer, e.g. "iPhone"
         * @function MobileDetect#phone
         */phone:function phone(){impl.prepareDetectionCache(this._cache,this.ua,this.maxPhoneWidth);return this._cache.phone;},/**
         * Returns the detected tablet type/family string or <tt>null</tt>.
         * <br>
         * The returned tablet (family or producer) is one of following keys:<br>
         * <br><tt>iPad, NexusTablet, GoogleTablet, SamsungTablet, Kindle, SurfaceTablet,
         * HPTablet, AsusTablet, BlackBerryTablet, HTCtablet, MotorolaTablet, NookTablet,
         * AcerTablet, ToshibaTablet, LGTablet, FujitsuTablet, PrestigioTablet,
         * LenovoTablet, DellTablet, YarvikTablet, MedionTablet, ArnovaTablet,
         * IntensoTablet, IRUTablet, MegafonTablet, EbodaTablet, AllViewTablet,
         * ArchosTablet, AinolTablet, NokiaLumiaTablet, SonyTablet, PhilipsTablet,
         * CubeTablet, CobyTablet, MIDTablet, MSITablet, SMiTTablet, RockChipTablet,
         * FlyTablet, bqTablet, HuaweiTablet, NecTablet, PantechTablet, BronchoTablet,
         * VersusTablet, ZyncTablet, PositivoTablet, NabiTablet, KoboTablet, DanewTablet,
         * TexetTablet, PlaystationTablet, TrekstorTablet, PyleAudioTablet, AdvanTablet,
         * DanyTechTablet, GalapadTablet, MicromaxTablet, KarbonnTablet, AllFineTablet,
         * PROSCANTablet, YONESTablet, ChangJiaTablet, GUTablet, PointOfViewTablet,
         * OvermaxTablet, HCLTablet, DPSTablet, VistureTablet, CrestaTablet,
         * MediatekTablet, ConcordeTablet, GoCleverTablet, ModecomTablet, VoninoTablet,
         * ECSTablet, StorexTablet, VodafoneTablet, EssentielBTablet, RossMoorTablet,
         * iMobileTablet, TolinoTablet, AudioSonicTablet, AMPETablet, SkkTablet,
         * TecnoTablet, JXDTablet, iJoyTablet, FX2Tablet, XoroTablet, ViewsonicTablet,
         * VerizonTablet, OdysTablet, CaptivaTablet, IconbitTablet, TeclastTablet,
         * OndaTablet, JaytechTablet, BlaupunktTablet, DigmaTablet, EvolioTablet,
         * LavaTablet, AocTablet, MpmanTablet, CelkonTablet, WolderTablet, MediacomTablet,
         * MiTablet, NibiruTablet, NexoTablet, LeaderTablet, UbislateTablet,
         * PocketBookTablet, KocasoTablet, HisenseTablet, Hudl, TelstraTablet,
         * GenericTablet</tt><br>
         * <br>
         * If the device is not detected by the regular expressions from Mobile-Detect, a test is made against
         * the patterns of <a href="http://detectmobilebrowsers.com/">detectmobilebrowsers.com</a>. If this test
         * is positive, a value of <code>UnknownTablet</code> or <code>UnknownMobile</code> is returned.<br>
         * When used in browser, the decision whether phone or tablet is made based on <code>screen.width/height</code>.<br>
         * <br>
         * When used server-side (node.js), there is no way to tell the difference between <code>UnknownTablet</code>
         * and <code>UnknownMobile</code>, so you will get <code>null</code> here, while {@link MobileDetect#mobile}
         * will return <code>UnknownMobile</code>.<br>
         * Be aware that since v1.0.0 in this special case you will get <code>UnknownMobile</code> only for:
         * {@link MobileDetect#mobile}, not for {@link MobileDetect#phone} and {@link MobileDetect#tablet}.
         * In versions before v1.0.0 all 3 methods returned <code>UnknownMobile</code> which was tedious to use.
         * <br>
         * In most cases you will use the return value just as a boolean.
         *
         * @returns {String} the key of the tablet family or producer, e.g. "SamsungTablet"
         * @function MobileDetect#tablet
         */tablet:function tablet(){impl.prepareDetectionCache(this._cache,this.ua,this.maxPhoneWidth);return this._cache.tablet;},/**
         * Returns the (first) detected user-agent string or <tt>null</tt>.
         * <br>
         * The returned user-agent is one of following keys:<br>
         * <br><tt>Chrome, Dolfin, Opera, Skyfire, Edge, IE, Firefox, Bolt, TeaShark, Blazer,
         * Safari, WeChat, UCBrowser, baiduboxapp, baidubrowser, DiigoBrowser, Mercury,
         * ObigoBrowser, NetFront, GenericBrowser, PaleMoon</tt><br>
         * <br>
         * In most cases calling {@link MobileDetect#userAgent} will be sufficient. But there are rare
         * cases where a mobile device pretends to be more than one particular browser. You can get the
         * list of all matches with {@link MobileDetect#userAgents} or check for a particular value by
         * providing one of the defined keys as first argument to {@link MobileDetect#is}.
         *
         * @returns {String} the key for the detected user-agent or <tt>null</tt>
         * @function MobileDetect#userAgent
         */userAgent:function userAgent(){if(this._cache.userAgent===undefined){this._cache.userAgent=impl.findMatch(impl.mobileDetectRules.uas,this.ua);}return this._cache.userAgent;},/**
         * Returns all detected user-agent strings.
         * <br>
         * The array is empty or contains one or more of following keys:<br>
         * <br><tt>Chrome, Dolfin, Opera, Skyfire, Edge, IE, Firefox, Bolt, TeaShark, Blazer,
         * Safari, WeChat, UCBrowser, baiduboxapp, baidubrowser, DiigoBrowser, Mercury,
         * ObigoBrowser, NetFront, GenericBrowser, PaleMoon</tt><br>
         * <br>
         * In most cases calling {@link MobileDetect#userAgent} will be sufficient. But there are rare
         * cases where a mobile device pretends to be more than one particular browser. You can get the
         * list of all matches with {@link MobileDetect#userAgents} or check for a particular value by
         * providing one of the defined keys as first argument to {@link MobileDetect#is}.
         *
         * @returns {Array} the array of detected user-agent keys or <tt>[]</tt>
         * @function MobileDetect#userAgents
         */userAgents:function userAgents(){if(this._cache.userAgents===undefined){this._cache.userAgents=impl.findMatches(impl.mobileDetectRules.uas,this.ua);}return this._cache.userAgents;},/**
         * Returns the detected operating system string or <tt>null</tt>.
         * <br>
         * The operating system is one of following keys:<br>
         * <br><tt>AndroidOS, BlackBerryOS, PalmOS, SymbianOS, WindowsMobileOS, WindowsPhoneOS,
         * iOS, iPadOS, MeeGoOS, MaemoOS, JavaOS, webOS, badaOS, BREWOS</tt><br>
         *
         * @returns {String} the key for the detected operating system.
         * @function MobileDetect#os
         */os:function os(){if(this._cache.os===undefined){this._cache.os=impl.detectOS(this.ua);}return this._cache.os;},/**
         * Get the version (as Number) of the given property in the User-Agent.
         * <br>
         * Will return a float number. (eg. 2_0 will return 2.0, 4.3.1 will return 4.31)
         *
         * @param {String} key a key defining a thing which has a version.<br>
         *        You can use one of following keys:<br>
         * <br><tt>Mobile, Build, Version, VendorID, iPad, iPhone, iPod, Kindle, Chrome, Coast,
         * Dolfin, Firefox, Fennec, Edge, IE, NetFront, NokiaBrowser, Opera, Opera Mini,
         * Opera Mobi, UCBrowser, MQQBrowser, MicroMessenger, baiduboxapp, baidubrowser,
         * SamsungBrowser, Iron, Safari, Skyfire, Tizen, Webkit, PaleMoon, Gecko, Trident,
         * Presto, Goanna, iOS, Android, BlackBerry, BREW, Java, Windows Phone OS, Windows
         * Phone, Windows CE, Windows NT, Symbian, webOS</tt><br>
         *
         * @returns {Number} the version as float or <tt>NaN</tt> if User-Agent doesn't contain this version.
         *          Be careful when comparing this value with '==' operator!
         * @function MobileDetect#version
         */version:function version(key){return impl.getVersion(key,this.ua);},/**
         * Get the version (as String) of the given property in the User-Agent.
         * <br>
         *
         * @param {String} key a key defining a thing which has a version.<br>
         *        You can use one of following keys:<br>
         * <br><tt>Mobile, Build, Version, VendorID, iPad, iPhone, iPod, Kindle, Chrome, Coast,
         * Dolfin, Firefox, Fennec, Edge, IE, NetFront, NokiaBrowser, Opera, Opera Mini,
         * Opera Mobi, UCBrowser, MQQBrowser, MicroMessenger, baiduboxapp, baidubrowser,
         * SamsungBrowser, Iron, Safari, Skyfire, Tizen, Webkit, PaleMoon, Gecko, Trident,
         * Presto, Goanna, iOS, Android, BlackBerry, BREW, Java, Windows Phone OS, Windows
         * Phone, Windows CE, Windows NT, Symbian, webOS</tt><br>
         *
         * @returns {String} the "raw" version as String or <tt>null</tt> if User-Agent doesn't contain this version.
         *
         * @function MobileDetect#versionStr
         */versionStr:function versionStr(key){return impl.getVersionStr(key,this.ua);},/**
         * Global test key against userAgent, os, phone, tablet and some other properties of userAgent string.
         *
         * @param {String} key the key (case-insensitive) of a userAgent, an operating system, phone or
         *        tablet family.<br>
         *        For a complete list of possible values, see {@link MobileDetect#userAgent},
         *        {@link MobileDetect#os}, {@link MobileDetect#phone}, {@link MobileDetect#tablet}.<br>
         *        Additionally you have following keys:<br>
         * <br><tt>Bot, MobileBot, DesktopMode, TV, WebKit, Console, Watch</tt><br>
         *
         * @returns {boolean} <tt>true</tt> when the given key is one of the defined keys of userAgent, os, phone,
         *                    tablet or one of the listed additional keys, otherwise <tt>false</tt>
         * @function MobileDetect#is
         */is:function is(key){return containsIC(this.userAgents(),key)||equalIC(key,this.os())||equalIC(key,this.phone())||equalIC(key,this.tablet())||containsIC(impl.findMatches(impl.mobileDetectRules.utils,this.ua),key);},/**
         * Do a quick test against navigator::userAgent.
         *
         * @param {String|RegExp} pattern the pattern, either as String or RegExp
         *                        (a string will be converted to a case-insensitive RegExp).
         * @returns {boolean} <tt>true</tt> when the pattern matches, otherwise <tt>false</tt>
         * @function MobileDetect#match
         */match:function match(pattern){if(!(pattern instanceof RegExp)){pattern=new RegExp(pattern,'i');}return pattern.test(this.ua);},/**
         * Checks whether the mobile device can be considered as phone regarding <code>screen.width</code>.
         * <br>
         * Obviously this method makes sense in browser environments only (not for Node.js)!
         * @param {number} [maxPhoneWidth] the maximum logical pixels (aka. CSS-pixels) to be considered as phone.<br>
         *        The argument is optional and if not present or falsy, the value of the constructor is taken.
         * @returns {boolean|undefined} <code>undefined</code> if screen size wasn't detectable, else <code>true</code>
         *          when screen.width is less or equal to maxPhoneWidth, otherwise <code>false</code>.<br>
         *          Will always return <code>undefined</code> server-side.
         */isPhoneSized:function isPhoneSized(maxPhoneWidth){return MobileDetect.isPhoneSized(maxPhoneWidth||this.maxPhoneWidth);},/**
         * Returns the mobile grade ('A', 'B', 'C').
         *
         * @returns {String} one of the mobile grades ('A', 'B', 'C').
         * @function MobileDetect#mobileGrade
         */mobileGrade:function mobileGrade(){if(this._cache.grade===undefined){this._cache.grade=impl.mobileGrade(this);}return this._cache.grade;}};// environment-dependent
if(typeof window!=='undefined'&&window.screen){MobileDetect.isPhoneSized=function(maxPhoneWidth){return maxPhoneWidth<0?undefined:impl.getDeviceSmallerSide()<=maxPhoneWidth;};}else{MobileDetect.isPhoneSized=function(){};}// should not be replaced by a completely new object - just overwrite existing methods
MobileDetect._impl=impl;MobileDetect.version='1.4.4 2019-09-21';return MobileDetect;});// end of call of define()
})(function(undefined){if(typeof module!=='undefined'&&module.exports){return function(factory){module.exports=factory();};}else if(typeof define==='function'&&define.amd){return define;}else if(typeof window!=='undefined'){return function(factory){window.MobileDetect=factory();};}else{// please file a bug if you get this error!
throw new Error('unknown environment');}}());var openItem=function openItem(item){var container=item.closest('.team__item');var content=container.find('.team__content');var about=container.find('.team__about');var reqHeight=about.height();var triangle=container.find('.team__triangle');container.addClass('team__item_active');content.height(reqHeight);triangle.css('transform','rotate(-180deg)');};var closeEveryItem=function closeEveryItem(container){var itemcontainer=container.find('.team__item');var items=container.find('.team__content');var triangles=container.find('.team__triangle');itemcontainer.removeClass('team__item_active');items.height(0);triangles.css('transform','rotate(0deg)');};$('.team__title').on('click',function(e){var $this=$(e.currentTarget);var container=$this.closest('.team__list');var elemContainer=$this.closest('.team__item');if(elemContainer.hasClass('team__item_active')){closeEveryItem(container);}else{closeEveryItem(container);openItem($this);}});var btn=document.querySelector('#hamburger');// кнопка гамбургер
var array=document.querySelectorAll('.menu__link');// список элементов меню
var body=document.body;btn.addEventListener('click',function(e){// при клике на гамбургер
e.preventDefault();menu(array);// вызов функции menu
});function menu(arr){var full=document.createElement('div');var list=document.createElement('ul');full.classList.add('full');list.classList.add('full-menu__list');arr.forEach(function(e){// перебор элементов меню
var item=document.createElement('li');var link=document.createElement('a');item.classList.add('full-menu__item');link.classList.add('full-menu__link');link.setAttribute('data-scroll-to',e.getAttribute('data-scroll-to'));link.href='#';link.textContent=e.textContent;item.appendChild(link);list.appendChild(item);link.addEventListener('click',function(e){// если клик по элементу списка
e.preventDefault();// Тупо перенос из ScrollPager
var $this=$(e.currentTarget);var target=$this.attr('data-scroll-to');var reqSection=$("[data-section-id=".concat(target,"]"));perfomTransition(reqSection.index());body.removeChild(full);});});var template=document.querySelector('#svg-template');// шаблон с кнопкой закрытия
full.innerHTML=template.innerHTML;// вставка кода из шаблона
full.appendChild(list);body.appendChild(full);var closeBtn=document.querySelector('#full-menu__close');closeBtn.addEventListener('click',function(e){// нажатие на крестик
body.removeChild(full);});full.addEventListener('click',function(e){// нажатие на область вне меню
if(e.target==full){body.removeChild(full);}});}var HorizontAccord=document.querySelector('.menu-accordion__list');// поиск списка
var mesureWidth=function mesureWidth(item){var containerWidth=0;var screenWidth=window.innerWidth;var itemContainer=item.closest('.menu-accordion__list');var titleBlocks=itemContainer.querySelectorAll(".menu-accordion__btn");if(window.innerWidth<=480){containerWidth=screenWidth-titleBlocks[1].offsetWidth;}else{containerWidth=screenWidth-titleBlocks[0].offsetWidth*titleBlocks.length/2;}return containerWidth;};HorizontAccord.addEventListener('click',function(e){e.preventDefault();var HorizontAccordTarget=e.target;if(window.innerWidth<=480){// если сайт открыли на телефоне
var phonesActive=HorizontAccord.querySelector('.menu-accordion__item_phones_active');// ищем активный элемент
if(phonesActive&&(HorizontAccordTarget.closest('.menu-accordion__btn')||HorizontAccordTarget.closest('.menu-accordion__close-content'))){// если нашли и клик произошел по кнопке или по крестику
HorizontAccordTarget.closest('.menu-accordion__item_phones_active').remove();// удаляем активный элемент
}else if(!phonesActive&&HorizontAccordTarget.closest('.menu-accordion__btn')){// если активного нету и клик произошел по кнопке
var newItem=HorizontAccordTarget.closest('.menu-accordion__item').cloneNode(true);// создаем клон элемента списка, по которому произошел клик
HorizontAccord.appendChild(newItem).classList.add('menu-accordion__item_phones_active');// всатвляем клон в конец списка
console.log(HorizontAccordTarget);newItem.querySelector('.menu-accordion__content').style.width="".concat(mesureWidth(HorizontAccordTarget),"px");}}else{// если другие устройства
if(HorizontAccordTarget.closest('.menu-accordion__btn')||HorizontAccordTarget.closest('.menu-accordion__close-content')){// если клик произошел по кнопке или по крестику
var active=HorizontAccord.querySelector('.active');// ищем активный класс
if(active){// если существует
active.querySelector('.menu-accordion__content').style.windth=0;active.classList.remove('active');// удаляем класс
if(window.innerWidth<=768){active.querySelector('.menu-accordion__content').style.width=0;}}if(active!=HorizontAccordTarget.closest('.menu-accordion__item')){// если клик произошел не по активному классу
HorizontAccordTarget.closest('.menu-accordion__item').classList.add('active');// добавляем активный класс элементу, на который кликнули
if(window.innerWidth<=768){HorizontAccordTarget.closest('.menu-accordion__item').querySelector('.menu-accordion__content').style.width="".concat(mesureWidth(HorizontAccordTarget),"px");}}}}});var myMap;var init=function init(){myMap=new ymaps.Map('map',{center:[53.595226,25.826361],zoom:14.22,controls:[]});var coords=[[53.600362,25.819863],[53.600111,25.824076],[53.588274,25.805768],[53.592624,25.829493]];var myCollection=new ymaps.GeoObjectCollection({},{draggable:false,iconLayout:'default#image',iconImageHref:"./img/icons/marker.svg",iconImageSize:[46,57],iconImageOffset:[-35,-52]});coords.forEach(function(coord){myCollection.add(new ymaps.Placemark(coord));});myMap.geoObjects.add(myCollection);myMap.behaviors.disable('scrollZoom');};ymaps.ready(init);var validateFields=function validateFields(form,fieldsArray){fieldsArray.forEach(function(field){field.removeClass("input-error");if(field.val().trim()===""){field.addClass("input-error");}});var errorsField=form.find(".input-error");return errorsField.length===0;};$('#myForm').submit(function(e){e.preventDefault();var form=$(e.currentTarget);var name=form.find("[name = 'name']");var phone=form.find("[name = 'phone']");var comment=form.find("[name = 'message']");var to=form.find("[name = 'to']");var modal=$('#modal');var content=modal.find('.overlay__text');modal.removeClass("error-message");if(validateFields(form,[name,phone,comment,to])){var request=$.ajax({url:"https://webdev-api.loftschool.com/sendmail",method:"post",data:{name:name.val(),phone:phone.val(),comment:comment.val(),to:to.val()}});request.done(function(data){content.text(data.message);});request.fail(function(data){content.text(data.responseJSON.message);modal.addClass("error-message");});request.always(function(){$('body').css('overflow','hidden');$.fancybox.open({src:"#modal",type:"inline"});});}});$('.app-supmit-btn').on('click',function(e){e.preventDefault();$.fancybox.close();$('body').css('overflow','auto');});var playerContainer=$('.player');var player=$('.player__elem')[0];var eventsInit=function eventsInit(){$('.player__start').on('click',function(e){e.preventDefault();if(playerContainer.hasClass('paused')){player.pause();}else{player.play();}});$('.player__playback').on('click',function(e){var playbackBar=$(e.currentTarget);var playbackBarClickedPosition=e.originalEvent.layerX;var newButtonPositionPercent=playbackBarClickedPosition/playbackBar.width()*100;var newPlaybackPositionSec=player.duration/100*newButtonPositionPercent;$('.player__playback-button').css({left:"".concat(newButtonPositionPercent,"%")});player.currentTime=newPlaybackPositionSec;});$('.player__volume').on('click',function(e){var volumeBar=$(e.currentTarget);var volumeBarclickedPosition=e.originalEvent.layerX;var newVolumePositionPercent=volumeBarclickedPosition/volumeBar.width()*100;if(newVolumePositionPercent<0)newVolumePositionPercent=0;$('.player__volume-button').css({left:"".concat(newVolumePositionPercent,"%")});player.volume=newVolumePositionPercent/100;});var playerVolumeNow=player.volume;$('.player__speaker-btn').on('click',function(e){if(player.volume!=0){player.volume=0;$('.player__volume-button').css({left:'0%'});}else{player.volume=playerVolumeNow;$('.player__volume-button').css({left:"".concat(playerVolumeNow*100,"%")});}});$('.player__splash').on('click',function(e){player.play();});$('.player__elem').on('click',function(e){player.pause();});};player.onpause=function(){playerContainer.removeClass('active');playerContainer.removeClass('paused');};player.onplay=function(){playerContainer.addClass('active');playerContainer.addClass('paused');};eventsInit();// ================= YOUTUBE API ========================
// let player;
// const playerContainer = $('.player');
// let eventsInit = () => {
//     $('.player__start').on('click', e => {
//         e.preventDefault();
//         if (playerContainer.hasClass('paused')){
//             player.pauseVideo();
//         } else {
//             player.playVideo();
//         }
//     })
//     $('.player__playback').on('click', e => {
//         const bar = $(e.currentTarget);
//         const clickedPosition = e.originalEvent.layerX;
//         const newButtonPositionPercent = (clickedPosition / bar.width()) * 100;
//         const newPlabackPositionSec = (player.getDuration() / 100) * newButtonPositionPercent;
//         $('.player__playback-button').css({
//             left: `${newButtonPositionPercent}%`
//         });
//         player.seekTo(newPlabackPositionSec);
//     })
//     $('.player__splash').on('click', e => {
//         player.playVideo();
//     })
// }
// const formatTime = timeSec => {
//     const roundTime = Math.round(timeSec);
//     const minutes = addZero(Math.floor(roundTime / 60));
//     const seconds = addZero(roundTime - minutes * 60);
//     function addZero(num) {
//         return num < 10 ? `0${num}` : num;
//     }
//     return `${minutes}:${seconds}`;
// }
// const onPlayerReady = () => {
//     let interval;
//     const durationSec = player.getDuration();
//     $('.player__duraction-estimate').text(formatTime(durationSec));
//     if (typeof interval !== 'undefined') {
//         clearInterval(interval);
//     }
//     interval = setInterval(() => {
//         const completedSec = player.getCurrentTime();
//         const completedPercent = (completedSec / durationSec) * 100;
//         $('.player__playback-button').css({
//             left: `${completedPercent}%`
//         })
//         $('.player__duraction-completed').text(formatTime(completedSec))
//     }, 1000);
// }
// const onPlayerStateChange = e => {
//     /*
//         -1 – воспроизведение видео не началось
//         0 – воспроизведение видео завершено
//         1 – воспроизведение
//         2 – пауза
//         3 – буферизация
//         5 – видео находится в очереди
//     */
//     switch (e.data) {
//         case 1:
//             playerContainer.addClass('active');
//             playerContainer.addClass('paused');
//             break;
//         case 2:
//             playerContainer.removeClass('active');
//             playerContainer.removeClass('paused');
//             break;
//     }
// }
// function onYouTubeIframeAPIReady() {
// player = new YT.Player('yt-player', {
//     height: '405',
//     width: '660',
//     videoId: 'JsW8h4zmlS4',
//     events: {
//         'onReady': onPlayerReady,
//         'onStateChange': onPlayerStateChange
//     },
//     playerVars: {
//         controls: 0,
//         disablekb: 0,
//         showinfo: 0,
//         rel: 0,
//         autoplay: 0,
//         modestbranding: 0
//     }
// });
// }
// eventsInit();
var findBlockByAlias=function findBlockByAlias(alias){return $(".review__item").filter(function(ndx,item){return $(item).attr('data-linked-with')==alias;});};$('.reviews__swither-link').on('click',function(e){e.preventDefault();var $this=$(e.currentTarget);var target=$this.attr('data-open');var itemToShow=findBlockByAlias(target);var curItem=$this.closest('.reviews__swither-item');itemToShow.addClass('review__item_active').siblings().removeClass('review__item_active');curItem.addClass('reviews__swither-item_active').siblings().removeClass('reviews__swither-item_active');});var sections=$('section');var display=$('.maincontent');var sideMenu=$('.pagenator');var menuItems=sideMenu.find('.pagenator__item');var mobileDetect=new MobileDetect(window.navigator.userAgent);var isMobile=mobileDetect.mobile();var inScroll=false;sections.first().addClass('active');var countSectionPosition=function countSectionPosition(sectionEq){var position=sectionEq*-100;if(isNaN(position)){console.error('передано не верное значение в countSectionPosition');return 0;}return position;};var changeMenuThemeForPagenator=function changeMenuThemeForPagenator(sectionEq){var currentSection=sections.eq(sectionEq);var menuTheme=currentSection.attr('data-sidemenu-theme');var activeClass='pagenator_bg_dark';if(menuTheme==="black"){sideMenu.addClass(activeClass);}else{sideMenu.removeClass(activeClass);}};var resetActiveClassForItem=function resetActiveClassForItem(items,itemEq,activeClass){items.eq(itemEq).addClass(activeClass).siblings().removeClass(activeClass);};var perfomTransition=function perfomTransition(sectionEq){if(inScroll)return;var transitionOver=1000;var mouseInertionOver=300;inScroll=true;var position=countSectionPosition(sectionEq);changeMenuThemeForPagenator(sectionEq);display.css({transform:"translateY(".concat(position,"%)")});resetActiveClassForItem(sections,sectionEq,'active');setTimeout(function(){resetActiveClassForItem(menuItems,sectionEq,'pagenator__item_active');},transitionOver/3);setTimeout(function(){inScroll=false;},transitionOver+mouseInertionOver);};var viewportScroller=function viewportScroller(){var activeSection=sections.filter('.active');var nextSection=activeSection.next('section');var prevSection=activeSection.prev('section');return{next:function next(){if(nextSection.length){perfomTransition(nextSection.index());}},prev:function prev(){if(prevSection.length){perfomTransition(prevSection.index());}}};};$(window).on('wheel',function(e){var deltaY=e.originalEvent.deltaY;var scroller=viewportScroller();if(deltaY>0){scroller.next();}if(deltaY<0){scroller.prev();}});$(window).on('keydown',function(e){var tagName=e.target.tagName.toLowerCase();var userTypingInputs=tagName==='input'||tagName==='textarea';var scroller=viewportScroller();if(userTypingInputs)return;switch(e.keyCode){case 38:scroller.prev();break;case 40:scroller.next();break;}});$('.wrapper').on('touchmove',function(e){return e.preventDefault();});$('[data-scroll-to]').on('click',function(e){e.preventDefault();var $this=$(e.currentTarget);var target=$this.attr('data-scroll-to');var reqSection=$("[data-section-id=".concat(target,"]"));perfomTransition(reqSection.index());});if(isMobile){// https://github.com/mattbryson/TouchSwipe-Jquery-Plugin
$("body").swipe({swipe:function swipe(event,direction){var scroller=viewportScroller();var scrollDirection;if(direction==="up")scrollDirection='next';if(direction==="down")scrollDirection='prev';scroller[scrollDirection]();}});}var slider=$('.slider__list').bxSlider({pager:false,controls:false});$('.slider__control-left-arrow').on('click',function(e){e.preventDefault();slider.goToPrevSlide();});$('.slider__control-right-arrow').on('click',function(e){e.preventDefault();slider.goToNextSlide();});
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImpxdWVyeS5qcyIsImpxdWVyeS5ieHNsaWRlci5qcyIsImpxdWVyeS5mYW5jeWJveC5taW4uanMiLCJqcXVlcnkudG91Y2hTd2lwZS5qcyIsIm1vYmlsZS1kZXRlY3QuanMiLCJtb2R1bGUtYWNjb3JkaW9uLmpzIiwibW9kdWxlLWhhbWJ1cmdlci5qcyIsIm1vZHVsZS1ob3Jpem9udGFsQWNjb3JkaW9uLmpzIiwibW9kdWxlLW1hcC5qcyIsIm1vZHVsZS1tb2RhbC5qcyIsIm1vZHVsZS1wbGF5ZXIuanMiLCJtb2R1bGUtcmV2aWV3c1N3aXRoZXIuanMiLCJtb2R1bGUtc2Nyb2xsUGFnZXIuanMiLCJtb2R1bGUtc2xpZGVyLmpzIl0sIm5hbWVzIjpbImdsb2JhbCIsImZhY3RvcnkiLCJtb2R1bGUiLCJleHBvcnRzIiwiZG9jdW1lbnQiLCJ3IiwiRXJyb3IiLCJ3aW5kb3ciLCJub0dsb2JhbCIsImFyciIsImdldFByb3RvIiwiT2JqZWN0IiwiZ2V0UHJvdG90eXBlT2YiLCJzbGljZSIsImZsYXQiLCJhcnJheSIsImNhbGwiLCJjb25jYXQiLCJhcHBseSIsInB1c2giLCJpbmRleE9mIiwiY2xhc3MydHlwZSIsInRvU3RyaW5nIiwiaGFzT3duIiwiaGFzT3duUHJvcGVydHkiLCJmblRvU3RyaW5nIiwiT2JqZWN0RnVuY3Rpb25TdHJpbmciLCJzdXBwb3J0IiwiaXNGdW5jdGlvbiIsIm9iaiIsIm5vZGVUeXBlIiwiaXNXaW5kb3ciLCJwcmVzZXJ2ZWRTY3JpcHRBdHRyaWJ1dGVzIiwidHlwZSIsInNyYyIsIm5vbmNlIiwibm9Nb2R1bGUiLCJET01FdmFsIiwiY29kZSIsIm5vZGUiLCJkb2MiLCJpIiwidmFsIiwic2NyaXB0IiwiY3JlYXRlRWxlbWVudCIsInRleHQiLCJnZXRBdHRyaWJ1dGUiLCJzZXRBdHRyaWJ1dGUiLCJoZWFkIiwiYXBwZW5kQ2hpbGQiLCJwYXJlbnROb2RlIiwicmVtb3ZlQ2hpbGQiLCJ0b1R5cGUiLCJ2ZXJzaW9uIiwialF1ZXJ5Iiwic2VsZWN0b3IiLCJjb250ZXh0IiwiZm4iLCJpbml0IiwicHJvdG90eXBlIiwianF1ZXJ5IiwiY29uc3RydWN0b3IiLCJsZW5ndGgiLCJ0b0FycmF5IiwiZ2V0IiwibnVtIiwicHVzaFN0YWNrIiwiZWxlbXMiLCJyZXQiLCJtZXJnZSIsInByZXZPYmplY3QiLCJlYWNoIiwiY2FsbGJhY2siLCJtYXAiLCJlbGVtIiwiYXJndW1lbnRzIiwiZmlyc3QiLCJlcSIsImxhc3QiLCJldmVuIiwiZ3JlcCIsIl9lbGVtIiwib2RkIiwibGVuIiwiaiIsImVuZCIsInNvcnQiLCJzcGxpY2UiLCJleHRlbmQiLCJvcHRpb25zIiwibmFtZSIsImNvcHkiLCJjb3B5SXNBcnJheSIsImNsb25lIiwidGFyZ2V0IiwiZGVlcCIsImlzUGxhaW5PYmplY3QiLCJBcnJheSIsImlzQXJyYXkiLCJ1bmRlZmluZWQiLCJleHBhbmRvIiwiTWF0aCIsInJhbmRvbSIsInJlcGxhY2UiLCJpc1JlYWR5IiwiZXJyb3IiLCJtc2ciLCJub29wIiwicHJvdG8iLCJDdG9yIiwiaXNFbXB0eU9iamVjdCIsImdsb2JhbEV2YWwiLCJpc0FycmF5TGlrZSIsIm1ha2VBcnJheSIsInJlc3VsdHMiLCJpbkFycmF5Iiwic2Vjb25kIiwiaW52ZXJ0IiwiY2FsbGJhY2tJbnZlcnNlIiwibWF0Y2hlcyIsImNhbGxiYWNrRXhwZWN0IiwiYXJnIiwidmFsdWUiLCJndWlkIiwiU3ltYm9sIiwiaXRlcmF0b3IiLCJzcGxpdCIsIl9pIiwidG9Mb3dlckNhc2UiLCJTaXp6bGUiLCJFeHByIiwiZ2V0VGV4dCIsImlzWE1MIiwidG9rZW5pemUiLCJjb21waWxlIiwic2VsZWN0Iiwib3V0ZXJtb3N0Q29udGV4dCIsInNvcnRJbnB1dCIsImhhc0R1cGxpY2F0ZSIsInNldERvY3VtZW50IiwiZG9jRWxlbSIsImRvY3VtZW50SXNIVE1MIiwicmJ1Z2d5UVNBIiwicmJ1Z2d5TWF0Y2hlcyIsImNvbnRhaW5zIiwiRGF0ZSIsInByZWZlcnJlZERvYyIsImRpcnJ1bnMiLCJkb25lIiwiY2xhc3NDYWNoZSIsImNyZWF0ZUNhY2hlIiwidG9rZW5DYWNoZSIsImNvbXBpbGVyQ2FjaGUiLCJub25uYXRpdmVTZWxlY3RvckNhY2hlIiwic29ydE9yZGVyIiwiYSIsImIiLCJwb3AiLCJwdXNoTmF0aXZlIiwibGlzdCIsImJvb2xlYW5zIiwid2hpdGVzcGFjZSIsImlkZW50aWZpZXIiLCJhdHRyaWJ1dGVzIiwicHNldWRvcyIsInJ3aGl0ZXNwYWNlIiwiUmVnRXhwIiwicnRyaW0iLCJyY29tbWEiLCJyY29tYmluYXRvcnMiLCJyZGVzY2VuZCIsInJwc2V1ZG8iLCJyaWRlbnRpZmllciIsIm1hdGNoRXhwciIsInJodG1sIiwicmlucHV0cyIsInJoZWFkZXIiLCJybmF0aXZlIiwicnF1aWNrRXhwciIsInJzaWJsaW5nIiwicnVuZXNjYXBlIiwiZnVuZXNjYXBlIiwiZXNjYXBlIiwibm9uSGV4IiwiaGlnaCIsIlN0cmluZyIsImZyb21DaGFyQ29kZSIsInJjc3Nlc2NhcGUiLCJmY3NzZXNjYXBlIiwiY2giLCJhc0NvZGVQb2ludCIsImNoYXJDb2RlQXQiLCJ1bmxvYWRIYW5kbGVyIiwiaW5EaXNhYmxlZEZpZWxkc2V0IiwiYWRkQ29tYmluYXRvciIsImRpc2FibGVkIiwibm9kZU5hbWUiLCJkaXIiLCJuZXh0IiwiY2hpbGROb2RlcyIsImUiLCJlbHMiLCJzZWVkIiwibSIsIm5pZCIsIm1hdGNoIiwiZ3JvdXBzIiwibmV3U2VsZWN0b3IiLCJuZXdDb250ZXh0Iiwib3duZXJEb2N1bWVudCIsImV4ZWMiLCJnZXRFbGVtZW50QnlJZCIsImlkIiwiZ2V0RWxlbWVudHNCeVRhZ05hbWUiLCJnZXRFbGVtZW50c0J5Q2xhc3NOYW1lIiwicXNhIiwidGVzdCIsInRlc3RDb250ZXh0Iiwic2NvcGUiLCJ0b1NlbGVjdG9yIiwiam9pbiIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJxc2FFcnJvciIsInJlbW92ZUF0dHJpYnV0ZSIsImtleXMiLCJjYWNoZSIsImtleSIsImNhY2hlTGVuZ3RoIiwic2hpZnQiLCJtYXJrRnVuY3Rpb24iLCJhc3NlcnQiLCJlbCIsImFkZEhhbmRsZSIsImF0dHJzIiwiaGFuZGxlciIsImF0dHJIYW5kbGUiLCJzaWJsaW5nQ2hlY2siLCJjdXIiLCJkaWZmIiwic291cmNlSW5kZXgiLCJuZXh0U2libGluZyIsImNyZWF0ZUlucHV0UHNldWRvIiwiY3JlYXRlQnV0dG9uUHNldWRvIiwiY3JlYXRlRGlzYWJsZWRQc2V1ZG8iLCJpc0Rpc2FibGVkIiwiY3JlYXRlUG9zaXRpb25hbFBzZXVkbyIsImFyZ3VtZW50IiwibWF0Y2hJbmRleGVzIiwibmFtZXNwYWNlIiwibmFtZXNwYWNlVVJJIiwiZG9jdW1lbnRFbGVtZW50IiwiaGFzQ29tcGFyZSIsInN1YldpbmRvdyIsImRlZmF1bHRWaWV3IiwidG9wIiwiYWRkRXZlbnRMaXN0ZW5lciIsImF0dGFjaEV2ZW50IiwiY2xhc3NOYW1lIiwiY3JlYXRlQ29tbWVudCIsImdldEJ5SWQiLCJnZXRFbGVtZW50c0J5TmFtZSIsImZpbHRlciIsImF0dHJJZCIsImZpbmQiLCJnZXRBdHRyaWJ1dGVOb2RlIiwidGFnIiwidG1wIiwiaW5wdXQiLCJpbm5lckhUTUwiLCJtYXRjaGVzU2VsZWN0b3IiLCJ3ZWJraXRNYXRjaGVzU2VsZWN0b3IiLCJtb3pNYXRjaGVzU2VsZWN0b3IiLCJvTWF0Y2hlc1NlbGVjdG9yIiwibXNNYXRjaGVzU2VsZWN0b3IiLCJkaXNjb25uZWN0ZWRNYXRjaCIsImNvbXBhcmVEb2N1bWVudFBvc2l0aW9uIiwiYWRvd24iLCJidXAiLCJjb21wYXJlIiwic29ydERldGFjaGVkIiwiYXVwIiwiYXAiLCJicCIsInVuc2hpZnQiLCJleHByIiwiZWxlbWVudHMiLCJhdHRyIiwic3BlY2lmaWVkIiwic2VsIiwidW5pcXVlU29ydCIsImR1cGxpY2F0ZXMiLCJkZXRlY3REdXBsaWNhdGVzIiwic29ydFN0YWJsZSIsInRleHRDb250ZW50IiwiZmlyc3RDaGlsZCIsIm5vZGVWYWx1ZSIsInNlbGVjdG9ycyIsImNyZWF0ZVBzZXVkbyIsInJlbGF0aXZlIiwicHJlRmlsdGVyIiwiZXhjZXNzIiwidW5xdW90ZWQiLCJub2RlTmFtZVNlbGVjdG9yIiwicGF0dGVybiIsIm9wZXJhdG9yIiwiY2hlY2siLCJyZXN1bHQiLCJ3aGF0IiwiX2FyZ3VtZW50Iiwic2ltcGxlIiwiZm9yd2FyZCIsIm9mVHlwZSIsIl9jb250ZXh0IiwieG1sIiwidW5pcXVlQ2FjaGUiLCJvdXRlckNhY2hlIiwibm9kZUluZGV4Iiwic3RhcnQiLCJwYXJlbnQiLCJ1c2VDYWNoZSIsImxhc3RDaGlsZCIsInVuaXF1ZUlEIiwicHNldWRvIiwiYXJncyIsInNldEZpbHRlcnMiLCJpZHgiLCJtYXRjaGVkIiwibWF0Y2hlciIsInVubWF0Y2hlZCIsImxhbmciLCJlbGVtTGFuZyIsImhhc2giLCJsb2NhdGlvbiIsImFjdGl2ZUVsZW1lbnQiLCJoYXNGb2N1cyIsImhyZWYiLCJ0YWJJbmRleCIsImNoZWNrZWQiLCJzZWxlY3RlZCIsInNlbGVjdGVkSW5kZXgiLCJfbWF0Y2hJbmRleGVzIiwicmFkaW8iLCJjaGVja2JveCIsImZpbGUiLCJwYXNzd29yZCIsImltYWdlIiwic3VibWl0IiwicmVzZXQiLCJmaWx0ZXJzIiwicGFyc2VPbmx5IiwidG9rZW5zIiwic29GYXIiLCJwcmVGaWx0ZXJzIiwiY2FjaGVkIiwiY29tYmluYXRvciIsImJhc2UiLCJza2lwIiwiY2hlY2tOb25FbGVtZW50cyIsImRvbmVOYW1lIiwib2xkQ2FjaGUiLCJuZXdDYWNoZSIsImVsZW1lbnRNYXRjaGVyIiwibWF0Y2hlcnMiLCJtdWx0aXBsZUNvbnRleHRzIiwiY29udGV4dHMiLCJjb25kZW5zZSIsIm5ld1VubWF0Y2hlZCIsIm1hcHBlZCIsInNldE1hdGNoZXIiLCJwb3N0RmlsdGVyIiwicG9zdEZpbmRlciIsInBvc3RTZWxlY3RvciIsInRlbXAiLCJwcmVNYXAiLCJwb3N0TWFwIiwicHJlZXhpc3RpbmciLCJtYXRjaGVySW4iLCJtYXRjaGVyT3V0IiwibWF0Y2hlckZyb21Ub2tlbnMiLCJjaGVja0NvbnRleHQiLCJsZWFkaW5nUmVsYXRpdmUiLCJpbXBsaWNpdFJlbGF0aXZlIiwibWF0Y2hDb250ZXh0IiwibWF0Y2hBbnlDb250ZXh0IiwibWF0Y2hlckZyb21Hcm91cE1hdGNoZXJzIiwiZWxlbWVudE1hdGNoZXJzIiwic2V0TWF0Y2hlcnMiLCJieVNldCIsImJ5RWxlbWVudCIsInN1cGVyTWF0Y2hlciIsIm91dGVybW9zdCIsIm1hdGNoZWRDb3VudCIsInNldE1hdGNoZWQiLCJjb250ZXh0QmFja3VwIiwiZGlycnVuc1VuaXF1ZSIsInRva2VuIiwiY29tcGlsZWQiLCJfbmFtZSIsImRlZmF1bHRWYWx1ZSIsInVuaXF1ZSIsImlzWE1MRG9jIiwiZXNjYXBlU2VsZWN0b3IiLCJ1bnRpbCIsInRydW5jYXRlIiwiaXMiLCJzaWJsaW5ncyIsIm4iLCJybmVlZHNDb250ZXh0IiwibmVlZHNDb250ZXh0IiwicnNpbmdsZVRhZyIsIndpbm5vdyIsInF1YWxpZmllciIsIm5vdCIsInNlbGYiLCJyb290alF1ZXJ5Iiwicm9vdCIsInBhcnNlSFRNTCIsInJlYWR5IiwicnBhcmVudHNwcmV2IiwiZ3VhcmFudGVlZFVuaXF1ZSIsImNoaWxkcmVuIiwiY29udGVudHMiLCJwcmV2IiwiaGFzIiwidGFyZ2V0cyIsImwiLCJjbG9zZXN0IiwiaW5kZXgiLCJwcmV2QWxsIiwiYWRkIiwiYWRkQmFjayIsInNpYmxpbmciLCJwYXJlbnRzIiwicGFyZW50c1VudGlsIiwibmV4dEFsbCIsIm5leHRVbnRpbCIsInByZXZVbnRpbCIsImNvbnRlbnREb2N1bWVudCIsImNvbnRlbnQiLCJyZXZlcnNlIiwicm5vdGh0bWx3aGl0ZSIsImNyZWF0ZU9wdGlvbnMiLCJvYmplY3QiLCJfIiwiZmxhZyIsIkNhbGxiYWNrcyIsImZpcmluZyIsIm1lbW9yeSIsImZpcmVkIiwibG9ja2VkIiwicXVldWUiLCJmaXJpbmdJbmRleCIsImZpcmUiLCJvbmNlIiwic3RvcE9uRmFsc2UiLCJyZW1vdmUiLCJlbXB0eSIsImRpc2FibGUiLCJsb2NrIiwiZmlyZVdpdGgiLCJJZGVudGl0eSIsInYiLCJUaHJvd2VyIiwiZXgiLCJhZG9wdFZhbHVlIiwicmVzb2x2ZSIsInJlamVjdCIsIm5vVmFsdWUiLCJtZXRob2QiLCJwcm9taXNlIiwiZmFpbCIsInRoZW4iLCJEZWZlcnJlZCIsImZ1bmMiLCJ0dXBsZXMiLCJzdGF0ZSIsImFsd2F5cyIsImRlZmVycmVkIiwicGlwZSIsImZucyIsIm5ld0RlZmVyIiwidHVwbGUiLCJyZXR1cm5lZCIsInByb2dyZXNzIiwibm90aWZ5Iiwib25GdWxmaWxsZWQiLCJvblJlamVjdGVkIiwib25Qcm9ncmVzcyIsIm1heERlcHRoIiwiZGVwdGgiLCJzcGVjaWFsIiwidGhhdCIsIm1pZ2h0VGhyb3ciLCJUeXBlRXJyb3IiLCJub3RpZnlXaXRoIiwicmVzb2x2ZVdpdGgiLCJwcm9jZXNzIiwiZXhjZXB0aW9uSG9vayIsInN0YWNrVHJhY2UiLCJyZWplY3RXaXRoIiwiZ2V0U3RhY2tIb29rIiwic2V0VGltZW91dCIsInN0YXRlU3RyaW5nIiwid2hlbiIsInNpbmdsZVZhbHVlIiwicmVtYWluaW5nIiwicmVzb2x2ZUNvbnRleHRzIiwicmVzb2x2ZVZhbHVlcyIsIm1hc3RlciIsInVwZGF0ZUZ1bmMiLCJyZXJyb3JOYW1lcyIsInN0YWNrIiwiY29uc29sZSIsIndhcm4iLCJtZXNzYWdlIiwicmVhZHlFeGNlcHRpb24iLCJyZWFkeUxpc3QiLCJyZWFkeVdhaXQiLCJ3YWl0IiwiY29tcGxldGVkIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsInJlYWR5U3RhdGUiLCJkb1Njcm9sbCIsImFjY2VzcyIsImNoYWluYWJsZSIsImVtcHR5R2V0IiwicmF3IiwiYnVsayIsIl9rZXkiLCJybXNQcmVmaXgiLCJyZGFzaEFscGhhIiwiZmNhbWVsQ2FzZSIsIl9hbGwiLCJsZXR0ZXIiLCJ0b1VwcGVyQ2FzZSIsImNhbWVsQ2FzZSIsInN0cmluZyIsImFjY2VwdERhdGEiLCJvd25lciIsIkRhdGEiLCJ1aWQiLCJkZWZpbmVQcm9wZXJ0eSIsImNvbmZpZ3VyYWJsZSIsInNldCIsImRhdGEiLCJwcm9wIiwiaGFzRGF0YSIsImRhdGFQcml2IiwiZGF0YVVzZXIiLCJyYnJhY2UiLCJybXVsdGlEYXNoIiwiZ2V0RGF0YSIsIkpTT04iLCJwYXJzZSIsImRhdGFBdHRyIiwicmVtb3ZlRGF0YSIsIl9kYXRhIiwiX3JlbW92ZURhdGEiLCJkZXF1ZXVlIiwic3RhcnRMZW5ndGgiLCJob29rcyIsIl9xdWV1ZUhvb2tzIiwic3RvcCIsInNldHRlciIsImNsZWFyUXVldWUiLCJjb3VudCIsImRlZmVyIiwicG51bSIsInNvdXJjZSIsInJjc3NOdW0iLCJjc3NFeHBhbmQiLCJpc0F0dGFjaGVkIiwiY29tcG9zZWQiLCJnZXRSb290Tm9kZSIsImlzSGlkZGVuV2l0aGluVHJlZSIsInN0eWxlIiwiZGlzcGxheSIsImNzcyIsImFkanVzdENTUyIsInZhbHVlUGFydHMiLCJ0d2VlbiIsImFkanVzdGVkIiwic2NhbGUiLCJtYXhJdGVyYXRpb25zIiwiY3VycmVudFZhbHVlIiwiaW5pdGlhbCIsInVuaXQiLCJjc3NOdW1iZXIiLCJpbml0aWFsSW5Vbml0IiwiZGVmYXVsdERpc3BsYXlNYXAiLCJnZXREZWZhdWx0RGlzcGxheSIsImJvZHkiLCJzaG93SGlkZSIsInNob3ciLCJ2YWx1ZXMiLCJoaWRlIiwidG9nZ2xlIiwicmNoZWNrYWJsZVR5cGUiLCJydGFnTmFtZSIsInJzY3JpcHRUeXBlIiwiZnJhZ21lbnQiLCJjcmVhdGVEb2N1bWVudEZyYWdtZW50IiwiZGl2IiwiY2hlY2tDbG9uZSIsImNsb25lTm9kZSIsIm5vQ2xvbmVDaGVja2VkIiwib3B0aW9uIiwid3JhcE1hcCIsInRoZWFkIiwiY29sIiwidHIiLCJ0ZCIsIl9kZWZhdWx0IiwidGJvZHkiLCJ0Zm9vdCIsImNvbGdyb3VwIiwiY2FwdGlvbiIsInRoIiwib3B0Z3JvdXAiLCJnZXRBbGwiLCJzZXRHbG9iYWxFdmFsIiwicmVmRWxlbWVudHMiLCJidWlsZEZyYWdtZW50Iiwic2NyaXB0cyIsInNlbGVjdGlvbiIsImlnbm9yZWQiLCJ3cmFwIiwiYXR0YWNoZWQiLCJub2RlcyIsImNyZWF0ZVRleHROb2RlIiwiaHRtbFByZWZpbHRlciIsInJrZXlFdmVudCIsInJtb3VzZUV2ZW50IiwicnR5cGVuYW1lc3BhY2UiLCJyZXR1cm5UcnVlIiwicmV0dXJuRmFsc2UiLCJleHBlY3RTeW5jIiwic2FmZUFjdGl2ZUVsZW1lbnQiLCJlcnIiLCJvbiIsInR5cGVzIiwib25lIiwib3JpZ0ZuIiwiZXZlbnQiLCJvZmYiLCJoYW5kbGVPYmpJbiIsImV2ZW50SGFuZGxlIiwiZXZlbnRzIiwidCIsImhhbmRsZU9iaiIsImhhbmRsZXJzIiwibmFtZXNwYWNlcyIsIm9yaWdUeXBlIiwiZWxlbURhdGEiLCJjcmVhdGUiLCJoYW5kbGUiLCJ0cmlnZ2VyZWQiLCJkaXNwYXRjaCIsImRlbGVnYXRlVHlwZSIsImJpbmRUeXBlIiwiZGVsZWdhdGVDb3VudCIsInNldHVwIiwibWFwcGVkVHlwZXMiLCJvcmlnQ291bnQiLCJ0ZWFyZG93biIsInJlbW92ZUV2ZW50IiwibmF0aXZlRXZlbnQiLCJoYW5kbGVyUXVldWUiLCJmaXgiLCJkZWxlZ2F0ZVRhcmdldCIsInByZURpc3BhdGNoIiwiaXNQcm9wYWdhdGlvblN0b3BwZWQiLCJjdXJyZW50VGFyZ2V0IiwiaXNJbW1lZGlhdGVQcm9wYWdhdGlvblN0b3BwZWQiLCJybmFtZXNwYWNlIiwicHJldmVudERlZmF1bHQiLCJzdG9wUHJvcGFnYXRpb24iLCJwb3N0RGlzcGF0Y2giLCJtYXRjaGVkSGFuZGxlcnMiLCJtYXRjaGVkU2VsZWN0b3JzIiwiYnV0dG9uIiwiYWRkUHJvcCIsImhvb2siLCJFdmVudCIsImVudW1lcmFibGUiLCJvcmlnaW5hbEV2ZW50Iiwid3JpdGFibGUiLCJsb2FkIiwibm9CdWJibGUiLCJjbGljayIsImxldmVyYWdlTmF0aXZlIiwidHJpZ2dlciIsImJlZm9yZXVubG9hZCIsInJldHVyblZhbHVlIiwibm90QXN5bmMiLCJzYXZlZCIsImlzVHJpZ2dlciIsInN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbiIsInByb3BzIiwiaXNEZWZhdWx0UHJldmVudGVkIiwiZGVmYXVsdFByZXZlbnRlZCIsInJlbGF0ZWRUYXJnZXQiLCJ0aW1lU3RhbXAiLCJub3ciLCJpc1NpbXVsYXRlZCIsImFsdEtleSIsImJ1YmJsZXMiLCJjYW5jZWxhYmxlIiwiY2hhbmdlZFRvdWNoZXMiLCJjdHJsS2V5IiwiZGV0YWlsIiwiZXZlbnRQaGFzZSIsIm1ldGFLZXkiLCJwYWdlWCIsInBhZ2VZIiwic2hpZnRLZXkiLCJ2aWV3IiwiY2hhckNvZGUiLCJrZXlDb2RlIiwiYnV0dG9ucyIsImNsaWVudFgiLCJjbGllbnRZIiwib2Zmc2V0WCIsIm9mZnNldFkiLCJwb2ludGVySWQiLCJwb2ludGVyVHlwZSIsInNjcmVlblgiLCJzY3JlZW5ZIiwidGFyZ2V0VG91Y2hlcyIsInRvRWxlbWVudCIsInRvdWNoZXMiLCJ3aGljaCIsImZvY3VzIiwiYmx1ciIsIm1vdXNlZW50ZXIiLCJtb3VzZWxlYXZlIiwicG9pbnRlcmVudGVyIiwicG9pbnRlcmxlYXZlIiwib3JpZyIsInJlbGF0ZWQiLCJybm9Jbm5lcmh0bWwiLCJyY2hlY2tlZCIsInJjbGVhblNjcmlwdCIsIm1hbmlwdWxhdGlvblRhcmdldCIsImRpc2FibGVTY3JpcHQiLCJyZXN0b3JlU2NyaXB0IiwiY2xvbmVDb3B5RXZlbnQiLCJkZXN0IiwicGRhdGFPbGQiLCJ1ZGF0YU9sZCIsInVkYXRhQ3VyIiwiZml4SW5wdXQiLCJkb21NYW5pcCIsImNvbGxlY3Rpb24iLCJoYXNTY3JpcHRzIiwiaU5vQ2xvbmUiLCJ2YWx1ZUlzRnVuY3Rpb24iLCJodG1sIiwiX2V2YWxVcmwiLCJrZWVwRGF0YSIsImNsZWFuRGF0YSIsImRhdGFBbmRFdmVudHMiLCJkZWVwRGF0YUFuZEV2ZW50cyIsInNyY0VsZW1lbnRzIiwiZGVzdEVsZW1lbnRzIiwiaW5QYWdlIiwiZGV0YWNoIiwiYXBwZW5kIiwicHJlcGVuZCIsImluc2VydEJlZm9yZSIsImJlZm9yZSIsImFmdGVyIiwicmVwbGFjZVdpdGgiLCJyZXBsYWNlQ2hpbGQiLCJhcHBlbmRUbyIsInByZXBlbmRUbyIsImluc2VydEFmdGVyIiwicmVwbGFjZUFsbCIsIm9yaWdpbmFsIiwiaW5zZXJ0Iiwicm51bW5vbnB4IiwiZ2V0U3R5bGVzIiwib3BlbmVyIiwiZ2V0Q29tcHV0ZWRTdHlsZSIsInN3YXAiLCJvbGQiLCJyYm94U3R5bGUiLCJjb21wdXRlU3R5bGVUZXN0cyIsImNvbnRhaW5lciIsImNzc1RleHQiLCJkaXZTdHlsZSIsInBpeGVsUG9zaXRpb25WYWwiLCJyZWxpYWJsZU1hcmdpbkxlZnRWYWwiLCJyb3VuZFBpeGVsTWVhc3VyZXMiLCJtYXJnaW5MZWZ0IiwicmlnaHQiLCJwaXhlbEJveFN0eWxlc1ZhbCIsImJveFNpemluZ1JlbGlhYmxlVmFsIiwid2lkdGgiLCJwb3NpdGlvbiIsInNjcm9sbGJveFNpemVWYWwiLCJvZmZzZXRXaWR0aCIsIm1lYXN1cmUiLCJyb3VuZCIsInBhcnNlRmxvYXQiLCJyZWxpYWJsZVRyRGltZW5zaW9uc1ZhbCIsImJhY2tncm91bmRDbGlwIiwiY2xlYXJDbG9uZVN0eWxlIiwiYm94U2l6aW5nUmVsaWFibGUiLCJwaXhlbEJveFN0eWxlcyIsInBpeGVsUG9zaXRpb24iLCJyZWxpYWJsZU1hcmdpbkxlZnQiLCJzY3JvbGxib3hTaXplIiwicmVsaWFibGVUckRpbWVuc2lvbnMiLCJ0YWJsZSIsInRyQ2hpbGQiLCJ0clN0eWxlIiwiaGVpZ2h0IiwicGFyc2VJbnQiLCJjdXJDU1MiLCJjb21wdXRlZCIsIm1pbldpZHRoIiwibWF4V2lkdGgiLCJnZXRQcm9wZXJ0eVZhbHVlIiwiYWRkR2V0SG9va0lmIiwiY29uZGl0aW9uRm4iLCJob29rRm4iLCJjc3NQcmVmaXhlcyIsImVtcHR5U3R5bGUiLCJ2ZW5kb3JQcm9wcyIsInZlbmRvclByb3BOYW1lIiwiY2FwTmFtZSIsImZpbmFsUHJvcE5hbWUiLCJmaW5hbCIsImNzc1Byb3BzIiwicmRpc3BsYXlzd2FwIiwicmN1c3RvbVByb3AiLCJjc3NTaG93IiwidmlzaWJpbGl0eSIsImNzc05vcm1hbFRyYW5zZm9ybSIsImxldHRlclNwYWNpbmciLCJmb250V2VpZ2h0Iiwic2V0UG9zaXRpdmVOdW1iZXIiLCJzdWJ0cmFjdCIsIm1heCIsImJveE1vZGVsQWRqdXN0bWVudCIsImRpbWVuc2lvbiIsImJveCIsImlzQm9yZGVyQm94Iiwic3R5bGVzIiwiY29tcHV0ZWRWYWwiLCJleHRyYSIsImRlbHRhIiwiY2VpbCIsImdldFdpZHRoT3JIZWlnaHQiLCJib3hTaXppbmdOZWVkZWQiLCJ2YWx1ZUlzQm9yZGVyQm94Iiwib2Zmc2V0UHJvcCIsImdldENsaWVudFJlY3RzIiwiY3NzSG9va3MiLCJvcGFjaXR5Iiwib3JpZ05hbWUiLCJpc0N1c3RvbVByb3AiLCJzZXRQcm9wZXJ0eSIsImlzRmluaXRlIiwiZ2V0Qm91bmRpbmdDbGllbnRSZWN0Iiwic2Nyb2xsYm94U2l6ZUJ1Z2d5IiwibGVmdCIsIm1hcmdpbiIsInBhZGRpbmciLCJib3JkZXIiLCJwcmVmaXgiLCJzdWZmaXgiLCJleHBhbmQiLCJleHBhbmRlZCIsInBhcnRzIiwiVHdlZW4iLCJlYXNpbmciLCJwcm9wSG9va3MiLCJydW4iLCJwZXJjZW50IiwiZWFzZWQiLCJkdXJhdGlvbiIsInBvcyIsInN0ZXAiLCJmeCIsInNjcm9sbFRvcCIsInNjcm9sbExlZnQiLCJsaW5lYXIiLCJwIiwic3dpbmciLCJjb3MiLCJQSSIsImZ4Tm93IiwiaW5Qcm9ncmVzcyIsInJmeHR5cGVzIiwicnJ1biIsInNjaGVkdWxlIiwiaGlkZGVuIiwicmVxdWVzdEFuaW1hdGlvbkZyYW1lIiwiaW50ZXJ2YWwiLCJ0aWNrIiwiY3JlYXRlRnhOb3ciLCJnZW5GeCIsImluY2x1ZGVXaWR0aCIsImNyZWF0ZVR3ZWVuIiwiYW5pbWF0aW9uIiwiQW5pbWF0aW9uIiwidHdlZW5lcnMiLCJkZWZhdWx0UHJlZmlsdGVyIiwib3B0cyIsIm9sZGZpcmUiLCJwcm9wVHdlZW4iLCJyZXN0b3JlRGlzcGxheSIsImlzQm94IiwiYW5pbSIsImRhdGFTaG93IiwidW5xdWV1ZWQiLCJvdmVyZmxvdyIsIm92ZXJmbG93WCIsIm92ZXJmbG93WSIsInByb3BGaWx0ZXIiLCJzcGVjaWFsRWFzaW5nIiwicHJvcGVydGllcyIsInN0b3BwZWQiLCJwcmVmaWx0ZXJzIiwiY3VycmVudFRpbWUiLCJzdGFydFRpbWUiLCJ0d2VlbnMiLCJvcmlnaW5hbFByb3BlcnRpZXMiLCJvcmlnaW5hbE9wdGlvbnMiLCJnb3RvRW5kIiwiYmluZCIsImNvbXBsZXRlIiwidGltZXIiLCJ0d2VlbmVyIiwicHJlZmlsdGVyIiwic3BlZWQiLCJvcHQiLCJzcGVlZHMiLCJmYWRlVG8iLCJ0byIsImFuaW1hdGUiLCJvcHRhbGwiLCJkb0FuaW1hdGlvbiIsImZpbmlzaCIsInN0b3BRdWV1ZSIsInRpbWVycyIsImNzc0ZuIiwic2xpZGVEb3duIiwic2xpZGVVcCIsInNsaWRlVG9nZ2xlIiwiZmFkZUluIiwiZmFkZU91dCIsImZhZGVUb2dnbGUiLCJzbG93IiwiZmFzdCIsImRlbGF5IiwidGltZSIsInRpbWVvdXQiLCJjbGVhclRpbWVvdXQiLCJjaGVja09uIiwib3B0U2VsZWN0ZWQiLCJyYWRpb1ZhbHVlIiwiYm9vbEhvb2siLCJyZW1vdmVBdHRyIiwiblR5cGUiLCJhdHRySG9va3MiLCJib29sIiwiYXR0ck5hbWVzIiwiZ2V0dGVyIiwibG93ZXJjYXNlTmFtZSIsInJmb2N1c2FibGUiLCJyY2xpY2thYmxlIiwicmVtb3ZlUHJvcCIsInByb3BGaXgiLCJ0YWJpbmRleCIsInN0cmlwQW5kQ29sbGFwc2UiLCJnZXRDbGFzcyIsImNsYXNzZXNUb0FycmF5IiwiYWRkQ2xhc3MiLCJjbGFzc2VzIiwiY3VyVmFsdWUiLCJjbGF6eiIsImZpbmFsVmFsdWUiLCJyZW1vdmVDbGFzcyIsInRvZ2dsZUNsYXNzIiwic3RhdGVWYWwiLCJpc1ZhbGlkVmFsdWUiLCJjbGFzc05hbWVzIiwiaGFzQ2xhc3MiLCJycmV0dXJuIiwidmFsSG9va3MiLCJvcHRpb25TZXQiLCJmb2N1c2luIiwicmZvY3VzTW9ycGgiLCJzdG9wUHJvcGFnYXRpb25DYWxsYmFjayIsIm9ubHlIYW5kbGVycyIsImJ1YmJsZVR5cGUiLCJvbnR5cGUiLCJsYXN0RWxlbWVudCIsImV2ZW50UGF0aCIsInBhcmVudFdpbmRvdyIsInNpbXVsYXRlIiwidHJpZ2dlckhhbmRsZXIiLCJhdHRhY2hlcyIsInJxdWVyeSIsInBhcnNlWE1MIiwiRE9NUGFyc2VyIiwicGFyc2VGcm9tU3RyaW5nIiwicmJyYWNrZXQiLCJyQ1JMRiIsInJzdWJtaXR0ZXJUeXBlcyIsInJzdWJtaXR0YWJsZSIsImJ1aWxkUGFyYW1zIiwidHJhZGl0aW9uYWwiLCJwYXJhbSIsInMiLCJ2YWx1ZU9yRnVuY3Rpb24iLCJlbmNvZGVVUklDb21wb25lbnQiLCJzZXJpYWxpemUiLCJzZXJpYWxpemVBcnJheSIsInIyMCIsInJoYXNoIiwicmFudGlDYWNoZSIsInJoZWFkZXJzIiwicmxvY2FsUHJvdG9jb2wiLCJybm9Db250ZW50IiwicnByb3RvY29sIiwidHJhbnNwb3J0cyIsImFsbFR5cGVzIiwib3JpZ2luQW5jaG9yIiwiYWRkVG9QcmVmaWx0ZXJzT3JUcmFuc3BvcnRzIiwic3RydWN0dXJlIiwiZGF0YVR5cGVFeHByZXNzaW9uIiwiZGF0YVR5cGUiLCJkYXRhVHlwZXMiLCJpbnNwZWN0UHJlZmlsdGVyc09yVHJhbnNwb3J0cyIsImpxWEhSIiwiaW5zcGVjdGVkIiwic2Vla2luZ1RyYW5zcG9ydCIsImluc3BlY3QiLCJwcmVmaWx0ZXJPckZhY3RvcnkiLCJkYXRhVHlwZU9yVHJhbnNwb3J0IiwiYWpheEV4dGVuZCIsImZsYXRPcHRpb25zIiwiYWpheFNldHRpbmdzIiwiYWpheEhhbmRsZVJlc3BvbnNlcyIsInJlc3BvbnNlcyIsImN0IiwiZmluYWxEYXRhVHlwZSIsImZpcnN0RGF0YVR5cGUiLCJtaW1lVHlwZSIsImdldFJlc3BvbnNlSGVhZGVyIiwiY29udmVydGVycyIsImFqYXhDb252ZXJ0IiwicmVzcG9uc2UiLCJpc1N1Y2Nlc3MiLCJjb252MiIsImN1cnJlbnQiLCJjb252IiwicmVzcG9uc2VGaWVsZHMiLCJkYXRhRmlsdGVyIiwiYWN0aXZlIiwibGFzdE1vZGlmaWVkIiwiZXRhZyIsInVybCIsImlzTG9jYWwiLCJwcm90b2NvbCIsInByb2Nlc3NEYXRhIiwiYXN5bmMiLCJjb250ZW50VHlwZSIsImFjY2VwdHMiLCJqc29uIiwiYWpheFNldHVwIiwic2V0dGluZ3MiLCJhamF4UHJlZmlsdGVyIiwiYWpheFRyYW5zcG9ydCIsImFqYXgiLCJ0cmFuc3BvcnQiLCJjYWNoZVVSTCIsInJlc3BvbnNlSGVhZGVyc1N0cmluZyIsInJlc3BvbnNlSGVhZGVycyIsInRpbWVvdXRUaW1lciIsInVybEFuY2hvciIsImZpcmVHbG9iYWxzIiwidW5jYWNoZWQiLCJjYWxsYmFja0NvbnRleHQiLCJnbG9iYWxFdmVudENvbnRleHQiLCJjb21wbGV0ZURlZmVycmVkIiwic3RhdHVzQ29kZSIsInJlcXVlc3RIZWFkZXJzIiwicmVxdWVzdEhlYWRlcnNOYW1lcyIsInN0ckFib3J0IiwiZ2V0QWxsUmVzcG9uc2VIZWFkZXJzIiwic2V0UmVxdWVzdEhlYWRlciIsIm92ZXJyaWRlTWltZVR5cGUiLCJzdGF0dXMiLCJhYm9ydCIsInN0YXR1c1RleHQiLCJmaW5hbFRleHQiLCJjcm9zc0RvbWFpbiIsImhvc3QiLCJoYXNDb250ZW50IiwiaWZNb2RpZmllZCIsImhlYWRlcnMiLCJiZWZvcmVTZW5kIiwic3VjY2VzcyIsInNlbmQiLCJuYXRpdmVTdGF0dXNUZXh0IiwibW9kaWZpZWQiLCJnZXRKU09OIiwiZ2V0U2NyaXB0Iiwid3JhcEFsbCIsImZpcnN0RWxlbWVudENoaWxkIiwid3JhcElubmVyIiwiaHRtbElzRnVuY3Rpb24iLCJ1bndyYXAiLCJ2aXNpYmxlIiwib2Zmc2V0SGVpZ2h0IiwieGhyIiwiWE1MSHR0cFJlcXVlc3QiLCJ4aHJTdWNjZXNzU3RhdHVzIiwieGhyU3VwcG9ydGVkIiwiY29ycyIsImVycm9yQ2FsbGJhY2siLCJvcGVuIiwidXNlcm5hbWUiLCJ4aHJGaWVsZHMiLCJvbmxvYWQiLCJvbmVycm9yIiwib25hYm9ydCIsIm9udGltZW91dCIsIm9ucmVhZHlzdGF0ZWNoYW5nZSIsInJlc3BvbnNlVHlwZSIsInJlc3BvbnNlVGV4dCIsImJpbmFyeSIsInNjcmlwdEF0dHJzIiwiY2hhcnNldCIsInNjcmlwdENoYXJzZXQiLCJldnQiLCJvbGRDYWxsYmFja3MiLCJyanNvbnAiLCJqc29ucCIsImpzb25wQ2FsbGJhY2siLCJvcmlnaW5hbFNldHRpbmdzIiwiY2FsbGJhY2tOYW1lIiwib3ZlcndyaXR0ZW4iLCJyZXNwb25zZUNvbnRhaW5lciIsImpzb25Qcm9wIiwiY3JlYXRlSFRNTERvY3VtZW50IiwiaW1wbGVtZW50YXRpb24iLCJrZWVwU2NyaXB0cyIsInBhcnNlZCIsInBhcmFtcyIsImFuaW1hdGVkIiwib2Zmc2V0Iiwic2V0T2Zmc2V0IiwiY3VyUG9zaXRpb24iLCJjdXJMZWZ0IiwiY3VyQ1NTVG9wIiwiY3VyVG9wIiwiY3VyT2Zmc2V0IiwiY3VyQ1NTTGVmdCIsImNhbGN1bGF0ZVBvc2l0aW9uIiwiY3VyRWxlbSIsInVzaW5nIiwicmVjdCIsIndpbiIsInBhZ2VZT2Zmc2V0IiwicGFnZVhPZmZzZXQiLCJvZmZzZXRQYXJlbnQiLCJwYXJlbnRPZmZzZXQiLCJzY3JvbGxUbyIsIkhlaWdodCIsIldpZHRoIiwiZGVmYXVsdEV4dHJhIiwiZnVuY05hbWUiLCJ1bmJpbmQiLCJkZWxlZ2F0ZSIsInVuZGVsZWdhdGUiLCJob3ZlciIsImZuT3ZlciIsImZuT3V0IiwicHJveHkiLCJob2xkUmVhZHkiLCJob2xkIiwicGFyc2VKU09OIiwiaXNOdW1lcmljIiwiaXNOYU4iLCJ0cmltIiwiZGVmaW5lIiwiYW1kIiwiX2pRdWVyeSIsIl8kIiwiJCIsIm5vQ29uZmxpY3QiLCJkZWZhdWx0cyIsIm1vZGUiLCJzbGlkZVNlbGVjdG9yIiwiaW5maW5pdGVMb29wIiwiaGlkZUNvbnRyb2xPbkVuZCIsInNsaWRlTWFyZ2luIiwic3RhcnRTbGlkZSIsInJhbmRvbVN0YXJ0IiwiY2FwdGlvbnMiLCJ0aWNrZXIiLCJ0aWNrZXJIb3ZlciIsImFkYXB0aXZlSGVpZ2h0IiwiYWRhcHRpdmVIZWlnaHRTcGVlZCIsInZpZGVvIiwidXNlQ1NTIiwicHJlbG9hZEltYWdlcyIsInJlc3BvbnNpdmUiLCJzbGlkZVpJbmRleCIsIndyYXBwZXJDbGFzcyIsInRvdWNoRW5hYmxlZCIsInN3aXBlVGhyZXNob2xkIiwib25lVG9PbmVUb3VjaCIsInByZXZlbnREZWZhdWx0U3dpcGVYIiwicHJldmVudERlZmF1bHRTd2lwZVkiLCJhcmlhTGl2ZSIsImFyaWFIaWRkZW4iLCJrZXlib2FyZEVuYWJsZWQiLCJwYWdlciIsInBhZ2VyVHlwZSIsInBhZ2VyU2hvcnRTZXBhcmF0b3IiLCJwYWdlclNlbGVjdG9yIiwiYnVpbGRQYWdlciIsInBhZ2VyQ3VzdG9tIiwiY29udHJvbHMiLCJuZXh0VGV4dCIsInByZXZUZXh0IiwibmV4dFNlbGVjdG9yIiwicHJldlNlbGVjdG9yIiwiYXV0b0NvbnRyb2xzIiwic3RhcnRUZXh0Iiwic3RvcFRleHQiLCJhdXRvQ29udHJvbHNDb21iaW5lIiwiYXV0b0NvbnRyb2xzU2VsZWN0b3IiLCJhdXRvIiwicGF1c2UiLCJhdXRvU3RhcnQiLCJhdXRvRGlyZWN0aW9uIiwic3RvcEF1dG9PbkNsaWNrIiwiYXV0b0hvdmVyIiwiYXV0b0RlbGF5IiwiYXV0b1NsaWRlRm9yT25lUGFnZSIsIm1pblNsaWRlcyIsIm1heFNsaWRlcyIsIm1vdmVTbGlkZXMiLCJzbGlkZVdpZHRoIiwic2hyaW5rSXRlbXMiLCJvblNsaWRlckxvYWQiLCJvblNsaWRlQmVmb3JlIiwib25TbGlkZUFmdGVyIiwib25TbGlkZU5leHQiLCJvblNsaWRlUHJldiIsIm9uU2xpZGVyUmVzaXplIiwib25BdXRvQ2hhbmdlIiwiYnhTbGlkZXIiLCJzbGlkZXIiLCJ3aW5kb3dXaWR0aCIsIndpbmRvd0hlaWdodCIsImZsb29yIiwiY2Fyb3VzZWwiLCJtaW5UaHJlc2hvbGQiLCJtYXhUaHJlc2hvbGQiLCJ3b3JraW5nIiwiYW5pbVByb3AiLCJ1c2luZ0NTUyIsImNzc1ByZWZpeCIsInByZWxvYWRTZWxlY3RvciIsInZpZXdwb3J0IiwibG9hZGVyIiwiZ2V0Vmlld3BvcnRNYXhXaWR0aCIsImxpc3RTdHlsZSIsImdldFNsaWRlV2lkdGgiLCJ6SW5kZXgiLCJhcHBlbmRDYXB0aW9ucyIsImdldFBhZ2VyUXR5IiwiZml0VmlkcyIsImFwcGVuZENvbnRyb2xzIiwiYXBwZW5kQ29udHJvbHNBdXRvIiwiYXBwZW5kUGFnZXIiLCJsb2FkRWxlbWVudHMiLCJ0b3RhbCIsInNsaWNlQXBwZW5kIiwic2xpY2VQcmVwZW5kIiwic2V0U2xpZGVQb3NpdGlvbiIsImdldFZpZXdwb3J0SGVpZ2h0IiwicmVkcmF3U2xpZGVyIiwiaW5pdGlhbGl6ZWQiLCJyZXNpemVXaW5kb3ciLCJpbml0QXV0byIsImluaXRUaWNrZXIiLCJ1cGRhdGVQYWdlckFjdGl2ZSIsInVwZGF0ZURpcmVjdGlvbkNvbnRyb2xzIiwiaW5pdFRvdWNoIiwia2V5ZG93biIsImtleVByZXNzIiwiY3VycmVudEluZGV4IiwiZ2V0TW92ZUJ5Iiwib3V0ZXJIZWlnaHQiLCJuZXdFbFdpZHRoIiwid3JhcFdpZHRoIiwiZ2V0TnVtYmVyU2xpZGVzU2hvd2luZyIsInNsaWRlc1Nob3dpbmciLCJjaGlsZFdpZHRoIiwicGFnZXJRdHkiLCJicmVha1BvaW50IiwiY291bnRlciIsImxhc3RTaG93aW5nSW5kZXgiLCJzZXRQb3NpdGlvblByb3BlcnR5Iiwib3V0ZXJXaWR0aCIsImFuaW1hdGVPYmoiLCJwcm9wVmFsdWUiLCJ1cGRhdGVBZnRlclNsaWRlVHJhbnNpdGlvbiIsInJlc2V0VmFsdWUiLCJ0aWNrZXJMb29wIiwicG9wdWxhdGVQYWdlciIsInBhZ2VySHRtbCIsImxpbmtDb250ZW50IiwicGFnZXJFbCIsImNsaWNrUGFnZXJCaW5kIiwiY2xpY2tOZXh0QmluZCIsImNsaWNrUHJldkJpbmQiLCJkaXJlY3Rpb25FbCIsImF1dG9FbCIsImNsaWNrU3RhcnRCaW5kIiwiY2xpY2tTdG9wQmluZCIsInVwZGF0ZUF1dG9Db250cm9scyIsInRpdGxlIiwic3RvcEF1dG8iLCJnb1RvTmV4dFNsaWRlIiwiZ29Ub1ByZXZTbGlkZSIsInN0YXJ0QXV0byIsInBhZ2VyTGluayIsInBhZ2VySW5kZXgiLCJnb1RvU2xpZGUiLCJzbGlkZUluZGV4Iiwib2xkSW5kZXgiLCJ3aW5kb3dGb2N1c0hhbmRsZXIiLCJ3aW5kb3dCbHVySGFuZGxlciIsImF1dG9QYXVzZWQiLCJzdGFydFBvc2l0aW9uIiwidHJhbnNmb3JtIiwicmF0aW8iLCJwcm9wZXJ0eSIsIm5ld1NwZWVkIiwidG90YWxEaW1lbnMiLCJhYnMiLCJyZXN1bWVTcGVlZCIsImFuaW1hdGVQcm9wZXJ0eSIsImlzT25TY3JlZW4iLCJib3VuZHMiLCJib3R0b20iLCJhY3RpdmVFbGVtZW50VGFnIiwidGFnTmFtZSIsInRhZ0ZpbHRlcnMiLCJ0b3VjaCIsIngiLCJ5Iiwib25Ub3VjaFN0YXJ0Iiwib3JpZ2luYWxQb3MiLCJ0b3VjaFBvaW50cyIsImNocm9tZVBvaW50ZXJFdmVudHMiLCJQb2ludGVyRXZlbnQiLCJzZXRQb2ludGVyQ2FwdHVyZSIsIm9yaWdpbmFsQ2xpY2tUYXJnZXQiLCJvcmlnaW5hbFRhcmdldCIsIm9yaWdpbmFsQ2xpY2tCdXR0b24iLCJvcmlnaW5hbENsaWNrQnV0dG9ucyIsIm9yaWdpbmFsRXZlbnRUeXBlIiwiaGFzTW92ZSIsIm9uVG91Y2hNb3ZlIiwib25Ub3VjaEVuZCIsIm9uUG9pbnRlckNhbmNlbCIsInJlbGVhc2VQb2ludGVyQ2FwdHVyZSIsInhNb3ZlbWVudCIsInlNb3ZlbWVudCIsImNoYW5nZSIsImRpc3RhbmNlIiwid2luZG93V2lkdGhOZXciLCJ3aW5kb3dIZWlnaHROZXciLCJhcHBseUFyaWFIaWRkZW5BdHRyaWJ1dGVzIiwic3RhcnRWaXNpYmxlSW5kZXgiLCJudW1iZXJPZlNsaWRlc1Nob3dpbmciLCJzZXRTbGlkZUluZGV4IiwiZGlyZWN0aW9uIiwicGVyZm9ybVRyYW5zaXRpb24iLCJtb3ZlQnkiLCJyZXF1ZXN0RWwiLCJwcmV2ZW50Q29udHJvbFVwZGF0ZSIsInNldEludGVydmFsIiwiY2xlYXJJbnRlcnZhbCIsImdldEN1cnJlbnRTbGlkZSIsImdldEN1cnJlbnRTbGlkZUVsZW1lbnQiLCJnZXRTbGlkZUVsZW1lbnQiLCJnZXRTbGlkZUNvdW50IiwiaXNXb3JraW5nIiwiZGVzdHJveVNsaWRlciIsInJlbG9hZFNsaWRlciIsIm8iLCJyIiwiaCIsIiR0YXJnZXQiLCJmYW5jeWJveCIsImdldEluc3RhbmNlIiwiJHRyaWdnZXIiLCJpdGVtcyIsImluZm8iLCJjbG9zZUV4aXN0aW5nIiwibG9vcCIsImd1dHRlciIsImtleWJvYXJkIiwicHJldmVudENhcHRpb25PdmVybGFwIiwiYXJyb3dzIiwiaW5mb2JhciIsInNtYWxsQnRuIiwidG9vbGJhciIsImlkbGVUaW1lIiwicHJvdGVjdCIsIm1vZGFsIiwicHJlbG9hZCIsImlmcmFtZSIsInRwbCIsInNjcm9sbGluZyIsImZvcm1hdCIsImRlZmF1bHRUeXBlIiwiYW5pbWF0aW9uRWZmZWN0IiwiYW5pbWF0aW9uRHVyYXRpb24iLCJ6b29tT3BhY2l0eSIsInRyYW5zaXRpb25FZmZlY3QiLCJ0cmFuc2l0aW9uRHVyYXRpb24iLCJzbGlkZUNsYXNzIiwiYmFzZUNsYXNzIiwiYmFzZVRwbCIsInNwaW5uZXJUcGwiLCJlcnJvclRwbCIsImJ0blRwbCIsImRvd25sb2FkIiwiem9vbSIsImNsb3NlIiwiYXJyb3dMZWZ0IiwiYXJyb3dSaWdodCIsInBhcmVudEVsIiwiaGlkZVNjcm9sbGJhciIsImF1dG9Gb2N1cyIsImJhY2tGb2N1cyIsInRyYXBGb2N1cyIsImZ1bGxTY3JlZW4iLCJ2ZXJ0aWNhbCIsIm1vbWVudHVtIiwibWVkaWEiLCJzbGlkZVNob3ciLCJ0aHVtYnMiLCJoaWRlT25DbG9zZSIsImF4aXMiLCJ3aGVlbCIsIm9uSW5pdCIsImJlZm9yZUxvYWQiLCJhZnRlckxvYWQiLCJiZWZvcmVTaG93IiwiYWZ0ZXJTaG93IiwiYmVmb3JlQ2xvc2UiLCJhZnRlckNsb3NlIiwib25BY3RpdmF0ZSIsIm9uRGVhY3RpdmF0ZSIsImNsaWNrQ29udGVudCIsImNsaWNrU2xpZGUiLCJjbGlja091dHNpZGUiLCJkYmxjbGlja0NvbnRlbnQiLCJkYmxjbGlja1NsaWRlIiwiZGJsY2xpY2tPdXRzaWRlIiwibW9iaWxlIiwiaTE4biIsImVuIiwiQ0xPU0UiLCJORVhUIiwiUFJFViIsIkVSUk9SIiwiUExBWV9TVEFSVCIsIlBMQVlfU1RPUCIsIkZVTExfU0NSRUVOIiwiVEhVTUJTIiwiRE9XTkxPQUQiLCJTSEFSRSIsIlpPT00iLCJkZSIsImMiLCJkIiwid2Via2l0UmVxdWVzdEFuaW1hdGlvbkZyYW1lIiwibW96UmVxdWVzdEFuaW1hdGlvbkZyYW1lIiwib1JlcXVlc3RBbmltYXRpb25GcmFtZSIsInUiLCJjYW5jZWxBbmltYXRpb25GcmFtZSIsIndlYmtpdENhbmNlbEFuaW1hdGlvbkZyYW1lIiwibW96Q2FuY2VsQW5pbWF0aW9uRnJhbWUiLCJvQ2FuY2VsQW5pbWF0aW9uRnJhbWUiLCJmIiwidHJhbnNpdGlvbiIsIk9UcmFuc2l0aW9uIiwiTW96VHJhbnNpdGlvbiIsIldlYmtpdFRyYW5zaXRpb24iLCJnIiwiZWxlbWVudEZyb21Qb2ludCIsImlzTW9iaWxlIiwiY3VyckluZGV4IiwicHJldkluZGV4IiwicHJldlBvcyIsImN1cnJQb3MiLCJmaXJzdFJ1biIsImdyb3VwIiwic2xpZGVzIiwiYWRkQ29udGVudCIsInNjcm9sbEhlaWdodCIsImlubmVySGVpZ2h0IiwiaW5uZXJXaWR0aCIsImNsaWVudFdpZHRoIiwidHJhbnNsYXRlIiwiJHJlZnMiLCJmb3JFYWNoIiwiYWN0aXZhdGUiLCJqdW1wVG8iLCIkb3JpZyIsImNoYXJBdCIsIiR0aHVtYiIsInRodW1iIiwidXBkYXRlQ29udHJvbHMiLCJUaHVtYnMiLCJpc0FjdGl2ZSIsImFkZEV2ZW50cyIsInJlbW92ZUV2ZW50cyIsInByZXZpb3VzIiwiaXNTY2FsZWREb3duIiwicmVxdWVzdElkIiwidXBkYXRlIiwic3RhZ2UiLCJpZGxlU2Vjb25kc0NvdW50ZXIiLCJpc0lkbGUiLCJzaG93Q29udHJvbHMiLCJpZGxlSW50ZXJ2YWwiLCJpc0RyYWdnaW5nIiwiaGlkZUNvbnRyb2xzIiwiaXNDbG9zaW5nIiwiaXNBbmltYXRpbmciLCJjcmVhdGVTbGlkZSIsImZvcmNlZER1cmF0aW9uIiwiaXNNb3ZlZCIsIiRzbGlkZSIsImxvYWRTbGlkZSIsImdldFRyYW5zbGF0ZSIsImlzQ29tcGxldGUiLCJzZXRUcmFuc2xhdGUiLCJpc0xvYWRlZCIsInJldmVhbENvbnRlbnQiLCJ1cGRhdGVTbGlkZSIsInNjYWxlVG9BY3R1YWwiLCIkY29udGVudCIsImhhc0Vycm9yIiwidXBkYXRlQ3Vyc29yIiwic2NhbGVYIiwic2NhbGVZIiwiU2xpZGVTaG93Iiwic2NhbGVUb0ZpdCIsImdldEZpdFBvcyIsIm1pbiIsImFkanVzdENhcHRpb24iLCJhZGp1c3RMYXlvdXQiLCJuYXZpZ2F0aW9uIiwiY2xpZW50SGVpZ2h0IiwiY2VudGVyU2xpZGUiLCJHdWVzdHVyZXMiLCJjYW5QYW4iLCJpc1pvb21hYmxlIiwiaXNMb2FkaW5nIiwic2V0SW1hZ2UiLCJzZXRJZnJhbWUiLCJzZXRDb250ZW50IiwidmlkZW9Gb3JtYXQiLCJzZXRFcnJvciIsInNob3dMb2FkaW5nIiwiJGltYWdlIiwiY2hlY2tTcmNzZXQiLCIkZ2hvc3QiLCJzZXRCaWdJbWFnZSIsInNyY3NldCIsImRldmljZVBpeGVsUmF0aW8iLCJzdWJzdHJpbmciLCJwb3N0Zml4IiwicmVzb2x2ZUltYWdlU2xpZGVTaXplIiwibmF0dXJhbFdpZHRoIiwibmF0dXJhbEhlaWdodCIsInNpemVzIiwiaGlkZUxvYWRpbmciLCIkaWZyYW1lIiwiZ2V0VGltZSIsImlzUmV2ZWFsZWQiLCIkcGxhY2Vob2xkZXIiLCIkc21hbGxCdG4iLCIkc3Bpbm5lciIsIiRjYXB0aW9uIiwiZGlzYWJsZUxheW91dEZpeCIsImdldFRodW1iUG9zIiwiRG9jdW1lbnQiLCJleGl0RnVsbHNjcmVlbiIsIndlYmtpdEV4aXRGdWxsc2NyZWVuIiwiaXNWaXNpYmxlIiwiY2xlYW5VcCIsInNjcm9sbFgiLCJzY3JvbGxZIiwiaGFzSGlkZGVuQ29udHJvbHMiLCJ0b2dnbGVDb250cm9scyIsImRlc3Ryb3kiLCJuYXZpZ2F0b3IiLCJ1c2VyQWdlbnQiLCJ1c2UzZCIsImRvY3VtZW50TW9kZSIsInByb3BlcnR5TmFtZSIsInlvdXR1YmUiLCJhdXRvcGxheSIsImF1dG9oaWRlIiwiZnMiLCJyZWwiLCJoZCIsIndtb2RlIiwiZW5hYmxlanNhcGkiLCJodG1sNSIsInBhcmFtUGxhY2UiLCJ2aW1lbyIsInNob3dfdGl0bGUiLCJzaG93X2J5bGluZSIsInNob3dfcG9ydHJhaXQiLCJmdWxsc2NyZWVuIiwiaW5zdGFncmFtIiwiZ21hcF9wbGFjZSIsImdtYXBfc2VhcmNoIiwiZGVjb2RlVVJJQ29tcG9uZW50Iiwib3JpZ1NyYyIsImNvbnRlbnRTb3VyY2UiLCJsb2FkaW5nIiwibG9hZGVkIiwib25Zb3VUdWJlSWZyYW1lQVBJUmVhZHkiLCJZVCIsIlBsYXllciIsIm9uU3RhdGVDaGFuZ2UiLCJWaW1lbyIsInNxcnQiLCJwb3ciLCJvbmNsaWNrIiwic3Vic3RyIiwic2Nyb2xsV2lkdGgiLCJpbnN0YW5jZSIsIiRiZyIsImJnIiwiJHN0YWdlIiwiJGNvbnRhaW5lciIsInRhcHBlZCIsIm9udG91Y2hzdGFydCIsInJlYWxQb2ludHMiLCJzdGFydFBvaW50cyIsInN0YXJ0RXZlbnQiLCJjYW5UYXAiLCJpc1Bhbm5pbmciLCJpc1N3aXBpbmciLCJpc1pvb21pbmciLCJpc1Njcm9sbGluZyIsImRpc3RhbmNlWCIsImRpc3RhbmNlWSIsImNhbnZhc1dpZHRoIiwiY2FudmFzSGVpZ2h0IiwiY29udGVudExhc3RQb3MiLCJjb250ZW50U3RhcnRQb3MiLCJzbGlkZXJTdGFydFBvcyIsInN0YWdlUG9zIiwib25zY3JvbGwiLCJpc1Njcm9sbGFibGUiLCJjZW50ZXJQb2ludFN0YXJ0WCIsImNlbnRlclBvaW50U3RhcnRZIiwicGVyY2VudGFnZU9mSW1hZ2VBdFBpbmNoUG9pbnRYIiwicGVyY2VudGFnZU9mSW1hZ2VBdFBpbmNoUG9pbnRZIiwic3RhcnREaXN0YW5jZUJldHdlZW5GaW5nZXJzIiwib250b3VjaG1vdmUiLCJvbnRvdWNoZW5kIiwibmV3UG9pbnRzIiwib25Td2lwZSIsIm9uUGFuIiwib25ab29tIiwic2xpZGVyTGFzdFBvcyIsImF0YW4yIiwibGltaXRNb3ZlbWVudCIsImxpbWl0UG9zaXRpb24iLCJTIiwibmV3V2lkdGgiLCJuZXdIZWlnaHQiLCJlbmRQb2ludHMiLCJkTXMiLCJvblRhcCIsInZlbG9jaXR5WCIsInZlbG9jaXR5WSIsImVuZFBhbm5pbmciLCJlbmRab29taW5nIiwiZW5kU3dpcGluZyIsInRhcFgiLCJ0YXBZIiwiJGJ1dHRvbiIsIiRwcm9ncmVzcyIsImlubmVyIiwiY2xlYXIiLCJyZXF1ZXN0IiwicmVxdWVzdEZ1bGxzY3JlZW4iLCJBTExPV19LRVlCT0FSRF9JTlBVVCIsImV4aXQiLCJpc0Z1bGxzY3JlZW4iLCJCb29sZWFuIiwiZnVsbHNjcmVlbkVsZW1lbnQiLCJlbmFibGVkIiwiZnVsbHNjcmVlbkVuYWJsZWQiLCJmdWxsc2NyZWVuY2hhbmdlIiwiRnVsbFNjcmVlbiIsIiRncmlkIiwiJGxpc3QiLCJzaGFyZSIsImN1cnJlbnRIYXNoIiwiZ2FsbGVyeSIsIm9yaWdIYXNoIiwiaGFzaFRpbWVyIiwiaGlzdG9yeSIsInBhdGhuYW1lIiwic2VhcmNoIiwiaGFzQ3JlYXRlZEhpc3RvcnkiLCJiYWNrIiwicmVwbGFjZVN0YXRlIiwiZGVsdGFZIiwiZGVsdGFYIiwid2hlZWxEZWx0YSIsInJlcXVpcmUiLCJWRVJTSU9OIiwiTEVGVCIsIlJJR0hUIiwiVVAiLCJET1dOIiwiSU4iLCJPVVQiLCJOT05FIiwiQVVUTyIsIlNXSVBFIiwiUElOQ0giLCJUQVAiLCJET1VCTEVfVEFQIiwiTE9OR19UQVAiLCJIT0xEIiwiSE9SSVpPTlRBTCIsIlZFUlRJQ0FMIiwiQUxMX0ZJTkdFUlMiLCJET1VCTEVfVEFQX1RIUkVTSE9MRCIsIlBIQVNFX1NUQVJUIiwiUEhBU0VfTU9WRSIsIlBIQVNFX0VORCIsIlBIQVNFX0NBTkNFTCIsIlNVUFBPUlRTX1RPVUNIIiwiU1VQUE9SVFNfUE9JTlRFUl9JRTEwIiwibXNQb2ludGVyRW5hYmxlZCIsIlNVUFBPUlRTX1BPSU5URVIiLCJQTFVHSU5fTlMiLCJmaW5nZXJzIiwidGhyZXNob2xkIiwiY2FuY2VsVGhyZXNob2xkIiwicGluY2hUaHJlc2hvbGQiLCJtYXhUaW1lVGhyZXNob2xkIiwiZmluZ2VyUmVsZWFzZVRocmVzaG9sZCIsImxvbmdUYXBUaHJlc2hvbGQiLCJkb3VibGVUYXBUaHJlc2hvbGQiLCJzd2lwZSIsInN3aXBlTGVmdCIsInN3aXBlUmlnaHQiLCJzd2lwZVVwIiwic3dpcGVEb3duIiwic3dpcGVTdGF0dXMiLCJwaW5jaEluIiwicGluY2hPdXQiLCJwaW5jaFN0YXR1cyIsInRhcCIsImRvdWJsZVRhcCIsImxvbmdUYXAiLCJ0cmlnZ2VyT25Ub3VjaEVuZCIsInRyaWdnZXJPblRvdWNoTGVhdmUiLCJhbGxvd1BhZ2VTY3JvbGwiLCJmYWxsYmFja1RvTW91c2VFdmVudHMiLCJleGNsdWRlZEVsZW1lbnRzIiwicHJldmVudERlZmF1bHRFdmVudHMiLCIkdGhpcyIsInBsdWdpbiIsInBoYXNlcyIsImRpcmVjdGlvbnMiLCJwYWdlU2Nyb2xsIiwiT05FIiwiVFdPIiwiVEhSRUUiLCJGT1VSIiwiRklWRSIsIkFMTCIsIlRvdWNoU3dpcGUiLCJlbGVtZW50IiwidXNlVG91Y2hFdmVudHMiLCJTVEFSVF9FViIsIk1PVkVfRVYiLCJFTkRfRVYiLCJMRUFWRV9FViIsIkNBTkNFTF9FViIsImN1cnJlbnREaXJlY3Rpb24iLCJzdGFydFRvdWNoZXNEaXN0YW5jZSIsImVuZFRvdWNoZXNEaXN0YW5jZSIsInBpbmNoWm9vbSIsInBpbmNoRGlzdGFuY2UiLCJwaW5jaERpcmVjdGlvbiIsIm1heGltdW1zTWFwIiwiJGVsZW1lbnQiLCJwaGFzZSIsImZpbmdlckNvdW50IiwiZmluZ2VyRGF0YSIsImVuZFRpbWUiLCJwcmV2aW91c1RvdWNoRW5kVGltZSIsImZpbmdlckNvdW50QXRSZWxlYXNlIiwiZG91YmxlVGFwU3RhcnRUaW1lIiwic2luZ2xlVGFwVGltZW91dCIsImhvbGRUaW1lb3V0IiwidG91Y2hTdGFydCIsInRvdWNoQ2FuY2VsIiwiZW5hYmxlIiwicmVtb3ZlTGlzdGVuZXJzIiwianFFdmVudCIsImdldFRvdWNoSW5Qcm9ncmVzcyIsImNyZWF0ZU1heGltdW1zRGF0YSIsImNhbmNlbE11bHRpRmluZ2VyUmVsZWFzZSIsImNyZWF0ZUZpbmdlckRhdGEiLCJoYXNQaW5jaGVzIiwiZ2V0VGltZVN0YW1wIiwiY2FsY3VsYXRlVG91Y2hlc0Rpc3RhbmNlIiwic2V0VG91Y2hJblByb2dyZXNzIiwidG91Y2hNb3ZlIiwiaW5NdWx0aUZpbmdlclJlbGVhc2UiLCJjdXJyZW50RmluZ2VyIiwidXBkYXRlRmluZ2VyRGF0YSIsImNhbGN1bGF0ZVBpbmNoRGlyZWN0aW9uIiwiY2FsY3VsYXRlUGluY2hab29tIiwiY2FsY3VsYXRlRGlyZWN0aW9uIiwidmFsaWRhdGVEZWZhdWx0RXZlbnQiLCJjYWxjdWxhdGVEaXN0YW5jZSIsImNhbGN1bGF0ZUR1cmF0aW9uIiwic2V0TWF4RGlzdGFuY2UiLCJpbkJvdW5kcyIsImdldGJvdW5kcyIsImlzSW5Cb3VuZHMiLCJnZXROZXh0UGhhc2UiLCJ0b3VjaEVuZCIsInN0YXJ0TXVsdGlGaW5nZXJSZWxlYXNlIiwiZGlkU3dpcGVCYWNrVG9DYW5jZWwiLCJ2YWxpZGF0ZVN3aXBlRGlzdGFuY2UiLCJoYXNUYXAiLCJ0cmlnZ2VySGFuZGxlckZvckdlc3R1cmUiLCJ0b3VjaExlYXZlIiwiY3VycmVudFBoYXNlIiwibmV4dFBoYXNlIiwidmFsaWRUaW1lIiwidmFsaWRhdGVTd2lwZVRpbWUiLCJ2YWxpZERpc3RhbmNlIiwiZGlkQ2FuY2VsIiwiZGlkU3dpcGUiLCJoYXNTd2lwZXMiLCJkaWRQaW5jaCIsImRpZERvdWJsZVRhcCIsImRpZExvbmdUYXAiLCJkaWRUYXAiLCJnZXN0dXJlIiwidmFsaWRhdGVTd2lwZSIsInZhbGlkYXRlUGluY2giLCJoYXNEb3VibGVUYXAiLCJpbkRvdWJsZVRhcCIsInZhbGlkIiwiY2FuY2VsbGVkIiwiZ2V0TWF4RGlzdGFuY2UiLCJ2YWxpZGF0ZVBpbmNoRGlzdGFuY2UiLCJoYXNDb3JyZWN0RmluZ2VyQ291bnQiLCJ2YWxpZGF0ZUZpbmdlcnMiLCJoYXNFbmRQb2ludCIsInZhbGlkYXRlRW5kUG9pbnQiLCJoYXNDb3JyZWN0RGlzdGFuY2UiLCJoYXNWYWxpZFRpbWUiLCJoYXNWYWxpZERpc3RhbmNlIiwiaGFzTG9uZ1RhcCIsInZhbGlkYXRlRG91YmxlVGFwIiwidmFsaWRhdGVUYXAiLCJ2YWxpZGF0ZUxvbmdUYXAiLCJ3aXRoaW5UaHJlc2hvbGQiLCJnZXRGaW5nZXJEYXRhIiwibWF4RGF0YSIsImNyZWF0ZU1heGltdW1WTyIsInN0YXJ0UG9pbnQiLCJlbmRQb2ludCIsImRpZmZYIiwiZGlmZlkiLCJzdGFydERpc3RhbmNlIiwiZW5kRGlzdGFuY2UiLCJ0b0ZpeGVkIiwiY2FsY3VsYXRlQW5nbGUiLCJhbmdsZSIsImNvbXBhcmVQb2ludHMiLCJwb2ludCIsInBvaW50QSIsInBvaW50QiIsImltcGwiLCJtb2JpbGVEZXRlY3RSdWxlcyIsImRldGVjdE1vYmlsZUJyb3dzZXJzIiwiZnVsbFBhdHRlcm4iLCJzaG9ydFBhdHRlcm4iLCJ0YWJsZXRQYXR0ZXJuIiwiaGFzT3duUHJvcCIsIkZBTExCQUNLX1BIT05FIiwiRkFMTEJBQ0tfVEFCTEVUIiwiRkFMTEJBQ0tfTU9CSUxFIiwiZXF1YWxJQyIsImNvbnRhaW5zSUMiLCJ2YWx1ZUxDIiwiY29udmVydFByb3BzVG9SZWdFeHAiLCJwcmVwYXJlVXNlckFnZW50IiwidmVyUG9zIiwib3NzIiwicGhvbmVzIiwidGFibGV0cyIsInVhcyIsInV0aWxzIiwib3NzMCIsIldpbmRvd3NQaG9uZU9TIiwiV2luZG93c01vYmlsZU9TIiwiZmluZE1hdGNoIiwicnVsZXMiLCJmaW5kTWF0Y2hlcyIsImdldFZlcnNpb25TdHIiLCJwYXR0ZXJucyIsImdldFZlcnNpb24iLCJwcmVwYXJlVmVyc2lvbk5vIiwiTmFOIiwibnVtYmVycyIsIk51bWJlciIsImlzTW9iaWxlRmFsbGJhY2siLCJpc1RhYmxldEZhbGxiYWNrIiwicHJlcGFyZURldGVjdGlvbkNhY2hlIiwibWF4UGhvbmVXaWR0aCIsInBob25lIiwidGFibGV0IiwicGhvbmVTaXplZCIsIk1vYmlsZURldGVjdCIsImlzUGhvbmVTaXplZCIsIm1vYmlsZUdyYWRlIiwiJGlzTW9iaWxlIiwib3MiLCJkZXRlY3RPUyIsInVhIiwiZ2V0RGV2aWNlU21hbGxlclNpZGUiLCJzY3JlZW4iLCJfY2FjaGUiLCJ1c2VyQWdlbnRzIiwidmVyc2lvblN0ciIsImdyYWRlIiwiX2ltcGwiLCJvcGVuSXRlbSIsIml0ZW0iLCJhYm91dCIsInJlcUhlaWdodCIsInRyaWFuZ2xlIiwiY2xvc2VFdmVyeUl0ZW0iLCJpdGVtY29udGFpbmVyIiwidHJpYW5nbGVzIiwiZWxlbUNvbnRhaW5lciIsImJ0biIsInF1ZXJ5U2VsZWN0b3IiLCJtZW51IiwiZnVsbCIsImNsYXNzTGlzdCIsImxpbmsiLCJyZXFTZWN0aW9uIiwicGVyZm9tVHJhbnNpdGlvbiIsInRlbXBsYXRlIiwiY2xvc2VCdG4iLCJIb3Jpem9udEFjY29yZCIsIm1lc3VyZVdpZHRoIiwiY29udGFpbmVyV2lkdGgiLCJzY3JlZW5XaWR0aCIsIml0ZW1Db250YWluZXIiLCJ0aXRsZUJsb2NrcyIsIkhvcml6b250QWNjb3JkVGFyZ2V0IiwicGhvbmVzQWN0aXZlIiwibmV3SXRlbSIsImxvZyIsIndpbmR0aCIsIm15TWFwIiwieW1hcHMiLCJNYXAiLCJjZW50ZXIiLCJjb29yZHMiLCJteUNvbGxlY3Rpb24iLCJHZW9PYmplY3RDb2xsZWN0aW9uIiwiZHJhZ2dhYmxlIiwiaWNvbkxheW91dCIsImljb25JbWFnZUhyZWYiLCJpY29uSW1hZ2VTaXplIiwiaWNvbkltYWdlT2Zmc2V0IiwiY29vcmQiLCJQbGFjZW1hcmsiLCJnZW9PYmplY3RzIiwiYmVoYXZpb3JzIiwidmFsaWRhdGVGaWVsZHMiLCJmb3JtIiwiZmllbGRzQXJyYXkiLCJmaWVsZCIsImVycm9yc0ZpZWxkIiwiY29tbWVudCIsInJlc3BvbnNlSlNPTiIsInBsYXllckNvbnRhaW5lciIsInBsYXllciIsImV2ZW50c0luaXQiLCJwbGF5IiwicGxheWJhY2tCYXIiLCJwbGF5YmFja0JhckNsaWNrZWRQb3NpdGlvbiIsImxheWVyWCIsIm5ld0J1dHRvblBvc2l0aW9uUGVyY2VudCIsIm5ld1BsYXliYWNrUG9zaXRpb25TZWMiLCJ2b2x1bWVCYXIiLCJ2b2x1bWVCYXJjbGlja2VkUG9zaXRpb24iLCJuZXdWb2x1bWVQb3NpdGlvblBlcmNlbnQiLCJ2b2x1bWUiLCJwbGF5ZXJWb2x1bWVOb3ciLCJvbnBhdXNlIiwib25wbGF5IiwiZmluZEJsb2NrQnlBbGlhcyIsImFsaWFzIiwibmR4IiwiaXRlbVRvU2hvdyIsImN1ckl0ZW0iLCJzZWN0aW9ucyIsInNpZGVNZW51IiwibWVudUl0ZW1zIiwibW9iaWxlRGV0ZWN0IiwiaW5TY3JvbGwiLCJjb3VudFNlY3Rpb25Qb3NpdGlvbiIsInNlY3Rpb25FcSIsImNoYW5nZU1lbnVUaGVtZUZvclBhZ2VuYXRvciIsImN1cnJlbnRTZWN0aW9uIiwibWVudVRoZW1lIiwiYWN0aXZlQ2xhc3MiLCJyZXNldEFjdGl2ZUNsYXNzRm9ySXRlbSIsIml0ZW1FcSIsInRyYW5zaXRpb25PdmVyIiwibW91c2VJbmVydGlvbk92ZXIiLCJ2aWV3cG9ydFNjcm9sbGVyIiwiYWN0aXZlU2VjdGlvbiIsIm5leHRTZWN0aW9uIiwicHJldlNlY3Rpb24iLCJzY3JvbGxlciIsInVzZXJUeXBpbmdJbnB1dHMiLCJzY3JvbGxEaXJlY3Rpb24iXSwibWFwcGluZ3MiOiIwVkFBQTs7Ozs7Ozs7Ozs7O0dBYUEsQ0FBQSxTQUFBQSxNQUFBLENBQUFDLE9BQUEsQ0FBQSxDQUVBLGFBRUEsR0FBQSxPQUFBQyxDQUFBQSxNQUFBLG1DQUFBQSxNQUFBLEtBQUEsUUFBQSxFQUFBLFFBQUFBLE1BQUEsQ0FBQUMsT0FBQSxJQUFBLFFBQUEsQ0FBQSxDQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0FELE1BQUEsQ0FBQUMs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biAqIGpRdWVyeSBKYXZhU2NyaXB0IExpYnJhcnkgdjMuNS4xXG4gKiBodHRwczovL2pxdWVyeS5jb20vXG4gKlxuICogSW5jbHVkZXMgU2l6emxlLmpzXG4gKiBodHRwczovL3NpenpsZWpzLmNvbS9cbiAqXG4gKiBDb3B5cmlnaHQgSlMgRm91bmRhdGlvbiBhbmQgb3RoZXIgY29udHJpYnV0b3JzXG4gKiBSZWxlYXNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2VcbiAqIGh0dHBzOi8vanF1ZXJ5Lm9yZy9saWNlbnNlXG4gKlxuICogRGF0ZTogMjAyMC0wNS0wNFQyMjo0OVpcbiAqL1xuKCBmdW5jdGlvbiggZ2xvYmFsLCBmYWN0b3J5ICkge1xuXG5cdFwidXNlIHN0cmljdFwiO1xuXG5cdGlmICggdHlwZW9mIG1vZHVsZSA9PT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgbW9kdWxlLmV4cG9ydHMgPT09IFwib2JqZWN0XCIgKSB7XG5cblx0XHQvLyBGb3IgQ29tbW9uSlMgYW5kIENvbW1vbkpTLWxpa2UgZW52aXJvbm1lbnRzIHdoZXJlIGEgcHJvcGVyIGB3aW5kb3dgXG5cdFx0Ly8gaXMgcHJlc2VudCwgZXhlY3V0ZSB0aGUgZmFjdG9yeSBhbmQgZ2V0IGpRdWVyeS5cblx0XHQvLyBGb3IgZW52aXJvbm1lbnRzIHRoYXQgZG8gbm90IGhhdmUgYSBgd2luZG93YCB3aXRoIGEgYGRvY3VtZW50YFxuXHRcdC8vIChzdWNoIGFzIE5vZGUuanMpLCBleHBvc2UgYSBmYWN0b3J5IGFzIG1vZHVsZS5leHBvcnRzLlxuXHRcdC8vIFRoaXMgYWNjZW50dWF0ZXMgdGhlIG5lZWQgZm9yIHRoZSBjcmVhdGlvbiBvZiBhIHJlYWwgYHdpbmRvd2AuXG5cdFx0Ly8gZS5nLiB2YXIgalF1ZXJ5ID0gcmVxdWlyZShcImpxdWVyeVwiKSh3aW5kb3cpO1xuXHRcdC8vIFNlZSB0aWNrZXQgIzE0NTQ5IGZvciBtb3JlIGluZm8uXG5cdFx0bW9kdWxlLmV4cG9ydHMgPSBnbG9iYWwuZG9jdW1lbnQgP1xuXHRcdFx0ZmFjdG9yeSggZ2xvYmFsLCB0cnVlICkgOlxuXHRcdFx0ZnVuY3Rpb24oIHcgKSB7XG5cdFx0XHRcdGlmICggIXcuZG9jdW1lbnQgKSB7XG5cdFx0XHRcdFx0dGhyb3cgbmV3IEVycm9yKCBcImpRdWVyeSByZXF1aXJlcyBhIHdpbmRvdyB3aXRoIGEgZG9jdW1lbnRcIiApO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiBmYWN0b3J5KCB3ICk7XG5cdFx0XHR9O1xuXHR9IGVsc2Uge1xuXHRcdGZhY3RvcnkoIGdsb2JhbCApO1xuXHR9XG5cbi8vIFBhc3MgdGhpcyBpZiB3aW5kb3cgaXMgbm90IGRlZmluZWQgeWV0XG59ICkoIHR5cGVvZiB3aW5kb3cgIT09IFwidW5kZWZpbmVkXCIgPyB3aW5kb3cgOiB0aGlzLCBmdW5jdGlvbiggd2luZG93LCBub0dsb2JhbCApIHtcblxuLy8gRWRnZSA8PSAxMiAtIDEzKywgRmlyZWZveCA8PTE4IC0gNDUrLCBJRSAxMCAtIDExLCBTYWZhcmkgNS4xIC0gOSssIGlPUyA2IC0gOS4xXG4vLyB0aHJvdyBleGNlcHRpb25zIHdoZW4gbm9uLXN0cmljdCBjb2RlIChlLmcuLCBBU1AuTkVUIDQuNSkgYWNjZXNzZXMgc3RyaWN0IG1vZGVcbi8vIGFyZ3VtZW50cy5jYWxsZWUuY2FsbGVyICh0cmFjLTEzMzM1KS4gQnV0IGFzIG9mIGpRdWVyeSAzLjAgKDIwMTYpLCBzdHJpY3QgbW9kZSBzaG91bGQgYmUgY29tbW9uXG4vLyBlbm91Z2ggdGhhdCBhbGwgc3VjaCBhdHRlbXB0cyBhcmUgZ3VhcmRlZCBpbiBhIHRyeSBibG9jay5cblwidXNlIHN0cmljdFwiO1xuXG52YXIgYXJyID0gW107XG5cbnZhciBnZXRQcm90byA9IE9iamVjdC5nZXRQcm90b3R5cGVPZjtcblxudmFyIHNsaWNlID0gYXJyLnNsaWNlO1xuXG52YXIgZmxhdCA9IGFyci5mbGF0ID8gZnVuY3Rpb24oIGFycmF5ICkge1xuXHRyZXR1cm4gYXJyLmZsYXQuY2FsbCggYXJyYXkgKTtcbn0gOiBmdW5jdGlvbiggYXJyYXkgKSB7XG5cdHJldHVybiBhcnIuY29uY2F0LmFwcGx5KCBbXSwgYXJyYXkgKTtcbn07XG5cblxudmFyIHB1c2ggPSBhcnIucHVzaDtcblxudmFyIGluZGV4T2YgPSBhcnIuaW5kZXhPZjtcblxudmFyIGNsYXNzMnR5cGUgPSB7fTtcblxudmFyIHRvU3RyaW5nID0gY2xhc3MydHlwZS50b1N0cmluZztcblxudmFyIGhhc093biA9IGNsYXNzMnR5cGUuaGFzT3duUHJvcGVydHk7XG5cbnZhciBmblRvU3RyaW5nID0gaGFzT3duLnRvU3RyaW5nO1xuXG52YXIgT2JqZWN0RnVuY3Rpb25TdHJpbmcgPSBmblRvU3RyaW5nLmNhbGwoIE9iamVjdCApO1xuXG52YXIgc3VwcG9ydCA9IHt9O1xuXG52YXIgaXNGdW5jdGlvbiA9IGZ1bmN0aW9uIGlzRnVuY3Rpb24oIG9iaiApIHtcblxuICAgICAgLy8gU3VwcG9ydDogQ2hyb21lIDw9NTcsIEZpcmVmb3ggPD01MlxuICAgICAgLy8gSW4gc29tZSBicm93c2VycywgdHlwZW9mIHJldHVybnMgXCJmdW5jdGlvblwiIGZvciBIVE1MIDxvYmplY3Q+IGVsZW1lbnRzXG4gICAgICAvLyAoaS5lLiwgYHR5cGVvZiBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcIm9iamVjdFwiICkgPT09IFwiZnVuY3Rpb25cImApLlxuICAgICAgLy8gV2UgZG9uJ3Qgd2FudCB0byBjbGFzc2lmeSAqYW55KiBET00gbm9kZSBhcyBhIGZ1bmN0aW9uLlxuICAgICAgcmV0dXJuIHR5cGVvZiBvYmogPT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2Ygb2JqLm5vZGVUeXBlICE9PSBcIm51bWJlclwiO1xuICB9O1xuXG5cbnZhciBpc1dpbmRvdyA9IGZ1bmN0aW9uIGlzV2luZG93KCBvYmogKSB7XG5cdFx0cmV0dXJuIG9iaiAhPSBudWxsICYmIG9iaiA9PT0gb2JqLndpbmRvdztcblx0fTtcblxuXG52YXIgZG9jdW1lbnQgPSB3aW5kb3cuZG9jdW1lbnQ7XG5cblxuXG5cdHZhciBwcmVzZXJ2ZWRTY3JpcHRBdHRyaWJ1dGVzID0ge1xuXHRcdHR5cGU6IHRydWUsXG5cdFx0c3JjOiB0cnVlLFxuXHRcdG5vbmNlOiB0cnVlLFxuXHRcdG5vTW9kdWxlOiB0cnVlXG5cdH07XG5cblx0ZnVuY3Rpb24gRE9NRXZhbCggY29kZSwgbm9kZSwgZG9jICkge1xuXHRcdGRvYyA9IGRvYyB8fCBkb2N1bWVudDtcblxuXHRcdHZhciBpLCB2YWwsXG5cdFx0XHRzY3JpcHQgPSBkb2MuY3JlYXRlRWxlbWVudCggXCJzY3JpcHRcIiApO1xuXG5cdFx0c2NyaXB0LnRleHQgPSBjb2RlO1xuXHRcdGlmICggbm9kZSApIHtcblx0XHRcdGZvciAoIGkgaW4gcHJlc2VydmVkU2NyaXB0QXR0cmlidXRlcyApIHtcblxuXHRcdFx0XHQvLyBTdXBwb3J0OiBGaXJlZm94IDY0KywgRWRnZSAxOCtcblx0XHRcdFx0Ly8gU29tZSBicm93c2VycyBkb24ndCBzdXBwb3J0IHRoZSBcIm5vbmNlXCIgcHJvcGVydHkgb24gc2NyaXB0cy5cblx0XHRcdFx0Ly8gT24gdGhlIG90aGVyIGhhbmQsIGp1c3QgdXNpbmcgYGdldEF0dHJpYnV0ZWAgaXMgbm90IGVub3VnaCBhc1xuXHRcdFx0XHQvLyB0aGUgYG5vbmNlYCBhdHRyaWJ1dGUgaXMgcmVzZXQgdG8gYW4gZW1wdHkgc3RyaW5nIHdoZW5ldmVyIGl0XG5cdFx0XHRcdC8vIGJlY29tZXMgYnJvd3NpbmctY29udGV4dCBjb25uZWN0ZWQuXG5cdFx0XHRcdC8vIFNlZSBodHRwczovL2dpdGh1Yi5jb20vd2hhdHdnL2h0bWwvaXNzdWVzLzIzNjlcblx0XHRcdFx0Ly8gU2VlIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvI25vbmNlLWF0dHJpYnV0ZXNcblx0XHRcdFx0Ly8gVGhlIGBub2RlLmdldEF0dHJpYnV0ZWAgY2hlY2sgd2FzIGFkZGVkIGZvciB0aGUgc2FrZSBvZlxuXHRcdFx0XHQvLyBgalF1ZXJ5Lmdsb2JhbEV2YWxgIHNvIHRoYXQgaXQgY2FuIGZha2UgYSBub25jZS1jb250YWluaW5nIG5vZGVcblx0XHRcdFx0Ly8gdmlhIGFuIG9iamVjdC5cblx0XHRcdFx0dmFsID0gbm9kZVsgaSBdIHx8IG5vZGUuZ2V0QXR0cmlidXRlICYmIG5vZGUuZ2V0QXR0cmlidXRlKCBpICk7XG5cdFx0XHRcdGlmICggdmFsICkge1xuXHRcdFx0XHRcdHNjcmlwdC5zZXRBdHRyaWJ1dGUoIGksIHZhbCApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHRcdGRvYy5oZWFkLmFwcGVuZENoaWxkKCBzY3JpcHQgKS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKCBzY3JpcHQgKTtcblx0fVxuXG5cbmZ1bmN0aW9uIHRvVHlwZSggb2JqICkge1xuXHRpZiAoIG9iaiA9PSBudWxsICkge1xuXHRcdHJldHVybiBvYmogKyBcIlwiO1xuXHR9XG5cblx0Ly8gU3VwcG9ydDogQW5kcm9pZCA8PTIuMyBvbmx5IChmdW5jdGlvbmlzaCBSZWdFeHApXG5cdHJldHVybiB0eXBlb2Ygb2JqID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBvYmogPT09IFwiZnVuY3Rpb25cIiA/XG5cdFx0Y2xhc3MydHlwZVsgdG9TdHJpbmcuY2FsbCggb2JqICkgXSB8fCBcIm9iamVjdFwiIDpcblx0XHR0eXBlb2Ygb2JqO1xufVxuLyogZ2xvYmFsIFN5bWJvbCAqL1xuLy8gRGVmaW5pbmcgdGhpcyBnbG9iYWwgaW4gLmVzbGludHJjLmpzb24gd291bGQgY3JlYXRlIGEgZGFuZ2VyIG9mIHVzaW5nIHRoZSBnbG9iYWxcbi8vIHVuZ3VhcmRlZCBpbiBhbm90aGVyIHBsYWNlLCBpdCBzZWVtcyBzYWZlciB0byBkZWZpbmUgZ2xvYmFsIG9ubHkgZm9yIHRoaXMgbW9kdWxlXG5cblxuXG52YXJcblx0dmVyc2lvbiA9IFwiMy41LjFcIixcblxuXHQvLyBEZWZpbmUgYSBsb2NhbCBjb3B5IG9mIGpRdWVyeVxuXHRqUXVlcnkgPSBmdW5jdGlvbiggc2VsZWN0b3IsIGNvbnRleHQgKSB7XG5cblx0XHQvLyBUaGUgalF1ZXJ5IG9iamVjdCBpcyBhY3R1YWxseSBqdXN0IHRoZSBpbml0IGNvbnN0cnVjdG9yICdlbmhhbmNlZCdcblx0XHQvLyBOZWVkIGluaXQgaWYgalF1ZXJ5IGlzIGNhbGxlZCAoanVzdCBhbGxvdyBlcnJvciB0byBiZSB0aHJvd24gaWYgbm90IGluY2x1ZGVkKVxuXHRcdHJldHVybiBuZXcgalF1ZXJ5LmZuLmluaXQoIHNlbGVjdG9yLCBjb250ZXh0ICk7XG5cdH07XG5cbmpRdWVyeS5mbiA9IGpRdWVyeS5wcm90b3R5cGUgPSB7XG5cblx0Ly8gVGhlIGN1cnJlbnQgdmVyc2lvbiBvZiBqUXVlcnkgYmVpbmcgdXNlZFxuXHRqcXVlcnk6IHZlcnNpb24sXG5cblx0Y29uc3RydWN0b3I6IGpRdWVyeSxcblxuXHQvLyBUaGUgZGVmYXVsdCBsZW5ndGggb2YgYSBqUXVlcnkgb2JqZWN0IGlzIDBcblx0bGVuZ3RoOiAwLFxuXG5cdHRvQXJyYXk6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiBzbGljZS5jYWxsKCB0aGlzICk7XG5cdH0sXG5cblx0Ly8gR2V0IHRoZSBOdGggZWxlbWVudCBpbiB0aGUgbWF0Y2hlZCBlbGVtZW50IHNldCBPUlxuXHQvLyBHZXQgdGhlIHdob2xlIG1hdGNoZWQgZWxlbWVudCBzZXQgYXMgYSBjbGVhbiBhcnJheVxuXHRnZXQ6IGZ1bmN0aW9uKCBudW0gKSB7XG5cblx0XHQvLyBSZXR1cm4gYWxsIHRoZSBlbGVtZW50cyBpbiBhIGNsZWFuIGFycmF5XG5cdFx0aWYgKCBudW0gPT0gbnVsbCApIHtcblx0XHRcdHJldHVybiBzbGljZS5jYWxsKCB0aGlzICk7XG5cdFx0fVxuXG5cdFx0Ly8gUmV0dXJuIGp1c3QgdGhlIG9uZSBlbGVtZW50IGZyb20gdGhlIHNldFxuXHRcdHJldHVybiBudW0gPCAwID8gdGhpc1sgbnVtICsgdGhpcy5sZW5ndGggXSA6IHRoaXNbIG51bSBdO1xuXHR9LFxuXG5cdC8vIFRha2UgYW4gYXJyYXkgb2YgZWxlbWVudHMgYW5kIHB1c2ggaXQgb250byB0aGUgc3RhY2tcblx0Ly8gKHJldHVybmluZyB0aGUgbmV3IG1hdGNoZWQgZWxlbWVudCBzZXQpXG5cdHB1c2hTdGFjazogZnVuY3Rpb24oIGVsZW1zICkge1xuXG5cdFx0Ly8gQnVpbGQgYSBuZXcgalF1ZXJ5IG1hdGNoZWQgZWxlbWVudCBzZXRcblx0XHR2YXIgcmV0ID0galF1ZXJ5Lm1lcmdlKCB0aGlzLmNvbnN0cnVjdG9yKCksIGVsZW1zICk7XG5cblx0XHQvLyBBZGQgdGhlIG9sZCBvYmplY3Qgb250byB0aGUgc3RhY2sgKGFzIGEgcmVmZXJlbmNlKVxuXHRcdHJldC5wcmV2T2JqZWN0ID0gdGhpcztcblxuXHRcdC8vIFJldHVybiB0aGUgbmV3bHktZm9ybWVkIGVsZW1lbnQgc2V0XG5cdFx0cmV0dXJuIHJldDtcblx0fSxcblxuXHQvLyBFeGVjdXRlIGEgY2FsbGJhY2sgZm9yIGV2ZXJ5IGVsZW1lbnQgaW4gdGhlIG1hdGNoZWQgc2V0LlxuXHRlYWNoOiBmdW5jdGlvbiggY2FsbGJhY2sgKSB7XG5cdFx0cmV0dXJuIGpRdWVyeS5lYWNoKCB0aGlzLCBjYWxsYmFjayApO1xuXHR9LFxuXG5cdG1hcDogZnVuY3Rpb24oIGNhbGxiYWNrICkge1xuXHRcdHJldHVybiB0aGlzLnB1c2hTdGFjayggalF1ZXJ5Lm1hcCggdGhpcywgZnVuY3Rpb24oIGVsZW0sIGkgKSB7XG5cdFx0XHRyZXR1cm4gY2FsbGJhY2suY2FsbCggZWxlbSwgaSwgZWxlbSApO1xuXHRcdH0gKSApO1xuXHR9LFxuXG5cdHNsaWNlOiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soIHNsaWNlLmFwcGx5KCB0aGlzLCBhcmd1bWVudHMgKSApO1xuXHR9LFxuXG5cdGZpcnN0OiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gdGhpcy5lcSggMCApO1xuXHR9LFxuXG5cdGxhc3Q6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiB0aGlzLmVxKCAtMSApO1xuXHR9LFxuXG5cdGV2ZW46IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiB0aGlzLnB1c2hTdGFjayggalF1ZXJ5LmdyZXAoIHRoaXMsIGZ1bmN0aW9uKCBfZWxlbSwgaSApIHtcblx0XHRcdHJldHVybiAoIGkgKyAxICkgJSAyO1xuXHRcdH0gKSApO1xuXHR9LFxuXG5cdG9kZDogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHRoaXMucHVzaFN0YWNrKCBqUXVlcnkuZ3JlcCggdGhpcywgZnVuY3Rpb24oIF9lbGVtLCBpICkge1xuXHRcdFx0cmV0dXJuIGkgJSAyO1xuXHRcdH0gKSApO1xuXHR9LFxuXG5cdGVxOiBmdW5jdGlvbiggaSApIHtcblx0XHR2YXIgbGVuID0gdGhpcy5sZW5ndGgsXG5cdFx0XHRqID0gK2kgKyAoIGkgPCAwID8gbGVuIDogMCApO1xuXHRcdHJldHVybiB0aGlzLnB1c2hTdGFjayggaiA+PSAwICYmIGogPCBsZW4gPyBbIHRoaXNbIGogXSBdIDogW10gKTtcblx0fSxcblxuXHRlbmQ6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiB0aGlzLnByZXZPYmplY3QgfHwgdGhpcy5jb25zdHJ1Y3RvcigpO1xuXHR9LFxuXG5cdC8vIEZvciBpbnRlcm5hbCB1c2Ugb25seS5cblx0Ly8gQmVoYXZlcyBsaWtlIGFuIEFycmF5J3MgbWV0aG9kLCBub3QgbGlrZSBhIGpRdWVyeSBtZXRob2QuXG5cdHB1c2g6IHB1c2gsXG5cdHNvcnQ6IGFyci5zb3J0LFxuXHRzcGxpY2U6IGFyci5zcGxpY2Vcbn07XG5cbmpRdWVyeS5leHRlbmQgPSBqUXVlcnkuZm4uZXh0ZW5kID0gZnVuY3Rpb24oKSB7XG5cdHZhciBvcHRpb25zLCBuYW1lLCBzcmMsIGNvcHksIGNvcHlJc0FycmF5LCBjbG9uZSxcblx0XHR0YXJnZXQgPSBhcmd1bWVudHNbIDAgXSB8fCB7fSxcblx0XHRpID0gMSxcblx0XHRsZW5ndGggPSBhcmd1bWVudHMubGVuZ3RoLFxuXHRcdGRlZXAgPSBmYWxzZTtcblxuXHQvLyBIYW5kbGUgYSBkZWVwIGNvcHkgc2l0dWF0aW9uXG5cdGlmICggdHlwZW9mIHRhcmdldCA9PT0gXCJib29sZWFuXCIgKSB7XG5cdFx0ZGVlcCA9IHRhcmdldDtcblxuXHRcdC8vIFNraXAgdGhlIGJvb2xlYW4gYW5kIHRoZSB0YXJnZXRcblx0XHR0YXJnZXQgPSBhcmd1bWVudHNbIGkgXSB8fCB7fTtcblx0XHRpKys7XG5cdH1cblxuXHQvLyBIYW5kbGUgY2FzZSB3aGVuIHRhcmdldCBpcyBhIHN0cmluZyBvciBzb21ldGhpbmcgKHBvc3NpYmxlIGluIGRlZXAgY29weSlcblx0aWYgKCB0eXBlb2YgdGFyZ2V0ICE9PSBcIm9iamVjdFwiICYmICFpc0Z1bmN0aW9uKCB0YXJnZXQgKSApIHtcblx0XHR0YXJnZXQgPSB7fTtcblx0fVxuXG5cdC8vIEV4dGVuZCBqUXVlcnkgaXRzZWxmIGlmIG9ubHkgb25lIGFyZ3VtZW50IGlzIHBhc3NlZFxuXHRpZiAoIGkgPT09IGxlbmd0aCApIHtcblx0XHR0YXJnZXQgPSB0aGlzO1xuXHRcdGktLTtcblx0fVxuXG5cdGZvciAoIDsgaSA8IGxlbmd0aDsgaSsrICkge1xuXG5cdFx0Ly8gT25seSBkZWFsIHdpdGggbm9uLW51bGwvdW5kZWZpbmVkIHZhbHVlc1xuXHRcdGlmICggKCBvcHRpb25zID0gYXJndW1lbnRzWyBpIF0gKSAhPSBudWxsICkge1xuXG5cdFx0XHQvLyBFeHRlbmQgdGhlIGJhc2Ugb2JqZWN0XG5cdFx0XHRmb3IgKCBuYW1lIGluIG9wdGlvbnMgKSB7XG5cdFx0XHRcdGNvcHkgPSBvcHRpb25zWyBuYW1lIF07XG5cblx0XHRcdFx0Ly8gUHJldmVudCBPYmplY3QucHJvdG90eXBlIHBvbGx1dGlvblxuXHRcdFx0XHQvLyBQcmV2ZW50IG5ldmVyLWVuZGluZyBsb29wXG5cdFx0XHRcdGlmICggbmFtZSA9PT0gXCJfX3Byb3RvX19cIiB8fCB0YXJnZXQgPT09IGNvcHkgKSB7XG5cdFx0XHRcdFx0Y29udGludWU7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBSZWN1cnNlIGlmIHdlJ3JlIG1lcmdpbmcgcGxhaW4gb2JqZWN0cyBvciBhcnJheXNcblx0XHRcdFx0aWYgKCBkZWVwICYmIGNvcHkgJiYgKCBqUXVlcnkuaXNQbGFpbk9iamVjdCggY29weSApIHx8XG5cdFx0XHRcdFx0KCBjb3B5SXNBcnJheSA9IEFycmF5LmlzQXJyYXkoIGNvcHkgKSApICkgKSB7XG5cdFx0XHRcdFx0c3JjID0gdGFyZ2V0WyBuYW1lIF07XG5cblx0XHRcdFx0XHQvLyBFbnN1cmUgcHJvcGVyIHR5cGUgZm9yIHRoZSBzb3VyY2UgdmFsdWVcblx0XHRcdFx0XHRpZiAoIGNvcHlJc0FycmF5ICYmICFBcnJheS5pc0FycmF5KCBzcmMgKSApIHtcblx0XHRcdFx0XHRcdGNsb25lID0gW107XG5cdFx0XHRcdFx0fSBlbHNlIGlmICggIWNvcHlJc0FycmF5ICYmICFqUXVlcnkuaXNQbGFpbk9iamVjdCggc3JjICkgKSB7XG5cdFx0XHRcdFx0XHRjbG9uZSA9IHt9O1xuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRjbG9uZSA9IHNyYztcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0Y29weUlzQXJyYXkgPSBmYWxzZTtcblxuXHRcdFx0XHRcdC8vIE5ldmVyIG1vdmUgb3JpZ2luYWwgb2JqZWN0cywgY2xvbmUgdGhlbVxuXHRcdFx0XHRcdHRhcmdldFsgbmFtZSBdID0galF1ZXJ5LmV4dGVuZCggZGVlcCwgY2xvbmUsIGNvcHkgKTtcblxuXHRcdFx0XHQvLyBEb24ndCBicmluZyBpbiB1bmRlZmluZWQgdmFsdWVzXG5cdFx0XHRcdH0gZWxzZSBpZiAoIGNvcHkgIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0XHR0YXJnZXRbIG5hbWUgXSA9IGNvcHk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHQvLyBSZXR1cm4gdGhlIG1vZGlmaWVkIG9iamVjdFxuXHRyZXR1cm4gdGFyZ2V0O1xufTtcblxualF1ZXJ5LmV4dGVuZCgge1xuXG5cdC8vIFVuaXF1ZSBmb3IgZWFjaCBjb3B5IG9mIGpRdWVyeSBvbiB0aGUgcGFnZVxuXHRleHBhbmRvOiBcImpRdWVyeVwiICsgKCB2ZXJzaW9uICsgTWF0aC5yYW5kb20oKSApLnJlcGxhY2UoIC9cXEQvZywgXCJcIiApLFxuXG5cdC8vIEFzc3VtZSBqUXVlcnkgaXMgcmVhZHkgd2l0aG91dCB0aGUgcmVhZHkgbW9kdWxlXG5cdGlzUmVhZHk6IHRydWUsXG5cblx0ZXJyb3I6IGZ1bmN0aW9uKCBtc2cgKSB7XG5cdFx0dGhyb3cgbmV3IEVycm9yKCBtc2cgKTtcblx0fSxcblxuXHRub29wOiBmdW5jdGlvbigpIHt9LFxuXG5cdGlzUGxhaW5PYmplY3Q6IGZ1bmN0aW9uKCBvYmogKSB7XG5cdFx0dmFyIHByb3RvLCBDdG9yO1xuXG5cdFx0Ly8gRGV0ZWN0IG9idmlvdXMgbmVnYXRpdmVzXG5cdFx0Ly8gVXNlIHRvU3RyaW5nIGluc3RlYWQgb2YgalF1ZXJ5LnR5cGUgdG8gY2F0Y2ggaG9zdCBvYmplY3RzXG5cdFx0aWYgKCAhb2JqIHx8IHRvU3RyaW5nLmNhbGwoIG9iaiApICE9PSBcIltvYmplY3QgT2JqZWN0XVwiICkge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblxuXHRcdHByb3RvID0gZ2V0UHJvdG8oIG9iaiApO1xuXG5cdFx0Ly8gT2JqZWN0cyB3aXRoIG5vIHByb3RvdHlwZSAoZS5nLiwgYE9iamVjdC5jcmVhdGUoIG51bGwgKWApIGFyZSBwbGFpblxuXHRcdGlmICggIXByb3RvICkge1xuXHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0fVxuXG5cdFx0Ly8gT2JqZWN0cyB3aXRoIHByb3RvdHlwZSBhcmUgcGxhaW4gaWZmIHRoZXkgd2VyZSBjb25zdHJ1Y3RlZCBieSBhIGdsb2JhbCBPYmplY3QgZnVuY3Rpb25cblx0XHRDdG9yID0gaGFzT3duLmNhbGwoIHByb3RvLCBcImNvbnN0cnVjdG9yXCIgKSAmJiBwcm90by5jb25zdHJ1Y3Rvcjtcblx0XHRyZXR1cm4gdHlwZW9mIEN0b3IgPT09IFwiZnVuY3Rpb25cIiAmJiBmblRvU3RyaW5nLmNhbGwoIEN0b3IgKSA9PT0gT2JqZWN0RnVuY3Rpb25TdHJpbmc7XG5cdH0sXG5cblx0aXNFbXB0eU9iamVjdDogZnVuY3Rpb24oIG9iaiApIHtcblx0XHR2YXIgbmFtZTtcblxuXHRcdGZvciAoIG5hbWUgaW4gb2JqICkge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblx0XHRyZXR1cm4gdHJ1ZTtcblx0fSxcblxuXHQvLyBFdmFsdWF0ZXMgYSBzY3JpcHQgaW4gYSBwcm92aWRlZCBjb250ZXh0OyBmYWxscyBiYWNrIHRvIHRoZSBnbG9iYWwgb25lXG5cdC8vIGlmIG5vdCBzcGVjaWZpZWQuXG5cdGdsb2JhbEV2YWw6IGZ1bmN0aW9uKCBjb2RlLCBvcHRpb25zLCBkb2MgKSB7XG5cdFx0RE9NRXZhbCggY29kZSwgeyBub25jZTogb3B0aW9ucyAmJiBvcHRpb25zLm5vbmNlIH0sIGRvYyApO1xuXHR9LFxuXG5cdGVhY2g6IGZ1bmN0aW9uKCBvYmosIGNhbGxiYWNrICkge1xuXHRcdHZhciBsZW5ndGgsIGkgPSAwO1xuXG5cdFx0aWYgKCBpc0FycmF5TGlrZSggb2JqICkgKSB7XG5cdFx0XHRsZW5ndGggPSBvYmoubGVuZ3RoO1xuXHRcdFx0Zm9yICggOyBpIDwgbGVuZ3RoOyBpKysgKSB7XG5cdFx0XHRcdGlmICggY2FsbGJhY2suY2FsbCggb2JqWyBpIF0sIGksIG9ialsgaSBdICkgPT09IGZhbHNlICkge1xuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fSBlbHNlIHtcblx0XHRcdGZvciAoIGkgaW4gb2JqICkge1xuXHRcdFx0XHRpZiAoIGNhbGxiYWNrLmNhbGwoIG9ialsgaSBdLCBpLCBvYmpbIGkgXSApID09PSBmYWxzZSApIHtcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiBvYmo7XG5cdH0sXG5cblx0Ly8gcmVzdWx0cyBpcyBmb3IgaW50ZXJuYWwgdXNhZ2Ugb25seVxuXHRtYWtlQXJyYXk6IGZ1bmN0aW9uKCBhcnIsIHJlc3VsdHMgKSB7XG5cdFx0dmFyIHJldCA9IHJlc3VsdHMgfHwgW107XG5cblx0XHRpZiAoIGFyciAhPSBudWxsICkge1xuXHRcdFx0aWYgKCBpc0FycmF5TGlrZSggT2JqZWN0KCBhcnIgKSApICkge1xuXHRcdFx0XHRqUXVlcnkubWVyZ2UoIHJldCxcblx0XHRcdFx0XHR0eXBlb2YgYXJyID09PSBcInN0cmluZ1wiID9cblx0XHRcdFx0XHRbIGFyciBdIDogYXJyXG5cdFx0XHRcdCk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRwdXNoLmNhbGwoIHJldCwgYXJyICk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHJldDtcblx0fSxcblxuXHRpbkFycmF5OiBmdW5jdGlvbiggZWxlbSwgYXJyLCBpICkge1xuXHRcdHJldHVybiBhcnIgPT0gbnVsbCA/IC0xIDogaW5kZXhPZi5jYWxsKCBhcnIsIGVsZW0sIGkgKTtcblx0fSxcblxuXHQvLyBTdXBwb3J0OiBBbmRyb2lkIDw9NC4wIG9ubHksIFBoYW50b21KUyAxIG9ubHlcblx0Ly8gcHVzaC5hcHBseShfLCBhcnJheWxpa2UpIHRocm93cyBvbiBhbmNpZW50IFdlYktpdFxuXHRtZXJnZTogZnVuY3Rpb24oIGZpcnN0LCBzZWNvbmQgKSB7XG5cdFx0dmFyIGxlbiA9ICtzZWNvbmQubGVuZ3RoLFxuXHRcdFx0aiA9IDAsXG5cdFx0XHRpID0gZmlyc3QubGVuZ3RoO1xuXG5cdFx0Zm9yICggOyBqIDwgbGVuOyBqKysgKSB7XG5cdFx0XHRmaXJzdFsgaSsrIF0gPSBzZWNvbmRbIGogXTtcblx0XHR9XG5cblx0XHRmaXJzdC5sZW5ndGggPSBpO1xuXG5cdFx0cmV0dXJuIGZpcnN0O1xuXHR9LFxuXG5cdGdyZXA6IGZ1bmN0aW9uKCBlbGVtcywgY2FsbGJhY2ssIGludmVydCApIHtcblx0XHR2YXIgY2FsbGJhY2tJbnZlcnNlLFxuXHRcdFx0bWF0Y2hlcyA9IFtdLFxuXHRcdFx0aSA9IDAsXG5cdFx0XHRsZW5ndGggPSBlbGVtcy5sZW5ndGgsXG5cdFx0XHRjYWxsYmFja0V4cGVjdCA9ICFpbnZlcnQ7XG5cblx0XHQvLyBHbyB0aHJvdWdoIHRoZSBhcnJheSwgb25seSBzYXZpbmcgdGhlIGl0ZW1zXG5cdFx0Ly8gdGhhdCBwYXNzIHRoZSB2YWxpZGF0b3IgZnVuY3Rpb25cblx0XHRmb3IgKCA7IGkgPCBsZW5ndGg7IGkrKyApIHtcblx0XHRcdGNhbGxiYWNrSW52ZXJzZSA9ICFjYWxsYmFjayggZWxlbXNbIGkgXSwgaSApO1xuXHRcdFx0aWYgKCBjYWxsYmFja0ludmVyc2UgIT09IGNhbGxiYWNrRXhwZWN0ICkge1xuXHRcdFx0XHRtYXRjaGVzLnB1c2goIGVsZW1zWyBpIF0gKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gbWF0Y2hlcztcblx0fSxcblxuXHQvLyBhcmcgaXMgZm9yIGludGVybmFsIHVzYWdlIG9ubHlcblx0bWFwOiBmdW5jdGlvbiggZWxlbXMsIGNhbGxiYWNrLCBhcmcgKSB7XG5cdFx0dmFyIGxlbmd0aCwgdmFsdWUsXG5cdFx0XHRpID0gMCxcblx0XHRcdHJldCA9IFtdO1xuXG5cdFx0Ly8gR28gdGhyb3VnaCB0aGUgYXJyYXksIHRyYW5zbGF0aW5nIGVhY2ggb2YgdGhlIGl0ZW1zIHRvIHRoZWlyIG5ldyB2YWx1ZXNcblx0XHRpZiAoIGlzQXJyYXlMaWtlKCBlbGVtcyApICkge1xuXHRcdFx0bGVuZ3RoID0gZWxlbXMubGVuZ3RoO1xuXHRcdFx0Zm9yICggOyBpIDwgbGVuZ3RoOyBpKysgKSB7XG5cdFx0XHRcdHZhbHVlID0gY2FsbGJhY2soIGVsZW1zWyBpIF0sIGksIGFyZyApO1xuXG5cdFx0XHRcdGlmICggdmFsdWUgIT0gbnVsbCApIHtcblx0XHRcdFx0XHRyZXQucHVzaCggdmFsdWUgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0Ly8gR28gdGhyb3VnaCBldmVyeSBrZXkgb24gdGhlIG9iamVjdCxcblx0XHR9IGVsc2Uge1xuXHRcdFx0Zm9yICggaSBpbiBlbGVtcyApIHtcblx0XHRcdFx0dmFsdWUgPSBjYWxsYmFjayggZWxlbXNbIGkgXSwgaSwgYXJnICk7XG5cblx0XHRcdFx0aWYgKCB2YWx1ZSAhPSBudWxsICkge1xuXHRcdFx0XHRcdHJldC5wdXNoKCB2YWx1ZSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gRmxhdHRlbiBhbnkgbmVzdGVkIGFycmF5c1xuXHRcdHJldHVybiBmbGF0KCByZXQgKTtcblx0fSxcblxuXHQvLyBBIGdsb2JhbCBHVUlEIGNvdW50ZXIgZm9yIG9iamVjdHNcblx0Z3VpZDogMSxcblxuXHQvLyBqUXVlcnkuc3VwcG9ydCBpcyBub3QgdXNlZCBpbiBDb3JlIGJ1dCBvdGhlciBwcm9qZWN0cyBhdHRhY2ggdGhlaXJcblx0Ly8gcHJvcGVydGllcyB0byBpdCBzbyBpdCBuZWVkcyB0byBleGlzdC5cblx0c3VwcG9ydDogc3VwcG9ydFxufSApO1xuXG5pZiAoIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiApIHtcblx0alF1ZXJ5LmZuWyBTeW1ib2wuaXRlcmF0b3IgXSA9IGFyclsgU3ltYm9sLml0ZXJhdG9yIF07XG59XG5cbi8vIFBvcHVsYXRlIHRoZSBjbGFzczJ0eXBlIG1hcFxualF1ZXJ5LmVhY2goIFwiQm9vbGVhbiBOdW1iZXIgU3RyaW5nIEZ1bmN0aW9uIEFycmF5IERhdGUgUmVnRXhwIE9iamVjdCBFcnJvciBTeW1ib2xcIi5zcGxpdCggXCIgXCIgKSxcbmZ1bmN0aW9uKCBfaSwgbmFtZSApIHtcblx0Y2xhc3MydHlwZVsgXCJbb2JqZWN0IFwiICsgbmFtZSArIFwiXVwiIF0gPSBuYW1lLnRvTG93ZXJDYXNlKCk7XG59ICk7XG5cbmZ1bmN0aW9uIGlzQXJyYXlMaWtlKCBvYmogKSB7XG5cblx0Ly8gU3VwcG9ydDogcmVhbCBpT1MgOC4yIG9ubHkgKG5vdCByZXByb2R1Y2libGUgaW4gc2ltdWxhdG9yKVxuXHQvLyBgaW5gIGNoZWNrIHVzZWQgdG8gcHJldmVudCBKSVQgZXJyb3IgKGdoLTIxNDUpXG5cdC8vIGhhc093biBpc24ndCB1c2VkIGhlcmUgZHVlIHRvIGZhbHNlIG5lZ2F0aXZlc1xuXHQvLyByZWdhcmRpbmcgTm9kZWxpc3QgbGVuZ3RoIGluIElFXG5cdHZhciBsZW5ndGggPSAhIW9iaiAmJiBcImxlbmd0aFwiIGluIG9iaiAmJiBvYmoubGVuZ3RoLFxuXHRcdHR5cGUgPSB0b1R5cGUoIG9iaiApO1xuXG5cdGlmICggaXNGdW5jdGlvbiggb2JqICkgfHwgaXNXaW5kb3coIG9iaiApICkge1xuXHRcdHJldHVybiBmYWxzZTtcblx0fVxuXG5cdHJldHVybiB0eXBlID09PSBcImFycmF5XCIgfHwgbGVuZ3RoID09PSAwIHx8XG5cdFx0dHlwZW9mIGxlbmd0aCA9PT0gXCJudW1iZXJcIiAmJiBsZW5ndGggPiAwICYmICggbGVuZ3RoIC0gMSApIGluIG9iajtcbn1cbnZhciBTaXp6bGUgPVxuLyohXG4gKiBTaXp6bGUgQ1NTIFNlbGVjdG9yIEVuZ2luZSB2Mi4zLjVcbiAqIGh0dHBzOi8vc2l6emxlanMuY29tL1xuICpcbiAqIENvcHlyaWdodCBKUyBGb3VuZGF0aW9uIGFuZCBvdGhlciBjb250cmlidXRvcnNcbiAqIFJlbGVhc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZVxuICogaHR0cHM6Ly9qcy5mb3VuZGF0aW9uL1xuICpcbiAqIERhdGU6IDIwMjAtMDMtMTRcbiAqL1xuKCBmdW5jdGlvbiggd2luZG93ICkge1xudmFyIGksXG5cdHN1cHBvcnQsXG5cdEV4cHIsXG5cdGdldFRleHQsXG5cdGlzWE1MLFxuXHR0b2tlbml6ZSxcblx0Y29tcGlsZSxcblx0c2VsZWN0LFxuXHRvdXRlcm1vc3RDb250ZXh0LFxuXHRzb3J0SW5wdXQsXG5cdGhhc0R1cGxpY2F0ZSxcblxuXHQvLyBMb2NhbCBkb2N1bWVudCB2YXJzXG5cdHNldERvY3VtZW50LFxuXHRkb2N1bWVudCxcblx0ZG9jRWxlbSxcblx0ZG9jdW1lbnRJc0hUTUwsXG5cdHJidWdneVFTQSxcblx0cmJ1Z2d5TWF0Y2hlcyxcblx0bWF0Y2hlcyxcblx0Y29udGFpbnMsXG5cblx0Ly8gSW5zdGFuY2Utc3BlY2lmaWMgZGF0YVxuXHRleHBhbmRvID0gXCJzaXp6bGVcIiArIDEgKiBuZXcgRGF0ZSgpLFxuXHRwcmVmZXJyZWREb2MgPSB3aW5kb3cuZG9jdW1lbnQsXG5cdGRpcnJ1bnMgPSAwLFxuXHRkb25lID0gMCxcblx0Y2xhc3NDYWNoZSA9IGNyZWF0ZUNhY2hlKCksXG5cdHRva2VuQ2FjaGUgPSBjcmVhdGVDYWNoZSgpLFxuXHRjb21waWxlckNhY2hlID0gY3JlYXRlQ2FjaGUoKSxcblx0bm9ubmF0aXZlU2VsZWN0b3JDYWNoZSA9IGNyZWF0ZUNhY2hlKCksXG5cdHNvcnRPcmRlciA9IGZ1bmN0aW9uKCBhLCBiICkge1xuXHRcdGlmICggYSA9PT0gYiApIHtcblx0XHRcdGhhc0R1cGxpY2F0ZSA9IHRydWU7XG5cdFx0fVxuXHRcdHJldHVybiAwO1xuXHR9LFxuXG5cdC8vIEluc3RhbmNlIG1ldGhvZHNcblx0aGFzT3duID0gKCB7fSApLmhhc093blByb3BlcnR5LFxuXHRhcnIgPSBbXSxcblx0cG9wID0gYXJyLnBvcCxcblx0cHVzaE5hdGl2ZSA9IGFyci5wdXNoLFxuXHRwdXNoID0gYXJyLnB1c2gsXG5cdHNsaWNlID0gYXJyLnNsaWNlLFxuXG5cdC8vIFVzZSBhIHN0cmlwcGVkLWRvd24gaW5kZXhPZiBhcyBpdCdzIGZhc3RlciB0aGFuIG5hdGl2ZVxuXHQvLyBodHRwczovL2pzcGVyZi5jb20vdGhvci1pbmRleG9mLXZzLWZvci81XG5cdGluZGV4T2YgPSBmdW5jdGlvbiggbGlzdCwgZWxlbSApIHtcblx0XHR2YXIgaSA9IDAsXG5cdFx0XHRsZW4gPSBsaXN0Lmxlbmd0aDtcblx0XHRmb3IgKCA7IGkgPCBsZW47IGkrKyApIHtcblx0XHRcdGlmICggbGlzdFsgaSBdID09PSBlbGVtICkge1xuXHRcdFx0XHRyZXR1cm4gaTtcblx0XHRcdH1cblx0XHR9XG5cdFx0cmV0dXJuIC0xO1xuXHR9LFxuXG5cdGJvb2xlYW5zID0gXCJjaGVja2VkfHNlbGVjdGVkfGFzeW5jfGF1dG9mb2N1c3xhdXRvcGxheXxjb250cm9sc3xkZWZlcnxkaXNhYmxlZHxoaWRkZW58XCIgK1xuXHRcdFwiaXNtYXB8bG9vcHxtdWx0aXBsZXxvcGVufHJlYWRvbmx5fHJlcXVpcmVkfHNjb3BlZFwiLFxuXG5cdC8vIFJlZ3VsYXIgZXhwcmVzc2lvbnNcblxuXHQvLyBodHRwOi8vd3d3LnczLm9yZy9UUi9jc3MzLXNlbGVjdG9ycy8jd2hpdGVzcGFjZVxuXHR3aGl0ZXNwYWNlID0gXCJbXFxcXHgyMFxcXFx0XFxcXHJcXFxcblxcXFxmXVwiLFxuXG5cdC8vIGh0dHBzOi8vd3d3LnczLm9yZy9UUi9jc3Mtc3ludGF4LTMvI2lkZW50LXRva2VuLWRpYWdyYW1cblx0aWRlbnRpZmllciA9IFwiKD86XFxcXFxcXFxbXFxcXGRhLWZBLUZdezEsNn1cIiArIHdoaXRlc3BhY2UgK1xuXHRcdFwiP3xcXFxcXFxcXFteXFxcXHJcXFxcblxcXFxmXXxbXFxcXHctXXxbXlxcMC1cXFxceDdmXSkrXCIsXG5cblx0Ly8gQXR0cmlidXRlIHNlbGVjdG9yczogaHR0cDovL3d3dy53My5vcmcvVFIvc2VsZWN0b3JzLyNhdHRyaWJ1dGUtc2VsZWN0b3JzXG5cdGF0dHJpYnV0ZXMgPSBcIlxcXFxbXCIgKyB3aGl0ZXNwYWNlICsgXCIqKFwiICsgaWRlbnRpZmllciArIFwiKSg/OlwiICsgd2hpdGVzcGFjZSArXG5cblx0XHQvLyBPcGVyYXRvciAoY2FwdHVyZSAyKVxuXHRcdFwiKihbKl4kfCF+XT89KVwiICsgd2hpdGVzcGFjZSArXG5cblx0XHQvLyBcIkF0dHJpYnV0ZSB2YWx1ZXMgbXVzdCBiZSBDU1MgaWRlbnRpZmllcnMgW2NhcHR1cmUgNV1cblx0XHQvLyBvciBzdHJpbmdzIFtjYXB0dXJlIDMgb3IgY2FwdHVyZSA0XVwiXG5cdFx0XCIqKD86JygoPzpcXFxcXFxcXC58W15cXFxcXFxcXCddKSopJ3xcXFwiKCg/OlxcXFxcXFxcLnxbXlxcXFxcXFxcXFxcIl0pKilcXFwifChcIiArIGlkZW50aWZpZXIgKyBcIikpfClcIiArXG5cdFx0d2hpdGVzcGFjZSArIFwiKlxcXFxdXCIsXG5cblx0cHNldWRvcyA9IFwiOihcIiArIGlkZW50aWZpZXIgKyBcIikoPzpcXFxcKChcIiArXG5cblx0XHQvLyBUbyByZWR1Y2UgdGhlIG51bWJlciBvZiBzZWxlY3RvcnMgbmVlZGluZyB0b2tlbml6ZSBpbiB0aGUgcHJlRmlsdGVyLCBwcmVmZXIgYXJndW1lbnRzOlxuXHRcdC8vIDEuIHF1b3RlZCAoY2FwdHVyZSAzOyBjYXB0dXJlIDQgb3IgY2FwdHVyZSA1KVxuXHRcdFwiKCcoKD86XFxcXFxcXFwufFteXFxcXFxcXFwnXSkqKSd8XFxcIigoPzpcXFxcXFxcXC58W15cXFxcXFxcXFxcXCJdKSopXFxcIil8XCIgK1xuXG5cdFx0Ly8gMi4gc2ltcGxlIChjYXB0dXJlIDYpXG5cdFx0XCIoKD86XFxcXFxcXFwufFteXFxcXFxcXFwoKVtcXFxcXV18XCIgKyBhdHRyaWJ1dGVzICsgXCIpKil8XCIgK1xuXG5cdFx0Ly8gMy4gYW55dGhpbmcgZWxzZSAoY2FwdHVyZSAyKVxuXHRcdFwiLipcIiArXG5cdFx0XCIpXFxcXCl8KVwiLFxuXG5cdC8vIExlYWRpbmcgYW5kIG5vbi1lc2NhcGVkIHRyYWlsaW5nIHdoaXRlc3BhY2UsIGNhcHR1cmluZyBzb21lIG5vbi13aGl0ZXNwYWNlIGNoYXJhY3RlcnMgcHJlY2VkaW5nIHRoZSBsYXR0ZXJcblx0cndoaXRlc3BhY2UgPSBuZXcgUmVnRXhwKCB3aGl0ZXNwYWNlICsgXCIrXCIsIFwiZ1wiICksXG5cdHJ0cmltID0gbmV3IFJlZ0V4cCggXCJeXCIgKyB3aGl0ZXNwYWNlICsgXCIrfCgoPzpefFteXFxcXFxcXFxdKSg/OlxcXFxcXFxcLikqKVwiICtcblx0XHR3aGl0ZXNwYWNlICsgXCIrJFwiLCBcImdcIiApLFxuXG5cdHJjb21tYSA9IG5ldyBSZWdFeHAoIFwiXlwiICsgd2hpdGVzcGFjZSArIFwiKixcIiArIHdoaXRlc3BhY2UgKyBcIipcIiApLFxuXHRyY29tYmluYXRvcnMgPSBuZXcgUmVnRXhwKCBcIl5cIiArIHdoaXRlc3BhY2UgKyBcIiooWz4rfl18XCIgKyB3aGl0ZXNwYWNlICsgXCIpXCIgKyB3aGl0ZXNwYWNlICtcblx0XHRcIipcIiApLFxuXHRyZGVzY2VuZCA9IG5ldyBSZWdFeHAoIHdoaXRlc3BhY2UgKyBcInw+XCIgKSxcblxuXHRycHNldWRvID0gbmV3IFJlZ0V4cCggcHNldWRvcyApLFxuXHRyaWRlbnRpZmllciA9IG5ldyBSZWdFeHAoIFwiXlwiICsgaWRlbnRpZmllciArIFwiJFwiICksXG5cblx0bWF0Y2hFeHByID0ge1xuXHRcdFwiSURcIjogbmV3IFJlZ0V4cCggXCJeIyhcIiArIGlkZW50aWZpZXIgKyBcIilcIiApLFxuXHRcdFwiQ0xBU1NcIjogbmV3IFJlZ0V4cCggXCJeXFxcXC4oXCIgKyBpZGVudGlmaWVyICsgXCIpXCIgKSxcblx0XHRcIlRBR1wiOiBuZXcgUmVnRXhwKCBcIl4oXCIgKyBpZGVudGlmaWVyICsgXCJ8WypdKVwiICksXG5cdFx0XCJBVFRSXCI6IG5ldyBSZWdFeHAoIFwiXlwiICsgYXR0cmlidXRlcyApLFxuXHRcdFwiUFNFVURPXCI6IG5ldyBSZWdFeHAoIFwiXlwiICsgcHNldWRvcyApLFxuXHRcdFwiQ0hJTERcIjogbmV3IFJlZ0V4cCggXCJeOihvbmx5fGZpcnN0fGxhc3R8bnRofG50aC1sYXN0KS0oY2hpbGR8b2YtdHlwZSkoPzpcXFxcKFwiICtcblx0XHRcdHdoaXRlc3BhY2UgKyBcIiooZXZlbnxvZGR8KChbKy1dfCkoXFxcXGQqKW58KVwiICsgd2hpdGVzcGFjZSArIFwiKig/OihbKy1dfClcIiArXG5cdFx0XHR3aGl0ZXNwYWNlICsgXCIqKFxcXFxkKyl8KSlcIiArIHdoaXRlc3BhY2UgKyBcIipcXFxcKXwpXCIsIFwiaVwiICksXG5cdFx0XCJib29sXCI6IG5ldyBSZWdFeHAoIFwiXig/OlwiICsgYm9vbGVhbnMgKyBcIikkXCIsIFwiaVwiICksXG5cblx0XHQvLyBGb3IgdXNlIGluIGxpYnJhcmllcyBpbXBsZW1lbnRpbmcgLmlzKClcblx0XHQvLyBXZSB1c2UgdGhpcyBmb3IgUE9TIG1hdGNoaW5nIGluIGBzZWxlY3RgXG5cdFx0XCJuZWVkc0NvbnRleHRcIjogbmV3IFJlZ0V4cCggXCJeXCIgKyB3aGl0ZXNwYWNlICtcblx0XHRcdFwiKls+K35dfDooZXZlbnxvZGR8ZXF8Z3R8bHR8bnRofGZpcnN0fGxhc3QpKD86XFxcXChcIiArIHdoaXRlc3BhY2UgK1xuXHRcdFx0XCIqKCg/Oi1cXFxcZCk/XFxcXGQqKVwiICsgd2hpdGVzcGFjZSArIFwiKlxcXFwpfCkoPz1bXi1dfCQpXCIsIFwiaVwiIClcblx0fSxcblxuXHRyaHRtbCA9IC9IVE1MJC9pLFxuXHRyaW5wdXRzID0gL14oPzppbnB1dHxzZWxlY3R8dGV4dGFyZWF8YnV0dG9uKSQvaSxcblx0cmhlYWRlciA9IC9eaFxcZCQvaSxcblxuXHRybmF0aXZlID0gL15bXntdK1xce1xccypcXFtuYXRpdmUgXFx3LyxcblxuXHQvLyBFYXNpbHktcGFyc2VhYmxlL3JldHJpZXZhYmxlIElEIG9yIFRBRyBvciBDTEFTUyBzZWxlY3RvcnNcblx0cnF1aWNrRXhwciA9IC9eKD86IyhbXFx3LV0rKXwoXFx3Kyl8XFwuKFtcXHctXSspKSQvLFxuXG5cdHJzaWJsaW5nID0gL1srfl0vLFxuXG5cdC8vIENTUyBlc2NhcGVzXG5cdC8vIGh0dHA6Ly93d3cudzMub3JnL1RSL0NTUzIxL3N5bmRhdGEuaHRtbCNlc2NhcGVkLWNoYXJhY3RlcnNcblx0cnVuZXNjYXBlID0gbmV3IFJlZ0V4cCggXCJcXFxcXFxcXFtcXFxcZGEtZkEtRl17MSw2fVwiICsgd2hpdGVzcGFjZSArIFwiP3xcXFxcXFxcXChbXlxcXFxyXFxcXG5cXFxcZl0pXCIsIFwiZ1wiICksXG5cdGZ1bmVzY2FwZSA9IGZ1bmN0aW9uKCBlc2NhcGUsIG5vbkhleCApIHtcblx0XHR2YXIgaGlnaCA9IFwiMHhcIiArIGVzY2FwZS5zbGljZSggMSApIC0gMHgxMDAwMDtcblxuXHRcdHJldHVybiBub25IZXggP1xuXG5cdFx0XHQvLyBTdHJpcCB0aGUgYmFja3NsYXNoIHByZWZpeCBmcm9tIGEgbm9uLWhleCBlc2NhcGUgc2VxdWVuY2Vcblx0XHRcdG5vbkhleCA6XG5cblx0XHRcdC8vIFJlcGxhY2UgYSBoZXhhZGVjaW1hbCBlc2NhcGUgc2VxdWVuY2Ugd2l0aCB0aGUgZW5jb2RlZCBVbmljb2RlIGNvZGUgcG9pbnRcblx0XHRcdC8vIFN1cHBvcnQ6IElFIDw9MTErXG5cdFx0XHQvLyBGb3IgdmFsdWVzIG91dHNpZGUgdGhlIEJhc2ljIE11bHRpbGluZ3VhbCBQbGFuZSAoQk1QKSwgbWFudWFsbHkgY29uc3RydWN0IGFcblx0XHRcdC8vIHN1cnJvZ2F0ZSBwYWlyXG5cdFx0XHRoaWdoIDwgMCA/XG5cdFx0XHRcdFN0cmluZy5mcm9tQ2hhckNvZGUoIGhpZ2ggKyAweDEwMDAwICkgOlxuXHRcdFx0XHRTdHJpbmcuZnJvbUNoYXJDb2RlKCBoaWdoID4+IDEwIHwgMHhEODAwLCBoaWdoICYgMHgzRkYgfCAweERDMDAgKTtcblx0fSxcblxuXHQvLyBDU1Mgc3RyaW5nL2lkZW50aWZpZXIgc2VyaWFsaXphdGlvblxuXHQvLyBodHRwczovL2RyYWZ0cy5jc3N3Zy5vcmcvY3Nzb20vI2NvbW1vbi1zZXJpYWxpemluZy1pZGlvbXNcblx0cmNzc2VzY2FwZSA9IC8oW1xcMC1cXHgxZlxceDdmXXxeLT9cXGQpfF4tJHxbXlxcMC1cXHgxZlxceDdmLVxcdUZGRkZcXHctXS9nLFxuXHRmY3NzZXNjYXBlID0gZnVuY3Rpb24oIGNoLCBhc0NvZGVQb2ludCApIHtcblx0XHRpZiAoIGFzQ29kZVBvaW50ICkge1xuXG5cdFx0XHQvLyBVKzAwMDAgTlVMTCBiZWNvbWVzIFUrRkZGRCBSRVBMQUNFTUVOVCBDSEFSQUNURVJcblx0XHRcdGlmICggY2ggPT09IFwiXFwwXCIgKSB7XG5cdFx0XHRcdHJldHVybiBcIlxcdUZGRkRcIjtcblx0XHRcdH1cblxuXHRcdFx0Ly8gQ29udHJvbCBjaGFyYWN0ZXJzIGFuZCAoZGVwZW5kZW50IHVwb24gcG9zaXRpb24pIG51bWJlcnMgZ2V0IGVzY2FwZWQgYXMgY29kZSBwb2ludHNcblx0XHRcdHJldHVybiBjaC5zbGljZSggMCwgLTEgKSArIFwiXFxcXFwiICtcblx0XHRcdFx0Y2guY2hhckNvZGVBdCggY2gubGVuZ3RoIC0gMSApLnRvU3RyaW5nKCAxNiApICsgXCIgXCI7XG5cdFx0fVxuXG5cdFx0Ly8gT3RoZXIgcG90ZW50aWFsbHktc3BlY2lhbCBBU0NJSSBjaGFyYWN0ZXJzIGdldCBiYWNrc2xhc2gtZXNjYXBlZFxuXHRcdHJldHVybiBcIlxcXFxcIiArIGNoO1xuXHR9LFxuXG5cdC8vIFVzZWQgZm9yIGlmcmFtZXNcblx0Ly8gU2VlIHNldERvY3VtZW50KClcblx0Ly8gUmVtb3ZpbmcgdGhlIGZ1bmN0aW9uIHdyYXBwZXIgY2F1c2VzIGEgXCJQZXJtaXNzaW9uIERlbmllZFwiXG5cdC8vIGVycm9yIGluIElFXG5cdHVubG9hZEhhbmRsZXIgPSBmdW5jdGlvbigpIHtcblx0XHRzZXREb2N1bWVudCgpO1xuXHR9LFxuXG5cdGluRGlzYWJsZWRGaWVsZHNldCA9IGFkZENvbWJpbmF0b3IoXG5cdFx0ZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gZWxlbS5kaXNhYmxlZCA9PT0gdHJ1ZSAmJiBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgPT09IFwiZmllbGRzZXRcIjtcblx0XHR9LFxuXHRcdHsgZGlyOiBcInBhcmVudE5vZGVcIiwgbmV4dDogXCJsZWdlbmRcIiB9XG5cdCk7XG5cbi8vIE9wdGltaXplIGZvciBwdXNoLmFwcGx5KCBfLCBOb2RlTGlzdCApXG50cnkge1xuXHRwdXNoLmFwcGx5KFxuXHRcdCggYXJyID0gc2xpY2UuY2FsbCggcHJlZmVycmVkRG9jLmNoaWxkTm9kZXMgKSApLFxuXHRcdHByZWZlcnJlZERvYy5jaGlsZE5vZGVzXG5cdCk7XG5cblx0Ly8gU3VwcG9ydDogQW5kcm9pZDw0LjBcblx0Ly8gRGV0ZWN0IHNpbGVudGx5IGZhaWxpbmcgcHVzaC5hcHBseVxuXHQvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW51c2VkLWV4cHJlc3Npb25zXG5cdGFyclsgcHJlZmVycmVkRG9jLmNoaWxkTm9kZXMubGVuZ3RoIF0ubm9kZVR5cGU7XG59IGNhdGNoICggZSApIHtcblx0cHVzaCA9IHsgYXBwbHk6IGFyci5sZW5ndGggP1xuXG5cdFx0Ly8gTGV2ZXJhZ2Ugc2xpY2UgaWYgcG9zc2libGVcblx0XHRmdW5jdGlvbiggdGFyZ2V0LCBlbHMgKSB7XG5cdFx0XHRwdXNoTmF0aXZlLmFwcGx5KCB0YXJnZXQsIHNsaWNlLmNhbGwoIGVscyApICk7XG5cdFx0fSA6XG5cblx0XHQvLyBTdXBwb3J0OiBJRTw5XG5cdFx0Ly8gT3RoZXJ3aXNlIGFwcGVuZCBkaXJlY3RseVxuXHRcdGZ1bmN0aW9uKCB0YXJnZXQsIGVscyApIHtcblx0XHRcdHZhciBqID0gdGFyZ2V0Lmxlbmd0aCxcblx0XHRcdFx0aSA9IDA7XG5cblx0XHRcdC8vIENhbid0IHRydXN0IE5vZGVMaXN0Lmxlbmd0aFxuXHRcdFx0d2hpbGUgKCAoIHRhcmdldFsgaisrIF0gPSBlbHNbIGkrKyBdICkgKSB7fVxuXHRcdFx0dGFyZ2V0Lmxlbmd0aCA9IGogLSAxO1xuXHRcdH1cblx0fTtcbn1cblxuZnVuY3Rpb24gU2l6emxlKCBzZWxlY3RvciwgY29udGV4dCwgcmVzdWx0cywgc2VlZCApIHtcblx0dmFyIG0sIGksIGVsZW0sIG5pZCwgbWF0Y2gsIGdyb3VwcywgbmV3U2VsZWN0b3IsXG5cdFx0bmV3Q29udGV4dCA9IGNvbnRleHQgJiYgY29udGV4dC5vd25lckRvY3VtZW50LFxuXG5cdFx0Ly8gbm9kZVR5cGUgZGVmYXVsdHMgdG8gOSwgc2luY2UgY29udGV4dCBkZWZhdWx0cyB0byBkb2N1bWVudFxuXHRcdG5vZGVUeXBlID0gY29udGV4dCA/IGNvbnRleHQubm9kZVR5cGUgOiA5O1xuXG5cdHJlc3VsdHMgPSByZXN1bHRzIHx8IFtdO1xuXG5cdC8vIFJldHVybiBlYXJseSBmcm9tIGNhbGxzIHdpdGggaW52YWxpZCBzZWxlY3RvciBvciBjb250ZXh0XG5cdGlmICggdHlwZW9mIHNlbGVjdG9yICE9PSBcInN0cmluZ1wiIHx8ICFzZWxlY3RvciB8fFxuXHRcdG5vZGVUeXBlICE9PSAxICYmIG5vZGVUeXBlICE9PSA5ICYmIG5vZGVUeXBlICE9PSAxMSApIHtcblxuXHRcdHJldHVybiByZXN1bHRzO1xuXHR9XG5cblx0Ly8gVHJ5IHRvIHNob3J0Y3V0IGZpbmQgb3BlcmF0aW9ucyAoYXMgb3Bwb3NlZCB0byBmaWx0ZXJzKSBpbiBIVE1MIGRvY3VtZW50c1xuXHRpZiAoICFzZWVkICkge1xuXHRcdHNldERvY3VtZW50KCBjb250ZXh0ICk7XG5cdFx0Y29udGV4dCA9IGNvbnRleHQgfHwgZG9jdW1lbnQ7XG5cblx0XHRpZiAoIGRvY3VtZW50SXNIVE1MICkge1xuXG5cdFx0XHQvLyBJZiB0aGUgc2VsZWN0b3IgaXMgc3VmZmljaWVudGx5IHNpbXBsZSwgdHJ5IHVzaW5nIGEgXCJnZXQqQnkqXCIgRE9NIG1ldGhvZFxuXHRcdFx0Ly8gKGV4Y2VwdGluZyBEb2N1bWVudEZyYWdtZW50IGNvbnRleHQsIHdoZXJlIHRoZSBtZXRob2RzIGRvbid0IGV4aXN0KVxuXHRcdFx0aWYgKCBub2RlVHlwZSAhPT0gMTEgJiYgKCBtYXRjaCA9IHJxdWlja0V4cHIuZXhlYyggc2VsZWN0b3IgKSApICkge1xuXG5cdFx0XHRcdC8vIElEIHNlbGVjdG9yXG5cdFx0XHRcdGlmICggKCBtID0gbWF0Y2hbIDEgXSApICkge1xuXG5cdFx0XHRcdFx0Ly8gRG9jdW1lbnQgY29udGV4dFxuXHRcdFx0XHRcdGlmICggbm9kZVR5cGUgPT09IDkgKSB7XG5cdFx0XHRcdFx0XHRpZiAoICggZWxlbSA9IGNvbnRleHQuZ2V0RWxlbWVudEJ5SWQoIG0gKSApICkge1xuXG5cdFx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFLCBPcGVyYSwgV2Via2l0XG5cdFx0XHRcdFx0XHRcdC8vIFRPRE86IGlkZW50aWZ5IHZlcnNpb25zXG5cdFx0XHRcdFx0XHRcdC8vIGdldEVsZW1lbnRCeUlkIGNhbiBtYXRjaCBlbGVtZW50cyBieSBuYW1lIGluc3RlYWQgb2YgSURcblx0XHRcdFx0XHRcdFx0aWYgKCBlbGVtLmlkID09PSBtICkge1xuXHRcdFx0XHRcdFx0XHRcdHJlc3VsdHMucHVzaCggZWxlbSApO1xuXHRcdFx0XHRcdFx0XHRcdHJldHVybiByZXN1bHRzO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4gcmVzdWx0cztcblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8vIEVsZW1lbnQgY29udGV4dFxuXHRcdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFLCBPcGVyYSwgV2Via2l0XG5cdFx0XHRcdFx0XHQvLyBUT0RPOiBpZGVudGlmeSB2ZXJzaW9uc1xuXHRcdFx0XHRcdFx0Ly8gZ2V0RWxlbWVudEJ5SWQgY2FuIG1hdGNoIGVsZW1lbnRzIGJ5IG5hbWUgaW5zdGVhZCBvZiBJRFxuXHRcdFx0XHRcdFx0aWYgKCBuZXdDb250ZXh0ICYmICggZWxlbSA9IG5ld0NvbnRleHQuZ2V0RWxlbWVudEJ5SWQoIG0gKSApICYmXG5cdFx0XHRcdFx0XHRcdGNvbnRhaW5zKCBjb250ZXh0LCBlbGVtICkgJiZcblx0XHRcdFx0XHRcdFx0ZWxlbS5pZCA9PT0gbSApIHtcblxuXHRcdFx0XHRcdFx0XHRyZXN1bHRzLnB1c2goIGVsZW0gKTtcblx0XHRcdFx0XHRcdFx0cmV0dXJuIHJlc3VsdHM7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIFR5cGUgc2VsZWN0b3Jcblx0XHRcdFx0fSBlbHNlIGlmICggbWF0Y2hbIDIgXSApIHtcblx0XHRcdFx0XHRwdXNoLmFwcGx5KCByZXN1bHRzLCBjb250ZXh0LmdldEVsZW1lbnRzQnlUYWdOYW1lKCBzZWxlY3RvciApICk7XG5cdFx0XHRcdFx0cmV0dXJuIHJlc3VsdHM7XG5cblx0XHRcdFx0Ly8gQ2xhc3Mgc2VsZWN0b3Jcblx0XHRcdFx0fSBlbHNlIGlmICggKCBtID0gbWF0Y2hbIDMgXSApICYmIHN1cHBvcnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSAmJlxuXHRcdFx0XHRcdGNvbnRleHQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSApIHtcblxuXHRcdFx0XHRcdHB1c2guYXBwbHkoIHJlc3VsdHMsIGNvbnRleHQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSggbSApICk7XG5cdFx0XHRcdFx0cmV0dXJuIHJlc3VsdHM7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gVGFrZSBhZHZhbnRhZ2Ugb2YgcXVlcnlTZWxlY3RvckFsbFxuXHRcdFx0aWYgKCBzdXBwb3J0LnFzYSAmJlxuXHRcdFx0XHQhbm9ubmF0aXZlU2VsZWN0b3JDYWNoZVsgc2VsZWN0b3IgKyBcIiBcIiBdICYmXG5cdFx0XHRcdCggIXJidWdneVFTQSB8fCAhcmJ1Z2d5UVNBLnRlc3QoIHNlbGVjdG9yICkgKSAmJlxuXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDggb25seVxuXHRcdFx0XHQvLyBFeGNsdWRlIG9iamVjdCBlbGVtZW50c1xuXHRcdFx0XHQoIG5vZGVUeXBlICE9PSAxIHx8IGNvbnRleHQubm9kZU5hbWUudG9Mb3dlckNhc2UoKSAhPT0gXCJvYmplY3RcIiApICkge1xuXG5cdFx0XHRcdG5ld1NlbGVjdG9yID0gc2VsZWN0b3I7XG5cdFx0XHRcdG5ld0NvbnRleHQgPSBjb250ZXh0O1xuXG5cdFx0XHRcdC8vIHFTQSBjb25zaWRlcnMgZWxlbWVudHMgb3V0c2lkZSBhIHNjb3Bpbmcgcm9vdCB3aGVuIGV2YWx1YXRpbmcgY2hpbGQgb3Jcblx0XHRcdFx0Ly8gZGVzY2VuZGFudCBjb21iaW5hdG9ycywgd2hpY2ggaXMgbm90IHdoYXQgd2Ugd2FudC5cblx0XHRcdFx0Ly8gSW4gc3VjaCBjYXNlcywgd2Ugd29yayBhcm91bmQgdGhlIGJlaGF2aW9yIGJ5IHByZWZpeGluZyBldmVyeSBzZWxlY3RvciBpbiB0aGVcblx0XHRcdFx0Ly8gbGlzdCB3aXRoIGFuIElEIHNlbGVjdG9yIHJlZmVyZW5jaW5nIHRoZSBzY29wZSBjb250ZXh0LlxuXHRcdFx0XHQvLyBUaGUgdGVjaG5pcXVlIGhhcyB0byBiZSB1c2VkIGFzIHdlbGwgd2hlbiBhIGxlYWRpbmcgY29tYmluYXRvciBpcyB1c2VkXG5cdFx0XHRcdC8vIGFzIHN1Y2ggc2VsZWN0b3JzIGFyZSBub3QgcmVjb2duaXplZCBieSBxdWVyeVNlbGVjdG9yQWxsLlxuXHRcdFx0XHQvLyBUaGFua3MgdG8gQW5kcmV3IER1cG9udCBmb3IgdGhpcyB0ZWNobmlxdWUuXG5cdFx0XHRcdGlmICggbm9kZVR5cGUgPT09IDEgJiZcblx0XHRcdFx0XHQoIHJkZXNjZW5kLnRlc3QoIHNlbGVjdG9yICkgfHwgcmNvbWJpbmF0b3JzLnRlc3QoIHNlbGVjdG9yICkgKSApIHtcblxuXHRcdFx0XHRcdC8vIEV4cGFuZCBjb250ZXh0IGZvciBzaWJsaW5nIHNlbGVjdG9yc1xuXHRcdFx0XHRcdG5ld0NvbnRleHQgPSByc2libGluZy50ZXN0KCBzZWxlY3RvciApICYmIHRlc3RDb250ZXh0KCBjb250ZXh0LnBhcmVudE5vZGUgKSB8fFxuXHRcdFx0XHRcdFx0Y29udGV4dDtcblxuXHRcdFx0XHRcdC8vIFdlIGNhbiB1c2UgOnNjb3BlIGluc3RlYWQgb2YgdGhlIElEIGhhY2sgaWYgdGhlIGJyb3dzZXJcblx0XHRcdFx0XHQvLyBzdXBwb3J0cyBpdCAmIGlmIHdlJ3JlIG5vdCBjaGFuZ2luZyB0aGUgY29udGV4dC5cblx0XHRcdFx0XHRpZiAoIG5ld0NvbnRleHQgIT09IGNvbnRleHQgfHwgIXN1cHBvcnQuc2NvcGUgKSB7XG5cblx0XHRcdFx0XHRcdC8vIENhcHR1cmUgdGhlIGNvbnRleHQgSUQsIHNldHRpbmcgaXQgZmlyc3QgaWYgbmVjZXNzYXJ5XG5cdFx0XHRcdFx0XHRpZiAoICggbmlkID0gY29udGV4dC5nZXRBdHRyaWJ1dGUoIFwiaWRcIiApICkgKSB7XG5cdFx0XHRcdFx0XHRcdG5pZCA9IG5pZC5yZXBsYWNlKCByY3NzZXNjYXBlLCBmY3NzZXNjYXBlICk7XG5cdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRjb250ZXh0LnNldEF0dHJpYnV0ZSggXCJpZFwiLCAoIG5pZCA9IGV4cGFuZG8gKSApO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8vIFByZWZpeCBldmVyeSBzZWxlY3RvciBpbiB0aGUgbGlzdFxuXHRcdFx0XHRcdGdyb3VwcyA9IHRva2VuaXplKCBzZWxlY3RvciApO1xuXHRcdFx0XHRcdGkgPSBncm91cHMubGVuZ3RoO1xuXHRcdFx0XHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0XHRcdFx0Z3JvdXBzWyBpIF0gPSAoIG5pZCA/IFwiI1wiICsgbmlkIDogXCI6c2NvcGVcIiApICsgXCIgXCIgK1xuXHRcdFx0XHRcdFx0XHR0b1NlbGVjdG9yKCBncm91cHNbIGkgXSApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRuZXdTZWxlY3RvciA9IGdyb3Vwcy5qb2luKCBcIixcIiApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0dHJ5IHtcblx0XHRcdFx0XHRwdXNoLmFwcGx5KCByZXN1bHRzLFxuXHRcdFx0XHRcdFx0bmV3Q29udGV4dC5xdWVyeVNlbGVjdG9yQWxsKCBuZXdTZWxlY3RvciApXG5cdFx0XHRcdFx0KTtcblx0XHRcdFx0XHRyZXR1cm4gcmVzdWx0cztcblx0XHRcdFx0fSBjYXRjaCAoIHFzYUVycm9yICkge1xuXHRcdFx0XHRcdG5vbm5hdGl2ZVNlbGVjdG9yQ2FjaGUoIHNlbGVjdG9yLCB0cnVlICk7XG5cdFx0XHRcdH0gZmluYWxseSB7XG5cdFx0XHRcdFx0aWYgKCBuaWQgPT09IGV4cGFuZG8gKSB7XG5cdFx0XHRcdFx0XHRjb250ZXh0LnJlbW92ZUF0dHJpYnV0ZSggXCJpZFwiICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0Ly8gQWxsIG90aGVyc1xuXHRyZXR1cm4gc2VsZWN0KCBzZWxlY3Rvci5yZXBsYWNlKCBydHJpbSwgXCIkMVwiICksIGNvbnRleHQsIHJlc3VsdHMsIHNlZWQgKTtcbn1cblxuLyoqXG4gKiBDcmVhdGUga2V5LXZhbHVlIGNhY2hlcyBvZiBsaW1pdGVkIHNpemVcbiAqIEByZXR1cm5zIHtmdW5jdGlvbihzdHJpbmcsIG9iamVjdCl9IFJldHVybnMgdGhlIE9iamVjdCBkYXRhIGFmdGVyIHN0b3JpbmcgaXQgb24gaXRzZWxmIHdpdGhcbiAqXHRwcm9wZXJ0eSBuYW1lIHRoZSAoc3BhY2Utc3VmZml4ZWQpIHN0cmluZyBhbmQgKGlmIHRoZSBjYWNoZSBpcyBsYXJnZXIgdGhhbiBFeHByLmNhY2hlTGVuZ3RoKVxuICpcdGRlbGV0aW5nIHRoZSBvbGRlc3QgZW50cnlcbiAqL1xuZnVuY3Rpb24gY3JlYXRlQ2FjaGUoKSB7XG5cdHZhciBrZXlzID0gW107XG5cblx0ZnVuY3Rpb24gY2FjaGUoIGtleSwgdmFsdWUgKSB7XG5cblx0XHQvLyBVc2UgKGtleSArIFwiIFwiKSB0byBhdm9pZCBjb2xsaXNpb24gd2l0aCBuYXRpdmUgcHJvdG90eXBlIHByb3BlcnRpZXMgKHNlZSBJc3N1ZSAjMTU3KVxuXHRcdGlmICgga2V5cy5wdXNoKCBrZXkgKyBcIiBcIiApID4gRXhwci5jYWNoZUxlbmd0aCApIHtcblxuXHRcdFx0Ly8gT25seSBrZWVwIHRoZSBtb3N0IHJlY2VudCBlbnRyaWVzXG5cdFx0XHRkZWxldGUgY2FjaGVbIGtleXMuc2hpZnQoKSBdO1xuXHRcdH1cblx0XHRyZXR1cm4gKCBjYWNoZVsga2V5ICsgXCIgXCIgXSA9IHZhbHVlICk7XG5cdH1cblx0cmV0dXJuIGNhY2hlO1xufVxuXG4vKipcbiAqIE1hcmsgYSBmdW5jdGlvbiBmb3Igc3BlY2lhbCB1c2UgYnkgU2l6emxlXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmbiBUaGUgZnVuY3Rpb24gdG8gbWFya1xuICovXG5mdW5jdGlvbiBtYXJrRnVuY3Rpb24oIGZuICkge1xuXHRmblsgZXhwYW5kbyBdID0gdHJ1ZTtcblx0cmV0dXJuIGZuO1xufVxuXG4vKipcbiAqIFN1cHBvcnQgdGVzdGluZyB1c2luZyBhbiBlbGVtZW50XG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmbiBQYXNzZWQgdGhlIGNyZWF0ZWQgZWxlbWVudCBhbmQgcmV0dXJucyBhIGJvb2xlYW4gcmVzdWx0XG4gKi9cbmZ1bmN0aW9uIGFzc2VydCggZm4gKSB7XG5cdHZhciBlbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiZmllbGRzZXRcIiApO1xuXG5cdHRyeSB7XG5cdFx0cmV0dXJuICEhZm4oIGVsICk7XG5cdH0gY2F0Y2ggKCBlICkge1xuXHRcdHJldHVybiBmYWxzZTtcblx0fSBmaW5hbGx5IHtcblxuXHRcdC8vIFJlbW92ZSBmcm9tIGl0cyBwYXJlbnQgYnkgZGVmYXVsdFxuXHRcdGlmICggZWwucGFyZW50Tm9kZSApIHtcblx0XHRcdGVsLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoIGVsICk7XG5cdFx0fVxuXG5cdFx0Ly8gcmVsZWFzZSBtZW1vcnkgaW4gSUVcblx0XHRlbCA9IG51bGw7XG5cdH1cbn1cblxuLyoqXG4gKiBBZGRzIHRoZSBzYW1lIGhhbmRsZXIgZm9yIGFsbCBvZiB0aGUgc3BlY2lmaWVkIGF0dHJzXG4gKiBAcGFyYW0ge1N0cmluZ30gYXR0cnMgUGlwZS1zZXBhcmF0ZWQgbGlzdCBvZiBhdHRyaWJ1dGVzXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBoYW5kbGVyIFRoZSBtZXRob2QgdGhhdCB3aWxsIGJlIGFwcGxpZWRcbiAqL1xuZnVuY3Rpb24gYWRkSGFuZGxlKCBhdHRycywgaGFuZGxlciApIHtcblx0dmFyIGFyciA9IGF0dHJzLnNwbGl0KCBcInxcIiApLFxuXHRcdGkgPSBhcnIubGVuZ3RoO1xuXG5cdHdoaWxlICggaS0tICkge1xuXHRcdEV4cHIuYXR0ckhhbmRsZVsgYXJyWyBpIF0gXSA9IGhhbmRsZXI7XG5cdH1cbn1cblxuLyoqXG4gKiBDaGVja3MgZG9jdW1lbnQgb3JkZXIgb2YgdHdvIHNpYmxpbmdzXG4gKiBAcGFyYW0ge0VsZW1lbnR9IGFcbiAqIEBwYXJhbSB7RWxlbWVudH0gYlxuICogQHJldHVybnMge051bWJlcn0gUmV0dXJucyBsZXNzIHRoYW4gMCBpZiBhIHByZWNlZGVzIGIsIGdyZWF0ZXIgdGhhbiAwIGlmIGEgZm9sbG93cyBiXG4gKi9cbmZ1bmN0aW9uIHNpYmxpbmdDaGVjayggYSwgYiApIHtcblx0dmFyIGN1ciA9IGIgJiYgYSxcblx0XHRkaWZmID0gY3VyICYmIGEubm9kZVR5cGUgPT09IDEgJiYgYi5ub2RlVHlwZSA9PT0gMSAmJlxuXHRcdFx0YS5zb3VyY2VJbmRleCAtIGIuc291cmNlSW5kZXg7XG5cblx0Ly8gVXNlIElFIHNvdXJjZUluZGV4IGlmIGF2YWlsYWJsZSBvbiBib3RoIG5vZGVzXG5cdGlmICggZGlmZiApIHtcblx0XHRyZXR1cm4gZGlmZjtcblx0fVxuXG5cdC8vIENoZWNrIGlmIGIgZm9sbG93cyBhXG5cdGlmICggY3VyICkge1xuXHRcdHdoaWxlICggKCBjdXIgPSBjdXIubmV4dFNpYmxpbmcgKSApIHtcblx0XHRcdGlmICggY3VyID09PSBiICkge1xuXHRcdFx0XHRyZXR1cm4gLTE7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIGEgPyAxIDogLTE7XG59XG5cbi8qKlxuICogUmV0dXJucyBhIGZ1bmN0aW9uIHRvIHVzZSBpbiBwc2V1ZG9zIGZvciBpbnB1dCB0eXBlc1xuICogQHBhcmFtIHtTdHJpbmd9IHR5cGVcbiAqL1xuZnVuY3Rpb24gY3JlYXRlSW5wdXRQc2V1ZG8oIHR5cGUgKSB7XG5cdHJldHVybiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHR2YXIgbmFtZSA9IGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtcblx0XHRyZXR1cm4gbmFtZSA9PT0gXCJpbnB1dFwiICYmIGVsZW0udHlwZSA9PT0gdHlwZTtcblx0fTtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIGEgZnVuY3Rpb24gdG8gdXNlIGluIHBzZXVkb3MgZm9yIGJ1dHRvbnNcbiAqIEBwYXJhbSB7U3RyaW5nfSB0eXBlXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZUJ1dHRvblBzZXVkbyggdHlwZSApIHtcblx0cmV0dXJuIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHZhciBuYW1lID0gZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO1xuXHRcdHJldHVybiAoIG5hbWUgPT09IFwiaW5wdXRcIiB8fCBuYW1lID09PSBcImJ1dHRvblwiICkgJiYgZWxlbS50eXBlID09PSB0eXBlO1xuXHR9O1xufVxuXG4vKipcbiAqIFJldHVybnMgYSBmdW5jdGlvbiB0byB1c2UgaW4gcHNldWRvcyBmb3IgOmVuYWJsZWQvOmRpc2FibGVkXG4gKiBAcGFyYW0ge0Jvb2xlYW59IGRpc2FibGVkIHRydWUgZm9yIDpkaXNhYmxlZDsgZmFsc2UgZm9yIDplbmFibGVkXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZURpc2FibGVkUHNldWRvKCBkaXNhYmxlZCApIHtcblxuXHQvLyBLbm93biA6ZGlzYWJsZWQgZmFsc2UgcG9zaXRpdmVzOiBmaWVsZHNldFtkaXNhYmxlZF0gPiBsZWdlbmQ6bnRoLW9mLXR5cGUobisyKSA6Y2FuLWRpc2FibGVcblx0cmV0dXJuIGZ1bmN0aW9uKCBlbGVtICkge1xuXG5cdFx0Ly8gT25seSBjZXJ0YWluIGVsZW1lbnRzIGNhbiBtYXRjaCA6ZW5hYmxlZCBvciA6ZGlzYWJsZWRcblx0XHQvLyBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnL211bHRpcGFnZS9zY3JpcHRpbmcuaHRtbCNzZWxlY3Rvci1lbmFibGVkXG5cdFx0Ly8gaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2Uvc2NyaXB0aW5nLmh0bWwjc2VsZWN0b3ItZGlzYWJsZWRcblx0XHRpZiAoIFwiZm9ybVwiIGluIGVsZW0gKSB7XG5cblx0XHRcdC8vIENoZWNrIGZvciBpbmhlcml0ZWQgZGlzYWJsZWRuZXNzIG9uIHJlbGV2YW50IG5vbi1kaXNhYmxlZCBlbGVtZW50czpcblx0XHRcdC8vICogbGlzdGVkIGZvcm0tYXNzb2NpYXRlZCBlbGVtZW50cyBpbiBhIGRpc2FibGVkIGZpZWxkc2V0XG5cdFx0XHQvLyAgIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL2Zvcm1zLmh0bWwjY2F0ZWdvcnktbGlzdGVkXG5cdFx0XHQvLyAgIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL2Zvcm1zLmh0bWwjY29uY2VwdC1mZS1kaXNhYmxlZFxuXHRcdFx0Ly8gKiBvcHRpb24gZWxlbWVudHMgaW4gYSBkaXNhYmxlZCBvcHRncm91cFxuXHRcdFx0Ly8gICBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnL211bHRpcGFnZS9mb3Jtcy5odG1sI2NvbmNlcHQtb3B0aW9uLWRpc2FibGVkXG5cdFx0XHQvLyBBbGwgc3VjaCBlbGVtZW50cyBoYXZlIGEgXCJmb3JtXCIgcHJvcGVydHkuXG5cdFx0XHRpZiAoIGVsZW0ucGFyZW50Tm9kZSAmJiBlbGVtLmRpc2FibGVkID09PSBmYWxzZSApIHtcblxuXHRcdFx0XHQvLyBPcHRpb24gZWxlbWVudHMgZGVmZXIgdG8gYSBwYXJlbnQgb3B0Z3JvdXAgaWYgcHJlc2VudFxuXHRcdFx0XHRpZiAoIFwibGFiZWxcIiBpbiBlbGVtICkge1xuXHRcdFx0XHRcdGlmICggXCJsYWJlbFwiIGluIGVsZW0ucGFyZW50Tm9kZSApIHtcblx0XHRcdFx0XHRcdHJldHVybiBlbGVtLnBhcmVudE5vZGUuZGlzYWJsZWQgPT09IGRpc2FibGVkO1xuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gZWxlbS5kaXNhYmxlZCA9PT0gZGlzYWJsZWQ7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgNiAtIDExXG5cdFx0XHRcdC8vIFVzZSB0aGUgaXNEaXNhYmxlZCBzaG9ydGN1dCBwcm9wZXJ0eSB0byBjaGVjayBmb3IgZGlzYWJsZWQgZmllbGRzZXQgYW5jZXN0b3JzXG5cdFx0XHRcdHJldHVybiBlbGVtLmlzRGlzYWJsZWQgPT09IGRpc2FibGVkIHx8XG5cblx0XHRcdFx0XHQvLyBXaGVyZSB0aGVyZSBpcyBubyBpc0Rpc2FibGVkLCBjaGVjayBtYW51YWxseVxuXHRcdFx0XHRcdC8qIGpzaGludCAtVzAxOCAqL1xuXHRcdFx0XHRcdGVsZW0uaXNEaXNhYmxlZCAhPT0gIWRpc2FibGVkICYmXG5cdFx0XHRcdFx0aW5EaXNhYmxlZEZpZWxkc2V0KCBlbGVtICkgPT09IGRpc2FibGVkO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gZWxlbS5kaXNhYmxlZCA9PT0gZGlzYWJsZWQ7XG5cblx0XHQvLyBUcnkgdG8gd2lubm93IG91dCBlbGVtZW50cyB0aGF0IGNhbid0IGJlIGRpc2FibGVkIGJlZm9yZSB0cnVzdGluZyB0aGUgZGlzYWJsZWQgcHJvcGVydHkuXG5cdFx0Ly8gU29tZSB2aWN0aW1zIGdldCBjYXVnaHQgaW4gb3VyIG5ldCAobGFiZWwsIGxlZ2VuZCwgbWVudSwgdHJhY2spLCBidXQgaXQgc2hvdWxkbid0XG5cdFx0Ly8gZXZlbiBleGlzdCBvbiB0aGVtLCBsZXQgYWxvbmUgaGF2ZSBhIGJvb2xlYW4gdmFsdWUuXG5cdFx0fSBlbHNlIGlmICggXCJsYWJlbFwiIGluIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gZWxlbS5kaXNhYmxlZCA9PT0gZGlzYWJsZWQ7XG5cdFx0fVxuXG5cdFx0Ly8gUmVtYWluaW5nIGVsZW1lbnRzIGFyZSBuZWl0aGVyIDplbmFibGVkIG5vciA6ZGlzYWJsZWRcblx0XHRyZXR1cm4gZmFsc2U7XG5cdH07XG59XG5cbi8qKlxuICogUmV0dXJucyBhIGZ1bmN0aW9uIHRvIHVzZSBpbiBwc2V1ZG9zIGZvciBwb3NpdGlvbmFsc1xuICogQHBhcmFtIHtGdW5jdGlvbn0gZm5cbiAqL1xuZnVuY3Rpb24gY3JlYXRlUG9zaXRpb25hbFBzZXVkbyggZm4gKSB7XG5cdHJldHVybiBtYXJrRnVuY3Rpb24oIGZ1bmN0aW9uKCBhcmd1bWVudCApIHtcblx0XHRhcmd1bWVudCA9ICthcmd1bWVudDtcblx0XHRyZXR1cm4gbWFya0Z1bmN0aW9uKCBmdW5jdGlvbiggc2VlZCwgbWF0Y2hlcyApIHtcblx0XHRcdHZhciBqLFxuXHRcdFx0XHRtYXRjaEluZGV4ZXMgPSBmbiggW10sIHNlZWQubGVuZ3RoLCBhcmd1bWVudCApLFxuXHRcdFx0XHRpID0gbWF0Y2hJbmRleGVzLmxlbmd0aDtcblxuXHRcdFx0Ly8gTWF0Y2ggZWxlbWVudHMgZm91bmQgYXQgdGhlIHNwZWNpZmllZCBpbmRleGVzXG5cdFx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdFx0aWYgKCBzZWVkWyAoIGogPSBtYXRjaEluZGV4ZXNbIGkgXSApIF0gKSB7XG5cdFx0XHRcdFx0c2VlZFsgaiBdID0gISggbWF0Y2hlc1sgaiBdID0gc2VlZFsgaiBdICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9ICk7XG5cdH0gKTtcbn1cblxuLyoqXG4gKiBDaGVja3MgYSBub2RlIGZvciB2YWxpZGl0eSBhcyBhIFNpenpsZSBjb250ZXh0XG4gKiBAcGFyYW0ge0VsZW1lbnR8T2JqZWN0PX0gY29udGV4dFxuICogQHJldHVybnMge0VsZW1lbnR8T2JqZWN0fEJvb2xlYW59IFRoZSBpbnB1dCBub2RlIGlmIGFjY2VwdGFibGUsIG90aGVyd2lzZSBhIGZhbHN5IHZhbHVlXG4gKi9cbmZ1bmN0aW9uIHRlc3RDb250ZXh0KCBjb250ZXh0ICkge1xuXHRyZXR1cm4gY29udGV4dCAmJiB0eXBlb2YgY29udGV4dC5nZXRFbGVtZW50c0J5VGFnTmFtZSAhPT0gXCJ1bmRlZmluZWRcIiAmJiBjb250ZXh0O1xufVxuXG4vLyBFeHBvc2Ugc3VwcG9ydCB2YXJzIGZvciBjb252ZW5pZW5jZVxuc3VwcG9ydCA9IFNpenpsZS5zdXBwb3J0ID0ge307XG5cbi8qKlxuICogRGV0ZWN0cyBYTUwgbm9kZXNcbiAqIEBwYXJhbSB7RWxlbWVudHxPYmplY3R9IGVsZW0gQW4gZWxlbWVudCBvciBhIGRvY3VtZW50XG4gKiBAcmV0dXJucyB7Qm9vbGVhbn0gVHJ1ZSBpZmYgZWxlbSBpcyBhIG5vbi1IVE1MIFhNTCBub2RlXG4gKi9cbmlzWE1MID0gU2l6emxlLmlzWE1MID0gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdHZhciBuYW1lc3BhY2UgPSBlbGVtLm5hbWVzcGFjZVVSSSxcblx0XHRkb2NFbGVtID0gKCBlbGVtLm93bmVyRG9jdW1lbnQgfHwgZWxlbSApLmRvY3VtZW50RWxlbWVudDtcblxuXHQvLyBTdXBwb3J0OiBJRSA8PThcblx0Ly8gQXNzdW1lIEhUTUwgd2hlbiBkb2N1bWVudEVsZW1lbnQgZG9lc24ndCB5ZXQgZXhpc3QsIHN1Y2ggYXMgaW5zaWRlIGxvYWRpbmcgaWZyYW1lc1xuXHQvLyBodHRwczovL2J1Z3MuanF1ZXJ5LmNvbS90aWNrZXQvNDgzM1xuXHRyZXR1cm4gIXJodG1sLnRlc3QoIG5hbWVzcGFjZSB8fCBkb2NFbGVtICYmIGRvY0VsZW0ubm9kZU5hbWUgfHwgXCJIVE1MXCIgKTtcbn07XG5cbi8qKlxuICogU2V0cyBkb2N1bWVudC1yZWxhdGVkIHZhcmlhYmxlcyBvbmNlIGJhc2VkIG9uIHRoZSBjdXJyZW50IGRvY3VtZW50XG4gKiBAcGFyYW0ge0VsZW1lbnR8T2JqZWN0fSBbZG9jXSBBbiBlbGVtZW50IG9yIGRvY3VtZW50IG9iamVjdCB0byB1c2UgdG8gc2V0IHRoZSBkb2N1bWVudFxuICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgY3VycmVudCBkb2N1bWVudFxuICovXG5zZXREb2N1bWVudCA9IFNpenpsZS5zZXREb2N1bWVudCA9IGZ1bmN0aW9uKCBub2RlICkge1xuXHR2YXIgaGFzQ29tcGFyZSwgc3ViV2luZG93LFxuXHRcdGRvYyA9IG5vZGUgPyBub2RlLm93bmVyRG9jdW1lbnQgfHwgbm9kZSA6IHByZWZlcnJlZERvYztcblxuXHQvLyBSZXR1cm4gZWFybHkgaWYgZG9jIGlzIGludmFsaWQgb3IgYWxyZWFkeSBzZWxlY3RlZFxuXHQvLyBTdXBwb3J0OiBJRSAxMSssIEVkZ2UgMTcgLSAxOCtcblx0Ly8gSUUvRWRnZSBzb21ldGltZXMgdGhyb3cgYSBcIlBlcm1pc3Npb24gZGVuaWVkXCIgZXJyb3Igd2hlbiBzdHJpY3QtY29tcGFyaW5nXG5cdC8vIHR3byBkb2N1bWVudHM7IHNoYWxsb3cgY29tcGFyaXNvbnMgd29yay5cblx0Ly8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVxZXFlcVxuXHRpZiAoIGRvYyA9PSBkb2N1bWVudCB8fCBkb2Mubm9kZVR5cGUgIT09IDkgfHwgIWRvYy5kb2N1bWVudEVsZW1lbnQgKSB7XG5cdFx0cmV0dXJuIGRvY3VtZW50O1xuXHR9XG5cblx0Ly8gVXBkYXRlIGdsb2JhbCB2YXJpYWJsZXNcblx0ZG9jdW1lbnQgPSBkb2M7XG5cdGRvY0VsZW0gPSBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7XG5cdGRvY3VtZW50SXNIVE1MID0gIWlzWE1MKCBkb2N1bWVudCApO1xuXG5cdC8vIFN1cHBvcnQ6IElFIDkgLSAxMSssIEVkZ2UgMTIgLSAxOCtcblx0Ly8gQWNjZXNzaW5nIGlmcmFtZSBkb2N1bWVudHMgYWZ0ZXIgdW5sb2FkIHRocm93cyBcInBlcm1pc3Npb24gZGVuaWVkXCIgZXJyb3JzIChqUXVlcnkgIzEzOTM2KVxuXHQvLyBTdXBwb3J0OiBJRSAxMSssIEVkZ2UgMTcgLSAxOCtcblx0Ly8gSUUvRWRnZSBzb21ldGltZXMgdGhyb3cgYSBcIlBlcm1pc3Npb24gZGVuaWVkXCIgZXJyb3Igd2hlbiBzdHJpY3QtY29tcGFyaW5nXG5cdC8vIHR3byBkb2N1bWVudHM7IHNoYWxsb3cgY29tcGFyaXNvbnMgd29yay5cblx0Ly8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVxZXFlcVxuXHRpZiAoIHByZWZlcnJlZERvYyAhPSBkb2N1bWVudCAmJlxuXHRcdCggc3ViV2luZG93ID0gZG9jdW1lbnQuZGVmYXVsdFZpZXcgKSAmJiBzdWJXaW5kb3cudG9wICE9PSBzdWJXaW5kb3cgKSB7XG5cblx0XHQvLyBTdXBwb3J0OiBJRSAxMSwgRWRnZVxuXHRcdGlmICggc3ViV2luZG93LmFkZEV2ZW50TGlzdGVuZXIgKSB7XG5cdFx0XHRzdWJXaW5kb3cuYWRkRXZlbnRMaXN0ZW5lciggXCJ1bmxvYWRcIiwgdW5sb2FkSGFuZGxlciwgZmFsc2UgKTtcblxuXHRcdC8vIFN1cHBvcnQ6IElFIDkgLSAxMCBvbmx5XG5cdFx0fSBlbHNlIGlmICggc3ViV2luZG93LmF0dGFjaEV2ZW50ICkge1xuXHRcdFx0c3ViV2luZG93LmF0dGFjaEV2ZW50KCBcIm9udW5sb2FkXCIsIHVubG9hZEhhbmRsZXIgKTtcblx0XHR9XG5cdH1cblxuXHQvLyBTdXBwb3J0OiBJRSA4IC0gMTErLCBFZGdlIDEyIC0gMTgrLCBDaHJvbWUgPD0xNiAtIDI1IG9ubHksIEZpcmVmb3ggPD0zLjYgLSAzMSBvbmx5LFxuXHQvLyBTYWZhcmkgNCAtIDUgb25seSwgT3BlcmEgPD0xMS42IC0gMTIueCBvbmx5XG5cdC8vIElFL0VkZ2UgJiBvbGRlciBicm93c2VycyBkb24ndCBzdXBwb3J0IHRoZSA6c2NvcGUgcHNldWRvLWNsYXNzLlxuXHQvLyBTdXBwb3J0OiBTYWZhcmkgNi4wIG9ubHlcblx0Ly8gU2FmYXJpIDYuMCBzdXBwb3J0cyA6c2NvcGUgYnV0IGl0J3MgYW4gYWxpYXMgb2YgOnJvb3QgdGhlcmUuXG5cdHN1cHBvcnQuc2NvcGUgPSBhc3NlcnQoIGZ1bmN0aW9uKCBlbCApIHtcblx0XHRkb2NFbGVtLmFwcGVuZENoaWxkKCBlbCApLmFwcGVuZENoaWxkKCBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImRpdlwiICkgKTtcblx0XHRyZXR1cm4gdHlwZW9mIGVsLnF1ZXJ5U2VsZWN0b3JBbGwgIT09IFwidW5kZWZpbmVkXCIgJiZcblx0XHRcdCFlbC5xdWVyeVNlbGVjdG9yQWxsKCBcIjpzY29wZSBmaWVsZHNldCBkaXZcIiApLmxlbmd0aDtcblx0fSApO1xuXG5cdC8qIEF0dHJpYnV0ZXNcblx0LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAqL1xuXG5cdC8vIFN1cHBvcnQ6IElFPDhcblx0Ly8gVmVyaWZ5IHRoYXQgZ2V0QXR0cmlidXRlIHJlYWxseSByZXR1cm5zIGF0dHJpYnV0ZXMgYW5kIG5vdCBwcm9wZXJ0aWVzXG5cdC8vIChleGNlcHRpbmcgSUU4IGJvb2xlYW5zKVxuXHRzdXBwb3J0LmF0dHJpYnV0ZXMgPSBhc3NlcnQoIGZ1bmN0aW9uKCBlbCApIHtcblx0XHRlbC5jbGFzc05hbWUgPSBcImlcIjtcblx0XHRyZXR1cm4gIWVsLmdldEF0dHJpYnV0ZSggXCJjbGFzc05hbWVcIiApO1xuXHR9ICk7XG5cblx0LyogZ2V0RWxlbWVudChzKUJ5KlxuXHQtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tICovXG5cblx0Ly8gQ2hlY2sgaWYgZ2V0RWxlbWVudHNCeVRhZ05hbWUoXCIqXCIpIHJldHVybnMgb25seSBlbGVtZW50c1xuXHRzdXBwb3J0LmdldEVsZW1lbnRzQnlUYWdOYW1lID0gYXNzZXJ0KCBmdW5jdGlvbiggZWwgKSB7XG5cdFx0ZWwuYXBwZW5kQ2hpbGQoIGRvY3VtZW50LmNyZWF0ZUNvbW1lbnQoIFwiXCIgKSApO1xuXHRcdHJldHVybiAhZWwuZ2V0RWxlbWVudHNCeVRhZ05hbWUoIFwiKlwiICkubGVuZ3RoO1xuXHR9ICk7XG5cblx0Ly8gU3VwcG9ydDogSUU8OVxuXHRzdXBwb3J0LmdldEVsZW1lbnRzQnlDbGFzc05hbWUgPSBybmF0aXZlLnRlc3QoIGRvY3VtZW50LmdldEVsZW1lbnRzQnlDbGFzc05hbWUgKTtcblxuXHQvLyBTdXBwb3J0OiBJRTwxMFxuXHQvLyBDaGVjayBpZiBnZXRFbGVtZW50QnlJZCByZXR1cm5zIGVsZW1lbnRzIGJ5IG5hbWVcblx0Ly8gVGhlIGJyb2tlbiBnZXRFbGVtZW50QnlJZCBtZXRob2RzIGRvbid0IHBpY2sgdXAgcHJvZ3JhbW1hdGljYWxseS1zZXQgbmFtZXMsXG5cdC8vIHNvIHVzZSBhIHJvdW5kYWJvdXQgZ2V0RWxlbWVudHNCeU5hbWUgdGVzdFxuXHRzdXBwb3J0LmdldEJ5SWQgPSBhc3NlcnQoIGZ1bmN0aW9uKCBlbCApIHtcblx0XHRkb2NFbGVtLmFwcGVuZENoaWxkKCBlbCApLmlkID0gZXhwYW5kbztcblx0XHRyZXR1cm4gIWRvY3VtZW50LmdldEVsZW1lbnRzQnlOYW1lIHx8ICFkb2N1bWVudC5nZXRFbGVtZW50c0J5TmFtZSggZXhwYW5kbyApLmxlbmd0aDtcblx0fSApO1xuXG5cdC8vIElEIGZpbHRlciBhbmQgZmluZFxuXHRpZiAoIHN1cHBvcnQuZ2V0QnlJZCApIHtcblx0XHRFeHByLmZpbHRlclsgXCJJRFwiIF0gPSBmdW5jdGlvbiggaWQgKSB7XG5cdFx0XHR2YXIgYXR0cklkID0gaWQucmVwbGFjZSggcnVuZXNjYXBlLCBmdW5lc2NhcGUgKTtcblx0XHRcdHJldHVybiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdFx0cmV0dXJuIGVsZW0uZ2V0QXR0cmlidXRlKCBcImlkXCIgKSA9PT0gYXR0cklkO1xuXHRcdFx0fTtcblx0XHR9O1xuXHRcdEV4cHIuZmluZFsgXCJJRFwiIF0gPSBmdW5jdGlvbiggaWQsIGNvbnRleHQgKSB7XG5cdFx0XHRpZiAoIHR5cGVvZiBjb250ZXh0LmdldEVsZW1lbnRCeUlkICE9PSBcInVuZGVmaW5lZFwiICYmIGRvY3VtZW50SXNIVE1MICkge1xuXHRcdFx0XHR2YXIgZWxlbSA9IGNvbnRleHQuZ2V0RWxlbWVudEJ5SWQoIGlkICk7XG5cdFx0XHRcdHJldHVybiBlbGVtID8gWyBlbGVtIF0gOiBbXTtcblx0XHRcdH1cblx0XHR9O1xuXHR9IGVsc2Uge1xuXHRcdEV4cHIuZmlsdGVyWyBcIklEXCIgXSA9ICBmdW5jdGlvbiggaWQgKSB7XG5cdFx0XHR2YXIgYXR0cklkID0gaWQucmVwbGFjZSggcnVuZXNjYXBlLCBmdW5lc2NhcGUgKTtcblx0XHRcdHJldHVybiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdFx0dmFyIG5vZGUgPSB0eXBlb2YgZWxlbS5nZXRBdHRyaWJ1dGVOb2RlICE9PSBcInVuZGVmaW5lZFwiICYmXG5cdFx0XHRcdFx0ZWxlbS5nZXRBdHRyaWJ1dGVOb2RlKCBcImlkXCIgKTtcblx0XHRcdFx0cmV0dXJuIG5vZGUgJiYgbm9kZS52YWx1ZSA9PT0gYXR0cklkO1xuXHRcdFx0fTtcblx0XHR9O1xuXG5cdFx0Ly8gU3VwcG9ydDogSUUgNiAtIDcgb25seVxuXHRcdC8vIGdldEVsZW1lbnRCeUlkIGlzIG5vdCByZWxpYWJsZSBhcyBhIGZpbmQgc2hvcnRjdXRcblx0XHRFeHByLmZpbmRbIFwiSURcIiBdID0gZnVuY3Rpb24oIGlkLCBjb250ZXh0ICkge1xuXHRcdFx0aWYgKCB0eXBlb2YgY29udGV4dC5nZXRFbGVtZW50QnlJZCAhPT0gXCJ1bmRlZmluZWRcIiAmJiBkb2N1bWVudElzSFRNTCApIHtcblx0XHRcdFx0dmFyIG5vZGUsIGksIGVsZW1zLFxuXHRcdFx0XHRcdGVsZW0gPSBjb250ZXh0LmdldEVsZW1lbnRCeUlkKCBpZCApO1xuXG5cdFx0XHRcdGlmICggZWxlbSApIHtcblxuXHRcdFx0XHRcdC8vIFZlcmlmeSB0aGUgaWQgYXR0cmlidXRlXG5cdFx0XHRcdFx0bm9kZSA9IGVsZW0uZ2V0QXR0cmlidXRlTm9kZSggXCJpZFwiICk7XG5cdFx0XHRcdFx0aWYgKCBub2RlICYmIG5vZGUudmFsdWUgPT09IGlkICkge1xuXHRcdFx0XHRcdFx0cmV0dXJuIFsgZWxlbSBdO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8vIEZhbGwgYmFjayBvbiBnZXRFbGVtZW50c0J5TmFtZVxuXHRcdFx0XHRcdGVsZW1zID0gY29udGV4dC5nZXRFbGVtZW50c0J5TmFtZSggaWQgKTtcblx0XHRcdFx0XHRpID0gMDtcblx0XHRcdFx0XHR3aGlsZSAoICggZWxlbSA9IGVsZW1zWyBpKysgXSApICkge1xuXHRcdFx0XHRcdFx0bm9kZSA9IGVsZW0uZ2V0QXR0cmlidXRlTm9kZSggXCJpZFwiICk7XG5cdFx0XHRcdFx0XHRpZiAoIG5vZGUgJiYgbm9kZS52YWx1ZSA9PT0gaWQgKSB7XG5cdFx0XHRcdFx0XHRcdHJldHVybiBbIGVsZW0gXTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRyZXR1cm4gW107XG5cdFx0XHR9XG5cdFx0fTtcblx0fVxuXG5cdC8vIFRhZ1xuXHRFeHByLmZpbmRbIFwiVEFHXCIgXSA9IHN1cHBvcnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUgP1xuXHRcdGZ1bmN0aW9uKCB0YWcsIGNvbnRleHQgKSB7XG5cdFx0XHRpZiAoIHR5cGVvZiBjb250ZXh0LmdldEVsZW1lbnRzQnlUYWdOYW1lICE9PSBcInVuZGVmaW5lZFwiICkge1xuXHRcdFx0XHRyZXR1cm4gY29udGV4dC5nZXRFbGVtZW50c0J5VGFnTmFtZSggdGFnICk7XG5cblx0XHRcdC8vIERvY3VtZW50RnJhZ21lbnQgbm9kZXMgZG9uJ3QgaGF2ZSBnRUJUTlxuXHRcdFx0fSBlbHNlIGlmICggc3VwcG9ydC5xc2EgKSB7XG5cdFx0XHRcdHJldHVybiBjb250ZXh0LnF1ZXJ5U2VsZWN0b3JBbGwoIHRhZyApO1xuXHRcdFx0fVxuXHRcdH0gOlxuXG5cdFx0ZnVuY3Rpb24oIHRhZywgY29udGV4dCApIHtcblx0XHRcdHZhciBlbGVtLFxuXHRcdFx0XHR0bXAgPSBbXSxcblx0XHRcdFx0aSA9IDAsXG5cblx0XHRcdFx0Ly8gQnkgaGFwcHkgY29pbmNpZGVuY2UsIGEgKGJyb2tlbikgZ0VCVE4gYXBwZWFycyBvbiBEb2N1bWVudEZyYWdtZW50IG5vZGVzIHRvb1xuXHRcdFx0XHRyZXN1bHRzID0gY29udGV4dC5nZXRFbGVtZW50c0J5VGFnTmFtZSggdGFnICk7XG5cblx0XHRcdC8vIEZpbHRlciBvdXQgcG9zc2libGUgY29tbWVudHNcblx0XHRcdGlmICggdGFnID09PSBcIipcIiApIHtcblx0XHRcdFx0d2hpbGUgKCAoIGVsZW0gPSByZXN1bHRzWyBpKysgXSApICkge1xuXHRcdFx0XHRcdGlmICggZWxlbS5ub2RlVHlwZSA9PT0gMSApIHtcblx0XHRcdFx0XHRcdHRtcC5wdXNoKCBlbGVtICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdFx0cmV0dXJuIHRtcDtcblx0XHRcdH1cblx0XHRcdHJldHVybiByZXN1bHRzO1xuXHRcdH07XG5cblx0Ly8gQ2xhc3Ncblx0RXhwci5maW5kWyBcIkNMQVNTXCIgXSA9IHN1cHBvcnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSAmJiBmdW5jdGlvbiggY2xhc3NOYW1lLCBjb250ZXh0ICkge1xuXHRcdGlmICggdHlwZW9mIGNvbnRleHQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSAhPT0gXCJ1bmRlZmluZWRcIiAmJiBkb2N1bWVudElzSFRNTCApIHtcblx0XHRcdHJldHVybiBjb250ZXh0LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoIGNsYXNzTmFtZSApO1xuXHRcdH1cblx0fTtcblxuXHQvKiBRU0EvbWF0Y2hlc1NlbGVjdG9yXG5cdC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gKi9cblxuXHQvLyBRU0EgYW5kIG1hdGNoZXNTZWxlY3RvciBzdXBwb3J0XG5cblx0Ly8gbWF0Y2hlc1NlbGVjdG9yKDphY3RpdmUpIHJlcG9ydHMgZmFsc2Ugd2hlbiB0cnVlIChJRTkvT3BlcmEgMTEuNSlcblx0cmJ1Z2d5TWF0Y2hlcyA9IFtdO1xuXG5cdC8vIHFTYSg6Zm9jdXMpIHJlcG9ydHMgZmFsc2Ugd2hlbiB0cnVlIChDaHJvbWUgMjEpXG5cdC8vIFdlIGFsbG93IHRoaXMgYmVjYXVzZSBvZiBhIGJ1ZyBpbiBJRTgvOSB0aGF0IHRocm93cyBhbiBlcnJvclxuXHQvLyB3aGVuZXZlciBgZG9jdW1lbnQuYWN0aXZlRWxlbWVudGAgaXMgYWNjZXNzZWQgb24gYW4gaWZyYW1lXG5cdC8vIFNvLCB3ZSBhbGxvdyA6Zm9jdXMgdG8gcGFzcyB0aHJvdWdoIFFTQSBhbGwgdGhlIHRpbWUgdG8gYXZvaWQgdGhlIElFIGVycm9yXG5cdC8vIFNlZSBodHRwczovL2J1Z3MuanF1ZXJ5LmNvbS90aWNrZXQvMTMzNzhcblx0cmJ1Z2d5UVNBID0gW107XG5cblx0aWYgKCAoIHN1cHBvcnQucXNhID0gcm5hdGl2ZS50ZXN0KCBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsICkgKSApIHtcblxuXHRcdC8vIEJ1aWxkIFFTQSByZWdleFxuXHRcdC8vIFJlZ2V4IHN0cmF0ZWd5IGFkb3B0ZWQgZnJvbSBEaWVnbyBQZXJpbmlcblx0XHRhc3NlcnQoIGZ1bmN0aW9uKCBlbCApIHtcblxuXHRcdFx0dmFyIGlucHV0O1xuXG5cdFx0XHQvLyBTZWxlY3QgaXMgc2V0IHRvIGVtcHR5IHN0cmluZyBvbiBwdXJwb3NlXG5cdFx0XHQvLyBUaGlzIGlzIHRvIHRlc3QgSUUncyB0cmVhdG1lbnQgb2Ygbm90IGV4cGxpY2l0bHlcblx0XHRcdC8vIHNldHRpbmcgYSBib29sZWFuIGNvbnRlbnQgYXR0cmlidXRlLFxuXHRcdFx0Ly8gc2luY2UgaXRzIHByZXNlbmNlIHNob3VsZCBiZSBlbm91Z2hcblx0XHRcdC8vIGh0dHBzOi8vYnVncy5qcXVlcnkuY29tL3RpY2tldC8xMjM1OVxuXHRcdFx0ZG9jRWxlbS5hcHBlbmRDaGlsZCggZWwgKS5pbm5lckhUTUwgPSBcIjxhIGlkPSdcIiArIGV4cGFuZG8gKyBcIic+PC9hPlwiICtcblx0XHRcdFx0XCI8c2VsZWN0IGlkPSdcIiArIGV4cGFuZG8gKyBcIi1cXHJcXFxcJyBtc2FsbG93Y2FwdHVyZT0nJz5cIiArXG5cdFx0XHRcdFwiPG9wdGlvbiBzZWxlY3RlZD0nJz48L29wdGlvbj48L3NlbGVjdD5cIjtcblxuXHRcdFx0Ly8gU3VwcG9ydDogSUU4LCBPcGVyYSAxMS0xMi4xNlxuXHRcdFx0Ly8gTm90aGluZyBzaG91bGQgYmUgc2VsZWN0ZWQgd2hlbiBlbXB0eSBzdHJpbmdzIGZvbGxvdyBePSBvciAkPSBvciAqPVxuXHRcdFx0Ly8gVGhlIHRlc3QgYXR0cmlidXRlIG11c3QgYmUgdW5rbm93biBpbiBPcGVyYSBidXQgXCJzYWZlXCIgZm9yIFdpblJUXG5cdFx0XHQvLyBodHRwczovL21zZG4ubWljcm9zb2Z0LmNvbS9lbi11cy9saWJyYXJ5L2llL2hoNDY1Mzg4LmFzcHgjYXR0cmlidXRlX3NlY3Rpb25cblx0XHRcdGlmICggZWwucXVlcnlTZWxlY3RvckFsbCggXCJbbXNhbGxvd2NhcHR1cmVePScnXVwiICkubGVuZ3RoICkge1xuXHRcdFx0XHRyYnVnZ3lRU0EucHVzaCggXCJbKl4kXT1cIiArIHdoaXRlc3BhY2UgKyBcIiooPzonJ3xcXFwiXFxcIilcIiApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBTdXBwb3J0OiBJRThcblx0XHRcdC8vIEJvb2xlYW4gYXR0cmlidXRlcyBhbmQgXCJ2YWx1ZVwiIGFyZSBub3QgdHJlYXRlZCBjb3JyZWN0bHlcblx0XHRcdGlmICggIWVsLnF1ZXJ5U2VsZWN0b3JBbGwoIFwiW3NlbGVjdGVkXVwiICkubGVuZ3RoICkge1xuXHRcdFx0XHRyYnVnZ3lRU0EucHVzaCggXCJcXFxcW1wiICsgd2hpdGVzcGFjZSArIFwiKig/OnZhbHVlfFwiICsgYm9vbGVhbnMgKyBcIilcIiApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBTdXBwb3J0OiBDaHJvbWU8MjksIEFuZHJvaWQ8NC40LCBTYWZhcmk8Ny4wKywgaU9TPDcuMCssIFBoYW50b21KUzwxLjkuOCtcblx0XHRcdGlmICggIWVsLnF1ZXJ5U2VsZWN0b3JBbGwoIFwiW2lkfj1cIiArIGV4cGFuZG8gKyBcIi1dXCIgKS5sZW5ndGggKSB7XG5cdFx0XHRcdHJidWdneVFTQS5wdXNoKCBcIn49XCIgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gU3VwcG9ydDogSUUgMTErLCBFZGdlIDE1IC0gMTgrXG5cdFx0XHQvLyBJRSAxMS9FZGdlIGRvbid0IGZpbmQgZWxlbWVudHMgb24gYSBgW25hbWU9JyddYCBxdWVyeSBpbiBzb21lIGNhc2VzLlxuXHRcdFx0Ly8gQWRkaW5nIGEgdGVtcG9yYXJ5IGF0dHJpYnV0ZSB0byB0aGUgZG9jdW1lbnQgYmVmb3JlIHRoZSBzZWxlY3Rpb24gd29ya3Ncblx0XHRcdC8vIGFyb3VuZCB0aGUgaXNzdWUuXG5cdFx0XHQvLyBJbnRlcmVzdGluZ2x5LCBJRSAxMCAmIG9sZGVyIGRvbid0IHNlZW0gdG8gaGF2ZSB0aGUgaXNzdWUuXG5cdFx0XHRpbnB1dCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiaW5wdXRcIiApO1xuXHRcdFx0aW5wdXQuc2V0QXR0cmlidXRlKCBcIm5hbWVcIiwgXCJcIiApO1xuXHRcdFx0ZWwuYXBwZW5kQ2hpbGQoIGlucHV0ICk7XG5cdFx0XHRpZiAoICFlbC5xdWVyeVNlbGVjdG9yQWxsKCBcIltuYW1lPScnXVwiICkubGVuZ3RoICkge1xuXHRcdFx0XHRyYnVnZ3lRU0EucHVzaCggXCJcXFxcW1wiICsgd2hpdGVzcGFjZSArIFwiKm5hbWVcIiArIHdoaXRlc3BhY2UgKyBcIio9XCIgK1xuXHRcdFx0XHRcdHdoaXRlc3BhY2UgKyBcIiooPzonJ3xcXFwiXFxcIilcIiApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBXZWJraXQvT3BlcmEgLSA6Y2hlY2tlZCBzaG91bGQgcmV0dXJuIHNlbGVjdGVkIG9wdGlvbiBlbGVtZW50c1xuXHRcdFx0Ly8gaHR0cDovL3d3dy53My5vcmcvVFIvMjAxMS9SRUMtY3NzMy1zZWxlY3RvcnMtMjAxMTA5MjkvI2NoZWNrZWRcblx0XHRcdC8vIElFOCB0aHJvd3MgZXJyb3IgaGVyZSBhbmQgd2lsbCBub3Qgc2VlIGxhdGVyIHRlc3RzXG5cdFx0XHRpZiAoICFlbC5xdWVyeVNlbGVjdG9yQWxsKCBcIjpjaGVja2VkXCIgKS5sZW5ndGggKSB7XG5cdFx0XHRcdHJidWdneVFTQS5wdXNoKCBcIjpjaGVja2VkXCIgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gU3VwcG9ydDogU2FmYXJpIDgrLCBpT1MgOCtcblx0XHRcdC8vIGh0dHBzOi8vYnVncy53ZWJraXQub3JnL3Nob3dfYnVnLmNnaT9pZD0xMzY4NTFcblx0XHRcdC8vIEluLXBhZ2UgYHNlbGVjdG9yI2lkIHNpYmxpbmctY29tYmluYXRvciBzZWxlY3RvcmAgZmFpbHNcblx0XHRcdGlmICggIWVsLnF1ZXJ5U2VsZWN0b3JBbGwoIFwiYSNcIiArIGV4cGFuZG8gKyBcIisqXCIgKS5sZW5ndGggKSB7XG5cdFx0XHRcdHJidWdneVFTQS5wdXNoKCBcIi4jLitbK35dXCIgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gU3VwcG9ydDogRmlyZWZveCA8PTMuNiAtIDUgb25seVxuXHRcdFx0Ly8gT2xkIEZpcmVmb3ggZG9lc24ndCB0aHJvdyBvbiBhIGJhZGx5LWVzY2FwZWQgaWRlbnRpZmllci5cblx0XHRcdGVsLnF1ZXJ5U2VsZWN0b3JBbGwoIFwiXFxcXFxcZlwiICk7XG5cdFx0XHRyYnVnZ3lRU0EucHVzaCggXCJbXFxcXHJcXFxcblxcXFxmXVwiICk7XG5cdFx0fSApO1xuXG5cdFx0YXNzZXJ0KCBmdW5jdGlvbiggZWwgKSB7XG5cdFx0XHRlbC5pbm5lckhUTUwgPSBcIjxhIGhyZWY9JycgZGlzYWJsZWQ9J2Rpc2FibGVkJz48L2E+XCIgK1xuXHRcdFx0XHRcIjxzZWxlY3QgZGlzYWJsZWQ9J2Rpc2FibGVkJz48b3B0aW9uLz48L3NlbGVjdD5cIjtcblxuXHRcdFx0Ly8gU3VwcG9ydDogV2luZG93cyA4IE5hdGl2ZSBBcHBzXG5cdFx0XHQvLyBUaGUgdHlwZSBhbmQgbmFtZSBhdHRyaWJ1dGVzIGFyZSByZXN0cmljdGVkIGR1cmluZyAuaW5uZXJIVE1MIGFzc2lnbm1lbnRcblx0XHRcdHZhciBpbnB1dCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiaW5wdXRcIiApO1xuXHRcdFx0aW5wdXQuc2V0QXR0cmlidXRlKCBcInR5cGVcIiwgXCJoaWRkZW5cIiApO1xuXHRcdFx0ZWwuYXBwZW5kQ2hpbGQoIGlucHV0ICkuc2V0QXR0cmlidXRlKCBcIm5hbWVcIiwgXCJEXCIgKTtcblxuXHRcdFx0Ly8gU3VwcG9ydDogSUU4XG5cdFx0XHQvLyBFbmZvcmNlIGNhc2Utc2Vuc2l0aXZpdHkgb2YgbmFtZSBhdHRyaWJ1dGVcblx0XHRcdGlmICggZWwucXVlcnlTZWxlY3RvckFsbCggXCJbbmFtZT1kXVwiICkubGVuZ3RoICkge1xuXHRcdFx0XHRyYnVnZ3lRU0EucHVzaCggXCJuYW1lXCIgKyB3aGl0ZXNwYWNlICsgXCIqWypeJHwhfl0/PVwiICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIEZGIDMuNSAtIDplbmFibGVkLzpkaXNhYmxlZCBhbmQgaGlkZGVuIGVsZW1lbnRzIChoaWRkZW4gZWxlbWVudHMgYXJlIHN0aWxsIGVuYWJsZWQpXG5cdFx0XHQvLyBJRTggdGhyb3dzIGVycm9yIGhlcmUgYW5kIHdpbGwgbm90IHNlZSBsYXRlciB0ZXN0c1xuXHRcdFx0aWYgKCBlbC5xdWVyeVNlbGVjdG9yQWxsKCBcIjplbmFibGVkXCIgKS5sZW5ndGggIT09IDIgKSB7XG5cdFx0XHRcdHJidWdneVFTQS5wdXNoKCBcIjplbmFibGVkXCIsIFwiOmRpc2FibGVkXCIgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gU3VwcG9ydDogSUU5LTExK1xuXHRcdFx0Ly8gSUUncyA6ZGlzYWJsZWQgc2VsZWN0b3IgZG9lcyBub3QgcGljayB1cCB0aGUgY2hpbGRyZW4gb2YgZGlzYWJsZWQgZmllbGRzZXRzXG5cdFx0XHRkb2NFbGVtLmFwcGVuZENoaWxkKCBlbCApLmRpc2FibGVkID0gdHJ1ZTtcblx0XHRcdGlmICggZWwucXVlcnlTZWxlY3RvckFsbCggXCI6ZGlzYWJsZWRcIiApLmxlbmd0aCAhPT0gMiApIHtcblx0XHRcdFx0cmJ1Z2d5UVNBLnB1c2goIFwiOmVuYWJsZWRcIiwgXCI6ZGlzYWJsZWRcIiApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBTdXBwb3J0OiBPcGVyYSAxMCAtIDExIG9ubHlcblx0XHRcdC8vIE9wZXJhIDEwLTExIGRvZXMgbm90IHRocm93IG9uIHBvc3QtY29tbWEgaW52YWxpZCBwc2V1ZG9zXG5cdFx0XHRlbC5xdWVyeVNlbGVjdG9yQWxsKCBcIiosOnhcIiApO1xuXHRcdFx0cmJ1Z2d5UVNBLnB1c2goIFwiLC4qOlwiICk7XG5cdFx0fSApO1xuXHR9XG5cblx0aWYgKCAoIHN1cHBvcnQubWF0Y2hlc1NlbGVjdG9yID0gcm5hdGl2ZS50ZXN0KCAoIG1hdGNoZXMgPSBkb2NFbGVtLm1hdGNoZXMgfHxcblx0XHRkb2NFbGVtLndlYmtpdE1hdGNoZXNTZWxlY3RvciB8fFxuXHRcdGRvY0VsZW0ubW96TWF0Y2hlc1NlbGVjdG9yIHx8XG5cdFx0ZG9jRWxlbS5vTWF0Y2hlc1NlbGVjdG9yIHx8XG5cdFx0ZG9jRWxlbS5tc01hdGNoZXNTZWxlY3RvciApICkgKSApIHtcblxuXHRcdGFzc2VydCggZnVuY3Rpb24oIGVsICkge1xuXG5cdFx0XHQvLyBDaGVjayB0byBzZWUgaWYgaXQncyBwb3NzaWJsZSB0byBkbyBtYXRjaGVzU2VsZWN0b3Jcblx0XHRcdC8vIG9uIGEgZGlzY29ubmVjdGVkIG5vZGUgKElFIDkpXG5cdFx0XHRzdXBwb3J0LmRpc2Nvbm5lY3RlZE1hdGNoID0gbWF0Y2hlcy5jYWxsKCBlbCwgXCIqXCIgKTtcblxuXHRcdFx0Ly8gVGhpcyBzaG91bGQgZmFpbCB3aXRoIGFuIGV4Y2VwdGlvblxuXHRcdFx0Ly8gR2Vja28gZG9lcyBub3QgZXJyb3IsIHJldHVybnMgZmFsc2UgaW5zdGVhZFxuXHRcdFx0bWF0Y2hlcy5jYWxsKCBlbCwgXCJbcyE9JyddOnhcIiApO1xuXHRcdFx0cmJ1Z2d5TWF0Y2hlcy5wdXNoKCBcIiE9XCIsIHBzZXVkb3MgKTtcblx0XHR9ICk7XG5cdH1cblxuXHRyYnVnZ3lRU0EgPSByYnVnZ3lRU0EubGVuZ3RoICYmIG5ldyBSZWdFeHAoIHJidWdneVFTQS5qb2luKCBcInxcIiApICk7XG5cdHJidWdneU1hdGNoZXMgPSByYnVnZ3lNYXRjaGVzLmxlbmd0aCAmJiBuZXcgUmVnRXhwKCByYnVnZ3lNYXRjaGVzLmpvaW4oIFwifFwiICkgKTtcblxuXHQvKiBDb250YWluc1xuXHQtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tICovXG5cdGhhc0NvbXBhcmUgPSBybmF0aXZlLnRlc3QoIGRvY0VsZW0uY29tcGFyZURvY3VtZW50UG9zaXRpb24gKTtcblxuXHQvLyBFbGVtZW50IGNvbnRhaW5zIGFub3RoZXJcblx0Ly8gUHVycG9zZWZ1bGx5IHNlbGYtZXhjbHVzaXZlXG5cdC8vIEFzIGluLCBhbiBlbGVtZW50IGRvZXMgbm90IGNvbnRhaW4gaXRzZWxmXG5cdGNvbnRhaW5zID0gaGFzQ29tcGFyZSB8fCBybmF0aXZlLnRlc3QoIGRvY0VsZW0uY29udGFpbnMgKSA/XG5cdFx0ZnVuY3Rpb24oIGEsIGIgKSB7XG5cdFx0XHR2YXIgYWRvd24gPSBhLm5vZGVUeXBlID09PSA5ID8gYS5kb2N1bWVudEVsZW1lbnQgOiBhLFxuXHRcdFx0XHRidXAgPSBiICYmIGIucGFyZW50Tm9kZTtcblx0XHRcdHJldHVybiBhID09PSBidXAgfHwgISEoIGJ1cCAmJiBidXAubm9kZVR5cGUgPT09IDEgJiYgKFxuXHRcdFx0XHRhZG93bi5jb250YWlucyA/XG5cdFx0XHRcdFx0YWRvd24uY29udGFpbnMoIGJ1cCApIDpcblx0XHRcdFx0XHRhLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uICYmIGEuY29tcGFyZURvY3VtZW50UG9zaXRpb24oIGJ1cCApICYgMTZcblx0XHRcdCkgKTtcblx0XHR9IDpcblx0XHRmdW5jdGlvbiggYSwgYiApIHtcblx0XHRcdGlmICggYiApIHtcblx0XHRcdFx0d2hpbGUgKCAoIGIgPSBiLnBhcmVudE5vZGUgKSApIHtcblx0XHRcdFx0XHRpZiAoIGIgPT09IGEgKSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9O1xuXG5cdC8qIFNvcnRpbmdcblx0LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAqL1xuXG5cdC8vIERvY3VtZW50IG9yZGVyIHNvcnRpbmdcblx0c29ydE9yZGVyID0gaGFzQ29tcGFyZSA/XG5cdGZ1bmN0aW9uKCBhLCBiICkge1xuXG5cdFx0Ly8gRmxhZyBmb3IgZHVwbGljYXRlIHJlbW92YWxcblx0XHRpZiAoIGEgPT09IGIgKSB7XG5cdFx0XHRoYXNEdXBsaWNhdGUgPSB0cnVlO1xuXHRcdFx0cmV0dXJuIDA7XG5cdFx0fVxuXG5cdFx0Ly8gU29ydCBvbiBtZXRob2QgZXhpc3RlbmNlIGlmIG9ubHkgb25lIGlucHV0IGhhcyBjb21wYXJlRG9jdW1lbnRQb3NpdGlvblxuXHRcdHZhciBjb21wYXJlID0gIWEuY29tcGFyZURvY3VtZW50UG9zaXRpb24gLSAhYi5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbjtcblx0XHRpZiAoIGNvbXBhcmUgKSB7XG5cdFx0XHRyZXR1cm4gY29tcGFyZTtcblx0XHR9XG5cblx0XHQvLyBDYWxjdWxhdGUgcG9zaXRpb24gaWYgYm90aCBpbnB1dHMgYmVsb25nIHRvIHRoZSBzYW1lIGRvY3VtZW50XG5cdFx0Ly8gU3VwcG9ydDogSUUgMTErLCBFZGdlIDE3IC0gMTgrXG5cdFx0Ly8gSUUvRWRnZSBzb21ldGltZXMgdGhyb3cgYSBcIlBlcm1pc3Npb24gZGVuaWVkXCIgZXJyb3Igd2hlbiBzdHJpY3QtY29tcGFyaW5nXG5cdFx0Ly8gdHdvIGRvY3VtZW50czsgc2hhbGxvdyBjb21wYXJpc29ucyB3b3JrLlxuXHRcdC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcWVxZXFcblx0XHRjb21wYXJlID0gKCBhLm93bmVyRG9jdW1lbnQgfHwgYSApID09ICggYi5vd25lckRvY3VtZW50IHx8IGIgKSA/XG5cdFx0XHRhLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uKCBiICkgOlxuXG5cdFx0XHQvLyBPdGhlcndpc2Ugd2Uga25vdyB0aGV5IGFyZSBkaXNjb25uZWN0ZWRcblx0XHRcdDE7XG5cblx0XHQvLyBEaXNjb25uZWN0ZWQgbm9kZXNcblx0XHRpZiAoIGNvbXBhcmUgJiAxIHx8XG5cdFx0XHQoICFzdXBwb3J0LnNvcnREZXRhY2hlZCAmJiBiLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uKCBhICkgPT09IGNvbXBhcmUgKSApIHtcblxuXHRcdFx0Ly8gQ2hvb3NlIHRoZSBmaXJzdCBlbGVtZW50IHRoYXQgaXMgcmVsYXRlZCB0byBvdXIgcHJlZmVycmVkIGRvY3VtZW50XG5cdFx0XHQvLyBTdXBwb3J0OiBJRSAxMSssIEVkZ2UgMTcgLSAxOCtcblx0XHRcdC8vIElFL0VkZ2Ugc29tZXRpbWVzIHRocm93IGEgXCJQZXJtaXNzaW9uIGRlbmllZFwiIGVycm9yIHdoZW4gc3RyaWN0LWNvbXBhcmluZ1xuXHRcdFx0Ly8gdHdvIGRvY3VtZW50czsgc2hhbGxvdyBjb21wYXJpc29ucyB3b3JrLlxuXHRcdFx0Ly8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVxZXFlcVxuXHRcdFx0aWYgKCBhID09IGRvY3VtZW50IHx8IGEub3duZXJEb2N1bWVudCA9PSBwcmVmZXJyZWREb2MgJiZcblx0XHRcdFx0Y29udGFpbnMoIHByZWZlcnJlZERvYywgYSApICkge1xuXHRcdFx0XHRyZXR1cm4gLTE7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFN1cHBvcnQ6IElFIDExKywgRWRnZSAxNyAtIDE4K1xuXHRcdFx0Ly8gSUUvRWRnZSBzb21ldGltZXMgdGhyb3cgYSBcIlBlcm1pc3Npb24gZGVuaWVkXCIgZXJyb3Igd2hlbiBzdHJpY3QtY29tcGFyaW5nXG5cdFx0XHQvLyB0d28gZG9jdW1lbnRzOyBzaGFsbG93IGNvbXBhcmlzb25zIHdvcmsuXG5cdFx0XHQvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXFlcWVxXG5cdFx0XHRpZiAoIGIgPT0gZG9jdW1lbnQgfHwgYi5vd25lckRvY3VtZW50ID09IHByZWZlcnJlZERvYyAmJlxuXHRcdFx0XHRjb250YWlucyggcHJlZmVycmVkRG9jLCBiICkgKSB7XG5cdFx0XHRcdHJldHVybiAxO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBNYWludGFpbiBvcmlnaW5hbCBvcmRlclxuXHRcdFx0cmV0dXJuIHNvcnRJbnB1dCA/XG5cdFx0XHRcdCggaW5kZXhPZiggc29ydElucHV0LCBhICkgLSBpbmRleE9mKCBzb3J0SW5wdXQsIGIgKSApIDpcblx0XHRcdFx0MDtcblx0XHR9XG5cblx0XHRyZXR1cm4gY29tcGFyZSAmIDQgPyAtMSA6IDE7XG5cdH0gOlxuXHRmdW5jdGlvbiggYSwgYiApIHtcblxuXHRcdC8vIEV4aXQgZWFybHkgaWYgdGhlIG5vZGVzIGFyZSBpZGVudGljYWxcblx0XHRpZiAoIGEgPT09IGIgKSB7XG5cdFx0XHRoYXNEdXBsaWNhdGUgPSB0cnVlO1xuXHRcdFx0cmV0dXJuIDA7XG5cdFx0fVxuXG5cdFx0dmFyIGN1cixcblx0XHRcdGkgPSAwLFxuXHRcdFx0YXVwID0gYS5wYXJlbnROb2RlLFxuXHRcdFx0YnVwID0gYi5wYXJlbnROb2RlLFxuXHRcdFx0YXAgPSBbIGEgXSxcblx0XHRcdGJwID0gWyBiIF07XG5cblx0XHQvLyBQYXJlbnRsZXNzIG5vZGVzIGFyZSBlaXRoZXIgZG9jdW1lbnRzIG9yIGRpc2Nvbm5lY3RlZFxuXHRcdGlmICggIWF1cCB8fCAhYnVwICkge1xuXG5cdFx0XHQvLyBTdXBwb3J0OiBJRSAxMSssIEVkZ2UgMTcgLSAxOCtcblx0XHRcdC8vIElFL0VkZ2Ugc29tZXRpbWVzIHRocm93IGEgXCJQZXJtaXNzaW9uIGRlbmllZFwiIGVycm9yIHdoZW4gc3RyaWN0LWNvbXBhcmluZ1xuXHRcdFx0Ly8gdHdvIGRvY3VtZW50czsgc2hhbGxvdyBjb21wYXJpc29ucyB3b3JrLlxuXHRcdFx0LyogZXNsaW50LWRpc2FibGUgZXFlcWVxICovXG5cdFx0XHRyZXR1cm4gYSA9PSBkb2N1bWVudCA/IC0xIDpcblx0XHRcdFx0YiA9PSBkb2N1bWVudCA/IDEgOlxuXHRcdFx0XHQvKiBlc2xpbnQtZW5hYmxlIGVxZXFlcSAqL1xuXHRcdFx0XHRhdXAgPyAtMSA6XG5cdFx0XHRcdGJ1cCA/IDEgOlxuXHRcdFx0XHRzb3J0SW5wdXQgP1xuXHRcdFx0XHQoIGluZGV4T2YoIHNvcnRJbnB1dCwgYSApIC0gaW5kZXhPZiggc29ydElucHV0LCBiICkgKSA6XG5cdFx0XHRcdDA7XG5cblx0XHQvLyBJZiB0aGUgbm9kZXMgYXJlIHNpYmxpbmdzLCB3ZSBjYW4gZG8gYSBxdWljayBjaGVja1xuXHRcdH0gZWxzZSBpZiAoIGF1cCA9PT0gYnVwICkge1xuXHRcdFx0cmV0dXJuIHNpYmxpbmdDaGVjayggYSwgYiApO1xuXHRcdH1cblxuXHRcdC8vIE90aGVyd2lzZSB3ZSBuZWVkIGZ1bGwgbGlzdHMgb2YgdGhlaXIgYW5jZXN0b3JzIGZvciBjb21wYXJpc29uXG5cdFx0Y3VyID0gYTtcblx0XHR3aGlsZSAoICggY3VyID0gY3VyLnBhcmVudE5vZGUgKSApIHtcblx0XHRcdGFwLnVuc2hpZnQoIGN1ciApO1xuXHRcdH1cblx0XHRjdXIgPSBiO1xuXHRcdHdoaWxlICggKCBjdXIgPSBjdXIucGFyZW50Tm9kZSApICkge1xuXHRcdFx0YnAudW5zaGlmdCggY3VyICk7XG5cdFx0fVxuXG5cdFx0Ly8gV2FsayBkb3duIHRoZSB0cmVlIGxvb2tpbmcgZm9yIGEgZGlzY3JlcGFuY3lcblx0XHR3aGlsZSAoIGFwWyBpIF0gPT09IGJwWyBpIF0gKSB7XG5cdFx0XHRpKys7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGkgP1xuXG5cdFx0XHQvLyBEbyBhIHNpYmxpbmcgY2hlY2sgaWYgdGhlIG5vZGVzIGhhdmUgYSBjb21tb24gYW5jZXN0b3Jcblx0XHRcdHNpYmxpbmdDaGVjayggYXBbIGkgXSwgYnBbIGkgXSApIDpcblxuXHRcdFx0Ly8gT3RoZXJ3aXNlIG5vZGVzIGluIG91ciBkb2N1bWVudCBzb3J0IGZpcnN0XG5cdFx0XHQvLyBTdXBwb3J0OiBJRSAxMSssIEVkZ2UgMTcgLSAxOCtcblx0XHRcdC8vIElFL0VkZ2Ugc29tZXRpbWVzIHRocm93IGEgXCJQZXJtaXNzaW9uIGRlbmllZFwiIGVycm9yIHdoZW4gc3RyaWN0LWNvbXBhcmluZ1xuXHRcdFx0Ly8gdHdvIGRvY3VtZW50czsgc2hhbGxvdyBjb21wYXJpc29ucyB3b3JrLlxuXHRcdFx0LyogZXNsaW50LWRpc2FibGUgZXFlcWVxICovXG5cdFx0XHRhcFsgaSBdID09IHByZWZlcnJlZERvYyA/IC0xIDpcblx0XHRcdGJwWyBpIF0gPT0gcHJlZmVycmVkRG9jID8gMSA6XG5cdFx0XHQvKiBlc2xpbnQtZW5hYmxlIGVxZXFlcSAqL1xuXHRcdFx0MDtcblx0fTtcblxuXHRyZXR1cm4gZG9jdW1lbnQ7XG59O1xuXG5TaXp6bGUubWF0Y2hlcyA9IGZ1bmN0aW9uKCBleHByLCBlbGVtZW50cyApIHtcblx0cmV0dXJuIFNpenpsZSggZXhwciwgbnVsbCwgbnVsbCwgZWxlbWVudHMgKTtcbn07XG5cblNpenpsZS5tYXRjaGVzU2VsZWN0b3IgPSBmdW5jdGlvbiggZWxlbSwgZXhwciApIHtcblx0c2V0RG9jdW1lbnQoIGVsZW0gKTtcblxuXHRpZiAoIHN1cHBvcnQubWF0Y2hlc1NlbGVjdG9yICYmIGRvY3VtZW50SXNIVE1MICYmXG5cdFx0IW5vbm5hdGl2ZVNlbGVjdG9yQ2FjaGVbIGV4cHIgKyBcIiBcIiBdICYmXG5cdFx0KCAhcmJ1Z2d5TWF0Y2hlcyB8fCAhcmJ1Z2d5TWF0Y2hlcy50ZXN0KCBleHByICkgKSAmJlxuXHRcdCggIXJidWdneVFTQSAgICAgfHwgIXJidWdneVFTQS50ZXN0KCBleHByICkgKSApIHtcblxuXHRcdHRyeSB7XG5cdFx0XHR2YXIgcmV0ID0gbWF0Y2hlcy5jYWxsKCBlbGVtLCBleHByICk7XG5cblx0XHRcdC8vIElFIDkncyBtYXRjaGVzU2VsZWN0b3IgcmV0dXJucyBmYWxzZSBvbiBkaXNjb25uZWN0ZWQgbm9kZXNcblx0XHRcdGlmICggcmV0IHx8IHN1cHBvcnQuZGlzY29ubmVjdGVkTWF0Y2ggfHxcblxuXHRcdFx0XHQvLyBBcyB3ZWxsLCBkaXNjb25uZWN0ZWQgbm9kZXMgYXJlIHNhaWQgdG8gYmUgaW4gYSBkb2N1bWVudFxuXHRcdFx0XHQvLyBmcmFnbWVudCBpbiBJRSA5XG5cdFx0XHRcdGVsZW0uZG9jdW1lbnQgJiYgZWxlbS5kb2N1bWVudC5ub2RlVHlwZSAhPT0gMTEgKSB7XG5cdFx0XHRcdHJldHVybiByZXQ7XG5cdFx0XHR9XG5cdFx0fSBjYXRjaCAoIGUgKSB7XG5cdFx0XHRub25uYXRpdmVTZWxlY3RvckNhY2hlKCBleHByLCB0cnVlICk7XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIFNpenpsZSggZXhwciwgZG9jdW1lbnQsIG51bGwsIFsgZWxlbSBdICkubGVuZ3RoID4gMDtcbn07XG5cblNpenpsZS5jb250YWlucyA9IGZ1bmN0aW9uKCBjb250ZXh0LCBlbGVtICkge1xuXG5cdC8vIFNldCBkb2N1bWVudCB2YXJzIGlmIG5lZWRlZFxuXHQvLyBTdXBwb3J0OiBJRSAxMSssIEVkZ2UgMTcgLSAxOCtcblx0Ly8gSUUvRWRnZSBzb21ldGltZXMgdGhyb3cgYSBcIlBlcm1pc3Npb24gZGVuaWVkXCIgZXJyb3Igd2hlbiBzdHJpY3QtY29tcGFyaW5nXG5cdC8vIHR3byBkb2N1bWVudHM7IHNoYWxsb3cgY29tcGFyaXNvbnMgd29yay5cblx0Ly8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVxZXFlcVxuXHRpZiAoICggY29udGV4dC5vd25lckRvY3VtZW50IHx8IGNvbnRleHQgKSAhPSBkb2N1bWVudCApIHtcblx0XHRzZXREb2N1bWVudCggY29udGV4dCApO1xuXHR9XG5cdHJldHVybiBjb250YWlucyggY29udGV4dCwgZWxlbSApO1xufTtcblxuU2l6emxlLmF0dHIgPSBmdW5jdGlvbiggZWxlbSwgbmFtZSApIHtcblxuXHQvLyBTZXQgZG9jdW1lbnQgdmFycyBpZiBuZWVkZWRcblx0Ly8gU3VwcG9ydDogSUUgMTErLCBFZGdlIDE3IC0gMTgrXG5cdC8vIElFL0VkZ2Ugc29tZXRpbWVzIHRocm93IGEgXCJQZXJtaXNzaW9uIGRlbmllZFwiIGVycm9yIHdoZW4gc3RyaWN0LWNvbXBhcmluZ1xuXHQvLyB0d28gZG9jdW1lbnRzOyBzaGFsbG93IGNvbXBhcmlzb25zIHdvcmsuXG5cdC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcWVxZXFcblx0aWYgKCAoIGVsZW0ub3duZXJEb2N1bWVudCB8fCBlbGVtICkgIT0gZG9jdW1lbnQgKSB7XG5cdFx0c2V0RG9jdW1lbnQoIGVsZW0gKTtcblx0fVxuXG5cdHZhciBmbiA9IEV4cHIuYXR0ckhhbmRsZVsgbmFtZS50b0xvd2VyQ2FzZSgpIF0sXG5cblx0XHQvLyBEb24ndCBnZXQgZm9vbGVkIGJ5IE9iamVjdC5wcm90b3R5cGUgcHJvcGVydGllcyAoalF1ZXJ5ICMxMzgwNylcblx0XHR2YWwgPSBmbiAmJiBoYXNPd24uY2FsbCggRXhwci5hdHRySGFuZGxlLCBuYW1lLnRvTG93ZXJDYXNlKCkgKSA/XG5cdFx0XHRmbiggZWxlbSwgbmFtZSwgIWRvY3VtZW50SXNIVE1MICkgOlxuXHRcdFx0dW5kZWZpbmVkO1xuXG5cdHJldHVybiB2YWwgIT09IHVuZGVmaW5lZCA/XG5cdFx0dmFsIDpcblx0XHRzdXBwb3J0LmF0dHJpYnV0ZXMgfHwgIWRvY3VtZW50SXNIVE1MID9cblx0XHRcdGVsZW0uZ2V0QXR0cmlidXRlKCBuYW1lICkgOlxuXHRcdFx0KCB2YWwgPSBlbGVtLmdldEF0dHJpYnV0ZU5vZGUoIG5hbWUgKSApICYmIHZhbC5zcGVjaWZpZWQgP1xuXHRcdFx0XHR2YWwudmFsdWUgOlxuXHRcdFx0XHRudWxsO1xufTtcblxuU2l6emxlLmVzY2FwZSA9IGZ1bmN0aW9uKCBzZWwgKSB7XG5cdHJldHVybiAoIHNlbCArIFwiXCIgKS5yZXBsYWNlKCByY3NzZXNjYXBlLCBmY3NzZXNjYXBlICk7XG59O1xuXG5TaXp6bGUuZXJyb3IgPSBmdW5jdGlvbiggbXNnICkge1xuXHR0aHJvdyBuZXcgRXJyb3IoIFwiU3ludGF4IGVycm9yLCB1bnJlY29nbml6ZWQgZXhwcmVzc2lvbjogXCIgKyBtc2cgKTtcbn07XG5cbi8qKlxuICogRG9jdW1lbnQgc29ydGluZyBhbmQgcmVtb3ZpbmcgZHVwbGljYXRlc1xuICogQHBhcmFtIHtBcnJheUxpa2V9IHJlc3VsdHNcbiAqL1xuU2l6emxlLnVuaXF1ZVNvcnQgPSBmdW5jdGlvbiggcmVzdWx0cyApIHtcblx0dmFyIGVsZW0sXG5cdFx0ZHVwbGljYXRlcyA9IFtdLFxuXHRcdGogPSAwLFxuXHRcdGkgPSAwO1xuXG5cdC8vIFVubGVzcyB3ZSAqa25vdyogd2UgY2FuIGRldGVjdCBkdXBsaWNhdGVzLCBhc3N1bWUgdGhlaXIgcHJlc2VuY2Vcblx0aGFzRHVwbGljYXRlID0gIXN1cHBvcnQuZGV0ZWN0RHVwbGljYXRlcztcblx0c29ydElucHV0ID0gIXN1cHBvcnQuc29ydFN0YWJsZSAmJiByZXN1bHRzLnNsaWNlKCAwICk7XG5cdHJlc3VsdHMuc29ydCggc29ydE9yZGVyICk7XG5cblx0aWYgKCBoYXNEdXBsaWNhdGUgKSB7XG5cdFx0d2hpbGUgKCAoIGVsZW0gPSByZXN1bHRzWyBpKysgXSApICkge1xuXHRcdFx0aWYgKCBlbGVtID09PSByZXN1bHRzWyBpIF0gKSB7XG5cdFx0XHRcdGogPSBkdXBsaWNhdGVzLnB1c2goIGkgKTtcblx0XHRcdH1cblx0XHR9XG5cdFx0d2hpbGUgKCBqLS0gKSB7XG5cdFx0XHRyZXN1bHRzLnNwbGljZSggZHVwbGljYXRlc1sgaiBdLCAxICk7XG5cdFx0fVxuXHR9XG5cblx0Ly8gQ2xlYXIgaW5wdXQgYWZ0ZXIgc29ydGluZyB0byByZWxlYXNlIG9iamVjdHNcblx0Ly8gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9qcXVlcnkvc2l6emxlL3B1bGwvMjI1XG5cdHNvcnRJbnB1dCA9IG51bGw7XG5cblx0cmV0dXJuIHJlc3VsdHM7XG59O1xuXG4vKipcbiAqIFV0aWxpdHkgZnVuY3Rpb24gZm9yIHJldHJpZXZpbmcgdGhlIHRleHQgdmFsdWUgb2YgYW4gYXJyYXkgb2YgRE9NIG5vZGVzXG4gKiBAcGFyYW0ge0FycmF5fEVsZW1lbnR9IGVsZW1cbiAqL1xuZ2V0VGV4dCA9IFNpenpsZS5nZXRUZXh0ID0gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdHZhciBub2RlLFxuXHRcdHJldCA9IFwiXCIsXG5cdFx0aSA9IDAsXG5cdFx0bm9kZVR5cGUgPSBlbGVtLm5vZGVUeXBlO1xuXG5cdGlmICggIW5vZGVUeXBlICkge1xuXG5cdFx0Ly8gSWYgbm8gbm9kZVR5cGUsIHRoaXMgaXMgZXhwZWN0ZWQgdG8gYmUgYW4gYXJyYXlcblx0XHR3aGlsZSAoICggbm9kZSA9IGVsZW1bIGkrKyBdICkgKSB7XG5cblx0XHRcdC8vIERvIG5vdCB0cmF2ZXJzZSBjb21tZW50IG5vZGVzXG5cdFx0XHRyZXQgKz0gZ2V0VGV4dCggbm9kZSApO1xuXHRcdH1cblx0fSBlbHNlIGlmICggbm9kZVR5cGUgPT09IDEgfHwgbm9kZVR5cGUgPT09IDkgfHwgbm9kZVR5cGUgPT09IDExICkge1xuXG5cdFx0Ly8gVXNlIHRleHRDb250ZW50IGZvciBlbGVtZW50c1xuXHRcdC8vIGlubmVyVGV4dCB1c2FnZSByZW1vdmVkIGZvciBjb25zaXN0ZW5jeSBvZiBuZXcgbGluZXMgKGpRdWVyeSAjMTExNTMpXG5cdFx0aWYgKCB0eXBlb2YgZWxlbS50ZXh0Q29udGVudCA9PT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdHJldHVybiBlbGVtLnRleHRDb250ZW50O1xuXHRcdH0gZWxzZSB7XG5cblx0XHRcdC8vIFRyYXZlcnNlIGl0cyBjaGlsZHJlblxuXHRcdFx0Zm9yICggZWxlbSA9IGVsZW0uZmlyc3RDaGlsZDsgZWxlbTsgZWxlbSA9IGVsZW0ubmV4dFNpYmxpbmcgKSB7XG5cdFx0XHRcdHJldCArPSBnZXRUZXh0KCBlbGVtICk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9IGVsc2UgaWYgKCBub2RlVHlwZSA9PT0gMyB8fCBub2RlVHlwZSA9PT0gNCApIHtcblx0XHRyZXR1cm4gZWxlbS5ub2RlVmFsdWU7XG5cdH1cblxuXHQvLyBEbyBub3QgaW5jbHVkZSBjb21tZW50IG9yIHByb2Nlc3NpbmcgaW5zdHJ1Y3Rpb24gbm9kZXNcblxuXHRyZXR1cm4gcmV0O1xufTtcblxuRXhwciA9IFNpenpsZS5zZWxlY3RvcnMgPSB7XG5cblx0Ly8gQ2FuIGJlIGFkanVzdGVkIGJ5IHRoZSB1c2VyXG5cdGNhY2hlTGVuZ3RoOiA1MCxcblxuXHRjcmVhdGVQc2V1ZG86IG1hcmtGdW5jdGlvbixcblxuXHRtYXRjaDogbWF0Y2hFeHByLFxuXG5cdGF0dHJIYW5kbGU6IHt9LFxuXG5cdGZpbmQ6IHt9LFxuXG5cdHJlbGF0aXZlOiB7XG5cdFx0XCI+XCI6IHsgZGlyOiBcInBhcmVudE5vZGVcIiwgZmlyc3Q6IHRydWUgfSxcblx0XHRcIiBcIjogeyBkaXI6IFwicGFyZW50Tm9kZVwiIH0sXG5cdFx0XCIrXCI6IHsgZGlyOiBcInByZXZpb3VzU2libGluZ1wiLCBmaXJzdDogdHJ1ZSB9LFxuXHRcdFwiflwiOiB7IGRpcjogXCJwcmV2aW91c1NpYmxpbmdcIiB9XG5cdH0sXG5cblx0cHJlRmlsdGVyOiB7XG5cdFx0XCJBVFRSXCI6IGZ1bmN0aW9uKCBtYXRjaCApIHtcblx0XHRcdG1hdGNoWyAxIF0gPSBtYXRjaFsgMSBdLnJlcGxhY2UoIHJ1bmVzY2FwZSwgZnVuZXNjYXBlICk7XG5cblx0XHRcdC8vIE1vdmUgdGhlIGdpdmVuIHZhbHVlIHRvIG1hdGNoWzNdIHdoZXRoZXIgcXVvdGVkIG9yIHVucXVvdGVkXG5cdFx0XHRtYXRjaFsgMyBdID0gKCBtYXRjaFsgMyBdIHx8IG1hdGNoWyA0IF0gfHxcblx0XHRcdFx0bWF0Y2hbIDUgXSB8fCBcIlwiICkucmVwbGFjZSggcnVuZXNjYXBlLCBmdW5lc2NhcGUgKTtcblxuXHRcdFx0aWYgKCBtYXRjaFsgMiBdID09PSBcIn49XCIgKSB7XG5cdFx0XHRcdG1hdGNoWyAzIF0gPSBcIiBcIiArIG1hdGNoWyAzIF0gKyBcIiBcIjtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIG1hdGNoLnNsaWNlKCAwLCA0ICk7XG5cdFx0fSxcblxuXHRcdFwiQ0hJTERcIjogZnVuY3Rpb24oIG1hdGNoICkge1xuXG5cdFx0XHQvKiBtYXRjaGVzIGZyb20gbWF0Y2hFeHByW1wiQ0hJTERcIl1cblx0XHRcdFx0MSB0eXBlIChvbmx5fG50aHwuLi4pXG5cdFx0XHRcdDIgd2hhdCAoY2hpbGR8b2YtdHlwZSlcblx0XHRcdFx0MyBhcmd1bWVudCAoZXZlbnxvZGR8XFxkKnxcXGQqbihbKy1dXFxkKyk/fC4uLilcblx0XHRcdFx0NCB4bi1jb21wb25lbnQgb2YgeG4reSBhcmd1bWVudCAoWystXT9cXGQqbnwpXG5cdFx0XHRcdDUgc2lnbiBvZiB4bi1jb21wb25lbnRcblx0XHRcdFx0NiB4IG9mIHhuLWNvbXBvbmVudFxuXHRcdFx0XHQ3IHNpZ24gb2YgeS1jb21wb25lbnRcblx0XHRcdFx0OCB5IG9mIHktY29tcG9uZW50XG5cdFx0XHQqL1xuXHRcdFx0bWF0Y2hbIDEgXSA9IG1hdGNoWyAxIF0udG9Mb3dlckNhc2UoKTtcblxuXHRcdFx0aWYgKCBtYXRjaFsgMSBdLnNsaWNlKCAwLCAzICkgPT09IFwibnRoXCIgKSB7XG5cblx0XHRcdFx0Ly8gbnRoLSogcmVxdWlyZXMgYXJndW1lbnRcblx0XHRcdFx0aWYgKCAhbWF0Y2hbIDMgXSApIHtcblx0XHRcdFx0XHRTaXp6bGUuZXJyb3IoIG1hdGNoWyAwIF0gKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIG51bWVyaWMgeCBhbmQgeSBwYXJhbWV0ZXJzIGZvciBFeHByLmZpbHRlci5DSElMRFxuXHRcdFx0XHQvLyByZW1lbWJlciB0aGF0IGZhbHNlL3RydWUgY2FzdCByZXNwZWN0aXZlbHkgdG8gMC8xXG5cdFx0XHRcdG1hdGNoWyA0IF0gPSArKCBtYXRjaFsgNCBdID9cblx0XHRcdFx0XHRtYXRjaFsgNSBdICsgKCBtYXRjaFsgNiBdIHx8IDEgKSA6XG5cdFx0XHRcdFx0MiAqICggbWF0Y2hbIDMgXSA9PT0gXCJldmVuXCIgfHwgbWF0Y2hbIDMgXSA9PT0gXCJvZGRcIiApICk7XG5cdFx0XHRcdG1hdGNoWyA1IF0gPSArKCAoIG1hdGNoWyA3IF0gKyBtYXRjaFsgOCBdICkgfHwgbWF0Y2hbIDMgXSA9PT0gXCJvZGRcIiApO1xuXG5cdFx0XHRcdC8vIG90aGVyIHR5cGVzIHByb2hpYml0IGFyZ3VtZW50c1xuXHRcdFx0fSBlbHNlIGlmICggbWF0Y2hbIDMgXSApIHtcblx0XHRcdFx0U2l6emxlLmVycm9yKCBtYXRjaFsgMCBdICk7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBtYXRjaDtcblx0XHR9LFxuXG5cdFx0XCJQU0VVRE9cIjogZnVuY3Rpb24oIG1hdGNoICkge1xuXHRcdFx0dmFyIGV4Y2Vzcyxcblx0XHRcdFx0dW5xdW90ZWQgPSAhbWF0Y2hbIDYgXSAmJiBtYXRjaFsgMiBdO1xuXG5cdFx0XHRpZiAoIG1hdGNoRXhwclsgXCJDSElMRFwiIF0udGVzdCggbWF0Y2hbIDAgXSApICkge1xuXHRcdFx0XHRyZXR1cm4gbnVsbDtcblx0XHRcdH1cblxuXHRcdFx0Ly8gQWNjZXB0IHF1b3RlZCBhcmd1bWVudHMgYXMtaXNcblx0XHRcdGlmICggbWF0Y2hbIDMgXSApIHtcblx0XHRcdFx0bWF0Y2hbIDIgXSA9IG1hdGNoWyA0IF0gfHwgbWF0Y2hbIDUgXSB8fCBcIlwiO1xuXG5cdFx0XHQvLyBTdHJpcCBleGNlc3MgY2hhcmFjdGVycyBmcm9tIHVucXVvdGVkIGFyZ3VtZW50c1xuXHRcdFx0fSBlbHNlIGlmICggdW5xdW90ZWQgJiYgcnBzZXVkby50ZXN0KCB1bnF1b3RlZCApICYmXG5cblx0XHRcdFx0Ly8gR2V0IGV4Y2VzcyBmcm9tIHRva2VuaXplIChyZWN1cnNpdmVseSlcblx0XHRcdFx0KCBleGNlc3MgPSB0b2tlbml6ZSggdW5xdW90ZWQsIHRydWUgKSApICYmXG5cblx0XHRcdFx0Ly8gYWR2YW5jZSB0byB0aGUgbmV4dCBjbG9zaW5nIHBhcmVudGhlc2lzXG5cdFx0XHRcdCggZXhjZXNzID0gdW5xdW90ZWQuaW5kZXhPZiggXCIpXCIsIHVucXVvdGVkLmxlbmd0aCAtIGV4Y2VzcyApIC0gdW5xdW90ZWQubGVuZ3RoICkgKSB7XG5cblx0XHRcdFx0Ly8gZXhjZXNzIGlzIGEgbmVnYXRpdmUgaW5kZXhcblx0XHRcdFx0bWF0Y2hbIDAgXSA9IG1hdGNoWyAwIF0uc2xpY2UoIDAsIGV4Y2VzcyApO1xuXHRcdFx0XHRtYXRjaFsgMiBdID0gdW5xdW90ZWQuc2xpY2UoIDAsIGV4Y2VzcyApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBSZXR1cm4gb25seSBjYXB0dXJlcyBuZWVkZWQgYnkgdGhlIHBzZXVkbyBmaWx0ZXIgbWV0aG9kICh0eXBlIGFuZCBhcmd1bWVudClcblx0XHRcdHJldHVybiBtYXRjaC5zbGljZSggMCwgMyApO1xuXHRcdH1cblx0fSxcblxuXHRmaWx0ZXI6IHtcblxuXHRcdFwiVEFHXCI6IGZ1bmN0aW9uKCBub2RlTmFtZVNlbGVjdG9yICkge1xuXHRcdFx0dmFyIG5vZGVOYW1lID0gbm9kZU5hbWVTZWxlY3Rvci5yZXBsYWNlKCBydW5lc2NhcGUsIGZ1bmVzY2FwZSApLnRvTG93ZXJDYXNlKCk7XG5cdFx0XHRyZXR1cm4gbm9kZU5hbWVTZWxlY3RvciA9PT0gXCIqXCIgP1xuXHRcdFx0XHRmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdFx0fSA6XG5cdFx0XHRcdGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHRcdHJldHVybiBlbGVtLm5vZGVOYW1lICYmIGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKSA9PT0gbm9kZU5hbWU7XG5cdFx0XHRcdH07XG5cdFx0fSxcblxuXHRcdFwiQ0xBU1NcIjogZnVuY3Rpb24oIGNsYXNzTmFtZSApIHtcblx0XHRcdHZhciBwYXR0ZXJuID0gY2xhc3NDYWNoZVsgY2xhc3NOYW1lICsgXCIgXCIgXTtcblxuXHRcdFx0cmV0dXJuIHBhdHRlcm4gfHxcblx0XHRcdFx0KCBwYXR0ZXJuID0gbmV3IFJlZ0V4cCggXCIoXnxcIiArIHdoaXRlc3BhY2UgK1xuXHRcdFx0XHRcdFwiKVwiICsgY2xhc3NOYW1lICsgXCIoXCIgKyB3aGl0ZXNwYWNlICsgXCJ8JClcIiApICkgJiYgY2xhc3NDYWNoZShcblx0XHRcdFx0XHRcdGNsYXNzTmFtZSwgZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRcdFx0XHRcdHJldHVybiBwYXR0ZXJuLnRlc3QoXG5cdFx0XHRcdFx0XHRcdFx0dHlwZW9mIGVsZW0uY2xhc3NOYW1lID09PSBcInN0cmluZ1wiICYmIGVsZW0uY2xhc3NOYW1lIHx8XG5cdFx0XHRcdFx0XHRcdFx0dHlwZW9mIGVsZW0uZ2V0QXR0cmlidXRlICE9PSBcInVuZGVmaW5lZFwiICYmXG5cdFx0XHRcdFx0XHRcdFx0XHRlbGVtLmdldEF0dHJpYnV0ZSggXCJjbGFzc1wiICkgfHxcblx0XHRcdFx0XHRcdFx0XHRcIlwiXG5cdFx0XHRcdFx0XHRcdCk7XG5cdFx0XHRcdH0gKTtcblx0XHR9LFxuXG5cdFx0XCJBVFRSXCI6IGZ1bmN0aW9uKCBuYW1lLCBvcGVyYXRvciwgY2hlY2sgKSB7XG5cdFx0XHRyZXR1cm4gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRcdHZhciByZXN1bHQgPSBTaXp6bGUuYXR0ciggZWxlbSwgbmFtZSApO1xuXG5cdFx0XHRcdGlmICggcmVzdWx0ID09IG51bGwgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIG9wZXJhdG9yID09PSBcIiE9XCI7XG5cdFx0XHRcdH1cblx0XHRcdFx0aWYgKCAhb3BlcmF0b3IgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRyZXN1bHQgKz0gXCJcIjtcblxuXHRcdFx0XHQvKiBlc2xpbnQtZGlzYWJsZSBtYXgtbGVuICovXG5cblx0XHRcdFx0cmV0dXJuIG9wZXJhdG9yID09PSBcIj1cIiA/IHJlc3VsdCA9PT0gY2hlY2sgOlxuXHRcdFx0XHRcdG9wZXJhdG9yID09PSBcIiE9XCIgPyByZXN1bHQgIT09IGNoZWNrIDpcblx0XHRcdFx0XHRvcGVyYXRvciA9PT0gXCJePVwiID8gY2hlY2sgJiYgcmVzdWx0LmluZGV4T2YoIGNoZWNrICkgPT09IDAgOlxuXHRcdFx0XHRcdG9wZXJhdG9yID09PSBcIio9XCIgPyBjaGVjayAmJiByZXN1bHQuaW5kZXhPZiggY2hlY2sgKSA+IC0xIDpcblx0XHRcdFx0XHRvcGVyYXRvciA9PT0gXCIkPVwiID8gY2hlY2sgJiYgcmVzdWx0LnNsaWNlKCAtY2hlY2subGVuZ3RoICkgPT09IGNoZWNrIDpcblx0XHRcdFx0XHRvcGVyYXRvciA9PT0gXCJ+PVwiID8gKCBcIiBcIiArIHJlc3VsdC5yZXBsYWNlKCByd2hpdGVzcGFjZSwgXCIgXCIgKSArIFwiIFwiICkuaW5kZXhPZiggY2hlY2sgKSA+IC0xIDpcblx0XHRcdFx0XHRvcGVyYXRvciA9PT0gXCJ8PVwiID8gcmVzdWx0ID09PSBjaGVjayB8fCByZXN1bHQuc2xpY2UoIDAsIGNoZWNrLmxlbmd0aCArIDEgKSA9PT0gY2hlY2sgKyBcIi1cIiA6XG5cdFx0XHRcdFx0ZmFsc2U7XG5cdFx0XHRcdC8qIGVzbGludC1lbmFibGUgbWF4LWxlbiAqL1xuXG5cdFx0XHR9O1xuXHRcdH0sXG5cblx0XHRcIkNISUxEXCI6IGZ1bmN0aW9uKCB0eXBlLCB3aGF0LCBfYXJndW1lbnQsIGZpcnN0LCBsYXN0ICkge1xuXHRcdFx0dmFyIHNpbXBsZSA9IHR5cGUuc2xpY2UoIDAsIDMgKSAhPT0gXCJudGhcIixcblx0XHRcdFx0Zm9yd2FyZCA9IHR5cGUuc2xpY2UoIC00ICkgIT09IFwibGFzdFwiLFxuXHRcdFx0XHRvZlR5cGUgPSB3aGF0ID09PSBcIm9mLXR5cGVcIjtcblxuXHRcdFx0cmV0dXJuIGZpcnN0ID09PSAxICYmIGxhc3QgPT09IDAgP1xuXG5cdFx0XHRcdC8vIFNob3J0Y3V0IGZvciA6bnRoLSoobilcblx0XHRcdFx0ZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRcdFx0cmV0dXJuICEhZWxlbS5wYXJlbnROb2RlO1xuXHRcdFx0XHR9IDpcblxuXHRcdFx0XHRmdW5jdGlvbiggZWxlbSwgX2NvbnRleHQsIHhtbCApIHtcblx0XHRcdFx0XHR2YXIgY2FjaGUsIHVuaXF1ZUNhY2hlLCBvdXRlckNhY2hlLCBub2RlLCBub2RlSW5kZXgsIHN0YXJ0LFxuXHRcdFx0XHRcdFx0ZGlyID0gc2ltcGxlICE9PSBmb3J3YXJkID8gXCJuZXh0U2libGluZ1wiIDogXCJwcmV2aW91c1NpYmxpbmdcIixcblx0XHRcdFx0XHRcdHBhcmVudCA9IGVsZW0ucGFyZW50Tm9kZSxcblx0XHRcdFx0XHRcdG5hbWUgPSBvZlR5cGUgJiYgZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpLFxuXHRcdFx0XHRcdFx0dXNlQ2FjaGUgPSAheG1sICYmICFvZlR5cGUsXG5cdFx0XHRcdFx0XHRkaWZmID0gZmFsc2U7XG5cblx0XHRcdFx0XHRpZiAoIHBhcmVudCApIHtcblxuXHRcdFx0XHRcdFx0Ly8gOihmaXJzdHxsYXN0fG9ubHkpLShjaGlsZHxvZi10eXBlKVxuXHRcdFx0XHRcdFx0aWYgKCBzaW1wbGUgKSB7XG5cdFx0XHRcdFx0XHRcdHdoaWxlICggZGlyICkge1xuXHRcdFx0XHRcdFx0XHRcdG5vZGUgPSBlbGVtO1xuXHRcdFx0XHRcdFx0XHRcdHdoaWxlICggKCBub2RlID0gbm9kZVsgZGlyIF0gKSApIHtcblx0XHRcdFx0XHRcdFx0XHRcdGlmICggb2ZUeXBlID9cblx0XHRcdFx0XHRcdFx0XHRcdFx0bm9kZS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpID09PSBuYW1lIDpcblx0XHRcdFx0XHRcdFx0XHRcdFx0bm9kZS5ub2RlVHlwZSA9PT0gMSApIHtcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRcdFx0Ly8gUmV2ZXJzZSBkaXJlY3Rpb24gZm9yIDpvbmx5LSogKGlmIHdlIGhhdmVuJ3QgeWV0IGRvbmUgc28pXG5cdFx0XHRcdFx0XHRcdFx0c3RhcnQgPSBkaXIgPSB0eXBlID09PSBcIm9ubHlcIiAmJiAhc3RhcnQgJiYgXCJuZXh0U2libGluZ1wiO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRzdGFydCA9IFsgZm9yd2FyZCA/IHBhcmVudC5maXJzdENoaWxkIDogcGFyZW50Lmxhc3RDaGlsZCBdO1xuXG5cdFx0XHRcdFx0XHQvLyBub24teG1sIDpudGgtY2hpbGQoLi4uKSBzdG9yZXMgY2FjaGUgZGF0YSBvbiBgcGFyZW50YFxuXHRcdFx0XHRcdFx0aWYgKCBmb3J3YXJkICYmIHVzZUNhY2hlICkge1xuXG5cdFx0XHRcdFx0XHRcdC8vIFNlZWsgYGVsZW1gIGZyb20gYSBwcmV2aW91c2x5LWNhY2hlZCBpbmRleFxuXG5cdFx0XHRcdFx0XHRcdC8vIC4uLmluIGEgZ3ppcC1mcmllbmRseSB3YXlcblx0XHRcdFx0XHRcdFx0bm9kZSA9IHBhcmVudDtcblx0XHRcdFx0XHRcdFx0b3V0ZXJDYWNoZSA9IG5vZGVbIGV4cGFuZG8gXSB8fCAoIG5vZGVbIGV4cGFuZG8gXSA9IHt9ICk7XG5cblx0XHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgPDkgb25seVxuXHRcdFx0XHRcdFx0XHQvLyBEZWZlbmQgYWdhaW5zdCBjbG9uZWQgYXR0cm9wZXJ0aWVzIChqUXVlcnkgZ2gtMTcwOSlcblx0XHRcdFx0XHRcdFx0dW5pcXVlQ2FjaGUgPSBvdXRlckNhY2hlWyBub2RlLnVuaXF1ZUlEIF0gfHxcblx0XHRcdFx0XHRcdFx0XHQoIG91dGVyQ2FjaGVbIG5vZGUudW5pcXVlSUQgXSA9IHt9ICk7XG5cblx0XHRcdFx0XHRcdFx0Y2FjaGUgPSB1bmlxdWVDYWNoZVsgdHlwZSBdIHx8IFtdO1xuXHRcdFx0XHRcdFx0XHRub2RlSW5kZXggPSBjYWNoZVsgMCBdID09PSBkaXJydW5zICYmIGNhY2hlWyAxIF07XG5cdFx0XHRcdFx0XHRcdGRpZmYgPSBub2RlSW5kZXggJiYgY2FjaGVbIDIgXTtcblx0XHRcdFx0XHRcdFx0bm9kZSA9IG5vZGVJbmRleCAmJiBwYXJlbnQuY2hpbGROb2Rlc1sgbm9kZUluZGV4IF07XG5cblx0XHRcdFx0XHRcdFx0d2hpbGUgKCAoIG5vZGUgPSArK25vZGVJbmRleCAmJiBub2RlICYmIG5vZGVbIGRpciBdIHx8XG5cblx0XHRcdFx0XHRcdFx0XHQvLyBGYWxsYmFjayB0byBzZWVraW5nIGBlbGVtYCBmcm9tIHRoZSBzdGFydFxuXHRcdFx0XHRcdFx0XHRcdCggZGlmZiA9IG5vZGVJbmRleCA9IDAgKSB8fCBzdGFydC5wb3AoKSApICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0Ly8gV2hlbiBmb3VuZCwgY2FjaGUgaW5kZXhlcyBvbiBgcGFyZW50YCBhbmQgYnJlYWtcblx0XHRcdFx0XHRcdFx0XHRpZiAoIG5vZGUubm9kZVR5cGUgPT09IDEgJiYgKytkaWZmICYmIG5vZGUgPT09IGVsZW0gKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHR1bmlxdWVDYWNoZVsgdHlwZSBdID0gWyBkaXJydW5zLCBub2RlSW5kZXgsIGRpZmYgXTtcblx0XHRcdFx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0XHRcdC8vIFVzZSBwcmV2aW91c2x5LWNhY2hlZCBlbGVtZW50IGluZGV4IGlmIGF2YWlsYWJsZVxuXHRcdFx0XHRcdFx0XHRpZiAoIHVzZUNhY2hlICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0Ly8gLi4uaW4gYSBnemlwLWZyaWVuZGx5IHdheVxuXHRcdFx0XHRcdFx0XHRcdG5vZGUgPSBlbGVtO1xuXHRcdFx0XHRcdFx0XHRcdG91dGVyQ2FjaGUgPSBub2RlWyBleHBhbmRvIF0gfHwgKCBub2RlWyBleHBhbmRvIF0gPSB7fSApO1xuXG5cdFx0XHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgPDkgb25seVxuXHRcdFx0XHRcdFx0XHRcdC8vIERlZmVuZCBhZ2FpbnN0IGNsb25lZCBhdHRyb3BlcnRpZXMgKGpRdWVyeSBnaC0xNzA5KVxuXHRcdFx0XHRcdFx0XHRcdHVuaXF1ZUNhY2hlID0gb3V0ZXJDYWNoZVsgbm9kZS51bmlxdWVJRCBdIHx8XG5cdFx0XHRcdFx0XHRcdFx0XHQoIG91dGVyQ2FjaGVbIG5vZGUudW5pcXVlSUQgXSA9IHt9ICk7XG5cblx0XHRcdFx0XHRcdFx0XHRjYWNoZSA9IHVuaXF1ZUNhY2hlWyB0eXBlIF0gfHwgW107XG5cdFx0XHRcdFx0XHRcdFx0bm9kZUluZGV4ID0gY2FjaGVbIDAgXSA9PT0gZGlycnVucyAmJiBjYWNoZVsgMSBdO1xuXHRcdFx0XHRcdFx0XHRcdGRpZmYgPSBub2RlSW5kZXg7XG5cdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0XHQvLyB4bWwgOm50aC1jaGlsZCguLi4pXG5cdFx0XHRcdFx0XHRcdC8vIG9yIDpudGgtbGFzdC1jaGlsZCguLi4pIG9yIDpudGgoLWxhc3QpPy1vZi10eXBlKC4uLilcblx0XHRcdFx0XHRcdFx0aWYgKCBkaWZmID09PSBmYWxzZSApIHtcblxuXHRcdFx0XHRcdFx0XHRcdC8vIFVzZSB0aGUgc2FtZSBsb29wIGFzIGFib3ZlIHRvIHNlZWsgYGVsZW1gIGZyb20gdGhlIHN0YXJ0XG5cdFx0XHRcdFx0XHRcdFx0d2hpbGUgKCAoIG5vZGUgPSArK25vZGVJbmRleCAmJiBub2RlICYmIG5vZGVbIGRpciBdIHx8XG5cdFx0XHRcdFx0XHRcdFx0XHQoIGRpZmYgPSBub2RlSW5kZXggPSAwICkgfHwgc3RhcnQucG9wKCkgKSApIHtcblxuXHRcdFx0XHRcdFx0XHRcdFx0aWYgKCAoIG9mVHlwZSA/XG5cdFx0XHRcdFx0XHRcdFx0XHRcdG5vZGUubm9kZU5hbWUudG9Mb3dlckNhc2UoKSA9PT0gbmFtZSA6XG5cdFx0XHRcdFx0XHRcdFx0XHRcdG5vZGUubm9kZVR5cGUgPT09IDEgKSAmJlxuXHRcdFx0XHRcdFx0XHRcdFx0XHQrK2RpZmYgKSB7XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gQ2FjaGUgdGhlIGluZGV4IG9mIGVhY2ggZW5jb3VudGVyZWQgZWxlbWVudFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRpZiAoIHVzZUNhY2hlICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdG91dGVyQ2FjaGUgPSBub2RlWyBleHBhbmRvIF0gfHxcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdCggbm9kZVsgZXhwYW5kbyBdID0ge30gKTtcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDw5IG9ubHlcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBEZWZlbmQgYWdhaW5zdCBjbG9uZWQgYXR0cm9wZXJ0aWVzIChqUXVlcnkgZ2gtMTcwOSlcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHR1bmlxdWVDYWNoZSA9IG91dGVyQ2FjaGVbIG5vZGUudW5pcXVlSUQgXSB8fFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0KCBvdXRlckNhY2hlWyBub2RlLnVuaXF1ZUlEIF0gPSB7fSApO1xuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0dW5pcXVlQ2FjaGVbIHR5cGUgXSA9IFsgZGlycnVucywgZGlmZiBdO1xuXHRcdFx0XHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0aWYgKCBub2RlID09PSBlbGVtICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdC8vIEluY29ycG9yYXRlIHRoZSBvZmZzZXQsIHRoZW4gY2hlY2sgYWdhaW5zdCBjeWNsZSBzaXplXG5cdFx0XHRcdFx0XHRkaWZmIC09IGxhc3Q7XG5cdFx0XHRcdFx0XHRyZXR1cm4gZGlmZiA9PT0gZmlyc3QgfHwgKCBkaWZmICUgZmlyc3QgPT09IDAgJiYgZGlmZiAvIGZpcnN0ID49IDAgKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH07XG5cdFx0fSxcblxuXHRcdFwiUFNFVURPXCI6IGZ1bmN0aW9uKCBwc2V1ZG8sIGFyZ3VtZW50ICkge1xuXG5cdFx0XHQvLyBwc2V1ZG8tY2xhc3MgbmFtZXMgYXJlIGNhc2UtaW5zZW5zaXRpdmVcblx0XHRcdC8vIGh0dHA6Ly93d3cudzMub3JnL1RSL3NlbGVjdG9ycy8jcHNldWRvLWNsYXNzZXNcblx0XHRcdC8vIFByaW9yaXRpemUgYnkgY2FzZSBzZW5zaXRpdml0eSBpbiBjYXNlIGN1c3RvbSBwc2V1ZG9zIGFyZSBhZGRlZCB3aXRoIHVwcGVyY2FzZSBsZXR0ZXJzXG5cdFx0XHQvLyBSZW1lbWJlciB0aGF0IHNldEZpbHRlcnMgaW5oZXJpdHMgZnJvbSBwc2V1ZG9zXG5cdFx0XHR2YXIgYXJncyxcblx0XHRcdFx0Zm4gPSBFeHByLnBzZXVkb3NbIHBzZXVkbyBdIHx8IEV4cHIuc2V0RmlsdGVyc1sgcHNldWRvLnRvTG93ZXJDYXNlKCkgXSB8fFxuXHRcdFx0XHRcdFNpenpsZS5lcnJvciggXCJ1bnN1cHBvcnRlZCBwc2V1ZG86IFwiICsgcHNldWRvICk7XG5cblx0XHRcdC8vIFRoZSB1c2VyIG1heSB1c2UgY3JlYXRlUHNldWRvIHRvIGluZGljYXRlIHRoYXRcblx0XHRcdC8vIGFyZ3VtZW50cyBhcmUgbmVlZGVkIHRvIGNyZWF0ZSB0aGUgZmlsdGVyIGZ1bmN0aW9uXG5cdFx0XHQvLyBqdXN0IGFzIFNpenpsZSBkb2VzXG5cdFx0XHRpZiAoIGZuWyBleHBhbmRvIF0gKSB7XG5cdFx0XHRcdHJldHVybiBmbiggYXJndW1lbnQgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gQnV0IG1haW50YWluIHN1cHBvcnQgZm9yIG9sZCBzaWduYXR1cmVzXG5cdFx0XHRpZiAoIGZuLmxlbmd0aCA+IDEgKSB7XG5cdFx0XHRcdGFyZ3MgPSBbIHBzZXVkbywgcHNldWRvLCBcIlwiLCBhcmd1bWVudCBdO1xuXHRcdFx0XHRyZXR1cm4gRXhwci5zZXRGaWx0ZXJzLmhhc093blByb3BlcnR5KCBwc2V1ZG8udG9Mb3dlckNhc2UoKSApID9cblx0XHRcdFx0XHRtYXJrRnVuY3Rpb24oIGZ1bmN0aW9uKCBzZWVkLCBtYXRjaGVzICkge1xuXHRcdFx0XHRcdFx0dmFyIGlkeCxcblx0XHRcdFx0XHRcdFx0bWF0Y2hlZCA9IGZuKCBzZWVkLCBhcmd1bWVudCApLFxuXHRcdFx0XHRcdFx0XHRpID0gbWF0Y2hlZC5sZW5ndGg7XG5cdFx0XHRcdFx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdFx0XHRcdFx0aWR4ID0gaW5kZXhPZiggc2VlZCwgbWF0Y2hlZFsgaSBdICk7XG5cdFx0XHRcdFx0XHRcdHNlZWRbIGlkeCBdID0gISggbWF0Y2hlc1sgaWR4IF0gPSBtYXRjaGVkWyBpIF0gKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9ICkgOlxuXHRcdFx0XHRcdGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHRcdFx0cmV0dXJuIGZuKCBlbGVtLCAwLCBhcmdzICk7XG5cdFx0XHRcdFx0fTtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIGZuO1xuXHRcdH1cblx0fSxcblxuXHRwc2V1ZG9zOiB7XG5cblx0XHQvLyBQb3RlbnRpYWxseSBjb21wbGV4IHBzZXVkb3Ncblx0XHRcIm5vdFwiOiBtYXJrRnVuY3Rpb24oIGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcblxuXHRcdFx0Ly8gVHJpbSB0aGUgc2VsZWN0b3IgcGFzc2VkIHRvIGNvbXBpbGVcblx0XHRcdC8vIHRvIGF2b2lkIHRyZWF0aW5nIGxlYWRpbmcgYW5kIHRyYWlsaW5nXG5cdFx0XHQvLyBzcGFjZXMgYXMgY29tYmluYXRvcnNcblx0XHRcdHZhciBpbnB1dCA9IFtdLFxuXHRcdFx0XHRyZXN1bHRzID0gW10sXG5cdFx0XHRcdG1hdGNoZXIgPSBjb21waWxlKCBzZWxlY3Rvci5yZXBsYWNlKCBydHJpbSwgXCIkMVwiICkgKTtcblxuXHRcdFx0cmV0dXJuIG1hdGNoZXJbIGV4cGFuZG8gXSA/XG5cdFx0XHRcdG1hcmtGdW5jdGlvbiggZnVuY3Rpb24oIHNlZWQsIG1hdGNoZXMsIF9jb250ZXh0LCB4bWwgKSB7XG5cdFx0XHRcdFx0dmFyIGVsZW0sXG5cdFx0XHRcdFx0XHR1bm1hdGNoZWQgPSBtYXRjaGVyKCBzZWVkLCBudWxsLCB4bWwsIFtdICksXG5cdFx0XHRcdFx0XHRpID0gc2VlZC5sZW5ndGg7XG5cblx0XHRcdFx0XHQvLyBNYXRjaCBlbGVtZW50cyB1bm1hdGNoZWQgYnkgYG1hdGNoZXJgXG5cdFx0XHRcdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRcdFx0XHRpZiAoICggZWxlbSA9IHVubWF0Y2hlZFsgaSBdICkgKSB7XG5cdFx0XHRcdFx0XHRcdHNlZWRbIGkgXSA9ICEoIG1hdGNoZXNbIGkgXSA9IGVsZW0gKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0gKSA6XG5cdFx0XHRcdGZ1bmN0aW9uKCBlbGVtLCBfY29udGV4dCwgeG1sICkge1xuXHRcdFx0XHRcdGlucHV0WyAwIF0gPSBlbGVtO1xuXHRcdFx0XHRcdG1hdGNoZXIoIGlucHV0LCBudWxsLCB4bWwsIHJlc3VsdHMgKTtcblxuXHRcdFx0XHRcdC8vIERvbid0IGtlZXAgdGhlIGVsZW1lbnQgKGlzc3VlICMyOTkpXG5cdFx0XHRcdFx0aW5wdXRbIDAgXSA9IG51bGw7XG5cdFx0XHRcdFx0cmV0dXJuICFyZXN1bHRzLnBvcCgpO1xuXHRcdFx0XHR9O1xuXHRcdH0gKSxcblxuXHRcdFwiaGFzXCI6IG1hcmtGdW5jdGlvbiggZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdFx0cmV0dXJuIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHRyZXR1cm4gU2l6emxlKCBzZWxlY3RvciwgZWxlbSApLmxlbmd0aCA+IDA7XG5cdFx0XHR9O1xuXHRcdH0gKSxcblxuXHRcdFwiY29udGFpbnNcIjogbWFya0Z1bmN0aW9uKCBmdW5jdGlvbiggdGV4dCApIHtcblx0XHRcdHRleHQgPSB0ZXh0LnJlcGxhY2UoIHJ1bmVzY2FwZSwgZnVuZXNjYXBlICk7XG5cdFx0XHRyZXR1cm4gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRcdHJldHVybiAoIGVsZW0udGV4dENvbnRlbnQgfHwgZ2V0VGV4dCggZWxlbSApICkuaW5kZXhPZiggdGV4dCApID4gLTE7XG5cdFx0XHR9O1xuXHRcdH0gKSxcblxuXHRcdC8vIFwiV2hldGhlciBhbiBlbGVtZW50IGlzIHJlcHJlc2VudGVkIGJ5IGEgOmxhbmcoKSBzZWxlY3RvclxuXHRcdC8vIGlzIGJhc2VkIHNvbGVseSBvbiB0aGUgZWxlbWVudCdzIGxhbmd1YWdlIHZhbHVlXG5cdFx0Ly8gYmVpbmcgZXF1YWwgdG8gdGhlIGlkZW50aWZpZXIgQyxcblx0XHQvLyBvciBiZWdpbm5pbmcgd2l0aCB0aGUgaWRlbnRpZmllciBDIGltbWVkaWF0ZWx5IGZvbGxvd2VkIGJ5IFwiLVwiLlxuXHRcdC8vIFRoZSBtYXRjaGluZyBvZiBDIGFnYWluc3QgdGhlIGVsZW1lbnQncyBsYW5ndWFnZSB2YWx1ZSBpcyBwZXJmb3JtZWQgY2FzZS1pbnNlbnNpdGl2ZWx5LlxuXHRcdC8vIFRoZSBpZGVudGlmaWVyIEMgZG9lcyBub3QgaGF2ZSB0byBiZSBhIHZhbGlkIGxhbmd1YWdlIG5hbWUuXCJcblx0XHQvLyBodHRwOi8vd3d3LnczLm9yZy9UUi9zZWxlY3RvcnMvI2xhbmctcHNldWRvXG5cdFx0XCJsYW5nXCI6IG1hcmtGdW5jdGlvbiggZnVuY3Rpb24oIGxhbmcgKSB7XG5cblx0XHRcdC8vIGxhbmcgdmFsdWUgbXVzdCBiZSBhIHZhbGlkIGlkZW50aWZpZXJcblx0XHRcdGlmICggIXJpZGVudGlmaWVyLnRlc3QoIGxhbmcgfHwgXCJcIiApICkge1xuXHRcdFx0XHRTaXp6bGUuZXJyb3IoIFwidW5zdXBwb3J0ZWQgbGFuZzogXCIgKyBsYW5nICk7XG5cdFx0XHR9XG5cdFx0XHRsYW5nID0gbGFuZy5yZXBsYWNlKCBydW5lc2NhcGUsIGZ1bmVzY2FwZSApLnRvTG93ZXJDYXNlKCk7XG5cdFx0XHRyZXR1cm4gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRcdHZhciBlbGVtTGFuZztcblx0XHRcdFx0ZG8ge1xuXHRcdFx0XHRcdGlmICggKCBlbGVtTGFuZyA9IGRvY3VtZW50SXNIVE1MID9cblx0XHRcdFx0XHRcdGVsZW0ubGFuZyA6XG5cdFx0XHRcdFx0XHRlbGVtLmdldEF0dHJpYnV0ZSggXCJ4bWw6bGFuZ1wiICkgfHwgZWxlbS5nZXRBdHRyaWJ1dGUoIFwibGFuZ1wiICkgKSApIHtcblxuXHRcdFx0XHRcdFx0ZWxlbUxhbmcgPSBlbGVtTGFuZy50b0xvd2VyQ2FzZSgpO1xuXHRcdFx0XHRcdFx0cmV0dXJuIGVsZW1MYW5nID09PSBsYW5nIHx8IGVsZW1MYW5nLmluZGV4T2YoIGxhbmcgKyBcIi1cIiApID09PSAwO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSB3aGlsZSAoICggZWxlbSA9IGVsZW0ucGFyZW50Tm9kZSApICYmIGVsZW0ubm9kZVR5cGUgPT09IDEgKTtcblx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0fTtcblx0XHR9ICksXG5cblx0XHQvLyBNaXNjZWxsYW5lb3VzXG5cdFx0XCJ0YXJnZXRcIjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHR2YXIgaGFzaCA9IHdpbmRvdy5sb2NhdGlvbiAmJiB3aW5kb3cubG9jYXRpb24uaGFzaDtcblx0XHRcdHJldHVybiBoYXNoICYmIGhhc2guc2xpY2UoIDEgKSA9PT0gZWxlbS5pZDtcblx0XHR9LFxuXG5cdFx0XCJyb290XCI6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuIGVsZW0gPT09IGRvY0VsZW07XG5cdFx0fSxcblxuXHRcdFwiZm9jdXNcIjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gZWxlbSA9PT0gZG9jdW1lbnQuYWN0aXZlRWxlbWVudCAmJlxuXHRcdFx0XHQoICFkb2N1bWVudC5oYXNGb2N1cyB8fCBkb2N1bWVudC5oYXNGb2N1cygpICkgJiZcblx0XHRcdFx0ISEoIGVsZW0udHlwZSB8fCBlbGVtLmhyZWYgfHwgfmVsZW0udGFiSW5kZXggKTtcblx0XHR9LFxuXG5cdFx0Ly8gQm9vbGVhbiBwcm9wZXJ0aWVzXG5cdFx0XCJlbmFibGVkXCI6IGNyZWF0ZURpc2FibGVkUHNldWRvKCBmYWxzZSApLFxuXHRcdFwiZGlzYWJsZWRcIjogY3JlYXRlRGlzYWJsZWRQc2V1ZG8oIHRydWUgKSxcblxuXHRcdFwiY2hlY2tlZFwiOiBmdW5jdGlvbiggZWxlbSApIHtcblxuXHRcdFx0Ly8gSW4gQ1NTMywgOmNoZWNrZWQgc2hvdWxkIHJldHVybiBib3RoIGNoZWNrZWQgYW5kIHNlbGVjdGVkIGVsZW1lbnRzXG5cdFx0XHQvLyBodHRwOi8vd3d3LnczLm9yZy9UUi8yMDExL1JFQy1jc3MzLXNlbGVjdG9ycy0yMDExMDkyOS8jY2hlY2tlZFxuXHRcdFx0dmFyIG5vZGVOYW1lID0gZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO1xuXHRcdFx0cmV0dXJuICggbm9kZU5hbWUgPT09IFwiaW5wdXRcIiAmJiAhIWVsZW0uY2hlY2tlZCApIHx8XG5cdFx0XHRcdCggbm9kZU5hbWUgPT09IFwib3B0aW9uXCIgJiYgISFlbGVtLnNlbGVjdGVkICk7XG5cdFx0fSxcblxuXHRcdFwic2VsZWN0ZWRcIjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cblx0XHRcdC8vIEFjY2Vzc2luZyB0aGlzIHByb3BlcnR5IG1ha2VzIHNlbGVjdGVkLWJ5LWRlZmF1bHRcblx0XHRcdC8vIG9wdGlvbnMgaW4gU2FmYXJpIHdvcmsgcHJvcGVybHlcblx0XHRcdGlmICggZWxlbS5wYXJlbnROb2RlICkge1xuXHRcdFx0XHQvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW51c2VkLWV4cHJlc3Npb25zXG5cdFx0XHRcdGVsZW0ucGFyZW50Tm9kZS5zZWxlY3RlZEluZGV4O1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gZWxlbS5zZWxlY3RlZCA9PT0gdHJ1ZTtcblx0XHR9LFxuXG5cdFx0Ly8gQ29udGVudHNcblx0XHRcImVtcHR5XCI6IGZ1bmN0aW9uKCBlbGVtICkge1xuXG5cdFx0XHQvLyBodHRwOi8vd3d3LnczLm9yZy9UUi9zZWxlY3RvcnMvI2VtcHR5LXBzZXVkb1xuXHRcdFx0Ly8gOmVtcHR5IGlzIG5lZ2F0ZWQgYnkgZWxlbWVudCAoMSkgb3IgY29udGVudCBub2RlcyAodGV4dDogMzsgY2RhdGE6IDQ7IGVudGl0eSByZWY6IDUpLFxuXHRcdFx0Ly8gICBidXQgbm90IGJ5IG90aGVycyAoY29tbWVudDogODsgcHJvY2Vzc2luZyBpbnN0cnVjdGlvbjogNzsgZXRjLilcblx0XHRcdC8vIG5vZGVUeXBlIDwgNiB3b3JrcyBiZWNhdXNlIGF0dHJpYnV0ZXMgKDIpIGRvIG5vdCBhcHBlYXIgYXMgY2hpbGRyZW5cblx0XHRcdGZvciAoIGVsZW0gPSBlbGVtLmZpcnN0Q2hpbGQ7IGVsZW07IGVsZW0gPSBlbGVtLm5leHRTaWJsaW5nICkge1xuXHRcdFx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPCA2ICkge1xuXHRcdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0fSxcblxuXHRcdFwicGFyZW50XCI6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuICFFeHByLnBzZXVkb3NbIFwiZW1wdHlcIiBdKCBlbGVtICk7XG5cdFx0fSxcblxuXHRcdC8vIEVsZW1lbnQvaW5wdXQgdHlwZXNcblx0XHRcImhlYWRlclwiOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiByaGVhZGVyLnRlc3QoIGVsZW0ubm9kZU5hbWUgKTtcblx0XHR9LFxuXG5cdFx0XCJpbnB1dFwiOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiByaW5wdXRzLnRlc3QoIGVsZW0ubm9kZU5hbWUgKTtcblx0XHR9LFxuXG5cdFx0XCJidXR0b25cIjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHR2YXIgbmFtZSA9IGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtcblx0XHRcdHJldHVybiBuYW1lID09PSBcImlucHV0XCIgJiYgZWxlbS50eXBlID09PSBcImJ1dHRvblwiIHx8IG5hbWUgPT09IFwiYnV0dG9uXCI7XG5cdFx0fSxcblxuXHRcdFwidGV4dFwiOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHZhciBhdHRyO1xuXHRcdFx0cmV0dXJuIGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKSA9PT0gXCJpbnB1dFwiICYmXG5cdFx0XHRcdGVsZW0udHlwZSA9PT0gXCJ0ZXh0XCIgJiZcblxuXHRcdFx0XHQvLyBTdXBwb3J0OiBJRTw4XG5cdFx0XHRcdC8vIE5ldyBIVE1MNSBhdHRyaWJ1dGUgdmFsdWVzIChlLmcuLCBcInNlYXJjaFwiKSBhcHBlYXIgd2l0aCBlbGVtLnR5cGUgPT09IFwidGV4dFwiXG5cdFx0XHRcdCggKCBhdHRyID0gZWxlbS5nZXRBdHRyaWJ1dGUoIFwidHlwZVwiICkgKSA9PSBudWxsIHx8XG5cdFx0XHRcdFx0YXR0ci50b0xvd2VyQ2FzZSgpID09PSBcInRleHRcIiApO1xuXHRcdH0sXG5cblx0XHQvLyBQb3NpdGlvbi1pbi1jb2xsZWN0aW9uXG5cdFx0XCJmaXJzdFwiOiBjcmVhdGVQb3NpdGlvbmFsUHNldWRvKCBmdW5jdGlvbigpIHtcblx0XHRcdHJldHVybiBbIDAgXTtcblx0XHR9ICksXG5cblx0XHRcImxhc3RcIjogY3JlYXRlUG9zaXRpb25hbFBzZXVkbyggZnVuY3Rpb24oIF9tYXRjaEluZGV4ZXMsIGxlbmd0aCApIHtcblx0XHRcdHJldHVybiBbIGxlbmd0aCAtIDEgXTtcblx0XHR9ICksXG5cblx0XHRcImVxXCI6IGNyZWF0ZVBvc2l0aW9uYWxQc2V1ZG8oIGZ1bmN0aW9uKCBfbWF0Y2hJbmRleGVzLCBsZW5ndGgsIGFyZ3VtZW50ICkge1xuXHRcdFx0cmV0dXJuIFsgYXJndW1lbnQgPCAwID8gYXJndW1lbnQgKyBsZW5ndGggOiBhcmd1bWVudCBdO1xuXHRcdH0gKSxcblxuXHRcdFwiZXZlblwiOiBjcmVhdGVQb3NpdGlvbmFsUHNldWRvKCBmdW5jdGlvbiggbWF0Y2hJbmRleGVzLCBsZW5ndGggKSB7XG5cdFx0XHR2YXIgaSA9IDA7XG5cdFx0XHRmb3IgKCA7IGkgPCBsZW5ndGg7IGkgKz0gMiApIHtcblx0XHRcdFx0bWF0Y2hJbmRleGVzLnB1c2goIGkgKTtcblx0XHRcdH1cblx0XHRcdHJldHVybiBtYXRjaEluZGV4ZXM7XG5cdFx0fSApLFxuXG5cdFx0XCJvZGRcIjogY3JlYXRlUG9zaXRpb25hbFBzZXVkbyggZnVuY3Rpb24oIG1hdGNoSW5kZXhlcywgbGVuZ3RoICkge1xuXHRcdFx0dmFyIGkgPSAxO1xuXHRcdFx0Zm9yICggOyBpIDwgbGVuZ3RoOyBpICs9IDIgKSB7XG5cdFx0XHRcdG1hdGNoSW5kZXhlcy5wdXNoKCBpICk7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gbWF0Y2hJbmRleGVzO1xuXHRcdH0gKSxcblxuXHRcdFwibHRcIjogY3JlYXRlUG9zaXRpb25hbFBzZXVkbyggZnVuY3Rpb24oIG1hdGNoSW5kZXhlcywgbGVuZ3RoLCBhcmd1bWVudCApIHtcblx0XHRcdHZhciBpID0gYXJndW1lbnQgPCAwID9cblx0XHRcdFx0YXJndW1lbnQgKyBsZW5ndGggOlxuXHRcdFx0XHRhcmd1bWVudCA+IGxlbmd0aCA/XG5cdFx0XHRcdFx0bGVuZ3RoIDpcblx0XHRcdFx0XHRhcmd1bWVudDtcblx0XHRcdGZvciAoIDsgLS1pID49IDA7ICkge1xuXHRcdFx0XHRtYXRjaEluZGV4ZXMucHVzaCggaSApO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIG1hdGNoSW5kZXhlcztcblx0XHR9ICksXG5cblx0XHRcImd0XCI6IGNyZWF0ZVBvc2l0aW9uYWxQc2V1ZG8oIGZ1bmN0aW9uKCBtYXRjaEluZGV4ZXMsIGxlbmd0aCwgYXJndW1lbnQgKSB7XG5cdFx0XHR2YXIgaSA9IGFyZ3VtZW50IDwgMCA/IGFyZ3VtZW50ICsgbGVuZ3RoIDogYXJndW1lbnQ7XG5cdFx0XHRmb3IgKCA7ICsraSA8IGxlbmd0aDsgKSB7XG5cdFx0XHRcdG1hdGNoSW5kZXhlcy5wdXNoKCBpICk7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gbWF0Y2hJbmRleGVzO1xuXHRcdH0gKVxuXHR9XG59O1xuXG5FeHByLnBzZXVkb3NbIFwibnRoXCIgXSA9IEV4cHIucHNldWRvc1sgXCJlcVwiIF07XG5cbi8vIEFkZCBidXR0b24vaW5wdXQgdHlwZSBwc2V1ZG9zXG5mb3IgKCBpIGluIHsgcmFkaW86IHRydWUsIGNoZWNrYm94OiB0cnVlLCBmaWxlOiB0cnVlLCBwYXNzd29yZDogdHJ1ZSwgaW1hZ2U6IHRydWUgfSApIHtcblx0RXhwci5wc2V1ZG9zWyBpIF0gPSBjcmVhdGVJbnB1dFBzZXVkbyggaSApO1xufVxuZm9yICggaSBpbiB7IHN1Ym1pdDogdHJ1ZSwgcmVzZXQ6IHRydWUgfSApIHtcblx0RXhwci5wc2V1ZG9zWyBpIF0gPSBjcmVhdGVCdXR0b25Qc2V1ZG8oIGkgKTtcbn1cblxuLy8gRWFzeSBBUEkgZm9yIGNyZWF0aW5nIG5ldyBzZXRGaWx0ZXJzXG5mdW5jdGlvbiBzZXRGaWx0ZXJzKCkge31cbnNldEZpbHRlcnMucHJvdG90eXBlID0gRXhwci5maWx0ZXJzID0gRXhwci5wc2V1ZG9zO1xuRXhwci5zZXRGaWx0ZXJzID0gbmV3IHNldEZpbHRlcnMoKTtcblxudG9rZW5pemUgPSBTaXp6bGUudG9rZW5pemUgPSBmdW5jdGlvbiggc2VsZWN0b3IsIHBhcnNlT25seSApIHtcblx0dmFyIG1hdGNoZWQsIG1hdGNoLCB0b2tlbnMsIHR5cGUsXG5cdFx0c29GYXIsIGdyb3VwcywgcHJlRmlsdGVycyxcblx0XHRjYWNoZWQgPSB0b2tlbkNhY2hlWyBzZWxlY3RvciArIFwiIFwiIF07XG5cblx0aWYgKCBjYWNoZWQgKSB7XG5cdFx0cmV0dXJuIHBhcnNlT25seSA/IDAgOiBjYWNoZWQuc2xpY2UoIDAgKTtcblx0fVxuXG5cdHNvRmFyID0gc2VsZWN0b3I7XG5cdGdyb3VwcyA9IFtdO1xuXHRwcmVGaWx0ZXJzID0gRXhwci5wcmVGaWx0ZXI7XG5cblx0d2hpbGUgKCBzb0ZhciApIHtcblxuXHRcdC8vIENvbW1hIGFuZCBmaXJzdCBydW5cblx0XHRpZiAoICFtYXRjaGVkIHx8ICggbWF0Y2ggPSByY29tbWEuZXhlYyggc29GYXIgKSApICkge1xuXHRcdFx0aWYgKCBtYXRjaCApIHtcblxuXHRcdFx0XHQvLyBEb24ndCBjb25zdW1lIHRyYWlsaW5nIGNvbW1hcyBhcyB2YWxpZFxuXHRcdFx0XHRzb0ZhciA9IHNvRmFyLnNsaWNlKCBtYXRjaFsgMCBdLmxlbmd0aCApIHx8IHNvRmFyO1xuXHRcdFx0fVxuXHRcdFx0Z3JvdXBzLnB1c2goICggdG9rZW5zID0gW10gKSApO1xuXHRcdH1cblxuXHRcdG1hdGNoZWQgPSBmYWxzZTtcblxuXHRcdC8vIENvbWJpbmF0b3JzXG5cdFx0aWYgKCAoIG1hdGNoID0gcmNvbWJpbmF0b3JzLmV4ZWMoIHNvRmFyICkgKSApIHtcblx0XHRcdG1hdGNoZWQgPSBtYXRjaC5zaGlmdCgpO1xuXHRcdFx0dG9rZW5zLnB1c2goIHtcblx0XHRcdFx0dmFsdWU6IG1hdGNoZWQsXG5cblx0XHRcdFx0Ly8gQ2FzdCBkZXNjZW5kYW50IGNvbWJpbmF0b3JzIHRvIHNwYWNlXG5cdFx0XHRcdHR5cGU6IG1hdGNoWyAwIF0ucmVwbGFjZSggcnRyaW0sIFwiIFwiIClcblx0XHRcdH0gKTtcblx0XHRcdHNvRmFyID0gc29GYXIuc2xpY2UoIG1hdGNoZWQubGVuZ3RoICk7XG5cdFx0fVxuXG5cdFx0Ly8gRmlsdGVyc1xuXHRcdGZvciAoIHR5cGUgaW4gRXhwci5maWx0ZXIgKSB7XG5cdFx0XHRpZiAoICggbWF0Y2ggPSBtYXRjaEV4cHJbIHR5cGUgXS5leGVjKCBzb0ZhciApICkgJiYgKCAhcHJlRmlsdGVyc1sgdHlwZSBdIHx8XG5cdFx0XHRcdCggbWF0Y2ggPSBwcmVGaWx0ZXJzWyB0eXBlIF0oIG1hdGNoICkgKSApICkge1xuXHRcdFx0XHRtYXRjaGVkID0gbWF0Y2guc2hpZnQoKTtcblx0XHRcdFx0dG9rZW5zLnB1c2goIHtcblx0XHRcdFx0XHR2YWx1ZTogbWF0Y2hlZCxcblx0XHRcdFx0XHR0eXBlOiB0eXBlLFxuXHRcdFx0XHRcdG1hdGNoZXM6IG1hdGNoXG5cdFx0XHRcdH0gKTtcblx0XHRcdFx0c29GYXIgPSBzb0Zhci5zbGljZSggbWF0Y2hlZC5sZW5ndGggKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRpZiAoICFtYXRjaGVkICkge1xuXHRcdFx0YnJlYWs7XG5cdFx0fVxuXHR9XG5cblx0Ly8gUmV0dXJuIHRoZSBsZW5ndGggb2YgdGhlIGludmFsaWQgZXhjZXNzXG5cdC8vIGlmIHdlJ3JlIGp1c3QgcGFyc2luZ1xuXHQvLyBPdGhlcndpc2UsIHRocm93IGFuIGVycm9yIG9yIHJldHVybiB0b2tlbnNcblx0cmV0dXJuIHBhcnNlT25seSA/XG5cdFx0c29GYXIubGVuZ3RoIDpcblx0XHRzb0ZhciA/XG5cdFx0XHRTaXp6bGUuZXJyb3IoIHNlbGVjdG9yICkgOlxuXG5cdFx0XHQvLyBDYWNoZSB0aGUgdG9rZW5zXG5cdFx0XHR0b2tlbkNhY2hlKCBzZWxlY3RvciwgZ3JvdXBzICkuc2xpY2UoIDAgKTtcbn07XG5cbmZ1bmN0aW9uIHRvU2VsZWN0b3IoIHRva2VucyApIHtcblx0dmFyIGkgPSAwLFxuXHRcdGxlbiA9IHRva2Vucy5sZW5ndGgsXG5cdFx0c2VsZWN0b3IgPSBcIlwiO1xuXHRmb3IgKCA7IGkgPCBsZW47IGkrKyApIHtcblx0XHRzZWxlY3RvciArPSB0b2tlbnNbIGkgXS52YWx1ZTtcblx0fVxuXHRyZXR1cm4gc2VsZWN0b3I7XG59XG5cbmZ1bmN0aW9uIGFkZENvbWJpbmF0b3IoIG1hdGNoZXIsIGNvbWJpbmF0b3IsIGJhc2UgKSB7XG5cdHZhciBkaXIgPSBjb21iaW5hdG9yLmRpcixcblx0XHRza2lwID0gY29tYmluYXRvci5uZXh0LFxuXHRcdGtleSA9IHNraXAgfHwgZGlyLFxuXHRcdGNoZWNrTm9uRWxlbWVudHMgPSBiYXNlICYmIGtleSA9PT0gXCJwYXJlbnROb2RlXCIsXG5cdFx0ZG9uZU5hbWUgPSBkb25lKys7XG5cblx0cmV0dXJuIGNvbWJpbmF0b3IuZmlyc3QgP1xuXG5cdFx0Ly8gQ2hlY2sgYWdhaW5zdCBjbG9zZXN0IGFuY2VzdG9yL3ByZWNlZGluZyBlbGVtZW50XG5cdFx0ZnVuY3Rpb24oIGVsZW0sIGNvbnRleHQsIHhtbCApIHtcblx0XHRcdHdoaWxlICggKCBlbGVtID0gZWxlbVsgZGlyIF0gKSApIHtcblx0XHRcdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSAxIHx8IGNoZWNrTm9uRWxlbWVudHMgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIG1hdGNoZXIoIGVsZW0sIGNvbnRleHQsIHhtbCApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fSA6XG5cblx0XHQvLyBDaGVjayBhZ2FpbnN0IGFsbCBhbmNlc3Rvci9wcmVjZWRpbmcgZWxlbWVudHNcblx0XHRmdW5jdGlvbiggZWxlbSwgY29udGV4dCwgeG1sICkge1xuXHRcdFx0dmFyIG9sZENhY2hlLCB1bmlxdWVDYWNoZSwgb3V0ZXJDYWNoZSxcblx0XHRcdFx0bmV3Q2FjaGUgPSBbIGRpcnJ1bnMsIGRvbmVOYW1lIF07XG5cblx0XHRcdC8vIFdlIGNhbid0IHNldCBhcmJpdHJhcnkgZGF0YSBvbiBYTUwgbm9kZXMsIHNvIHRoZXkgZG9uJ3QgYmVuZWZpdCBmcm9tIGNvbWJpbmF0b3IgY2FjaGluZ1xuXHRcdFx0aWYgKCB4bWwgKSB7XG5cdFx0XHRcdHdoaWxlICggKCBlbGVtID0gZWxlbVsgZGlyIF0gKSApIHtcblx0XHRcdFx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDEgfHwgY2hlY2tOb25FbGVtZW50cyApIHtcblx0XHRcdFx0XHRcdGlmICggbWF0Y2hlciggZWxlbSwgY29udGV4dCwgeG1sICkgKSB7XG5cdFx0XHRcdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0d2hpbGUgKCAoIGVsZW0gPSBlbGVtWyBkaXIgXSApICkge1xuXHRcdFx0XHRcdGlmICggZWxlbS5ub2RlVHlwZSA9PT0gMSB8fCBjaGVja05vbkVsZW1lbnRzICkge1xuXHRcdFx0XHRcdFx0b3V0ZXJDYWNoZSA9IGVsZW1bIGV4cGFuZG8gXSB8fCAoIGVsZW1bIGV4cGFuZG8gXSA9IHt9ICk7XG5cblx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDw5IG9ubHlcblx0XHRcdFx0XHRcdC8vIERlZmVuZCBhZ2FpbnN0IGNsb25lZCBhdHRyb3BlcnRpZXMgKGpRdWVyeSBnaC0xNzA5KVxuXHRcdFx0XHRcdFx0dW5pcXVlQ2FjaGUgPSBvdXRlckNhY2hlWyBlbGVtLnVuaXF1ZUlEIF0gfHxcblx0XHRcdFx0XHRcdFx0KCBvdXRlckNhY2hlWyBlbGVtLnVuaXF1ZUlEIF0gPSB7fSApO1xuXG5cdFx0XHRcdFx0XHRpZiAoIHNraXAgJiYgc2tpcCA9PT0gZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpICkge1xuXHRcdFx0XHRcdFx0XHRlbGVtID0gZWxlbVsgZGlyIF0gfHwgZWxlbTtcblx0XHRcdFx0XHRcdH0gZWxzZSBpZiAoICggb2xkQ2FjaGUgPSB1bmlxdWVDYWNoZVsga2V5IF0gKSAmJlxuXHRcdFx0XHRcdFx0XHRvbGRDYWNoZVsgMCBdID09PSBkaXJydW5zICYmIG9sZENhY2hlWyAxIF0gPT09IGRvbmVOYW1lICkge1xuXG5cdFx0XHRcdFx0XHRcdC8vIEFzc2lnbiB0byBuZXdDYWNoZSBzbyByZXN1bHRzIGJhY2stcHJvcGFnYXRlIHRvIHByZXZpb3VzIGVsZW1lbnRzXG5cdFx0XHRcdFx0XHRcdHJldHVybiAoIG5ld0NhY2hlWyAyIF0gPSBvbGRDYWNoZVsgMiBdICk7XG5cdFx0XHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0XHRcdC8vIFJldXNlIG5ld2NhY2hlIHNvIHJlc3VsdHMgYmFjay1wcm9wYWdhdGUgdG8gcHJldmlvdXMgZWxlbWVudHNcblx0XHRcdFx0XHRcdFx0dW5pcXVlQ2FjaGVbIGtleSBdID0gbmV3Q2FjaGU7XG5cblx0XHRcdFx0XHRcdFx0Ly8gQSBtYXRjaCBtZWFucyB3ZSdyZSBkb25lOyBhIGZhaWwgbWVhbnMgd2UgaGF2ZSB0byBrZWVwIGNoZWNraW5nXG5cdFx0XHRcdFx0XHRcdGlmICggKCBuZXdDYWNoZVsgMiBdID0gbWF0Y2hlciggZWxlbSwgY29udGV4dCwgeG1sICkgKSApIHtcblx0XHRcdFx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH07XG59XG5cbmZ1bmN0aW9uIGVsZW1lbnRNYXRjaGVyKCBtYXRjaGVycyApIHtcblx0cmV0dXJuIG1hdGNoZXJzLmxlbmd0aCA+IDEgP1xuXHRcdGZ1bmN0aW9uKCBlbGVtLCBjb250ZXh0LCB4bWwgKSB7XG5cdFx0XHR2YXIgaSA9IG1hdGNoZXJzLmxlbmd0aDtcblx0XHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0XHRpZiAoICFtYXRjaGVyc1sgaSBdKCBlbGVtLCBjb250ZXh0LCB4bWwgKSApIHtcblx0XHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdHJldHVybiB0cnVlO1xuXHRcdH0gOlxuXHRcdG1hdGNoZXJzWyAwIF07XG59XG5cbmZ1bmN0aW9uIG11bHRpcGxlQ29udGV4dHMoIHNlbGVjdG9yLCBjb250ZXh0cywgcmVzdWx0cyApIHtcblx0dmFyIGkgPSAwLFxuXHRcdGxlbiA9IGNvbnRleHRzLmxlbmd0aDtcblx0Zm9yICggOyBpIDwgbGVuOyBpKysgKSB7XG5cdFx0U2l6emxlKCBzZWxlY3RvciwgY29udGV4dHNbIGkgXSwgcmVzdWx0cyApO1xuXHR9XG5cdHJldHVybiByZXN1bHRzO1xufVxuXG5mdW5jdGlvbiBjb25kZW5zZSggdW5tYXRjaGVkLCBtYXAsIGZpbHRlciwgY29udGV4dCwgeG1sICkge1xuXHR2YXIgZWxlbSxcblx0XHRuZXdVbm1hdGNoZWQgPSBbXSxcblx0XHRpID0gMCxcblx0XHRsZW4gPSB1bm1hdGNoZWQubGVuZ3RoLFxuXHRcdG1hcHBlZCA9IG1hcCAhPSBudWxsO1xuXG5cdGZvciAoIDsgaSA8IGxlbjsgaSsrICkge1xuXHRcdGlmICggKCBlbGVtID0gdW5tYXRjaGVkWyBpIF0gKSApIHtcblx0XHRcdGlmICggIWZpbHRlciB8fCBmaWx0ZXIoIGVsZW0sIGNvbnRleHQsIHhtbCApICkge1xuXHRcdFx0XHRuZXdVbm1hdGNoZWQucHVzaCggZWxlbSApO1xuXHRcdFx0XHRpZiAoIG1hcHBlZCApIHtcblx0XHRcdFx0XHRtYXAucHVzaCggaSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIG5ld1VubWF0Y2hlZDtcbn1cblxuZnVuY3Rpb24gc2V0TWF0Y2hlciggcHJlRmlsdGVyLCBzZWxlY3RvciwgbWF0Y2hlciwgcG9zdEZpbHRlciwgcG9zdEZpbmRlciwgcG9zdFNlbGVjdG9yICkge1xuXHRpZiAoIHBvc3RGaWx0ZXIgJiYgIXBvc3RGaWx0ZXJbIGV4cGFuZG8gXSApIHtcblx0XHRwb3N0RmlsdGVyID0gc2V0TWF0Y2hlciggcG9zdEZpbHRlciApO1xuXHR9XG5cdGlmICggcG9zdEZpbmRlciAmJiAhcG9zdEZpbmRlclsgZXhwYW5kbyBdICkge1xuXHRcdHBvc3RGaW5kZXIgPSBzZXRNYXRjaGVyKCBwb3N0RmluZGVyLCBwb3N0U2VsZWN0b3IgKTtcblx0fVxuXHRyZXR1cm4gbWFya0Z1bmN0aW9uKCBmdW5jdGlvbiggc2VlZCwgcmVzdWx0cywgY29udGV4dCwgeG1sICkge1xuXHRcdHZhciB0ZW1wLCBpLCBlbGVtLFxuXHRcdFx0cHJlTWFwID0gW10sXG5cdFx0XHRwb3N0TWFwID0gW10sXG5cdFx0XHRwcmVleGlzdGluZyA9IHJlc3VsdHMubGVuZ3RoLFxuXG5cdFx0XHQvLyBHZXQgaW5pdGlhbCBlbGVtZW50cyBmcm9tIHNlZWQgb3IgY29udGV4dFxuXHRcdFx0ZWxlbXMgPSBzZWVkIHx8IG11bHRpcGxlQ29udGV4dHMoXG5cdFx0XHRcdHNlbGVjdG9yIHx8IFwiKlwiLFxuXHRcdFx0XHRjb250ZXh0Lm5vZGVUeXBlID8gWyBjb250ZXh0IF0gOiBjb250ZXh0LFxuXHRcdFx0XHRbXVxuXHRcdFx0KSxcblxuXHRcdFx0Ly8gUHJlZmlsdGVyIHRvIGdldCBtYXRjaGVyIGlucHV0LCBwcmVzZXJ2aW5nIGEgbWFwIGZvciBzZWVkLXJlc3VsdHMgc3luY2hyb25pemF0aW9uXG5cdFx0XHRtYXRjaGVySW4gPSBwcmVGaWx0ZXIgJiYgKCBzZWVkIHx8ICFzZWxlY3RvciApID9cblx0XHRcdFx0Y29uZGVuc2UoIGVsZW1zLCBwcmVNYXAsIHByZUZpbHRlciwgY29udGV4dCwgeG1sICkgOlxuXHRcdFx0XHRlbGVtcyxcblxuXHRcdFx0bWF0Y2hlck91dCA9IG1hdGNoZXIgP1xuXG5cdFx0XHRcdC8vIElmIHdlIGhhdmUgYSBwb3N0RmluZGVyLCBvciBmaWx0ZXJlZCBzZWVkLCBvciBub24tc2VlZCBwb3N0RmlsdGVyIG9yIHByZWV4aXN0aW5nIHJlc3VsdHMsXG5cdFx0XHRcdHBvc3RGaW5kZXIgfHwgKCBzZWVkID8gcHJlRmlsdGVyIDogcHJlZXhpc3RpbmcgfHwgcG9zdEZpbHRlciApID9cblxuXHRcdFx0XHRcdC8vIC4uLmludGVybWVkaWF0ZSBwcm9jZXNzaW5nIGlzIG5lY2Vzc2FyeVxuXHRcdFx0XHRcdFtdIDpcblxuXHRcdFx0XHRcdC8vIC4uLm90aGVyd2lzZSB1c2UgcmVzdWx0cyBkaXJlY3RseVxuXHRcdFx0XHRcdHJlc3VsdHMgOlxuXHRcdFx0XHRtYXRjaGVySW47XG5cblx0XHQvLyBGaW5kIHByaW1hcnkgbWF0Y2hlc1xuXHRcdGlmICggbWF0Y2hlciApIHtcblx0XHRcdG1hdGNoZXIoIG1hdGNoZXJJbiwgbWF0Y2hlck91dCwgY29udGV4dCwgeG1sICk7XG5cdFx0fVxuXG5cdFx0Ly8gQXBwbHkgcG9zdEZpbHRlclxuXHRcdGlmICggcG9zdEZpbHRlciApIHtcblx0XHRcdHRlbXAgPSBjb25kZW5zZSggbWF0Y2hlck91dCwgcG9zdE1hcCApO1xuXHRcdFx0cG9zdEZpbHRlciggdGVtcCwgW10sIGNvbnRleHQsIHhtbCApO1xuXG5cdFx0XHQvLyBVbi1tYXRjaCBmYWlsaW5nIGVsZW1lbnRzIGJ5IG1vdmluZyB0aGVtIGJhY2sgdG8gbWF0Y2hlckluXG5cdFx0XHRpID0gdGVtcC5sZW5ndGg7XG5cdFx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdFx0aWYgKCAoIGVsZW0gPSB0ZW1wWyBpIF0gKSApIHtcblx0XHRcdFx0XHRtYXRjaGVyT3V0WyBwb3N0TWFwWyBpIF0gXSA9ICEoIG1hdGNoZXJJblsgcG9zdE1hcFsgaSBdIF0gPSBlbGVtICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHRpZiAoIHNlZWQgKSB7XG5cdFx0XHRpZiAoIHBvc3RGaW5kZXIgfHwgcHJlRmlsdGVyICkge1xuXHRcdFx0XHRpZiAoIHBvc3RGaW5kZXIgKSB7XG5cblx0XHRcdFx0XHQvLyBHZXQgdGhlIGZpbmFsIG1hdGNoZXJPdXQgYnkgY29uZGVuc2luZyB0aGlzIGludGVybWVkaWF0ZSBpbnRvIHBvc3RGaW5kZXIgY29udGV4dHNcblx0XHRcdFx0XHR0ZW1wID0gW107XG5cdFx0XHRcdFx0aSA9IG1hdGNoZXJPdXQubGVuZ3RoO1xuXHRcdFx0XHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0XHRcdFx0aWYgKCAoIGVsZW0gPSBtYXRjaGVyT3V0WyBpIF0gKSApIHtcblxuXHRcdFx0XHRcdFx0XHQvLyBSZXN0b3JlIG1hdGNoZXJJbiBzaW5jZSBlbGVtIGlzIG5vdCB5ZXQgYSBmaW5hbCBtYXRjaFxuXHRcdFx0XHRcdFx0XHR0ZW1wLnB1c2goICggbWF0Y2hlckluWyBpIF0gPSBlbGVtICkgKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0cG9zdEZpbmRlciggbnVsbCwgKCBtYXRjaGVyT3V0ID0gW10gKSwgdGVtcCwgeG1sICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBNb3ZlIG1hdGNoZWQgZWxlbWVudHMgZnJvbSBzZWVkIHRvIHJlc3VsdHMgdG8ga2VlcCB0aGVtIHN5bmNocm9uaXplZFxuXHRcdFx0XHRpID0gbWF0Y2hlck91dC5sZW5ndGg7XG5cdFx0XHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0XHRcdGlmICggKCBlbGVtID0gbWF0Y2hlck91dFsgaSBdICkgJiZcblx0XHRcdFx0XHRcdCggdGVtcCA9IHBvc3RGaW5kZXIgPyBpbmRleE9mKCBzZWVkLCBlbGVtICkgOiBwcmVNYXBbIGkgXSApID4gLTEgKSB7XG5cblx0XHRcdFx0XHRcdHNlZWRbIHRlbXAgXSA9ICEoIHJlc3VsdHNbIHRlbXAgXSA9IGVsZW0gKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdC8vIEFkZCBlbGVtZW50cyB0byByZXN1bHRzLCB0aHJvdWdoIHBvc3RGaW5kZXIgaWYgZGVmaW5lZFxuXHRcdH0gZWxzZSB7XG5cdFx0XHRtYXRjaGVyT3V0ID0gY29uZGVuc2UoXG5cdFx0XHRcdG1hdGNoZXJPdXQgPT09IHJlc3VsdHMgP1xuXHRcdFx0XHRcdG1hdGNoZXJPdXQuc3BsaWNlKCBwcmVleGlzdGluZywgbWF0Y2hlck91dC5sZW5ndGggKSA6XG5cdFx0XHRcdFx0bWF0Y2hlck91dFxuXHRcdFx0KTtcblx0XHRcdGlmICggcG9zdEZpbmRlciApIHtcblx0XHRcdFx0cG9zdEZpbmRlciggbnVsbCwgcmVzdWx0cywgbWF0Y2hlck91dCwgeG1sICk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRwdXNoLmFwcGx5KCByZXN1bHRzLCBtYXRjaGVyT3V0ICk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9ICk7XG59XG5cbmZ1bmN0aW9uIG1hdGNoZXJGcm9tVG9rZW5zKCB0b2tlbnMgKSB7XG5cdHZhciBjaGVja0NvbnRleHQsIG1hdGNoZXIsIGosXG5cdFx0bGVuID0gdG9rZW5zLmxlbmd0aCxcblx0XHRsZWFkaW5nUmVsYXRpdmUgPSBFeHByLnJlbGF0aXZlWyB0b2tlbnNbIDAgXS50eXBlIF0sXG5cdFx0aW1wbGljaXRSZWxhdGl2ZSA9IGxlYWRpbmdSZWxhdGl2ZSB8fCBFeHByLnJlbGF0aXZlWyBcIiBcIiBdLFxuXHRcdGkgPSBsZWFkaW5nUmVsYXRpdmUgPyAxIDogMCxcblxuXHRcdC8vIFRoZSBmb3VuZGF0aW9uYWwgbWF0Y2hlciBlbnN1cmVzIHRoYXQgZWxlbWVudHMgYXJlIHJlYWNoYWJsZSBmcm9tIHRvcC1sZXZlbCBjb250ZXh0KHMpXG5cdFx0bWF0Y2hDb250ZXh0ID0gYWRkQ29tYmluYXRvciggZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gZWxlbSA9PT0gY2hlY2tDb250ZXh0O1xuXHRcdH0sIGltcGxpY2l0UmVsYXRpdmUsIHRydWUgKSxcblx0XHRtYXRjaEFueUNvbnRleHQgPSBhZGRDb21iaW5hdG9yKCBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiBpbmRleE9mKCBjaGVja0NvbnRleHQsIGVsZW0gKSA+IC0xO1xuXHRcdH0sIGltcGxpY2l0UmVsYXRpdmUsIHRydWUgKSxcblx0XHRtYXRjaGVycyA9IFsgZnVuY3Rpb24oIGVsZW0sIGNvbnRleHQsIHhtbCApIHtcblx0XHRcdHZhciByZXQgPSAoICFsZWFkaW5nUmVsYXRpdmUgJiYgKCB4bWwgfHwgY29udGV4dCAhPT0gb3V0ZXJtb3N0Q29udGV4dCApICkgfHwgKFxuXHRcdFx0XHQoIGNoZWNrQ29udGV4dCA9IGNvbnRleHQgKS5ub2RlVHlwZSA/XG5cdFx0XHRcdFx0bWF0Y2hDb250ZXh0KCBlbGVtLCBjb250ZXh0LCB4bWwgKSA6XG5cdFx0XHRcdFx0bWF0Y2hBbnlDb250ZXh0KCBlbGVtLCBjb250ZXh0LCB4bWwgKSApO1xuXG5cdFx0XHQvLyBBdm9pZCBoYW5naW5nIG9udG8gZWxlbWVudCAoaXNzdWUgIzI5OSlcblx0XHRcdGNoZWNrQ29udGV4dCA9IG51bGw7XG5cdFx0XHRyZXR1cm4gcmV0O1xuXHRcdH0gXTtcblxuXHRmb3IgKCA7IGkgPCBsZW47IGkrKyApIHtcblx0XHRpZiAoICggbWF0Y2hlciA9IEV4cHIucmVsYXRpdmVbIHRva2Vuc1sgaSBdLnR5cGUgXSApICkge1xuXHRcdFx0bWF0Y2hlcnMgPSBbIGFkZENvbWJpbmF0b3IoIGVsZW1lbnRNYXRjaGVyKCBtYXRjaGVycyApLCBtYXRjaGVyICkgXTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0bWF0Y2hlciA9IEV4cHIuZmlsdGVyWyB0b2tlbnNbIGkgXS50eXBlIF0uYXBwbHkoIG51bGwsIHRva2Vuc1sgaSBdLm1hdGNoZXMgKTtcblxuXHRcdFx0Ly8gUmV0dXJuIHNwZWNpYWwgdXBvbiBzZWVpbmcgYSBwb3NpdGlvbmFsIG1hdGNoZXJcblx0XHRcdGlmICggbWF0Y2hlclsgZXhwYW5kbyBdICkge1xuXG5cdFx0XHRcdC8vIEZpbmQgdGhlIG5leHQgcmVsYXRpdmUgb3BlcmF0b3IgKGlmIGFueSkgZm9yIHByb3BlciBoYW5kbGluZ1xuXHRcdFx0XHRqID0gKytpO1xuXHRcdFx0XHRmb3IgKCA7IGogPCBsZW47IGorKyApIHtcblx0XHRcdFx0XHRpZiAoIEV4cHIucmVsYXRpdmVbIHRva2Vuc1sgaiBdLnR5cGUgXSApIHtcblx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gc2V0TWF0Y2hlcihcblx0XHRcdFx0XHRpID4gMSAmJiBlbGVtZW50TWF0Y2hlciggbWF0Y2hlcnMgKSxcblx0XHRcdFx0XHRpID4gMSAmJiB0b1NlbGVjdG9yKFxuXG5cdFx0XHRcdFx0Ly8gSWYgdGhlIHByZWNlZGluZyB0b2tlbiB3YXMgYSBkZXNjZW5kYW50IGNvbWJpbmF0b3IsIGluc2VydCBhbiBpbXBsaWNpdCBhbnktZWxlbWVudCBgKmBcblx0XHRcdFx0XHR0b2tlbnNcblx0XHRcdFx0XHRcdC5zbGljZSggMCwgaSAtIDEgKVxuXHRcdFx0XHRcdFx0LmNvbmNhdCggeyB2YWx1ZTogdG9rZW5zWyBpIC0gMiBdLnR5cGUgPT09IFwiIFwiID8gXCIqXCIgOiBcIlwiIH0gKVxuXHRcdFx0XHRcdCkucmVwbGFjZSggcnRyaW0sIFwiJDFcIiApLFxuXHRcdFx0XHRcdG1hdGNoZXIsXG5cdFx0XHRcdFx0aSA8IGogJiYgbWF0Y2hlckZyb21Ub2tlbnMoIHRva2Vucy5zbGljZSggaSwgaiApICksXG5cdFx0XHRcdFx0aiA8IGxlbiAmJiBtYXRjaGVyRnJvbVRva2VucyggKCB0b2tlbnMgPSB0b2tlbnMuc2xpY2UoIGogKSApICksXG5cdFx0XHRcdFx0aiA8IGxlbiAmJiB0b1NlbGVjdG9yKCB0b2tlbnMgKVxuXHRcdFx0XHQpO1xuXHRcdFx0fVxuXHRcdFx0bWF0Y2hlcnMucHVzaCggbWF0Y2hlciApO1xuXHRcdH1cblx0fVxuXG5cdHJldHVybiBlbGVtZW50TWF0Y2hlciggbWF0Y2hlcnMgKTtcbn1cblxuZnVuY3Rpb24gbWF0Y2hlckZyb21Hcm91cE1hdGNoZXJzKCBlbGVtZW50TWF0Y2hlcnMsIHNldE1hdGNoZXJzICkge1xuXHR2YXIgYnlTZXQgPSBzZXRNYXRjaGVycy5sZW5ndGggPiAwLFxuXHRcdGJ5RWxlbWVudCA9IGVsZW1lbnRNYXRjaGVycy5sZW5ndGggPiAwLFxuXHRcdHN1cGVyTWF0Y2hlciA9IGZ1bmN0aW9uKCBzZWVkLCBjb250ZXh0LCB4bWwsIHJlc3VsdHMsIG91dGVybW9zdCApIHtcblx0XHRcdHZhciBlbGVtLCBqLCBtYXRjaGVyLFxuXHRcdFx0XHRtYXRjaGVkQ291bnQgPSAwLFxuXHRcdFx0XHRpID0gXCIwXCIsXG5cdFx0XHRcdHVubWF0Y2hlZCA9IHNlZWQgJiYgW10sXG5cdFx0XHRcdHNldE1hdGNoZWQgPSBbXSxcblx0XHRcdFx0Y29udGV4dEJhY2t1cCA9IG91dGVybW9zdENvbnRleHQsXG5cblx0XHRcdFx0Ly8gV2UgbXVzdCBhbHdheXMgaGF2ZSBlaXRoZXIgc2VlZCBlbGVtZW50cyBvciBvdXRlcm1vc3QgY29udGV4dFxuXHRcdFx0XHRlbGVtcyA9IHNlZWQgfHwgYnlFbGVtZW50ICYmIEV4cHIuZmluZFsgXCJUQUdcIiBdKCBcIipcIiwgb3V0ZXJtb3N0ICksXG5cblx0XHRcdFx0Ly8gVXNlIGludGVnZXIgZGlycnVucyBpZmYgdGhpcyBpcyB0aGUgb3V0ZXJtb3N0IG1hdGNoZXJcblx0XHRcdFx0ZGlycnVuc1VuaXF1ZSA9ICggZGlycnVucyArPSBjb250ZXh0QmFja3VwID09IG51bGwgPyAxIDogTWF0aC5yYW5kb20oKSB8fCAwLjEgKSxcblx0XHRcdFx0bGVuID0gZWxlbXMubGVuZ3RoO1xuXG5cdFx0XHRpZiAoIG91dGVybW9zdCApIHtcblxuXHRcdFx0XHQvLyBTdXBwb3J0OiBJRSAxMSssIEVkZ2UgMTcgLSAxOCtcblx0XHRcdFx0Ly8gSUUvRWRnZSBzb21ldGltZXMgdGhyb3cgYSBcIlBlcm1pc3Npb24gZGVuaWVkXCIgZXJyb3Igd2hlbiBzdHJpY3QtY29tcGFyaW5nXG5cdFx0XHRcdC8vIHR3byBkb2N1bWVudHM7IHNoYWxsb3cgY29tcGFyaXNvbnMgd29yay5cblx0XHRcdFx0Ly8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVxZXFlcVxuXHRcdFx0XHRvdXRlcm1vc3RDb250ZXh0ID0gY29udGV4dCA9PSBkb2N1bWVudCB8fCBjb250ZXh0IHx8IG91dGVybW9zdDtcblx0XHRcdH1cblxuXHRcdFx0Ly8gQWRkIGVsZW1lbnRzIHBhc3NpbmcgZWxlbWVudE1hdGNoZXJzIGRpcmVjdGx5IHRvIHJlc3VsdHNcblx0XHRcdC8vIFN1cHBvcnQ6IElFPDksIFNhZmFyaVxuXHRcdFx0Ly8gVG9sZXJhdGUgTm9kZUxpc3QgcHJvcGVydGllcyAoSUU6IFwibGVuZ3RoXCI7IFNhZmFyaTogPG51bWJlcj4pIG1hdGNoaW5nIGVsZW1lbnRzIGJ5IGlkXG5cdFx0XHRmb3IgKCA7IGkgIT09IGxlbiAmJiAoIGVsZW0gPSBlbGVtc1sgaSBdICkgIT0gbnVsbDsgaSsrICkge1xuXHRcdFx0XHRpZiAoIGJ5RWxlbWVudCAmJiBlbGVtICkge1xuXHRcdFx0XHRcdGogPSAwO1xuXG5cdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgMTErLCBFZGdlIDE3IC0gMTgrXG5cdFx0XHRcdFx0Ly8gSUUvRWRnZSBzb21ldGltZXMgdGhyb3cgYSBcIlBlcm1pc3Npb24gZGVuaWVkXCIgZXJyb3Igd2hlbiBzdHJpY3QtY29tcGFyaW5nXG5cdFx0XHRcdFx0Ly8gdHdvIGRvY3VtZW50czsgc2hhbGxvdyBjb21wYXJpc29ucyB3b3JrLlxuXHRcdFx0XHRcdC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcWVxZXFcblx0XHRcdFx0XHRpZiAoICFjb250ZXh0ICYmIGVsZW0ub3duZXJEb2N1bWVudCAhPSBkb2N1bWVudCApIHtcblx0XHRcdFx0XHRcdHNldERvY3VtZW50KCBlbGVtICk7XG5cdFx0XHRcdFx0XHR4bWwgPSAhZG9jdW1lbnRJc0hUTUw7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHdoaWxlICggKCBtYXRjaGVyID0gZWxlbWVudE1hdGNoZXJzWyBqKysgXSApICkge1xuXHRcdFx0XHRcdFx0aWYgKCBtYXRjaGVyKCBlbGVtLCBjb250ZXh0IHx8IGRvY3VtZW50LCB4bWwgKSApIHtcblx0XHRcdFx0XHRcdFx0cmVzdWx0cy5wdXNoKCBlbGVtICk7XG5cdFx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRpZiAoIG91dGVybW9zdCApIHtcblx0XHRcdFx0XHRcdGRpcnJ1bnMgPSBkaXJydW5zVW5pcXVlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIFRyYWNrIHVubWF0Y2hlZCBlbGVtZW50cyBmb3Igc2V0IGZpbHRlcnNcblx0XHRcdFx0aWYgKCBieVNldCApIHtcblxuXHRcdFx0XHRcdC8vIFRoZXkgd2lsbCBoYXZlIGdvbmUgdGhyb3VnaCBhbGwgcG9zc2libGUgbWF0Y2hlcnNcblx0XHRcdFx0XHRpZiAoICggZWxlbSA9ICFtYXRjaGVyICYmIGVsZW0gKSApIHtcblx0XHRcdFx0XHRcdG1hdGNoZWRDb3VudC0tO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8vIExlbmd0aGVuIHRoZSBhcnJheSBmb3IgZXZlcnkgZWxlbWVudCwgbWF0Y2hlZCBvciBub3Rcblx0XHRcdFx0XHRpZiAoIHNlZWQgKSB7XG5cdFx0XHRcdFx0XHR1bm1hdGNoZWQucHVzaCggZWxlbSApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvLyBgaWAgaXMgbm93IHRoZSBjb3VudCBvZiBlbGVtZW50cyB2aXNpdGVkIGFib3ZlLCBhbmQgYWRkaW5nIGl0IHRvIGBtYXRjaGVkQ291bnRgXG5cdFx0XHQvLyBtYWtlcyB0aGUgbGF0dGVyIG5vbm5lZ2F0aXZlLlxuXHRcdFx0bWF0Y2hlZENvdW50ICs9IGk7XG5cblx0XHRcdC8vIEFwcGx5IHNldCBmaWx0ZXJzIHRvIHVubWF0Y2hlZCBlbGVtZW50c1xuXHRcdFx0Ly8gTk9URTogVGhpcyBjYW4gYmUgc2tpcHBlZCBpZiB0aGVyZSBhcmUgbm8gdW5tYXRjaGVkIGVsZW1lbnRzIChpLmUuLCBgbWF0Y2hlZENvdW50YFxuXHRcdFx0Ly8gZXF1YWxzIGBpYCksIHVubGVzcyB3ZSBkaWRuJ3QgdmlzaXQgX2FueV8gZWxlbWVudHMgaW4gdGhlIGFib3ZlIGxvb3AgYmVjYXVzZSB3ZSBoYXZlXG5cdFx0XHQvLyBubyBlbGVtZW50IG1hdGNoZXJzIGFuZCBubyBzZWVkLlxuXHRcdFx0Ly8gSW5jcmVtZW50aW5nIGFuIGluaXRpYWxseS1zdHJpbmcgXCIwXCIgYGlgIGFsbG93cyBgaWAgdG8gcmVtYWluIGEgc3RyaW5nIG9ubHkgaW4gdGhhdFxuXHRcdFx0Ly8gY2FzZSwgd2hpY2ggd2lsbCByZXN1bHQgaW4gYSBcIjAwXCIgYG1hdGNoZWRDb3VudGAgdGhhdCBkaWZmZXJzIGZyb20gYGlgIGJ1dCBpcyBhbHNvXG5cdFx0XHQvLyBudW1lcmljYWxseSB6ZXJvLlxuXHRcdFx0aWYgKCBieVNldCAmJiBpICE9PSBtYXRjaGVkQ291bnQgKSB7XG5cdFx0XHRcdGogPSAwO1xuXHRcdFx0XHR3aGlsZSAoICggbWF0Y2hlciA9IHNldE1hdGNoZXJzWyBqKysgXSApICkge1xuXHRcdFx0XHRcdG1hdGNoZXIoIHVubWF0Y2hlZCwgc2V0TWF0Y2hlZCwgY29udGV4dCwgeG1sICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpZiAoIHNlZWQgKSB7XG5cblx0XHRcdFx0XHQvLyBSZWludGVncmF0ZSBlbGVtZW50IG1hdGNoZXMgdG8gZWxpbWluYXRlIHRoZSBuZWVkIGZvciBzb3J0aW5nXG5cdFx0XHRcdFx0aWYgKCBtYXRjaGVkQ291bnQgPiAwICkge1xuXHRcdFx0XHRcdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRcdFx0XHRcdGlmICggISggdW5tYXRjaGVkWyBpIF0gfHwgc2V0TWF0Y2hlZFsgaSBdICkgKSB7XG5cdFx0XHRcdFx0XHRcdFx0c2V0TWF0Y2hlZFsgaSBdID0gcG9wLmNhbGwoIHJlc3VsdHMgKTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8vIERpc2NhcmQgaW5kZXggcGxhY2Vob2xkZXIgdmFsdWVzIHRvIGdldCBvbmx5IGFjdHVhbCBtYXRjaGVzXG5cdFx0XHRcdFx0c2V0TWF0Y2hlZCA9IGNvbmRlbnNlKCBzZXRNYXRjaGVkICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBBZGQgbWF0Y2hlcyB0byByZXN1bHRzXG5cdFx0XHRcdHB1c2guYXBwbHkoIHJlc3VsdHMsIHNldE1hdGNoZWQgKTtcblxuXHRcdFx0XHQvLyBTZWVkbGVzcyBzZXQgbWF0Y2hlcyBzdWNjZWVkaW5nIG11bHRpcGxlIHN1Y2Nlc3NmdWwgbWF0Y2hlcnMgc3RpcHVsYXRlIHNvcnRpbmdcblx0XHRcdFx0aWYgKCBvdXRlcm1vc3QgJiYgIXNlZWQgJiYgc2V0TWF0Y2hlZC5sZW5ndGggPiAwICYmXG5cdFx0XHRcdFx0KCBtYXRjaGVkQ291bnQgKyBzZXRNYXRjaGVycy5sZW5ndGggKSA+IDEgKSB7XG5cblx0XHRcdFx0XHRTaXp6bGUudW5pcXVlU29ydCggcmVzdWx0cyApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdC8vIE92ZXJyaWRlIG1hbmlwdWxhdGlvbiBvZiBnbG9iYWxzIGJ5IG5lc3RlZCBtYXRjaGVyc1xuXHRcdFx0aWYgKCBvdXRlcm1vc3QgKSB7XG5cdFx0XHRcdGRpcnJ1bnMgPSBkaXJydW5zVW5pcXVlO1xuXHRcdFx0XHRvdXRlcm1vc3RDb250ZXh0ID0gY29udGV4dEJhY2t1cDtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIHVubWF0Y2hlZDtcblx0XHR9O1xuXG5cdHJldHVybiBieVNldCA/XG5cdFx0bWFya0Z1bmN0aW9uKCBzdXBlck1hdGNoZXIgKSA6XG5cdFx0c3VwZXJNYXRjaGVyO1xufVxuXG5jb21waWxlID0gU2l6emxlLmNvbXBpbGUgPSBmdW5jdGlvbiggc2VsZWN0b3IsIG1hdGNoIC8qIEludGVybmFsIFVzZSBPbmx5ICovICkge1xuXHR2YXIgaSxcblx0XHRzZXRNYXRjaGVycyA9IFtdLFxuXHRcdGVsZW1lbnRNYXRjaGVycyA9IFtdLFxuXHRcdGNhY2hlZCA9IGNvbXBpbGVyQ2FjaGVbIHNlbGVjdG9yICsgXCIgXCIgXTtcblxuXHRpZiAoICFjYWNoZWQgKSB7XG5cblx0XHQvLyBHZW5lcmF0ZSBhIGZ1bmN0aW9uIG9mIHJlY3Vyc2l2ZSBmdW5jdGlvbnMgdGhhdCBjYW4gYmUgdXNlZCB0byBjaGVjayBlYWNoIGVsZW1lbnRcblx0XHRpZiAoICFtYXRjaCApIHtcblx0XHRcdG1hdGNoID0gdG9rZW5pemUoIHNlbGVjdG9yICk7XG5cdFx0fVxuXHRcdGkgPSBtYXRjaC5sZW5ndGg7XG5cdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRjYWNoZWQgPSBtYXRjaGVyRnJvbVRva2VucyggbWF0Y2hbIGkgXSApO1xuXHRcdFx0aWYgKCBjYWNoZWRbIGV4cGFuZG8gXSApIHtcblx0XHRcdFx0c2V0TWF0Y2hlcnMucHVzaCggY2FjaGVkICk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRlbGVtZW50TWF0Y2hlcnMucHVzaCggY2FjaGVkICk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gQ2FjaGUgdGhlIGNvbXBpbGVkIGZ1bmN0aW9uXG5cdFx0Y2FjaGVkID0gY29tcGlsZXJDYWNoZShcblx0XHRcdHNlbGVjdG9yLFxuXHRcdFx0bWF0Y2hlckZyb21Hcm91cE1hdGNoZXJzKCBlbGVtZW50TWF0Y2hlcnMsIHNldE1hdGNoZXJzIClcblx0XHQpO1xuXG5cdFx0Ly8gU2F2ZSBzZWxlY3RvciBhbmQgdG9rZW5pemF0aW9uXG5cdFx0Y2FjaGVkLnNlbGVjdG9yID0gc2VsZWN0b3I7XG5cdH1cblx0cmV0dXJuIGNhY2hlZDtcbn07XG5cbi8qKlxuICogQSBsb3ctbGV2ZWwgc2VsZWN0aW9uIGZ1bmN0aW9uIHRoYXQgd29ya3Mgd2l0aCBTaXp6bGUncyBjb21waWxlZFxuICogIHNlbGVjdG9yIGZ1bmN0aW9uc1xuICogQHBhcmFtIHtTdHJpbmd8RnVuY3Rpb259IHNlbGVjdG9yIEEgc2VsZWN0b3Igb3IgYSBwcmUtY29tcGlsZWRcbiAqICBzZWxlY3RvciBmdW5jdGlvbiBidWlsdCB3aXRoIFNpenpsZS5jb21waWxlXG4gKiBAcGFyYW0ge0VsZW1lbnR9IGNvbnRleHRcbiAqIEBwYXJhbSB7QXJyYXl9IFtyZXN1bHRzXVxuICogQHBhcmFtIHtBcnJheX0gW3NlZWRdIEEgc2V0IG9mIGVsZW1lbnRzIHRvIG1hdGNoIGFnYWluc3RcbiAqL1xuc2VsZWN0ID0gU2l6emxlLnNlbGVjdCA9IGZ1bmN0aW9uKCBzZWxlY3RvciwgY29udGV4dCwgcmVzdWx0cywgc2VlZCApIHtcblx0dmFyIGksIHRva2VucywgdG9rZW4sIHR5cGUsIGZpbmQsXG5cdFx0Y29tcGlsZWQgPSB0eXBlb2Ygc2VsZWN0b3IgPT09IFwiZnVuY3Rpb25cIiAmJiBzZWxlY3Rvcixcblx0XHRtYXRjaCA9ICFzZWVkICYmIHRva2VuaXplKCAoIHNlbGVjdG9yID0gY29tcGlsZWQuc2VsZWN0b3IgfHwgc2VsZWN0b3IgKSApO1xuXG5cdHJlc3VsdHMgPSByZXN1bHRzIHx8IFtdO1xuXG5cdC8vIFRyeSB0byBtaW5pbWl6ZSBvcGVyYXRpb25zIGlmIHRoZXJlIGlzIG9ubHkgb25lIHNlbGVjdG9yIGluIHRoZSBsaXN0IGFuZCBubyBzZWVkXG5cdC8vICh0aGUgbGF0dGVyIG9mIHdoaWNoIGd1YXJhbnRlZXMgdXMgY29udGV4dClcblx0aWYgKCBtYXRjaC5sZW5ndGggPT09IDEgKSB7XG5cblx0XHQvLyBSZWR1Y2UgY29udGV4dCBpZiB0aGUgbGVhZGluZyBjb21wb3VuZCBzZWxlY3RvciBpcyBhbiBJRFxuXHRcdHRva2VucyA9IG1hdGNoWyAwIF0gPSBtYXRjaFsgMCBdLnNsaWNlKCAwICk7XG5cdFx0aWYgKCB0b2tlbnMubGVuZ3RoID4gMiAmJiAoIHRva2VuID0gdG9rZW5zWyAwIF0gKS50eXBlID09PSBcIklEXCIgJiZcblx0XHRcdGNvbnRleHQubm9kZVR5cGUgPT09IDkgJiYgZG9jdW1lbnRJc0hUTUwgJiYgRXhwci5yZWxhdGl2ZVsgdG9rZW5zWyAxIF0udHlwZSBdICkge1xuXG5cdFx0XHRjb250ZXh0ID0gKCBFeHByLmZpbmRbIFwiSURcIiBdKCB0b2tlbi5tYXRjaGVzWyAwIF1cblx0XHRcdFx0LnJlcGxhY2UoIHJ1bmVzY2FwZSwgZnVuZXNjYXBlICksIGNvbnRleHQgKSB8fCBbXSApWyAwIF07XG5cdFx0XHRpZiAoICFjb250ZXh0ICkge1xuXHRcdFx0XHRyZXR1cm4gcmVzdWx0cztcblxuXHRcdFx0Ly8gUHJlY29tcGlsZWQgbWF0Y2hlcnMgd2lsbCBzdGlsbCB2ZXJpZnkgYW5jZXN0cnksIHNvIHN0ZXAgdXAgYSBsZXZlbFxuXHRcdFx0fSBlbHNlIGlmICggY29tcGlsZWQgKSB7XG5cdFx0XHRcdGNvbnRleHQgPSBjb250ZXh0LnBhcmVudE5vZGU7XG5cdFx0XHR9XG5cblx0XHRcdHNlbGVjdG9yID0gc2VsZWN0b3Iuc2xpY2UoIHRva2Vucy5zaGlmdCgpLnZhbHVlLmxlbmd0aCApO1xuXHRcdH1cblxuXHRcdC8vIEZldGNoIGEgc2VlZCBzZXQgZm9yIHJpZ2h0LXRvLWxlZnQgbWF0Y2hpbmdcblx0XHRpID0gbWF0Y2hFeHByWyBcIm5lZWRzQ29udGV4dFwiIF0udGVzdCggc2VsZWN0b3IgKSA/IDAgOiB0b2tlbnMubGVuZ3RoO1xuXHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0dG9rZW4gPSB0b2tlbnNbIGkgXTtcblxuXHRcdFx0Ly8gQWJvcnQgaWYgd2UgaGl0IGEgY29tYmluYXRvclxuXHRcdFx0aWYgKCBFeHByLnJlbGF0aXZlWyAoIHR5cGUgPSB0b2tlbi50eXBlICkgXSApIHtcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHR9XG5cdFx0XHRpZiAoICggZmluZCA9IEV4cHIuZmluZFsgdHlwZSBdICkgKSB7XG5cblx0XHRcdFx0Ly8gU2VhcmNoLCBleHBhbmRpbmcgY29udGV4dCBmb3IgbGVhZGluZyBzaWJsaW5nIGNvbWJpbmF0b3JzXG5cdFx0XHRcdGlmICggKCBzZWVkID0gZmluZChcblx0XHRcdFx0XHR0b2tlbi5tYXRjaGVzWyAwIF0ucmVwbGFjZSggcnVuZXNjYXBlLCBmdW5lc2NhcGUgKSxcblx0XHRcdFx0XHRyc2libGluZy50ZXN0KCB0b2tlbnNbIDAgXS50eXBlICkgJiYgdGVzdENvbnRleHQoIGNvbnRleHQucGFyZW50Tm9kZSApIHx8XG5cdFx0XHRcdFx0XHRjb250ZXh0XG5cdFx0XHRcdCkgKSApIHtcblxuXHRcdFx0XHRcdC8vIElmIHNlZWQgaXMgZW1wdHkgb3Igbm8gdG9rZW5zIHJlbWFpbiwgd2UgY2FuIHJldHVybiBlYXJseVxuXHRcdFx0XHRcdHRva2Vucy5zcGxpY2UoIGksIDEgKTtcblx0XHRcdFx0XHRzZWxlY3RvciA9IHNlZWQubGVuZ3RoICYmIHRvU2VsZWN0b3IoIHRva2VucyApO1xuXHRcdFx0XHRcdGlmICggIXNlbGVjdG9yICkge1xuXHRcdFx0XHRcdFx0cHVzaC5hcHBseSggcmVzdWx0cywgc2VlZCApO1xuXHRcdFx0XHRcdFx0cmV0dXJuIHJlc3VsdHM7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHQvLyBDb21waWxlIGFuZCBleGVjdXRlIGEgZmlsdGVyaW5nIGZ1bmN0aW9uIGlmIG9uZSBpcyBub3QgcHJvdmlkZWRcblx0Ly8gUHJvdmlkZSBgbWF0Y2hgIHRvIGF2b2lkIHJldG9rZW5pemF0aW9uIGlmIHdlIG1vZGlmaWVkIHRoZSBzZWxlY3RvciBhYm92ZVxuXHQoIGNvbXBpbGVkIHx8IGNvbXBpbGUoIHNlbGVjdG9yLCBtYXRjaCApICkoXG5cdFx0c2VlZCxcblx0XHRjb250ZXh0LFxuXHRcdCFkb2N1bWVudElzSFRNTCxcblx0XHRyZXN1bHRzLFxuXHRcdCFjb250ZXh0IHx8IHJzaWJsaW5nLnRlc3QoIHNlbGVjdG9yICkgJiYgdGVzdENvbnRleHQoIGNvbnRleHQucGFyZW50Tm9kZSApIHx8IGNvbnRleHRcblx0KTtcblx0cmV0dXJuIHJlc3VsdHM7XG59O1xuXG4vLyBPbmUtdGltZSBhc3NpZ25tZW50c1xuXG4vLyBTb3J0IHN0YWJpbGl0eVxuc3VwcG9ydC5zb3J0U3RhYmxlID0gZXhwYW5kby5zcGxpdCggXCJcIiApLnNvcnQoIHNvcnRPcmRlciApLmpvaW4oIFwiXCIgKSA9PT0gZXhwYW5kbztcblxuLy8gU3VwcG9ydDogQ2hyb21lIDE0LTM1K1xuLy8gQWx3YXlzIGFzc3VtZSBkdXBsaWNhdGVzIGlmIHRoZXkgYXJlbid0IHBhc3NlZCB0byB0aGUgY29tcGFyaXNvbiBmdW5jdGlvblxuc3VwcG9ydC5kZXRlY3REdXBsaWNhdGVzID0gISFoYXNEdXBsaWNhdGU7XG5cbi8vIEluaXRpYWxpemUgYWdhaW5zdCB0aGUgZGVmYXVsdCBkb2N1bWVudFxuc2V0RG9jdW1lbnQoKTtcblxuLy8gU3VwcG9ydDogV2Via2l0PDUzNy4zMiAtIFNhZmFyaSA2LjAuMy9DaHJvbWUgMjUgKGZpeGVkIGluIENocm9tZSAyNylcbi8vIERldGFjaGVkIG5vZGVzIGNvbmZvdW5kaW5nbHkgZm9sbG93ICplYWNoIG90aGVyKlxuc3VwcG9ydC5zb3J0RGV0YWNoZWQgPSBhc3NlcnQoIGZ1bmN0aW9uKCBlbCApIHtcblxuXHQvLyBTaG91bGQgcmV0dXJuIDEsIGJ1dCByZXR1cm5zIDQgKGZvbGxvd2luZylcblx0cmV0dXJuIGVsLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uKCBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImZpZWxkc2V0XCIgKSApICYgMTtcbn0gKTtcblxuLy8gU3VwcG9ydDogSUU8OFxuLy8gUHJldmVudCBhdHRyaWJ1dGUvcHJvcGVydHkgXCJpbnRlcnBvbGF0aW9uXCJcbi8vIGh0dHBzOi8vbXNkbi5taWNyb3NvZnQuY29tL2VuLXVzL2xpYnJhcnkvbXM1MzY0MjklMjhWUy44NSUyOS5hc3B4XG5pZiAoICFhc3NlcnQoIGZ1bmN0aW9uKCBlbCApIHtcblx0ZWwuaW5uZXJIVE1MID0gXCI8YSBocmVmPScjJz48L2E+XCI7XG5cdHJldHVybiBlbC5maXJzdENoaWxkLmdldEF0dHJpYnV0ZSggXCJocmVmXCIgKSA9PT0gXCIjXCI7XG59ICkgKSB7XG5cdGFkZEhhbmRsZSggXCJ0eXBlfGhyZWZ8aGVpZ2h0fHdpZHRoXCIsIGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCBpc1hNTCApIHtcblx0XHRpZiAoICFpc1hNTCApIHtcblx0XHRcdHJldHVybiBlbGVtLmdldEF0dHJpYnV0ZSggbmFtZSwgbmFtZS50b0xvd2VyQ2FzZSgpID09PSBcInR5cGVcIiA/IDEgOiAyICk7XG5cdFx0fVxuXHR9ICk7XG59XG5cbi8vIFN1cHBvcnQ6IElFPDlcbi8vIFVzZSBkZWZhdWx0VmFsdWUgaW4gcGxhY2Ugb2YgZ2V0QXR0cmlidXRlKFwidmFsdWVcIilcbmlmICggIXN1cHBvcnQuYXR0cmlidXRlcyB8fCAhYXNzZXJ0KCBmdW5jdGlvbiggZWwgKSB7XG5cdGVsLmlubmVySFRNTCA9IFwiPGlucHV0Lz5cIjtcblx0ZWwuZmlyc3RDaGlsZC5zZXRBdHRyaWJ1dGUoIFwidmFsdWVcIiwgXCJcIiApO1xuXHRyZXR1cm4gZWwuZmlyc3RDaGlsZC5nZXRBdHRyaWJ1dGUoIFwidmFsdWVcIiApID09PSBcIlwiO1xufSApICkge1xuXHRhZGRIYW5kbGUoIFwidmFsdWVcIiwgZnVuY3Rpb24oIGVsZW0sIF9uYW1lLCBpc1hNTCApIHtcblx0XHRpZiAoICFpc1hNTCAmJiBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgPT09IFwiaW5wdXRcIiApIHtcblx0XHRcdHJldHVybiBlbGVtLmRlZmF1bHRWYWx1ZTtcblx0XHR9XG5cdH0gKTtcbn1cblxuLy8gU3VwcG9ydDogSUU8OVxuLy8gVXNlIGdldEF0dHJpYnV0ZU5vZGUgdG8gZmV0Y2ggYm9vbGVhbnMgd2hlbiBnZXRBdHRyaWJ1dGUgbGllc1xuaWYgKCAhYXNzZXJ0KCBmdW5jdGlvbiggZWwgKSB7XG5cdHJldHVybiBlbC5nZXRBdHRyaWJ1dGUoIFwiZGlzYWJsZWRcIiApID09IG51bGw7XG59ICkgKSB7XG5cdGFkZEhhbmRsZSggYm9vbGVhbnMsIGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCBpc1hNTCApIHtcblx0XHR2YXIgdmFsO1xuXHRcdGlmICggIWlzWE1MICkge1xuXHRcdFx0cmV0dXJuIGVsZW1bIG5hbWUgXSA9PT0gdHJ1ZSA/IG5hbWUudG9Mb3dlckNhc2UoKSA6XG5cdFx0XHRcdCggdmFsID0gZWxlbS5nZXRBdHRyaWJ1dGVOb2RlKCBuYW1lICkgKSAmJiB2YWwuc3BlY2lmaWVkID9cblx0XHRcdFx0XHR2YWwudmFsdWUgOlxuXHRcdFx0XHRcdG51bGw7XG5cdFx0fVxuXHR9ICk7XG59XG5cbnJldHVybiBTaXp6bGU7XG5cbn0gKSggd2luZG93ICk7XG5cblxuXG5qUXVlcnkuZmluZCA9IFNpenpsZTtcbmpRdWVyeS5leHByID0gU2l6emxlLnNlbGVjdG9ycztcblxuLy8gRGVwcmVjYXRlZFxualF1ZXJ5LmV4cHJbIFwiOlwiIF0gPSBqUXVlcnkuZXhwci5wc2V1ZG9zO1xualF1ZXJ5LnVuaXF1ZVNvcnQgPSBqUXVlcnkudW5pcXVlID0gU2l6emxlLnVuaXF1ZVNvcnQ7XG5qUXVlcnkudGV4dCA9IFNpenpsZS5nZXRUZXh0O1xualF1ZXJ5LmlzWE1MRG9jID0gU2l6emxlLmlzWE1MO1xualF1ZXJ5LmNvbnRhaW5zID0gU2l6emxlLmNvbnRhaW5zO1xualF1ZXJ5LmVzY2FwZVNlbGVjdG9yID0gU2l6emxlLmVzY2FwZTtcblxuXG5cblxudmFyIGRpciA9IGZ1bmN0aW9uKCBlbGVtLCBkaXIsIHVudGlsICkge1xuXHR2YXIgbWF0Y2hlZCA9IFtdLFxuXHRcdHRydW5jYXRlID0gdW50aWwgIT09IHVuZGVmaW5lZDtcblxuXHR3aGlsZSAoICggZWxlbSA9IGVsZW1bIGRpciBdICkgJiYgZWxlbS5ub2RlVHlwZSAhPT0gOSApIHtcblx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDEgKSB7XG5cdFx0XHRpZiAoIHRydW5jYXRlICYmIGpRdWVyeSggZWxlbSApLmlzKCB1bnRpbCApICkge1xuXHRcdFx0XHRicmVhaztcblx0XHRcdH1cblx0XHRcdG1hdGNoZWQucHVzaCggZWxlbSApO1xuXHRcdH1cblx0fVxuXHRyZXR1cm4gbWF0Y2hlZDtcbn07XG5cblxudmFyIHNpYmxpbmdzID0gZnVuY3Rpb24oIG4sIGVsZW0gKSB7XG5cdHZhciBtYXRjaGVkID0gW107XG5cblx0Zm9yICggOyBuOyBuID0gbi5uZXh0U2libGluZyApIHtcblx0XHRpZiAoIG4ubm9kZVR5cGUgPT09IDEgJiYgbiAhPT0gZWxlbSApIHtcblx0XHRcdG1hdGNoZWQucHVzaCggbiApO1xuXHRcdH1cblx0fVxuXG5cdHJldHVybiBtYXRjaGVkO1xufTtcblxuXG52YXIgcm5lZWRzQ29udGV4dCA9IGpRdWVyeS5leHByLm1hdGNoLm5lZWRzQ29udGV4dDtcblxuXG5cbmZ1bmN0aW9uIG5vZGVOYW1lKCBlbGVtLCBuYW1lICkge1xuXG4gIHJldHVybiBlbGVtLm5vZGVOYW1lICYmIGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKSA9PT0gbmFtZS50b0xvd2VyQ2FzZSgpO1xuXG59O1xudmFyIHJzaW5nbGVUYWcgPSAoIC9ePChbYS16XVteXFwvXFwwPjpcXHgyMFxcdFxcclxcblxcZl0qKVtcXHgyMFxcdFxcclxcblxcZl0qXFwvPz4oPzo8XFwvXFwxPnwpJC9pICk7XG5cblxuXG4vLyBJbXBsZW1lbnQgdGhlIGlkZW50aWNhbCBmdW5jdGlvbmFsaXR5IGZvciBmaWx0ZXIgYW5kIG5vdFxuZnVuY3Rpb24gd2lubm93KCBlbGVtZW50cywgcXVhbGlmaWVyLCBub3QgKSB7XG5cdGlmICggaXNGdW5jdGlvbiggcXVhbGlmaWVyICkgKSB7XG5cdFx0cmV0dXJuIGpRdWVyeS5ncmVwKCBlbGVtZW50cywgZnVuY3Rpb24oIGVsZW0sIGkgKSB7XG5cdFx0XHRyZXR1cm4gISFxdWFsaWZpZXIuY2FsbCggZWxlbSwgaSwgZWxlbSApICE9PSBub3Q7XG5cdFx0fSApO1xuXHR9XG5cblx0Ly8gU2luZ2xlIGVsZW1lbnRcblx0aWYgKCBxdWFsaWZpZXIubm9kZVR5cGUgKSB7XG5cdFx0cmV0dXJuIGpRdWVyeS5ncmVwKCBlbGVtZW50cywgZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gKCBlbGVtID09PSBxdWFsaWZpZXIgKSAhPT0gbm90O1xuXHRcdH0gKTtcblx0fVxuXG5cdC8vIEFycmF5bGlrZSBvZiBlbGVtZW50cyAoalF1ZXJ5LCBhcmd1bWVudHMsIEFycmF5KVxuXHRpZiAoIHR5cGVvZiBxdWFsaWZpZXIgIT09IFwic3RyaW5nXCIgKSB7XG5cdFx0cmV0dXJuIGpRdWVyeS5ncmVwKCBlbGVtZW50cywgZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gKCBpbmRleE9mLmNhbGwoIHF1YWxpZmllciwgZWxlbSApID4gLTEgKSAhPT0gbm90O1xuXHRcdH0gKTtcblx0fVxuXG5cdC8vIEZpbHRlcmVkIGRpcmVjdGx5IGZvciBib3RoIHNpbXBsZSBhbmQgY29tcGxleCBzZWxlY3RvcnNcblx0cmV0dXJuIGpRdWVyeS5maWx0ZXIoIHF1YWxpZmllciwgZWxlbWVudHMsIG5vdCApO1xufVxuXG5qUXVlcnkuZmlsdGVyID0gZnVuY3Rpb24oIGV4cHIsIGVsZW1zLCBub3QgKSB7XG5cdHZhciBlbGVtID0gZWxlbXNbIDAgXTtcblxuXHRpZiAoIG5vdCApIHtcblx0XHRleHByID0gXCI6bm90KFwiICsgZXhwciArIFwiKVwiO1xuXHR9XG5cblx0aWYgKCBlbGVtcy5sZW5ndGggPT09IDEgJiYgZWxlbS5ub2RlVHlwZSA9PT0gMSApIHtcblx0XHRyZXR1cm4galF1ZXJ5LmZpbmQubWF0Y2hlc1NlbGVjdG9yKCBlbGVtLCBleHByICkgPyBbIGVsZW0gXSA6IFtdO1xuXHR9XG5cblx0cmV0dXJuIGpRdWVyeS5maW5kLm1hdGNoZXMoIGV4cHIsIGpRdWVyeS5ncmVwKCBlbGVtcywgZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0cmV0dXJuIGVsZW0ubm9kZVR5cGUgPT09IDE7XG5cdH0gKSApO1xufTtcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHRmaW5kOiBmdW5jdGlvbiggc2VsZWN0b3IgKSB7XG5cdFx0dmFyIGksIHJldCxcblx0XHRcdGxlbiA9IHRoaXMubGVuZ3RoLFxuXHRcdFx0c2VsZiA9IHRoaXM7XG5cblx0XHRpZiAoIHR5cGVvZiBzZWxlY3RvciAhPT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdHJldHVybiB0aGlzLnB1c2hTdGFjayggalF1ZXJ5KCBzZWxlY3RvciApLmZpbHRlciggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGZvciAoIGkgPSAwOyBpIDwgbGVuOyBpKysgKSB7XG5cdFx0XHRcdFx0aWYgKCBqUXVlcnkuY29udGFpbnMoIHNlbGZbIGkgXSwgdGhpcyApICkge1xuXHRcdFx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9ICkgKTtcblx0XHR9XG5cblx0XHRyZXQgPSB0aGlzLnB1c2hTdGFjayggW10gKTtcblxuXHRcdGZvciAoIGkgPSAwOyBpIDwgbGVuOyBpKysgKSB7XG5cdFx0XHRqUXVlcnkuZmluZCggc2VsZWN0b3IsIHNlbGZbIGkgXSwgcmV0ICk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGxlbiA+IDEgPyBqUXVlcnkudW5pcXVlU29ydCggcmV0ICkgOiByZXQ7XG5cdH0sXG5cdGZpbHRlcjogZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdHJldHVybiB0aGlzLnB1c2hTdGFjayggd2lubm93KCB0aGlzLCBzZWxlY3RvciB8fCBbXSwgZmFsc2UgKSApO1xuXHR9LFxuXHRub3Q6IGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcblx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soIHdpbm5vdyggdGhpcywgc2VsZWN0b3IgfHwgW10sIHRydWUgKSApO1xuXHR9LFxuXHRpczogZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdHJldHVybiAhIXdpbm5vdyhcblx0XHRcdHRoaXMsXG5cblx0XHRcdC8vIElmIHRoaXMgaXMgYSBwb3NpdGlvbmFsL3JlbGF0aXZlIHNlbGVjdG9yLCBjaGVjayBtZW1iZXJzaGlwIGluIHRoZSByZXR1cm5lZCBzZXRcblx0XHRcdC8vIHNvICQoXCJwOmZpcnN0XCIpLmlzKFwicDpsYXN0XCIpIHdvbid0IHJldHVybiB0cnVlIGZvciBhIGRvYyB3aXRoIHR3byBcInBcIi5cblx0XHRcdHR5cGVvZiBzZWxlY3RvciA9PT0gXCJzdHJpbmdcIiAmJiBybmVlZHNDb250ZXh0LnRlc3QoIHNlbGVjdG9yICkgP1xuXHRcdFx0XHRqUXVlcnkoIHNlbGVjdG9yICkgOlxuXHRcdFx0XHRzZWxlY3RvciB8fCBbXSxcblx0XHRcdGZhbHNlXG5cdFx0KS5sZW5ndGg7XG5cdH1cbn0gKTtcblxuXG4vLyBJbml0aWFsaXplIGEgalF1ZXJ5IG9iamVjdFxuXG5cbi8vIEEgY2VudHJhbCByZWZlcmVuY2UgdG8gdGhlIHJvb3QgalF1ZXJ5KGRvY3VtZW50KVxudmFyIHJvb3RqUXVlcnksXG5cblx0Ly8gQSBzaW1wbGUgd2F5IHRvIGNoZWNrIGZvciBIVE1MIHN0cmluZ3Ncblx0Ly8gUHJpb3JpdGl6ZSAjaWQgb3ZlciA8dGFnPiB0byBhdm9pZCBYU1MgdmlhIGxvY2F0aW9uLmhhc2ggKCM5NTIxKVxuXHQvLyBTdHJpY3QgSFRNTCByZWNvZ25pdGlvbiAoIzExMjkwOiBtdXN0IHN0YXJ0IHdpdGggPClcblx0Ly8gU2hvcnRjdXQgc2ltcGxlICNpZCBjYXNlIGZvciBzcGVlZFxuXHRycXVpY2tFeHByID0gL14oPzpcXHMqKDxbXFx3XFxXXSs+KVtePl0qfCMoW1xcdy1dKykpJC8sXG5cblx0aW5pdCA9IGpRdWVyeS5mbi5pbml0ID0gZnVuY3Rpb24oIHNlbGVjdG9yLCBjb250ZXh0LCByb290ICkge1xuXHRcdHZhciBtYXRjaCwgZWxlbTtcblxuXHRcdC8vIEhBTkRMRTogJChcIlwiKSwgJChudWxsKSwgJCh1bmRlZmluZWQpLCAkKGZhbHNlKVxuXHRcdGlmICggIXNlbGVjdG9yICkge1xuXHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0fVxuXG5cdFx0Ly8gTWV0aG9kIGluaXQoKSBhY2NlcHRzIGFuIGFsdGVybmF0ZSByb290alF1ZXJ5XG5cdFx0Ly8gc28gbWlncmF0ZSBjYW4gc3VwcG9ydCBqUXVlcnkuc3ViIChnaC0yMTAxKVxuXHRcdHJvb3QgPSByb290IHx8IHJvb3RqUXVlcnk7XG5cblx0XHQvLyBIYW5kbGUgSFRNTCBzdHJpbmdzXG5cdFx0aWYgKCB0eXBlb2Ygc2VsZWN0b3IgPT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRpZiAoIHNlbGVjdG9yWyAwIF0gPT09IFwiPFwiICYmXG5cdFx0XHRcdHNlbGVjdG9yWyBzZWxlY3Rvci5sZW5ndGggLSAxIF0gPT09IFwiPlwiICYmXG5cdFx0XHRcdHNlbGVjdG9yLmxlbmd0aCA+PSAzICkge1xuXG5cdFx0XHRcdC8vIEFzc3VtZSB0aGF0IHN0cmluZ3MgdGhhdCBzdGFydCBhbmQgZW5kIHdpdGggPD4gYXJlIEhUTUwgYW5kIHNraXAgdGhlIHJlZ2V4IGNoZWNrXG5cdFx0XHRcdG1hdGNoID0gWyBudWxsLCBzZWxlY3RvciwgbnVsbCBdO1xuXG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRtYXRjaCA9IHJxdWlja0V4cHIuZXhlYyggc2VsZWN0b3IgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gTWF0Y2ggaHRtbCBvciBtYWtlIHN1cmUgbm8gY29udGV4dCBpcyBzcGVjaWZpZWQgZm9yICNpZFxuXHRcdFx0aWYgKCBtYXRjaCAmJiAoIG1hdGNoWyAxIF0gfHwgIWNvbnRleHQgKSApIHtcblxuXHRcdFx0XHQvLyBIQU5ETEU6ICQoaHRtbCkgLT4gJChhcnJheSlcblx0XHRcdFx0aWYgKCBtYXRjaFsgMSBdICkge1xuXHRcdFx0XHRcdGNvbnRleHQgPSBjb250ZXh0IGluc3RhbmNlb2YgalF1ZXJ5ID8gY29udGV4dFsgMCBdIDogY29udGV4dDtcblxuXHRcdFx0XHRcdC8vIE9wdGlvbiB0byBydW4gc2NyaXB0cyBpcyB0cnVlIGZvciBiYWNrLWNvbXBhdFxuXHRcdFx0XHRcdC8vIEludGVudGlvbmFsbHkgbGV0IHRoZSBlcnJvciBiZSB0aHJvd24gaWYgcGFyc2VIVE1MIGlzIG5vdCBwcmVzZW50XG5cdFx0XHRcdFx0alF1ZXJ5Lm1lcmdlKCB0aGlzLCBqUXVlcnkucGFyc2VIVE1MKFxuXHRcdFx0XHRcdFx0bWF0Y2hbIDEgXSxcblx0XHRcdFx0XHRcdGNvbnRleHQgJiYgY29udGV4dC5ub2RlVHlwZSA/IGNvbnRleHQub3duZXJEb2N1bWVudCB8fCBjb250ZXh0IDogZG9jdW1lbnQsXG5cdFx0XHRcdFx0XHR0cnVlXG5cdFx0XHRcdFx0KSApO1xuXG5cdFx0XHRcdFx0Ly8gSEFORExFOiAkKGh0bWwsIHByb3BzKVxuXHRcdFx0XHRcdGlmICggcnNpbmdsZVRhZy50ZXN0KCBtYXRjaFsgMSBdICkgJiYgalF1ZXJ5LmlzUGxhaW5PYmplY3QoIGNvbnRleHQgKSApIHtcblx0XHRcdFx0XHRcdGZvciAoIG1hdGNoIGluIGNvbnRleHQgKSB7XG5cblx0XHRcdFx0XHRcdFx0Ly8gUHJvcGVydGllcyBvZiBjb250ZXh0IGFyZSBjYWxsZWQgYXMgbWV0aG9kcyBpZiBwb3NzaWJsZVxuXHRcdFx0XHRcdFx0XHRpZiAoIGlzRnVuY3Rpb24oIHRoaXNbIG1hdGNoIF0gKSApIHtcblx0XHRcdFx0XHRcdFx0XHR0aGlzWyBtYXRjaCBdKCBjb250ZXh0WyBtYXRjaCBdICk7XG5cblx0XHRcdFx0XHRcdFx0Ly8gLi4uYW5kIG90aGVyd2lzZSBzZXQgYXMgYXR0cmlidXRlc1xuXHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRcdHRoaXMuYXR0ciggbWF0Y2gsIGNvbnRleHRbIG1hdGNoIF0gKTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdHJldHVybiB0aGlzO1xuXG5cdFx0XHRcdC8vIEhBTkRMRTogJCgjaWQpXG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0ZWxlbSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCBtYXRjaFsgMiBdICk7XG5cblx0XHRcdFx0XHRpZiAoIGVsZW0gKSB7XG5cblx0XHRcdFx0XHRcdC8vIEluamVjdCB0aGUgZWxlbWVudCBkaXJlY3RseSBpbnRvIHRoZSBqUXVlcnkgb2JqZWN0XG5cdFx0XHRcdFx0XHR0aGlzWyAwIF0gPSBlbGVtO1xuXHRcdFx0XHRcdFx0dGhpcy5sZW5ndGggPSAxO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdFx0fVxuXG5cdFx0XHQvLyBIQU5ETEU6ICQoZXhwciwgJCguLi4pKVxuXHRcdFx0fSBlbHNlIGlmICggIWNvbnRleHQgfHwgY29udGV4dC5qcXVlcnkgKSB7XG5cdFx0XHRcdHJldHVybiAoIGNvbnRleHQgfHwgcm9vdCApLmZpbmQoIHNlbGVjdG9yICk7XG5cblx0XHRcdC8vIEhBTkRMRTogJChleHByLCBjb250ZXh0KVxuXHRcdFx0Ly8gKHdoaWNoIGlzIGp1c3QgZXF1aXZhbGVudCB0bzogJChjb250ZXh0KS5maW5kKGV4cHIpXG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRyZXR1cm4gdGhpcy5jb25zdHJ1Y3RvciggY29udGV4dCApLmZpbmQoIHNlbGVjdG9yICk7XG5cdFx0XHR9XG5cblx0XHQvLyBIQU5ETEU6ICQoRE9NRWxlbWVudClcblx0XHR9IGVsc2UgaWYgKCBzZWxlY3Rvci5ub2RlVHlwZSApIHtcblx0XHRcdHRoaXNbIDAgXSA9IHNlbGVjdG9yO1xuXHRcdFx0dGhpcy5sZW5ndGggPSAxO1xuXHRcdFx0cmV0dXJuIHRoaXM7XG5cblx0XHQvLyBIQU5ETEU6ICQoZnVuY3Rpb24pXG5cdFx0Ly8gU2hvcnRjdXQgZm9yIGRvY3VtZW50IHJlYWR5XG5cdFx0fSBlbHNlIGlmICggaXNGdW5jdGlvbiggc2VsZWN0b3IgKSApIHtcblx0XHRcdHJldHVybiByb290LnJlYWR5ICE9PSB1bmRlZmluZWQgP1xuXHRcdFx0XHRyb290LnJlYWR5KCBzZWxlY3RvciApIDpcblxuXHRcdFx0XHQvLyBFeGVjdXRlIGltbWVkaWF0ZWx5IGlmIHJlYWR5IGlzIG5vdCBwcmVzZW50XG5cdFx0XHRcdHNlbGVjdG9yKCBqUXVlcnkgKTtcblx0XHR9XG5cblx0XHRyZXR1cm4galF1ZXJ5Lm1ha2VBcnJheSggc2VsZWN0b3IsIHRoaXMgKTtcblx0fTtcblxuLy8gR2l2ZSB0aGUgaW5pdCBmdW5jdGlvbiB0aGUgalF1ZXJ5IHByb3RvdHlwZSBmb3IgbGF0ZXIgaW5zdGFudGlhdGlvblxuaW5pdC5wcm90b3R5cGUgPSBqUXVlcnkuZm47XG5cbi8vIEluaXRpYWxpemUgY2VudHJhbCByZWZlcmVuY2VcbnJvb3RqUXVlcnkgPSBqUXVlcnkoIGRvY3VtZW50ICk7XG5cblxudmFyIHJwYXJlbnRzcHJldiA9IC9eKD86cGFyZW50c3xwcmV2KD86VW50aWx8QWxsKSkvLFxuXG5cdC8vIE1ldGhvZHMgZ3VhcmFudGVlZCB0byBwcm9kdWNlIGEgdW5pcXVlIHNldCB3aGVuIHN0YXJ0aW5nIGZyb20gYSB1bmlxdWUgc2V0XG5cdGd1YXJhbnRlZWRVbmlxdWUgPSB7XG5cdFx0Y2hpbGRyZW46IHRydWUsXG5cdFx0Y29udGVudHM6IHRydWUsXG5cdFx0bmV4dDogdHJ1ZSxcblx0XHRwcmV2OiB0cnVlXG5cdH07XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0aGFzOiBmdW5jdGlvbiggdGFyZ2V0ICkge1xuXHRcdHZhciB0YXJnZXRzID0galF1ZXJ5KCB0YXJnZXQsIHRoaXMgKSxcblx0XHRcdGwgPSB0YXJnZXRzLmxlbmd0aDtcblxuXHRcdHJldHVybiB0aGlzLmZpbHRlciggZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgaSA9IDA7XG5cdFx0XHRmb3IgKCA7IGkgPCBsOyBpKysgKSB7XG5cdFx0XHRcdGlmICggalF1ZXJ5LmNvbnRhaW5zKCB0aGlzLCB0YXJnZXRzWyBpIF0gKSApIHtcblx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0gKTtcblx0fSxcblxuXHRjbG9zZXN0OiBmdW5jdGlvbiggc2VsZWN0b3JzLCBjb250ZXh0ICkge1xuXHRcdHZhciBjdXIsXG5cdFx0XHRpID0gMCxcblx0XHRcdGwgPSB0aGlzLmxlbmd0aCxcblx0XHRcdG1hdGNoZWQgPSBbXSxcblx0XHRcdHRhcmdldHMgPSB0eXBlb2Ygc2VsZWN0b3JzICE9PSBcInN0cmluZ1wiICYmIGpRdWVyeSggc2VsZWN0b3JzICk7XG5cblx0XHQvLyBQb3NpdGlvbmFsIHNlbGVjdG9ycyBuZXZlciBtYXRjaCwgc2luY2UgdGhlcmUncyBubyBfc2VsZWN0aW9uXyBjb250ZXh0XG5cdFx0aWYgKCAhcm5lZWRzQ29udGV4dC50ZXN0KCBzZWxlY3RvcnMgKSApIHtcblx0XHRcdGZvciAoIDsgaSA8IGw7IGkrKyApIHtcblx0XHRcdFx0Zm9yICggY3VyID0gdGhpc1sgaSBdOyBjdXIgJiYgY3VyICE9PSBjb250ZXh0OyBjdXIgPSBjdXIucGFyZW50Tm9kZSApIHtcblxuXHRcdFx0XHRcdC8vIEFsd2F5cyBza2lwIGRvY3VtZW50IGZyYWdtZW50c1xuXHRcdFx0XHRcdGlmICggY3VyLm5vZGVUeXBlIDwgMTEgJiYgKCB0YXJnZXRzID9cblx0XHRcdFx0XHRcdHRhcmdldHMuaW5kZXgoIGN1ciApID4gLTEgOlxuXG5cdFx0XHRcdFx0XHQvLyBEb24ndCBwYXNzIG5vbi1lbGVtZW50cyB0byBTaXp6bGVcblx0XHRcdFx0XHRcdGN1ci5ub2RlVHlwZSA9PT0gMSAmJlxuXHRcdFx0XHRcdFx0XHRqUXVlcnkuZmluZC5tYXRjaGVzU2VsZWN0b3IoIGN1ciwgc2VsZWN0b3JzICkgKSApIHtcblxuXHRcdFx0XHRcdFx0bWF0Y2hlZC5wdXNoKCBjdXIgKTtcblx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzLnB1c2hTdGFjayggbWF0Y2hlZC5sZW5ndGggPiAxID8galF1ZXJ5LnVuaXF1ZVNvcnQoIG1hdGNoZWQgKSA6IG1hdGNoZWQgKTtcblx0fSxcblxuXHQvLyBEZXRlcm1pbmUgdGhlIHBvc2l0aW9uIG9mIGFuIGVsZW1lbnQgd2l0aGluIHRoZSBzZXRcblx0aW5kZXg6IGZ1bmN0aW9uKCBlbGVtICkge1xuXG5cdFx0Ly8gTm8gYXJndW1lbnQsIHJldHVybiBpbmRleCBpbiBwYXJlbnRcblx0XHRpZiAoICFlbGVtICkge1xuXHRcdFx0cmV0dXJuICggdGhpc1sgMCBdICYmIHRoaXNbIDAgXS5wYXJlbnROb2RlICkgPyB0aGlzLmZpcnN0KCkucHJldkFsbCgpLmxlbmd0aCA6IC0xO1xuXHRcdH1cblxuXHRcdC8vIEluZGV4IGluIHNlbGVjdG9yXG5cdFx0aWYgKCB0eXBlb2YgZWxlbSA9PT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdHJldHVybiBpbmRleE9mLmNhbGwoIGpRdWVyeSggZWxlbSApLCB0aGlzWyAwIF0gKTtcblx0XHR9XG5cblx0XHQvLyBMb2NhdGUgdGhlIHBvc2l0aW9uIG9mIHRoZSBkZXNpcmVkIGVsZW1lbnRcblx0XHRyZXR1cm4gaW5kZXhPZi5jYWxsKCB0aGlzLFxuXG5cdFx0XHQvLyBJZiBpdCByZWNlaXZlcyBhIGpRdWVyeSBvYmplY3QsIHRoZSBmaXJzdCBlbGVtZW50IGlzIHVzZWRcblx0XHRcdGVsZW0uanF1ZXJ5ID8gZWxlbVsgMCBdIDogZWxlbVxuXHRcdCk7XG5cdH0sXG5cblx0YWRkOiBmdW5jdGlvbiggc2VsZWN0b3IsIGNvbnRleHQgKSB7XG5cdFx0cmV0dXJuIHRoaXMucHVzaFN0YWNrKFxuXHRcdFx0alF1ZXJ5LnVuaXF1ZVNvcnQoXG5cdFx0XHRcdGpRdWVyeS5tZXJnZSggdGhpcy5nZXQoKSwgalF1ZXJ5KCBzZWxlY3RvciwgY29udGV4dCApIClcblx0XHRcdClcblx0XHQpO1xuXHR9LFxuXG5cdGFkZEJhY2s6IGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcblx0XHRyZXR1cm4gdGhpcy5hZGQoIHNlbGVjdG9yID09IG51bGwgP1xuXHRcdFx0dGhpcy5wcmV2T2JqZWN0IDogdGhpcy5wcmV2T2JqZWN0LmZpbHRlciggc2VsZWN0b3IgKVxuXHRcdCk7XG5cdH1cbn0gKTtcblxuZnVuY3Rpb24gc2libGluZyggY3VyLCBkaXIgKSB7XG5cdHdoaWxlICggKCBjdXIgPSBjdXJbIGRpciBdICkgJiYgY3VyLm5vZGVUeXBlICE9PSAxICkge31cblx0cmV0dXJuIGN1cjtcbn1cblxualF1ZXJ5LmVhY2goIHtcblx0cGFyZW50OiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHR2YXIgcGFyZW50ID0gZWxlbS5wYXJlbnROb2RlO1xuXHRcdHJldHVybiBwYXJlbnQgJiYgcGFyZW50Lm5vZGVUeXBlICE9PSAxMSA/IHBhcmVudCA6IG51bGw7XG5cdH0sXG5cdHBhcmVudHM6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHJldHVybiBkaXIoIGVsZW0sIFwicGFyZW50Tm9kZVwiICk7XG5cdH0sXG5cdHBhcmVudHNVbnRpbDogZnVuY3Rpb24oIGVsZW0sIF9pLCB1bnRpbCApIHtcblx0XHRyZXR1cm4gZGlyKCBlbGVtLCBcInBhcmVudE5vZGVcIiwgdW50aWwgKTtcblx0fSxcblx0bmV4dDogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0cmV0dXJuIHNpYmxpbmcoIGVsZW0sIFwibmV4dFNpYmxpbmdcIiApO1xuXHR9LFxuXHRwcmV2OiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRyZXR1cm4gc2libGluZyggZWxlbSwgXCJwcmV2aW91c1NpYmxpbmdcIiApO1xuXHR9LFxuXHRuZXh0QWxsOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRyZXR1cm4gZGlyKCBlbGVtLCBcIm5leHRTaWJsaW5nXCIgKTtcblx0fSxcblx0cHJldkFsbDogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0cmV0dXJuIGRpciggZWxlbSwgXCJwcmV2aW91c1NpYmxpbmdcIiApO1xuXHR9LFxuXHRuZXh0VW50aWw6IGZ1bmN0aW9uKCBlbGVtLCBfaSwgdW50aWwgKSB7XG5cdFx0cmV0dXJuIGRpciggZWxlbSwgXCJuZXh0U2libGluZ1wiLCB1bnRpbCApO1xuXHR9LFxuXHRwcmV2VW50aWw6IGZ1bmN0aW9uKCBlbGVtLCBfaSwgdW50aWwgKSB7XG5cdFx0cmV0dXJuIGRpciggZWxlbSwgXCJwcmV2aW91c1NpYmxpbmdcIiwgdW50aWwgKTtcblx0fSxcblx0c2libGluZ3M6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHJldHVybiBzaWJsaW5ncyggKCBlbGVtLnBhcmVudE5vZGUgfHwge30gKS5maXJzdENoaWxkLCBlbGVtICk7XG5cdH0sXG5cdGNoaWxkcmVuOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRyZXR1cm4gc2libGluZ3MoIGVsZW0uZmlyc3RDaGlsZCApO1xuXHR9LFxuXHRjb250ZW50czogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0aWYgKCBlbGVtLmNvbnRlbnREb2N1bWVudCAhPSBudWxsICYmXG5cblx0XHRcdC8vIFN1cHBvcnQ6IElFIDExK1xuXHRcdFx0Ly8gPG9iamVjdD4gZWxlbWVudHMgd2l0aCBubyBgZGF0YWAgYXR0cmlidXRlIGhhcyBhbiBvYmplY3Rcblx0XHRcdC8vIGBjb250ZW50RG9jdW1lbnRgIHdpdGggYSBgbnVsbGAgcHJvdG90eXBlLlxuXHRcdFx0Z2V0UHJvdG8oIGVsZW0uY29udGVudERvY3VtZW50ICkgKSB7XG5cblx0XHRcdHJldHVybiBlbGVtLmNvbnRlbnREb2N1bWVudDtcblx0XHR9XG5cblx0XHQvLyBTdXBwb3J0OiBJRSA5IC0gMTEgb25seSwgaU9TIDcgb25seSwgQW5kcm9pZCBCcm93c2VyIDw9NC4zIG9ubHlcblx0XHQvLyBUcmVhdCB0aGUgdGVtcGxhdGUgZWxlbWVudCBhcyBhIHJlZ3VsYXIgb25lIGluIGJyb3dzZXJzIHRoYXRcblx0XHQvLyBkb24ndCBzdXBwb3J0IGl0LlxuXHRcdGlmICggbm9kZU5hbWUoIGVsZW0sIFwidGVtcGxhdGVcIiApICkge1xuXHRcdFx0ZWxlbSA9IGVsZW0uY29udGVudCB8fCBlbGVtO1xuXHRcdH1cblxuXHRcdHJldHVybiBqUXVlcnkubWVyZ2UoIFtdLCBlbGVtLmNoaWxkTm9kZXMgKTtcblx0fVxufSwgZnVuY3Rpb24oIG5hbWUsIGZuICkge1xuXHRqUXVlcnkuZm5bIG5hbWUgXSA9IGZ1bmN0aW9uKCB1bnRpbCwgc2VsZWN0b3IgKSB7XG5cdFx0dmFyIG1hdGNoZWQgPSBqUXVlcnkubWFwKCB0aGlzLCBmbiwgdW50aWwgKTtcblxuXHRcdGlmICggbmFtZS5zbGljZSggLTUgKSAhPT0gXCJVbnRpbFwiICkge1xuXHRcdFx0c2VsZWN0b3IgPSB1bnRpbDtcblx0XHR9XG5cblx0XHRpZiAoIHNlbGVjdG9yICYmIHR5cGVvZiBzZWxlY3RvciA9PT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdG1hdGNoZWQgPSBqUXVlcnkuZmlsdGVyKCBzZWxlY3RvciwgbWF0Y2hlZCApO1xuXHRcdH1cblxuXHRcdGlmICggdGhpcy5sZW5ndGggPiAxICkge1xuXG5cdFx0XHQvLyBSZW1vdmUgZHVwbGljYXRlc1xuXHRcdFx0aWYgKCAhZ3VhcmFudGVlZFVuaXF1ZVsgbmFtZSBdICkge1xuXHRcdFx0XHRqUXVlcnkudW5pcXVlU29ydCggbWF0Y2hlZCApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBSZXZlcnNlIG9yZGVyIGZvciBwYXJlbnRzKiBhbmQgcHJldi1kZXJpdmF0aXZlc1xuXHRcdFx0aWYgKCBycGFyZW50c3ByZXYudGVzdCggbmFtZSApICkge1xuXHRcdFx0XHRtYXRjaGVkLnJldmVyc2UoKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soIG1hdGNoZWQgKTtcblx0fTtcbn0gKTtcbnZhciBybm90aHRtbHdoaXRlID0gKCAvW15cXHgyMFxcdFxcclxcblxcZl0rL2cgKTtcblxuXG5cbi8vIENvbnZlcnQgU3RyaW5nLWZvcm1hdHRlZCBvcHRpb25zIGludG8gT2JqZWN0LWZvcm1hdHRlZCBvbmVzXG5mdW5jdGlvbiBjcmVhdGVPcHRpb25zKCBvcHRpb25zICkge1xuXHR2YXIgb2JqZWN0ID0ge307XG5cdGpRdWVyeS5lYWNoKCBvcHRpb25zLm1hdGNoKCBybm90aHRtbHdoaXRlICkgfHwgW10sIGZ1bmN0aW9uKCBfLCBmbGFnICkge1xuXHRcdG9iamVjdFsgZmxhZyBdID0gdHJ1ZTtcblx0fSApO1xuXHRyZXR1cm4gb2JqZWN0O1xufVxuXG4vKlxuICogQ3JlYXRlIGEgY2FsbGJhY2sgbGlzdCB1c2luZyB0aGUgZm9sbG93aW5nIHBhcmFtZXRlcnM6XG4gKlxuICpcdG9wdGlvbnM6IGFuIG9wdGlvbmFsIGxpc3Qgb2Ygc3BhY2Utc2VwYXJhdGVkIG9wdGlvbnMgdGhhdCB3aWxsIGNoYW5nZSBob3dcbiAqXHRcdFx0dGhlIGNhbGxiYWNrIGxpc3QgYmVoYXZlcyBvciBhIG1vcmUgdHJhZGl0aW9uYWwgb3B0aW9uIG9iamVjdFxuICpcbiAqIEJ5IGRlZmF1bHQgYSBjYWxsYmFjayBsaXN0IHdpbGwgYWN0IGxpa2UgYW4gZXZlbnQgY2FsbGJhY2sgbGlzdCBhbmQgY2FuIGJlXG4gKiBcImZpcmVkXCIgbXVsdGlwbGUgdGltZXMuXG4gKlxuICogUG9zc2libGUgb3B0aW9uczpcbiAqXG4gKlx0b25jZTpcdFx0XHR3aWxsIGVuc3VyZSB0aGUgY2FsbGJhY2sgbGlzdCBjYW4gb25seSBiZSBmaXJlZCBvbmNlIChsaWtlIGEgRGVmZXJyZWQpXG4gKlxuICpcdG1lbW9yeTpcdFx0XHR3aWxsIGtlZXAgdHJhY2sgb2YgcHJldmlvdXMgdmFsdWVzIGFuZCB3aWxsIGNhbGwgYW55IGNhbGxiYWNrIGFkZGVkXG4gKlx0XHRcdFx0XHRhZnRlciB0aGUgbGlzdCBoYXMgYmVlbiBmaXJlZCByaWdodCBhd2F5IHdpdGggdGhlIGxhdGVzdCBcIm1lbW9yaXplZFwiXG4gKlx0XHRcdFx0XHR2YWx1ZXMgKGxpa2UgYSBEZWZlcnJlZClcbiAqXG4gKlx0dW5pcXVlOlx0XHRcdHdpbGwgZW5zdXJlIGEgY2FsbGJhY2sgY2FuIG9ubHkgYmUgYWRkZWQgb25jZSAobm8gZHVwbGljYXRlIGluIHRoZSBsaXN0KVxuICpcbiAqXHRzdG9wT25GYWxzZTpcdGludGVycnVwdCBjYWxsaW5ncyB3aGVuIGEgY2FsbGJhY2sgcmV0dXJucyBmYWxzZVxuICpcbiAqL1xualF1ZXJ5LkNhbGxiYWNrcyA9IGZ1bmN0aW9uKCBvcHRpb25zICkge1xuXG5cdC8vIENvbnZlcnQgb3B0aW9ucyBmcm9tIFN0cmluZy1mb3JtYXR0ZWQgdG8gT2JqZWN0LWZvcm1hdHRlZCBpZiBuZWVkZWRcblx0Ly8gKHdlIGNoZWNrIGluIGNhY2hlIGZpcnN0KVxuXHRvcHRpb25zID0gdHlwZW9mIG9wdGlvbnMgPT09IFwic3RyaW5nXCIgP1xuXHRcdGNyZWF0ZU9wdGlvbnMoIG9wdGlvbnMgKSA6XG5cdFx0alF1ZXJ5LmV4dGVuZCgge30sIG9wdGlvbnMgKTtcblxuXHR2YXIgLy8gRmxhZyB0byBrbm93IGlmIGxpc3QgaXMgY3VycmVudGx5IGZpcmluZ1xuXHRcdGZpcmluZyxcblxuXHRcdC8vIExhc3QgZmlyZSB2YWx1ZSBmb3Igbm9uLWZvcmdldHRhYmxlIGxpc3RzXG5cdFx0bWVtb3J5LFxuXG5cdFx0Ly8gRmxhZyB0byBrbm93IGlmIGxpc3Qgd2FzIGFscmVhZHkgZmlyZWRcblx0XHRmaXJlZCxcblxuXHRcdC8vIEZsYWcgdG8gcHJldmVudCBmaXJpbmdcblx0XHRsb2NrZWQsXG5cblx0XHQvLyBBY3R1YWwgY2FsbGJhY2sgbGlzdFxuXHRcdGxpc3QgPSBbXSxcblxuXHRcdC8vIFF1ZXVlIG9mIGV4ZWN1dGlvbiBkYXRhIGZvciByZXBlYXRhYmxlIGxpc3RzXG5cdFx0cXVldWUgPSBbXSxcblxuXHRcdC8vIEluZGV4IG9mIGN1cnJlbnRseSBmaXJpbmcgY2FsbGJhY2sgKG1vZGlmaWVkIGJ5IGFkZC9yZW1vdmUgYXMgbmVlZGVkKVxuXHRcdGZpcmluZ0luZGV4ID0gLTEsXG5cblx0XHQvLyBGaXJlIGNhbGxiYWNrc1xuXHRcdGZpcmUgPSBmdW5jdGlvbigpIHtcblxuXHRcdFx0Ly8gRW5mb3JjZSBzaW5nbGUtZmlyaW5nXG5cdFx0XHRsb2NrZWQgPSBsb2NrZWQgfHwgb3B0aW9ucy5vbmNlO1xuXG5cdFx0XHQvLyBFeGVjdXRlIGNhbGxiYWNrcyBmb3IgYWxsIHBlbmRpbmcgZXhlY3V0aW9ucyxcblx0XHRcdC8vIHJlc3BlY3RpbmcgZmlyaW5nSW5kZXggb3ZlcnJpZGVzIGFuZCBydW50aW1lIGNoYW5nZXNcblx0XHRcdGZpcmVkID0gZmlyaW5nID0gdHJ1ZTtcblx0XHRcdGZvciAoIDsgcXVldWUubGVuZ3RoOyBmaXJpbmdJbmRleCA9IC0xICkge1xuXHRcdFx0XHRtZW1vcnkgPSBxdWV1ZS5zaGlmdCgpO1xuXHRcdFx0XHR3aGlsZSAoICsrZmlyaW5nSW5kZXggPCBsaXN0Lmxlbmd0aCApIHtcblxuXHRcdFx0XHRcdC8vIFJ1biBjYWxsYmFjayBhbmQgY2hlY2sgZm9yIGVhcmx5IHRlcm1pbmF0aW9uXG5cdFx0XHRcdFx0aWYgKCBsaXN0WyBmaXJpbmdJbmRleCBdLmFwcGx5KCBtZW1vcnlbIDAgXSwgbWVtb3J5WyAxIF0gKSA9PT0gZmFsc2UgJiZcblx0XHRcdFx0XHRcdG9wdGlvbnMuc3RvcE9uRmFsc2UgKSB7XG5cblx0XHRcdFx0XHRcdC8vIEp1bXAgdG8gZW5kIGFuZCBmb3JnZXQgdGhlIGRhdGEgc28gLmFkZCBkb2Vzbid0IHJlLWZpcmVcblx0XHRcdFx0XHRcdGZpcmluZ0luZGV4ID0gbGlzdC5sZW5ndGg7XG5cdFx0XHRcdFx0XHRtZW1vcnkgPSBmYWxzZTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gRm9yZ2V0IHRoZSBkYXRhIGlmIHdlJ3JlIGRvbmUgd2l0aCBpdFxuXHRcdFx0aWYgKCAhb3B0aW9ucy5tZW1vcnkgKSB7XG5cdFx0XHRcdG1lbW9yeSA9IGZhbHNlO1xuXHRcdFx0fVxuXG5cdFx0XHRmaXJpbmcgPSBmYWxzZTtcblxuXHRcdFx0Ly8gQ2xlYW4gdXAgaWYgd2UncmUgZG9uZSBmaXJpbmcgZm9yIGdvb2Rcblx0XHRcdGlmICggbG9ja2VkICkge1xuXG5cdFx0XHRcdC8vIEtlZXAgYW4gZW1wdHkgbGlzdCBpZiB3ZSBoYXZlIGRhdGEgZm9yIGZ1dHVyZSBhZGQgY2FsbHNcblx0XHRcdFx0aWYgKCBtZW1vcnkgKSB7XG5cdFx0XHRcdFx0bGlzdCA9IFtdO1xuXG5cdFx0XHRcdC8vIE90aGVyd2lzZSwgdGhpcyBvYmplY3QgaXMgc3BlbnRcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRsaXN0ID0gXCJcIjtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0sXG5cblx0XHQvLyBBY3R1YWwgQ2FsbGJhY2tzIG9iamVjdFxuXHRcdHNlbGYgPSB7XG5cblx0XHRcdC8vIEFkZCBhIGNhbGxiYWNrIG9yIGEgY29sbGVjdGlvbiBvZiBjYWxsYmFja3MgdG8gdGhlIGxpc3Rcblx0XHRcdGFkZDogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGlmICggbGlzdCApIHtcblxuXHRcdFx0XHRcdC8vIElmIHdlIGhhdmUgbWVtb3J5IGZyb20gYSBwYXN0IHJ1biwgd2Ugc2hvdWxkIGZpcmUgYWZ0ZXIgYWRkaW5nXG5cdFx0XHRcdFx0aWYgKCBtZW1vcnkgJiYgIWZpcmluZyApIHtcblx0XHRcdFx0XHRcdGZpcmluZ0luZGV4ID0gbGlzdC5sZW5ndGggLSAxO1xuXHRcdFx0XHRcdFx0cXVldWUucHVzaCggbWVtb3J5ICk7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0KCBmdW5jdGlvbiBhZGQoIGFyZ3MgKSB7XG5cdFx0XHRcdFx0XHRqUXVlcnkuZWFjaCggYXJncywgZnVuY3Rpb24oIF8sIGFyZyApIHtcblx0XHRcdFx0XHRcdFx0aWYgKCBpc0Z1bmN0aW9uKCBhcmcgKSApIHtcblx0XHRcdFx0XHRcdFx0XHRpZiAoICFvcHRpb25zLnVuaXF1ZSB8fCAhc2VsZi5oYXMoIGFyZyApICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0bGlzdC5wdXNoKCBhcmcgKTtcblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdH0gZWxzZSBpZiAoIGFyZyAmJiBhcmcubGVuZ3RoICYmIHRvVHlwZSggYXJnICkgIT09IFwic3RyaW5nXCIgKSB7XG5cblx0XHRcdFx0XHRcdFx0XHQvLyBJbnNwZWN0IHJlY3Vyc2l2ZWx5XG5cdFx0XHRcdFx0XHRcdFx0YWRkKCBhcmcgKTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fSApO1xuXHRcdFx0XHRcdH0gKSggYXJndW1lbnRzICk7XG5cblx0XHRcdFx0XHRpZiAoIG1lbW9yeSAmJiAhZmlyaW5nICkge1xuXHRcdFx0XHRcdFx0ZmlyZSgpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdH0sXG5cblx0XHRcdC8vIFJlbW92ZSBhIGNhbGxiYWNrIGZyb20gdGhlIGxpc3Rcblx0XHRcdHJlbW92ZTogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGpRdWVyeS5lYWNoKCBhcmd1bWVudHMsIGZ1bmN0aW9uKCBfLCBhcmcgKSB7XG5cdFx0XHRcdFx0dmFyIGluZGV4O1xuXHRcdFx0XHRcdHdoaWxlICggKCBpbmRleCA9IGpRdWVyeS5pbkFycmF5KCBhcmcsIGxpc3QsIGluZGV4ICkgKSA+IC0xICkge1xuXHRcdFx0XHRcdFx0bGlzdC5zcGxpY2UoIGluZGV4LCAxICk7XG5cblx0XHRcdFx0XHRcdC8vIEhhbmRsZSBmaXJpbmcgaW5kZXhlc1xuXHRcdFx0XHRcdFx0aWYgKCBpbmRleCA8PSBmaXJpbmdJbmRleCApIHtcblx0XHRcdFx0XHRcdFx0ZmlyaW5nSW5kZXgtLTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0gKTtcblx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHR9LFxuXG5cdFx0XHQvLyBDaGVjayBpZiBhIGdpdmVuIGNhbGxiYWNrIGlzIGluIHRoZSBsaXN0LlxuXHRcdFx0Ly8gSWYgbm8gYXJndW1lbnQgaXMgZ2l2ZW4sIHJldHVybiB3aGV0aGVyIG9yIG5vdCBsaXN0IGhhcyBjYWxsYmFja3MgYXR0YWNoZWQuXG5cdFx0XHRoYXM6IGZ1bmN0aW9uKCBmbiApIHtcblx0XHRcdFx0cmV0dXJuIGZuID9cblx0XHRcdFx0XHRqUXVlcnkuaW5BcnJheSggZm4sIGxpc3QgKSA+IC0xIDpcblx0XHRcdFx0XHRsaXN0Lmxlbmd0aCA+IDA7XG5cdFx0XHR9LFxuXG5cdFx0XHQvLyBSZW1vdmUgYWxsIGNhbGxiYWNrcyBmcm9tIHRoZSBsaXN0XG5cdFx0XHRlbXB0eTogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGlmICggbGlzdCApIHtcblx0XHRcdFx0XHRsaXN0ID0gW107XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHR9LFxuXG5cdFx0XHQvLyBEaXNhYmxlIC5maXJlIGFuZCAuYWRkXG5cdFx0XHQvLyBBYm9ydCBhbnkgY3VycmVudC9wZW5kaW5nIGV4ZWN1dGlvbnNcblx0XHRcdC8vIENsZWFyIGFsbCBjYWxsYmFja3MgYW5kIHZhbHVlc1xuXHRcdFx0ZGlzYWJsZTogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGxvY2tlZCA9IHF1ZXVlID0gW107XG5cdFx0XHRcdGxpc3QgPSBtZW1vcnkgPSBcIlwiO1xuXHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdH0sXG5cdFx0XHRkaXNhYmxlZDogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHJldHVybiAhbGlzdDtcblx0XHRcdH0sXG5cblx0XHRcdC8vIERpc2FibGUgLmZpcmVcblx0XHRcdC8vIEFsc28gZGlzYWJsZSAuYWRkIHVubGVzcyB3ZSBoYXZlIG1lbW9yeSAoc2luY2UgaXQgd291bGQgaGF2ZSBubyBlZmZlY3QpXG5cdFx0XHQvLyBBYm9ydCBhbnkgcGVuZGluZyBleGVjdXRpb25zXG5cdFx0XHRsb2NrOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0bG9ja2VkID0gcXVldWUgPSBbXTtcblx0XHRcdFx0aWYgKCAhbWVtb3J5ICYmICFmaXJpbmcgKSB7XG5cdFx0XHRcdFx0bGlzdCA9IG1lbW9yeSA9IFwiXCI7XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHR9LFxuXHRcdFx0bG9ja2VkOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0cmV0dXJuICEhbG9ja2VkO1xuXHRcdFx0fSxcblxuXHRcdFx0Ly8gQ2FsbCBhbGwgY2FsbGJhY2tzIHdpdGggdGhlIGdpdmVuIGNvbnRleHQgYW5kIGFyZ3VtZW50c1xuXHRcdFx0ZmlyZVdpdGg6IGZ1bmN0aW9uKCBjb250ZXh0LCBhcmdzICkge1xuXHRcdFx0XHRpZiAoICFsb2NrZWQgKSB7XG5cdFx0XHRcdFx0YXJncyA9IGFyZ3MgfHwgW107XG5cdFx0XHRcdFx0YXJncyA9IFsgY29udGV4dCwgYXJncy5zbGljZSA/IGFyZ3Muc2xpY2UoKSA6IGFyZ3MgXTtcblx0XHRcdFx0XHRxdWV1ZS5wdXNoKCBhcmdzICk7XG5cdFx0XHRcdFx0aWYgKCAhZmlyaW5nICkge1xuXHRcdFx0XHRcdFx0ZmlyZSgpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdH0sXG5cblx0XHRcdC8vIENhbGwgYWxsIHRoZSBjYWxsYmFja3Mgd2l0aCB0aGUgZ2l2ZW4gYXJndW1lbnRzXG5cdFx0XHRmaXJlOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0c2VsZi5maXJlV2l0aCggdGhpcywgYXJndW1lbnRzICk7XG5cdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0fSxcblxuXHRcdFx0Ly8gVG8ga25vdyBpZiB0aGUgY2FsbGJhY2tzIGhhdmUgYWxyZWFkeSBiZWVuIGNhbGxlZCBhdCBsZWFzdCBvbmNlXG5cdFx0XHRmaXJlZDogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHJldHVybiAhIWZpcmVkO1xuXHRcdFx0fVxuXHRcdH07XG5cblx0cmV0dXJuIHNlbGY7XG59O1xuXG5cbmZ1bmN0aW9uIElkZW50aXR5KCB2ICkge1xuXHRyZXR1cm4gdjtcbn1cbmZ1bmN0aW9uIFRocm93ZXIoIGV4ICkge1xuXHR0aHJvdyBleDtcbn1cblxuZnVuY3Rpb24gYWRvcHRWYWx1ZSggdmFsdWUsIHJlc29sdmUsIHJlamVjdCwgbm9WYWx1ZSApIHtcblx0dmFyIG1ldGhvZDtcblxuXHR0cnkge1xuXG5cdFx0Ly8gQ2hlY2sgZm9yIHByb21pc2UgYXNwZWN0IGZpcnN0IHRvIHByaXZpbGVnZSBzeW5jaHJvbm91cyBiZWhhdmlvclxuXHRcdGlmICggdmFsdWUgJiYgaXNGdW5jdGlvbiggKCBtZXRob2QgPSB2YWx1ZS5wcm9taXNlICkgKSApIHtcblx0XHRcdG1ldGhvZC5jYWxsKCB2YWx1ZSApLmRvbmUoIHJlc29sdmUgKS5mYWlsKCByZWplY3QgKTtcblxuXHRcdC8vIE90aGVyIHRoZW5hYmxlc1xuXHRcdH0gZWxzZSBpZiAoIHZhbHVlICYmIGlzRnVuY3Rpb24oICggbWV0aG9kID0gdmFsdWUudGhlbiApICkgKSB7XG5cdFx0XHRtZXRob2QuY2FsbCggdmFsdWUsIHJlc29sdmUsIHJlamVjdCApO1xuXG5cdFx0Ly8gT3RoZXIgbm9uLXRoZW5hYmxlc1xuXHRcdH0gZWxzZSB7XG5cblx0XHRcdC8vIENvbnRyb2wgYHJlc29sdmVgIGFyZ3VtZW50cyBieSBsZXR0aW5nIEFycmF5I3NsaWNlIGNhc3QgYm9vbGVhbiBgbm9WYWx1ZWAgdG8gaW50ZWdlcjpcblx0XHRcdC8vICogZmFsc2U6IFsgdmFsdWUgXS5zbGljZSggMCApID0+IHJlc29sdmUoIHZhbHVlIClcblx0XHRcdC8vICogdHJ1ZTogWyB2YWx1ZSBdLnNsaWNlKCAxICkgPT4gcmVzb2x2ZSgpXG5cdFx0XHRyZXNvbHZlLmFwcGx5KCB1bmRlZmluZWQsIFsgdmFsdWUgXS5zbGljZSggbm9WYWx1ZSApICk7XG5cdFx0fVxuXG5cdC8vIEZvciBQcm9taXNlcy9BKywgY29udmVydCBleGNlcHRpb25zIGludG8gcmVqZWN0aW9uc1xuXHQvLyBTaW5jZSBqUXVlcnkud2hlbiBkb2Vzbid0IHVud3JhcCB0aGVuYWJsZXMsIHdlIGNhbiBza2lwIHRoZSBleHRyYSBjaGVja3MgYXBwZWFyaW5nIGluXG5cdC8vIERlZmVycmVkI3RoZW4gdG8gY29uZGl0aW9uYWxseSBzdXBwcmVzcyByZWplY3Rpb24uXG5cdH0gY2F0Y2ggKCB2YWx1ZSApIHtcblxuXHRcdC8vIFN1cHBvcnQ6IEFuZHJvaWQgNC4wIG9ubHlcblx0XHQvLyBTdHJpY3QgbW9kZSBmdW5jdGlvbnMgaW52b2tlZCB3aXRob3V0IC5jYWxsLy5hcHBseSBnZXQgZ2xvYmFsLW9iamVjdCBjb250ZXh0XG5cdFx0cmVqZWN0LmFwcGx5KCB1bmRlZmluZWQsIFsgdmFsdWUgXSApO1xuXHR9XG59XG5cbmpRdWVyeS5leHRlbmQoIHtcblxuXHREZWZlcnJlZDogZnVuY3Rpb24oIGZ1bmMgKSB7XG5cdFx0dmFyIHR1cGxlcyA9IFtcblxuXHRcdFx0XHQvLyBhY3Rpb24sIGFkZCBsaXN0ZW5lciwgY2FsbGJhY2tzLFxuXHRcdFx0XHQvLyAuLi4gLnRoZW4gaGFuZGxlcnMsIGFyZ3VtZW50IGluZGV4LCBbZmluYWwgc3RhdGVdXG5cdFx0XHRcdFsgXCJub3RpZnlcIiwgXCJwcm9ncmVzc1wiLCBqUXVlcnkuQ2FsbGJhY2tzKCBcIm1lbW9yeVwiICksXG5cdFx0XHRcdFx0alF1ZXJ5LkNhbGxiYWNrcyggXCJtZW1vcnlcIiApLCAyIF0sXG5cdFx0XHRcdFsgXCJyZXNvbHZlXCIsIFwiZG9uZVwiLCBqUXVlcnkuQ2FsbGJhY2tzKCBcIm9uY2UgbWVtb3J5XCIgKSxcblx0XHRcdFx0XHRqUXVlcnkuQ2FsbGJhY2tzKCBcIm9uY2UgbWVtb3J5XCIgKSwgMCwgXCJyZXNvbHZlZFwiIF0sXG5cdFx0XHRcdFsgXCJyZWplY3RcIiwgXCJmYWlsXCIsIGpRdWVyeS5DYWxsYmFja3MoIFwib25jZSBtZW1vcnlcIiApLFxuXHRcdFx0XHRcdGpRdWVyeS5DYWxsYmFja3MoIFwib25jZSBtZW1vcnlcIiApLCAxLCBcInJlamVjdGVkXCIgXVxuXHRcdFx0XSxcblx0XHRcdHN0YXRlID0gXCJwZW5kaW5nXCIsXG5cdFx0XHRwcm9taXNlID0ge1xuXHRcdFx0XHRzdGF0ZTogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHN0YXRlO1xuXHRcdFx0XHR9LFxuXHRcdFx0XHRhbHdheXM6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdGRlZmVycmVkLmRvbmUoIGFyZ3VtZW50cyApLmZhaWwoIGFyZ3VtZW50cyApO1xuXHRcdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0XHR9LFxuXHRcdFx0XHRcImNhdGNoXCI6IGZ1bmN0aW9uKCBmbiApIHtcblx0XHRcdFx0XHRyZXR1cm4gcHJvbWlzZS50aGVuKCBudWxsLCBmbiApO1xuXHRcdFx0XHR9LFxuXG5cdFx0XHRcdC8vIEtlZXAgcGlwZSBmb3IgYmFjay1jb21wYXRcblx0XHRcdFx0cGlwZTogZnVuY3Rpb24oIC8qIGZuRG9uZSwgZm5GYWlsLCBmblByb2dyZXNzICovICkge1xuXHRcdFx0XHRcdHZhciBmbnMgPSBhcmd1bWVudHM7XG5cblx0XHRcdFx0XHRyZXR1cm4galF1ZXJ5LkRlZmVycmVkKCBmdW5jdGlvbiggbmV3RGVmZXIgKSB7XG5cdFx0XHRcdFx0XHRqUXVlcnkuZWFjaCggdHVwbGVzLCBmdW5jdGlvbiggX2ksIHR1cGxlICkge1xuXG5cdFx0XHRcdFx0XHRcdC8vIE1hcCB0dXBsZXMgKHByb2dyZXNzLCBkb25lLCBmYWlsKSB0byBhcmd1bWVudHMgKGRvbmUsIGZhaWwsIHByb2dyZXNzKVxuXHRcdFx0XHRcdFx0XHR2YXIgZm4gPSBpc0Z1bmN0aW9uKCBmbnNbIHR1cGxlWyA0IF0gXSApICYmIGZuc1sgdHVwbGVbIDQgXSBdO1xuXG5cdFx0XHRcdFx0XHRcdC8vIGRlZmVycmVkLnByb2dyZXNzKGZ1bmN0aW9uKCkgeyBiaW5kIHRvIG5ld0RlZmVyIG9yIG5ld0RlZmVyLm5vdGlmeSB9KVxuXHRcdFx0XHRcdFx0XHQvLyBkZWZlcnJlZC5kb25lKGZ1bmN0aW9uKCkgeyBiaW5kIHRvIG5ld0RlZmVyIG9yIG5ld0RlZmVyLnJlc29sdmUgfSlcblx0XHRcdFx0XHRcdFx0Ly8gZGVmZXJyZWQuZmFpbChmdW5jdGlvbigpIHsgYmluZCB0byBuZXdEZWZlciBvciBuZXdEZWZlci5yZWplY3QgfSlcblx0XHRcdFx0XHRcdFx0ZGVmZXJyZWRbIHR1cGxlWyAxIF0gXSggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0XHRcdFx0dmFyIHJldHVybmVkID0gZm4gJiYgZm4uYXBwbHkoIHRoaXMsIGFyZ3VtZW50cyApO1xuXHRcdFx0XHRcdFx0XHRcdGlmICggcmV0dXJuZWQgJiYgaXNGdW5jdGlvbiggcmV0dXJuZWQucHJvbWlzZSApICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0cmV0dXJuZWQucHJvbWlzZSgpXG5cdFx0XHRcdFx0XHRcdFx0XHRcdC5wcm9ncmVzcyggbmV3RGVmZXIubm90aWZ5IClcblx0XHRcdFx0XHRcdFx0XHRcdFx0LmRvbmUoIG5ld0RlZmVyLnJlc29sdmUgKVxuXHRcdFx0XHRcdFx0XHRcdFx0XHQuZmFpbCggbmV3RGVmZXIucmVqZWN0ICk7XG5cdFx0XHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0XHRcdG5ld0RlZmVyWyB0dXBsZVsgMCBdICsgXCJXaXRoXCIgXShcblx0XHRcdFx0XHRcdFx0XHRcdFx0dGhpcyxcblx0XHRcdFx0XHRcdFx0XHRcdFx0Zm4gPyBbIHJldHVybmVkIF0gOiBhcmd1bWVudHNcblx0XHRcdFx0XHRcdFx0XHRcdCk7XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHR9ICk7XG5cdFx0XHRcdFx0XHR9ICk7XG5cdFx0XHRcdFx0XHRmbnMgPSBudWxsO1xuXHRcdFx0XHRcdH0gKS5wcm9taXNlKCk7XG5cdFx0XHRcdH0sXG5cdFx0XHRcdHRoZW46IGZ1bmN0aW9uKCBvbkZ1bGZpbGxlZCwgb25SZWplY3RlZCwgb25Qcm9ncmVzcyApIHtcblx0XHRcdFx0XHR2YXIgbWF4RGVwdGggPSAwO1xuXHRcdFx0XHRcdGZ1bmN0aW9uIHJlc29sdmUoIGRlcHRoLCBkZWZlcnJlZCwgaGFuZGxlciwgc3BlY2lhbCApIHtcblx0XHRcdFx0XHRcdHJldHVybiBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRcdFx0dmFyIHRoYXQgPSB0aGlzLFxuXHRcdFx0XHRcdFx0XHRcdGFyZ3MgPSBhcmd1bWVudHMsXG5cdFx0XHRcdFx0XHRcdFx0bWlnaHRUaHJvdyA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdFx0XHRcdFx0dmFyIHJldHVybmVkLCB0aGVuO1xuXG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBQcm9taXNlcy9BKyBzZWN0aW9uIDIuMy4zLjMuM1xuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gaHR0cHM6Ly9wcm9taXNlc2FwbHVzLmNvbS8jcG9pbnQtNTlcblx0XHRcdFx0XHRcdFx0XHRcdC8vIElnbm9yZSBkb3VibGUtcmVzb2x1dGlvbiBhdHRlbXB0c1xuXHRcdFx0XHRcdFx0XHRcdFx0aWYgKCBkZXB0aCA8IG1heERlcHRoICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRyZXR1cm47XG5cdFx0XHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdFx0XHRcdHJldHVybmVkID0gaGFuZGxlci5hcHBseSggdGhhdCwgYXJncyApO1xuXG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBQcm9taXNlcy9BKyBzZWN0aW9uIDIuMy4xXG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBodHRwczovL3Byb21pc2VzYXBsdXMuY29tLyNwb2ludC00OFxuXHRcdFx0XHRcdFx0XHRcdFx0aWYgKCByZXR1cm5lZCA9PT0gZGVmZXJyZWQucHJvbWlzZSgpICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHR0aHJvdyBuZXcgVHlwZUVycm9yKCBcIlRoZW5hYmxlIHNlbGYtcmVzb2x1dGlvblwiICk7XG5cdFx0XHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IFByb21pc2VzL0ErIHNlY3Rpb25zIDIuMy4zLjEsIDMuNVxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gaHR0cHM6Ly9wcm9taXNlc2FwbHVzLmNvbS8jcG9pbnQtNTRcblx0XHRcdFx0XHRcdFx0XHRcdC8vIGh0dHBzOi8vcHJvbWlzZXNhcGx1cy5jb20vI3BvaW50LTc1XG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBSZXRyaWV2ZSBgdGhlbmAgb25seSBvbmNlXG5cdFx0XHRcdFx0XHRcdFx0XHR0aGVuID0gcmV0dXJuZWQgJiZcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBQcm9taXNlcy9BKyBzZWN0aW9uIDIuMy40XG5cdFx0XHRcdFx0XHRcdFx0XHRcdC8vIGh0dHBzOi8vcHJvbWlzZXNhcGx1cy5jb20vI3BvaW50LTY0XG5cdFx0XHRcdFx0XHRcdFx0XHRcdC8vIE9ubHkgY2hlY2sgb2JqZWN0cyBhbmQgZnVuY3Rpb25zIGZvciB0aGVuYWJpbGl0eVxuXHRcdFx0XHRcdFx0XHRcdFx0XHQoIHR5cGVvZiByZXR1cm5lZCA9PT0gXCJvYmplY3RcIiB8fFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdHR5cGVvZiByZXR1cm5lZCA9PT0gXCJmdW5jdGlvblwiICkgJiZcblx0XHRcdFx0XHRcdFx0XHRcdFx0cmV0dXJuZWQudGhlbjtcblxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gSGFuZGxlIGEgcmV0dXJuZWQgdGhlbmFibGVcblx0XHRcdFx0XHRcdFx0XHRcdGlmICggaXNGdW5jdGlvbiggdGhlbiApICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdC8vIFNwZWNpYWwgcHJvY2Vzc29ycyAobm90aWZ5KSBqdXN0IHdhaXQgZm9yIHJlc29sdXRpb25cblx0XHRcdFx0XHRcdFx0XHRcdFx0aWYgKCBzcGVjaWFsICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdHRoZW4uY2FsbChcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdHJldHVybmVkLFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0cmVzb2x2ZSggbWF4RGVwdGgsIGRlZmVycmVkLCBJZGVudGl0eSwgc3BlY2lhbCApLFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0cmVzb2x2ZSggbWF4RGVwdGgsIGRlZmVycmVkLCBUaHJvd2VyLCBzcGVjaWFsIClcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHQpO1xuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdC8vIE5vcm1hbCBwcm9jZXNzb3JzIChyZXNvbHZlKSBhbHNvIGhvb2sgaW50byBwcm9ncmVzc1xuXHRcdFx0XHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gLi4uYW5kIGRpc3JlZ2FyZCBvbGRlciByZXNvbHV0aW9uIHZhbHVlc1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdG1heERlcHRoKys7XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0XHR0aGVuLmNhbGwoXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRyZXR1cm5lZCxcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdHJlc29sdmUoIG1heERlcHRoLCBkZWZlcnJlZCwgSWRlbnRpdHksIHNwZWNpYWwgKSxcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdHJlc29sdmUoIG1heERlcHRoLCBkZWZlcnJlZCwgVGhyb3dlciwgc3BlY2lhbCApLFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0cmVzb2x2ZSggbWF4RGVwdGgsIGRlZmVycmVkLCBJZGVudGl0eSxcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0ZGVmZXJyZWQubm90aWZ5V2l0aCApXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0KTtcblx0XHRcdFx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBIYW5kbGUgYWxsIG90aGVyIHJldHVybmVkIHZhbHVlc1xuXHRcdFx0XHRcdFx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBPbmx5IHN1YnN0aXR1dGUgaGFuZGxlcnMgcGFzcyBvbiBjb250ZXh0XG5cdFx0XHRcdFx0XHRcdFx0XHRcdC8vIGFuZCBtdWx0aXBsZSB2YWx1ZXMgKG5vbi1zcGVjIGJlaGF2aW9yKVxuXHRcdFx0XHRcdFx0XHRcdFx0XHRpZiAoIGhhbmRsZXIgIT09IElkZW50aXR5ICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdHRoYXQgPSB1bmRlZmluZWQ7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0YXJncyA9IFsgcmV0dXJuZWQgXTtcblx0XHRcdFx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdC8vIFByb2Nlc3MgdGhlIHZhbHVlKHMpXG5cdFx0XHRcdFx0XHRcdFx0XHRcdC8vIERlZmF1bHQgcHJvY2VzcyBpcyByZXNvbHZlXG5cdFx0XHRcdFx0XHRcdFx0XHRcdCggc3BlY2lhbCB8fCBkZWZlcnJlZC5yZXNvbHZlV2l0aCApKCB0aGF0LCBhcmdzICk7XG5cdFx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0fSxcblxuXHRcdFx0XHRcdFx0XHRcdC8vIE9ubHkgbm9ybWFsIHByb2Nlc3NvcnMgKHJlc29sdmUpIGNhdGNoIGFuZCByZWplY3QgZXhjZXB0aW9uc1xuXHRcdFx0XHRcdFx0XHRcdHByb2Nlc3MgPSBzcGVjaWFsID9cblx0XHRcdFx0XHRcdFx0XHRcdG1pZ2h0VGhyb3cgOlxuXHRcdFx0XHRcdFx0XHRcdFx0ZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdHRyeSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0bWlnaHRUaHJvdygpO1xuXHRcdFx0XHRcdFx0XHRcdFx0XHR9IGNhdGNoICggZSApIHtcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdGlmICggalF1ZXJ5LkRlZmVycmVkLmV4Y2VwdGlvbkhvb2sgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRqUXVlcnkuRGVmZXJyZWQuZXhjZXB0aW9uSG9vayggZSxcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0cHJvY2Vzcy5zdGFja1RyYWNlICk7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogUHJvbWlzZXMvQSsgc2VjdGlvbiAyLjMuMy4zLjQuMVxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdC8vIGh0dHBzOi8vcHJvbWlzZXNhcGx1cy5jb20vI3BvaW50LTYxXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gSWdub3JlIHBvc3QtcmVzb2x1dGlvbiBleGNlcHRpb25zXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0aWYgKCBkZXB0aCArIDEgPj0gbWF4RGVwdGggKSB7XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdC8vIE9ubHkgc3Vic3RpdHV0ZSBoYW5kbGVycyBwYXNzIG9uIGNvbnRleHRcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdC8vIGFuZCBtdWx0aXBsZSB2YWx1ZXMgKG5vbi1zcGVjIGJlaGF2aW9yKVxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0aWYgKCBoYW5kbGVyICE9PSBUaHJvd2VyICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHR0aGF0ID0gdW5kZWZpbmVkO1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRhcmdzID0gWyBlIF07XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdGRlZmVycmVkLnJlamVjdFdpdGgoIHRoYXQsIGFyZ3MgKTtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHRcdH07XG5cblx0XHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogUHJvbWlzZXMvQSsgc2VjdGlvbiAyLjMuMy4zLjFcblx0XHRcdFx0XHRcdFx0Ly8gaHR0cHM6Ly9wcm9taXNlc2FwbHVzLmNvbS8jcG9pbnQtNTdcblx0XHRcdFx0XHRcdFx0Ly8gUmUtcmVzb2x2ZSBwcm9taXNlcyBpbW1lZGlhdGVseSB0byBkb2RnZSBmYWxzZSByZWplY3Rpb24gZnJvbVxuXHRcdFx0XHRcdFx0XHQvLyBzdWJzZXF1ZW50IGVycm9yc1xuXHRcdFx0XHRcdFx0XHRpZiAoIGRlcHRoICkge1xuXHRcdFx0XHRcdFx0XHRcdHByb2Nlc3MoKTtcblx0XHRcdFx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdFx0XHRcdC8vIENhbGwgYW4gb3B0aW9uYWwgaG9vayB0byByZWNvcmQgdGhlIHN0YWNrLCBpbiBjYXNlIG9mIGV4Y2VwdGlvblxuXHRcdFx0XHRcdFx0XHRcdC8vIHNpbmNlIGl0J3Mgb3RoZXJ3aXNlIGxvc3Qgd2hlbiBleGVjdXRpb24gZ29lcyBhc3luY1xuXHRcdFx0XHRcdFx0XHRcdGlmICggalF1ZXJ5LkRlZmVycmVkLmdldFN0YWNrSG9vayApIHtcblx0XHRcdFx0XHRcdFx0XHRcdHByb2Nlc3Muc3RhY2tUcmFjZSA9IGpRdWVyeS5EZWZlcnJlZC5nZXRTdGFja0hvb2soKTtcblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0d2luZG93LnNldFRpbWVvdXQoIHByb2Nlc3MgKTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRyZXR1cm4galF1ZXJ5LkRlZmVycmVkKCBmdW5jdGlvbiggbmV3RGVmZXIgKSB7XG5cblx0XHRcdFx0XHRcdC8vIHByb2dyZXNzX2hhbmRsZXJzLmFkZCggLi4uIClcblx0XHRcdFx0XHRcdHR1cGxlc1sgMCBdWyAzIF0uYWRkKFxuXHRcdFx0XHRcdFx0XHRyZXNvbHZlKFxuXHRcdFx0XHRcdFx0XHRcdDAsXG5cdFx0XHRcdFx0XHRcdFx0bmV3RGVmZXIsXG5cdFx0XHRcdFx0XHRcdFx0aXNGdW5jdGlvbiggb25Qcm9ncmVzcyApID9cblx0XHRcdFx0XHRcdFx0XHRcdG9uUHJvZ3Jlc3MgOlxuXHRcdFx0XHRcdFx0XHRcdFx0SWRlbnRpdHksXG5cdFx0XHRcdFx0XHRcdFx0bmV3RGVmZXIubm90aWZ5V2l0aFxuXHRcdFx0XHRcdFx0XHQpXG5cdFx0XHRcdFx0XHQpO1xuXG5cdFx0XHRcdFx0XHQvLyBmdWxmaWxsZWRfaGFuZGxlcnMuYWRkKCAuLi4gKVxuXHRcdFx0XHRcdFx0dHVwbGVzWyAxIF1bIDMgXS5hZGQoXG5cdFx0XHRcdFx0XHRcdHJlc29sdmUoXG5cdFx0XHRcdFx0XHRcdFx0MCxcblx0XHRcdFx0XHRcdFx0XHRuZXdEZWZlcixcblx0XHRcdFx0XHRcdFx0XHRpc0Z1bmN0aW9uKCBvbkZ1bGZpbGxlZCApID9cblx0XHRcdFx0XHRcdFx0XHRcdG9uRnVsZmlsbGVkIDpcblx0XHRcdFx0XHRcdFx0XHRcdElkZW50aXR5XG5cdFx0XHRcdFx0XHRcdClcblx0XHRcdFx0XHRcdCk7XG5cblx0XHRcdFx0XHRcdC8vIHJlamVjdGVkX2hhbmRsZXJzLmFkZCggLi4uIClcblx0XHRcdFx0XHRcdHR1cGxlc1sgMiBdWyAzIF0uYWRkKFxuXHRcdFx0XHRcdFx0XHRyZXNvbHZlKFxuXHRcdFx0XHRcdFx0XHRcdDAsXG5cdFx0XHRcdFx0XHRcdFx0bmV3RGVmZXIsXG5cdFx0XHRcdFx0XHRcdFx0aXNGdW5jdGlvbiggb25SZWplY3RlZCApID9cblx0XHRcdFx0XHRcdFx0XHRcdG9uUmVqZWN0ZWQgOlxuXHRcdFx0XHRcdFx0XHRcdFx0VGhyb3dlclxuXHRcdFx0XHRcdFx0XHQpXG5cdFx0XHRcdFx0XHQpO1xuXHRcdFx0XHRcdH0gKS5wcm9taXNlKCk7XG5cdFx0XHRcdH0sXG5cblx0XHRcdFx0Ly8gR2V0IGEgcHJvbWlzZSBmb3IgdGhpcyBkZWZlcnJlZFxuXHRcdFx0XHQvLyBJZiBvYmogaXMgcHJvdmlkZWQsIHRoZSBwcm9taXNlIGFzcGVjdCBpcyBhZGRlZCB0byB0aGUgb2JqZWN0XG5cdFx0XHRcdHByb21pc2U6IGZ1bmN0aW9uKCBvYmogKSB7XG5cdFx0XHRcdFx0cmV0dXJuIG9iaiAhPSBudWxsID8galF1ZXJ5LmV4dGVuZCggb2JqLCBwcm9taXNlICkgOiBwcm9taXNlO1xuXHRcdFx0XHR9XG5cdFx0XHR9LFxuXHRcdFx0ZGVmZXJyZWQgPSB7fTtcblxuXHRcdC8vIEFkZCBsaXN0LXNwZWNpZmljIG1ldGhvZHNcblx0XHRqUXVlcnkuZWFjaCggdHVwbGVzLCBmdW5jdGlvbiggaSwgdHVwbGUgKSB7XG5cdFx0XHR2YXIgbGlzdCA9IHR1cGxlWyAyIF0sXG5cdFx0XHRcdHN0YXRlU3RyaW5nID0gdHVwbGVbIDUgXTtcblxuXHRcdFx0Ly8gcHJvbWlzZS5wcm9ncmVzcyA9IGxpc3QuYWRkXG5cdFx0XHQvLyBwcm9taXNlLmRvbmUgPSBsaXN0LmFkZFxuXHRcdFx0Ly8gcHJvbWlzZS5mYWlsID0gbGlzdC5hZGRcblx0XHRcdHByb21pc2VbIHR1cGxlWyAxIF0gXSA9IGxpc3QuYWRkO1xuXG5cdFx0XHQvLyBIYW5kbGUgc3RhdGVcblx0XHRcdGlmICggc3RhdGVTdHJpbmcgKSB7XG5cdFx0XHRcdGxpc3QuYWRkKFxuXHRcdFx0XHRcdGZ1bmN0aW9uKCkge1xuXG5cdFx0XHRcdFx0XHQvLyBzdGF0ZSA9IFwicmVzb2x2ZWRcIiAoaS5lLiwgZnVsZmlsbGVkKVxuXHRcdFx0XHRcdFx0Ly8gc3RhdGUgPSBcInJlamVjdGVkXCJcblx0XHRcdFx0XHRcdHN0YXRlID0gc3RhdGVTdHJpbmc7XG5cdFx0XHRcdFx0fSxcblxuXHRcdFx0XHRcdC8vIHJlamVjdGVkX2NhbGxiYWNrcy5kaXNhYmxlXG5cdFx0XHRcdFx0Ly8gZnVsZmlsbGVkX2NhbGxiYWNrcy5kaXNhYmxlXG5cdFx0XHRcdFx0dHVwbGVzWyAzIC0gaSBdWyAyIF0uZGlzYWJsZSxcblxuXHRcdFx0XHRcdC8vIHJlamVjdGVkX2hhbmRsZXJzLmRpc2FibGVcblx0XHRcdFx0XHQvLyBmdWxmaWxsZWRfaGFuZGxlcnMuZGlzYWJsZVxuXHRcdFx0XHRcdHR1cGxlc1sgMyAtIGkgXVsgMyBdLmRpc2FibGUsXG5cblx0XHRcdFx0XHQvLyBwcm9ncmVzc19jYWxsYmFja3MubG9ja1xuXHRcdFx0XHRcdHR1cGxlc1sgMCBdWyAyIF0ubG9jayxcblxuXHRcdFx0XHRcdC8vIHByb2dyZXNzX2hhbmRsZXJzLmxvY2tcblx0XHRcdFx0XHR0dXBsZXNbIDAgXVsgMyBdLmxvY2tcblx0XHRcdFx0KTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gcHJvZ3Jlc3NfaGFuZGxlcnMuZmlyZVxuXHRcdFx0Ly8gZnVsZmlsbGVkX2hhbmRsZXJzLmZpcmVcblx0XHRcdC8vIHJlamVjdGVkX2hhbmRsZXJzLmZpcmVcblx0XHRcdGxpc3QuYWRkKCB0dXBsZVsgMyBdLmZpcmUgKTtcblxuXHRcdFx0Ly8gZGVmZXJyZWQubm90aWZ5ID0gZnVuY3Rpb24oKSB7IGRlZmVycmVkLm5vdGlmeVdpdGgoLi4uKSB9XG5cdFx0XHQvLyBkZWZlcnJlZC5yZXNvbHZlID0gZnVuY3Rpb24oKSB7IGRlZmVycmVkLnJlc29sdmVXaXRoKC4uLikgfVxuXHRcdFx0Ly8gZGVmZXJyZWQucmVqZWN0ID0gZnVuY3Rpb24oKSB7IGRlZmVycmVkLnJlamVjdFdpdGgoLi4uKSB9XG5cdFx0XHRkZWZlcnJlZFsgdHVwbGVbIDAgXSBdID0gZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGRlZmVycmVkWyB0dXBsZVsgMCBdICsgXCJXaXRoXCIgXSggdGhpcyA9PT0gZGVmZXJyZWQgPyB1bmRlZmluZWQgOiB0aGlzLCBhcmd1bWVudHMgKTtcblx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHR9O1xuXG5cdFx0XHQvLyBkZWZlcnJlZC5ub3RpZnlXaXRoID0gbGlzdC5maXJlV2l0aFxuXHRcdFx0Ly8gZGVmZXJyZWQucmVzb2x2ZVdpdGggPSBsaXN0LmZpcmVXaXRoXG5cdFx0XHQvLyBkZWZlcnJlZC5yZWplY3RXaXRoID0gbGlzdC5maXJlV2l0aFxuXHRcdFx0ZGVmZXJyZWRbIHR1cGxlWyAwIF0gKyBcIldpdGhcIiBdID0gbGlzdC5maXJlV2l0aDtcblx0XHR9ICk7XG5cblx0XHQvLyBNYWtlIHRoZSBkZWZlcnJlZCBhIHByb21pc2Vcblx0XHRwcm9taXNlLnByb21pc2UoIGRlZmVycmVkICk7XG5cblx0XHQvLyBDYWxsIGdpdmVuIGZ1bmMgaWYgYW55XG5cdFx0aWYgKCBmdW5jICkge1xuXHRcdFx0ZnVuYy5jYWxsKCBkZWZlcnJlZCwgZGVmZXJyZWQgKTtcblx0XHR9XG5cblx0XHQvLyBBbGwgZG9uZSFcblx0XHRyZXR1cm4gZGVmZXJyZWQ7XG5cdH0sXG5cblx0Ly8gRGVmZXJyZWQgaGVscGVyXG5cdHdoZW46IGZ1bmN0aW9uKCBzaW5nbGVWYWx1ZSApIHtcblx0XHR2YXJcblxuXHRcdFx0Ly8gY291bnQgb2YgdW5jb21wbGV0ZWQgc3Vib3JkaW5hdGVzXG5cdFx0XHRyZW1haW5pbmcgPSBhcmd1bWVudHMubGVuZ3RoLFxuXG5cdFx0XHQvLyBjb3VudCBvZiB1bnByb2Nlc3NlZCBhcmd1bWVudHNcblx0XHRcdGkgPSByZW1haW5pbmcsXG5cblx0XHRcdC8vIHN1Ym9yZGluYXRlIGZ1bGZpbGxtZW50IGRhdGFcblx0XHRcdHJlc29sdmVDb250ZXh0cyA9IEFycmF5KCBpICksXG5cdFx0XHRyZXNvbHZlVmFsdWVzID0gc2xpY2UuY2FsbCggYXJndW1lbnRzICksXG5cblx0XHRcdC8vIHRoZSBtYXN0ZXIgRGVmZXJyZWRcblx0XHRcdG1hc3RlciA9IGpRdWVyeS5EZWZlcnJlZCgpLFxuXG5cdFx0XHQvLyBzdWJvcmRpbmF0ZSBjYWxsYmFjayBmYWN0b3J5XG5cdFx0XHR1cGRhdGVGdW5jID0gZnVuY3Rpb24oIGkgKSB7XG5cdFx0XHRcdHJldHVybiBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0XHRcdFx0cmVzb2x2ZUNvbnRleHRzWyBpIF0gPSB0aGlzO1xuXHRcdFx0XHRcdHJlc29sdmVWYWx1ZXNbIGkgXSA9IGFyZ3VtZW50cy5sZW5ndGggPiAxID8gc2xpY2UuY2FsbCggYXJndW1lbnRzICkgOiB2YWx1ZTtcblx0XHRcdFx0XHRpZiAoICEoIC0tcmVtYWluaW5nICkgKSB7XG5cdFx0XHRcdFx0XHRtYXN0ZXIucmVzb2x2ZVdpdGgoIHJlc29sdmVDb250ZXh0cywgcmVzb2x2ZVZhbHVlcyApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fTtcblx0XHRcdH07XG5cblx0XHQvLyBTaW5nbGUtIGFuZCBlbXB0eSBhcmd1bWVudHMgYXJlIGFkb3B0ZWQgbGlrZSBQcm9taXNlLnJlc29sdmVcblx0XHRpZiAoIHJlbWFpbmluZyA8PSAxICkge1xuXHRcdFx0YWRvcHRWYWx1ZSggc2luZ2xlVmFsdWUsIG1hc3Rlci5kb25lKCB1cGRhdGVGdW5jKCBpICkgKS5yZXNvbHZlLCBtYXN0ZXIucmVqZWN0LFxuXHRcdFx0XHQhcmVtYWluaW5nICk7XG5cblx0XHRcdC8vIFVzZSAudGhlbigpIHRvIHVud3JhcCBzZWNvbmRhcnkgdGhlbmFibGVzIChjZi4gZ2gtMzAwMClcblx0XHRcdGlmICggbWFzdGVyLnN0YXRlKCkgPT09IFwicGVuZGluZ1wiIHx8XG5cdFx0XHRcdGlzRnVuY3Rpb24oIHJlc29sdmVWYWx1ZXNbIGkgXSAmJiByZXNvbHZlVmFsdWVzWyBpIF0udGhlbiApICkge1xuXG5cdFx0XHRcdHJldHVybiBtYXN0ZXIudGhlbigpO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIE11bHRpcGxlIGFyZ3VtZW50cyBhcmUgYWdncmVnYXRlZCBsaWtlIFByb21pc2UuYWxsIGFycmF5IGVsZW1lbnRzXG5cdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRhZG9wdFZhbHVlKCByZXNvbHZlVmFsdWVzWyBpIF0sIHVwZGF0ZUZ1bmMoIGkgKSwgbWFzdGVyLnJlamVjdCApO1xuXHRcdH1cblxuXHRcdHJldHVybiBtYXN0ZXIucHJvbWlzZSgpO1xuXHR9XG59ICk7XG5cblxuLy8gVGhlc2UgdXN1YWxseSBpbmRpY2F0ZSBhIHByb2dyYW1tZXIgbWlzdGFrZSBkdXJpbmcgZGV2ZWxvcG1lbnQsXG4vLyB3YXJuIGFib3V0IHRoZW0gQVNBUCByYXRoZXIgdGhhbiBzd2FsbG93aW5nIHRoZW0gYnkgZGVmYXVsdC5cbnZhciByZXJyb3JOYW1lcyA9IC9eKEV2YWx8SW50ZXJuYWx8UmFuZ2V8UmVmZXJlbmNlfFN5bnRheHxUeXBlfFVSSSlFcnJvciQvO1xuXG5qUXVlcnkuRGVmZXJyZWQuZXhjZXB0aW9uSG9vayA9IGZ1bmN0aW9uKCBlcnJvciwgc3RhY2sgKSB7XG5cblx0Ly8gU3VwcG9ydDogSUUgOCAtIDkgb25seVxuXHQvLyBDb25zb2xlIGV4aXN0cyB3aGVuIGRldiB0b29scyBhcmUgb3Blbiwgd2hpY2ggY2FuIGhhcHBlbiBhdCBhbnkgdGltZVxuXHRpZiAoIHdpbmRvdy5jb25zb2xlICYmIHdpbmRvdy5jb25zb2xlLndhcm4gJiYgZXJyb3IgJiYgcmVycm9yTmFtZXMudGVzdCggZXJyb3IubmFtZSApICkge1xuXHRcdHdpbmRvdy5jb25zb2xlLndhcm4oIFwialF1ZXJ5LkRlZmVycmVkIGV4Y2VwdGlvbjogXCIgKyBlcnJvci5tZXNzYWdlLCBlcnJvci5zdGFjaywgc3RhY2sgKTtcblx0fVxufTtcblxuXG5cblxualF1ZXJ5LnJlYWR5RXhjZXB0aW9uID0gZnVuY3Rpb24oIGVycm9yICkge1xuXHR3aW5kb3cuc2V0VGltZW91dCggZnVuY3Rpb24oKSB7XG5cdFx0dGhyb3cgZXJyb3I7XG5cdH0gKTtcbn07XG5cblxuXG5cbi8vIFRoZSBkZWZlcnJlZCB1c2VkIG9uIERPTSByZWFkeVxudmFyIHJlYWR5TGlzdCA9IGpRdWVyeS5EZWZlcnJlZCgpO1xuXG5qUXVlcnkuZm4ucmVhZHkgPSBmdW5jdGlvbiggZm4gKSB7XG5cblx0cmVhZHlMaXN0XG5cdFx0LnRoZW4oIGZuIClcblxuXHRcdC8vIFdyYXAgalF1ZXJ5LnJlYWR5RXhjZXB0aW9uIGluIGEgZnVuY3Rpb24gc28gdGhhdCB0aGUgbG9va3VwXG5cdFx0Ly8gaGFwcGVucyBhdCB0aGUgdGltZSBvZiBlcnJvciBoYW5kbGluZyBpbnN0ZWFkIG9mIGNhbGxiYWNrXG5cdFx0Ly8gcmVnaXN0cmF0aW9uLlxuXHRcdC5jYXRjaCggZnVuY3Rpb24oIGVycm9yICkge1xuXHRcdFx0alF1ZXJ5LnJlYWR5RXhjZXB0aW9uKCBlcnJvciApO1xuXHRcdH0gKTtcblxuXHRyZXR1cm4gdGhpcztcbn07XG5cbmpRdWVyeS5leHRlbmQoIHtcblxuXHQvLyBJcyB0aGUgRE9NIHJlYWR5IHRvIGJlIHVzZWQ/IFNldCB0byB0cnVlIG9uY2UgaXQgb2NjdXJzLlxuXHRpc1JlYWR5OiBmYWxzZSxcblxuXHQvLyBBIGNvdW50ZXIgdG8gdHJhY2sgaG93IG1hbnkgaXRlbXMgdG8gd2FpdCBmb3IgYmVmb3JlXG5cdC8vIHRoZSByZWFkeSBldmVudCBmaXJlcy4gU2VlICM2NzgxXG5cdHJlYWR5V2FpdDogMSxcblxuXHQvLyBIYW5kbGUgd2hlbiB0aGUgRE9NIGlzIHJlYWR5XG5cdHJlYWR5OiBmdW5jdGlvbiggd2FpdCApIHtcblxuXHRcdC8vIEFib3J0IGlmIHRoZXJlIGFyZSBwZW5kaW5nIGhvbGRzIG9yIHdlJ3JlIGFscmVhZHkgcmVhZHlcblx0XHRpZiAoIHdhaXQgPT09IHRydWUgPyAtLWpRdWVyeS5yZWFkeVdhaXQgOiBqUXVlcnkuaXNSZWFkeSApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHQvLyBSZW1lbWJlciB0aGF0IHRoZSBET00gaXMgcmVhZHlcblx0XHRqUXVlcnkuaXNSZWFkeSA9IHRydWU7XG5cblx0XHQvLyBJZiBhIG5vcm1hbCBET00gUmVhZHkgZXZlbnQgZmlyZWQsIGRlY3JlbWVudCwgYW5kIHdhaXQgaWYgbmVlZCBiZVxuXHRcdGlmICggd2FpdCAhPT0gdHJ1ZSAmJiAtLWpRdWVyeS5yZWFkeVdhaXQgPiAwICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdC8vIElmIHRoZXJlIGFyZSBmdW5jdGlvbnMgYm91bmQsIHRvIGV4ZWN1dGVcblx0XHRyZWFkeUxpc3QucmVzb2x2ZVdpdGgoIGRvY3VtZW50LCBbIGpRdWVyeSBdICk7XG5cdH1cbn0gKTtcblxualF1ZXJ5LnJlYWR5LnRoZW4gPSByZWFkeUxpc3QudGhlbjtcblxuLy8gVGhlIHJlYWR5IGV2ZW50IGhhbmRsZXIgYW5kIHNlbGYgY2xlYW51cCBtZXRob2RcbmZ1bmN0aW9uIGNvbXBsZXRlZCgpIHtcblx0ZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lciggXCJET01Db250ZW50TG9hZGVkXCIsIGNvbXBsZXRlZCApO1xuXHR3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lciggXCJsb2FkXCIsIGNvbXBsZXRlZCApO1xuXHRqUXVlcnkucmVhZHkoKTtcbn1cblxuLy8gQ2F0Y2ggY2FzZXMgd2hlcmUgJChkb2N1bWVudCkucmVhZHkoKSBpcyBjYWxsZWRcbi8vIGFmdGVyIHRoZSBicm93c2VyIGV2ZW50IGhhcyBhbHJlYWR5IG9jY3VycmVkLlxuLy8gU3VwcG9ydDogSUUgPD05IC0gMTAgb25seVxuLy8gT2xkZXIgSUUgc29tZXRpbWVzIHNpZ25hbHMgXCJpbnRlcmFjdGl2ZVwiIHRvbyBzb29uXG5pZiAoIGRvY3VtZW50LnJlYWR5U3RhdGUgPT09IFwiY29tcGxldGVcIiB8fFxuXHQoIGRvY3VtZW50LnJlYWR5U3RhdGUgIT09IFwibG9hZGluZ1wiICYmICFkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuZG9TY3JvbGwgKSApIHtcblxuXHQvLyBIYW5kbGUgaXQgYXN5bmNocm9ub3VzbHkgdG8gYWxsb3cgc2NyaXB0cyB0aGUgb3Bwb3J0dW5pdHkgdG8gZGVsYXkgcmVhZHlcblx0d2luZG93LnNldFRpbWVvdXQoIGpRdWVyeS5yZWFkeSApO1xuXG59IGVsc2Uge1xuXG5cdC8vIFVzZSB0aGUgaGFuZHkgZXZlbnQgY2FsbGJhY2tcblx0ZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lciggXCJET01Db250ZW50TG9hZGVkXCIsIGNvbXBsZXRlZCApO1xuXG5cdC8vIEEgZmFsbGJhY2sgdG8gd2luZG93Lm9ubG9hZCwgdGhhdCB3aWxsIGFsd2F5cyB3b3JrXG5cdHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCBcImxvYWRcIiwgY29tcGxldGVkICk7XG59XG5cblxuXG5cbi8vIE11bHRpZnVuY3Rpb25hbCBtZXRob2QgdG8gZ2V0IGFuZCBzZXQgdmFsdWVzIG9mIGEgY29sbGVjdGlvblxuLy8gVGhlIHZhbHVlL3MgY2FuIG9wdGlvbmFsbHkgYmUgZXhlY3V0ZWQgaWYgaXQncyBhIGZ1bmN0aW9uXG52YXIgYWNjZXNzID0gZnVuY3Rpb24oIGVsZW1zLCBmbiwga2V5LCB2YWx1ZSwgY2hhaW5hYmxlLCBlbXB0eUdldCwgcmF3ICkge1xuXHR2YXIgaSA9IDAsXG5cdFx0bGVuID0gZWxlbXMubGVuZ3RoLFxuXHRcdGJ1bGsgPSBrZXkgPT0gbnVsbDtcblxuXHQvLyBTZXRzIG1hbnkgdmFsdWVzXG5cdGlmICggdG9UeXBlKCBrZXkgKSA9PT0gXCJvYmplY3RcIiApIHtcblx0XHRjaGFpbmFibGUgPSB0cnVlO1xuXHRcdGZvciAoIGkgaW4ga2V5ICkge1xuXHRcdFx0YWNjZXNzKCBlbGVtcywgZm4sIGksIGtleVsgaSBdLCB0cnVlLCBlbXB0eUdldCwgcmF3ICk7XG5cdFx0fVxuXG5cdC8vIFNldHMgb25lIHZhbHVlXG5cdH0gZWxzZSBpZiAoIHZhbHVlICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0Y2hhaW5hYmxlID0gdHJ1ZTtcblxuXHRcdGlmICggIWlzRnVuY3Rpb24oIHZhbHVlICkgKSB7XG5cdFx0XHRyYXcgPSB0cnVlO1xuXHRcdH1cblxuXHRcdGlmICggYnVsayApIHtcblxuXHRcdFx0Ly8gQnVsayBvcGVyYXRpb25zIHJ1biBhZ2FpbnN0IHRoZSBlbnRpcmUgc2V0XG5cdFx0XHRpZiAoIHJhdyApIHtcblx0XHRcdFx0Zm4uY2FsbCggZWxlbXMsIHZhbHVlICk7XG5cdFx0XHRcdGZuID0gbnVsbDtcblxuXHRcdFx0Ly8gLi4uZXhjZXB0IHdoZW4gZXhlY3V0aW5nIGZ1bmN0aW9uIHZhbHVlc1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0YnVsayA9IGZuO1xuXHRcdFx0XHRmbiA9IGZ1bmN0aW9uKCBlbGVtLCBfa2V5LCB2YWx1ZSApIHtcblx0XHRcdFx0XHRyZXR1cm4gYnVsay5jYWxsKCBqUXVlcnkoIGVsZW0gKSwgdmFsdWUgKTtcblx0XHRcdFx0fTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRpZiAoIGZuICkge1xuXHRcdFx0Zm9yICggOyBpIDwgbGVuOyBpKysgKSB7XG5cdFx0XHRcdGZuKFxuXHRcdFx0XHRcdGVsZW1zWyBpIF0sIGtleSwgcmF3ID9cblx0XHRcdFx0XHR2YWx1ZSA6XG5cdFx0XHRcdFx0dmFsdWUuY2FsbCggZWxlbXNbIGkgXSwgaSwgZm4oIGVsZW1zWyBpIF0sIGtleSApIClcblx0XHRcdFx0KTtcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRpZiAoIGNoYWluYWJsZSApIHtcblx0XHRyZXR1cm4gZWxlbXM7XG5cdH1cblxuXHQvLyBHZXRzXG5cdGlmICggYnVsayApIHtcblx0XHRyZXR1cm4gZm4uY2FsbCggZWxlbXMgKTtcblx0fVxuXG5cdHJldHVybiBsZW4gPyBmbiggZWxlbXNbIDAgXSwga2V5ICkgOiBlbXB0eUdldDtcbn07XG5cblxuLy8gTWF0Y2hlcyBkYXNoZWQgc3RyaW5nIGZvciBjYW1lbGl6aW5nXG52YXIgcm1zUHJlZml4ID0gL14tbXMtLyxcblx0cmRhc2hBbHBoYSA9IC8tKFthLXpdKS9nO1xuXG4vLyBVc2VkIGJ5IGNhbWVsQ2FzZSBhcyBjYWxsYmFjayB0byByZXBsYWNlKClcbmZ1bmN0aW9uIGZjYW1lbENhc2UoIF9hbGwsIGxldHRlciApIHtcblx0cmV0dXJuIGxldHRlci50b1VwcGVyQ2FzZSgpO1xufVxuXG4vLyBDb252ZXJ0IGRhc2hlZCB0byBjYW1lbENhc2U7IHVzZWQgYnkgdGhlIGNzcyBhbmQgZGF0YSBtb2R1bGVzXG4vLyBTdXBwb3J0OiBJRSA8PTkgLSAxMSwgRWRnZSAxMiAtIDE1XG4vLyBNaWNyb3NvZnQgZm9yZ290IHRvIGh1bXAgdGhlaXIgdmVuZG9yIHByZWZpeCAoIzk1NzIpXG5mdW5jdGlvbiBjYW1lbENhc2UoIHN0cmluZyApIHtcblx0cmV0dXJuIHN0cmluZy5yZXBsYWNlKCBybXNQcmVmaXgsIFwibXMtXCIgKS5yZXBsYWNlKCByZGFzaEFscGhhLCBmY2FtZWxDYXNlICk7XG59XG52YXIgYWNjZXB0RGF0YSA9IGZ1bmN0aW9uKCBvd25lciApIHtcblxuXHQvLyBBY2NlcHRzIG9ubHk6XG5cdC8vICAtIE5vZGVcblx0Ly8gICAgLSBOb2RlLkVMRU1FTlRfTk9ERVxuXHQvLyAgICAtIE5vZGUuRE9DVU1FTlRfTk9ERVxuXHQvLyAgLSBPYmplY3Rcblx0Ly8gICAgLSBBbnlcblx0cmV0dXJuIG93bmVyLm5vZGVUeXBlID09PSAxIHx8IG93bmVyLm5vZGVUeXBlID09PSA5IHx8ICEoICtvd25lci5ub2RlVHlwZSApO1xufTtcblxuXG5cblxuZnVuY3Rpb24gRGF0YSgpIHtcblx0dGhpcy5leHBhbmRvID0galF1ZXJ5LmV4cGFuZG8gKyBEYXRhLnVpZCsrO1xufVxuXG5EYXRhLnVpZCA9IDE7XG5cbkRhdGEucHJvdG90eXBlID0ge1xuXG5cdGNhY2hlOiBmdW5jdGlvbiggb3duZXIgKSB7XG5cblx0XHQvLyBDaGVjayBpZiB0aGUgb3duZXIgb2JqZWN0IGFscmVhZHkgaGFzIGEgY2FjaGVcblx0XHR2YXIgdmFsdWUgPSBvd25lclsgdGhpcy5leHBhbmRvIF07XG5cblx0XHQvLyBJZiBub3QsIGNyZWF0ZSBvbmVcblx0XHRpZiAoICF2YWx1ZSApIHtcblx0XHRcdHZhbHVlID0ge307XG5cblx0XHRcdC8vIFdlIGNhbiBhY2NlcHQgZGF0YSBmb3Igbm9uLWVsZW1lbnQgbm9kZXMgaW4gbW9kZXJuIGJyb3dzZXJzLFxuXHRcdFx0Ly8gYnV0IHdlIHNob3VsZCBub3QsIHNlZSAjODMzNS5cblx0XHRcdC8vIEFsd2F5cyByZXR1cm4gYW4gZW1wdHkgb2JqZWN0LlxuXHRcdFx0aWYgKCBhY2NlcHREYXRhKCBvd25lciApICkge1xuXG5cdFx0XHRcdC8vIElmIGl0IGlzIGEgbm9kZSB1bmxpa2VseSB0byBiZSBzdHJpbmdpZnktZWQgb3IgbG9vcGVkIG92ZXJcblx0XHRcdFx0Ly8gdXNlIHBsYWluIGFzc2lnbm1lbnRcblx0XHRcdFx0aWYgKCBvd25lci5ub2RlVHlwZSApIHtcblx0XHRcdFx0XHRvd25lclsgdGhpcy5leHBhbmRvIF0gPSB2YWx1ZTtcblxuXHRcdFx0XHQvLyBPdGhlcndpc2Ugc2VjdXJlIGl0IGluIGEgbm9uLWVudW1lcmFibGUgcHJvcGVydHlcblx0XHRcdFx0Ly8gY29uZmlndXJhYmxlIG11c3QgYmUgdHJ1ZSB0byBhbGxvdyB0aGUgcHJvcGVydHkgdG8gYmVcblx0XHRcdFx0Ly8gZGVsZXRlZCB3aGVuIGRhdGEgaXMgcmVtb3ZlZFxuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eSggb3duZXIsIHRoaXMuZXhwYW5kbywge1xuXHRcdFx0XHRcdFx0dmFsdWU6IHZhbHVlLFxuXHRcdFx0XHRcdFx0Y29uZmlndXJhYmxlOiB0cnVlXG5cdFx0XHRcdFx0fSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHZhbHVlO1xuXHR9LFxuXHRzZXQ6IGZ1bmN0aW9uKCBvd25lciwgZGF0YSwgdmFsdWUgKSB7XG5cdFx0dmFyIHByb3AsXG5cdFx0XHRjYWNoZSA9IHRoaXMuY2FjaGUoIG93bmVyICk7XG5cblx0XHQvLyBIYW5kbGU6IFsgb3duZXIsIGtleSwgdmFsdWUgXSBhcmdzXG5cdFx0Ly8gQWx3YXlzIHVzZSBjYW1lbENhc2Uga2V5IChnaC0yMjU3KVxuXHRcdGlmICggdHlwZW9mIGRhdGEgPT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRjYWNoZVsgY2FtZWxDYXNlKCBkYXRhICkgXSA9IHZhbHVlO1xuXG5cdFx0Ly8gSGFuZGxlOiBbIG93bmVyLCB7IHByb3BlcnRpZXMgfSBdIGFyZ3Ncblx0XHR9IGVsc2Uge1xuXG5cdFx0XHQvLyBDb3B5IHRoZSBwcm9wZXJ0aWVzIG9uZS1ieS1vbmUgdG8gdGhlIGNhY2hlIG9iamVjdFxuXHRcdFx0Zm9yICggcHJvcCBpbiBkYXRhICkge1xuXHRcdFx0XHRjYWNoZVsgY2FtZWxDYXNlKCBwcm9wICkgXSA9IGRhdGFbIHByb3AgXTtcblx0XHRcdH1cblx0XHR9XG5cdFx0cmV0dXJuIGNhY2hlO1xuXHR9LFxuXHRnZXQ6IGZ1bmN0aW9uKCBvd25lciwga2V5ICkge1xuXHRcdHJldHVybiBrZXkgPT09IHVuZGVmaW5lZCA/XG5cdFx0XHR0aGlzLmNhY2hlKCBvd25lciApIDpcblxuXHRcdFx0Ly8gQWx3YXlzIHVzZSBjYW1lbENhc2Uga2V5IChnaC0yMjU3KVxuXHRcdFx0b3duZXJbIHRoaXMuZXhwYW5kbyBdICYmIG93bmVyWyB0aGlzLmV4cGFuZG8gXVsgY2FtZWxDYXNlKCBrZXkgKSBdO1xuXHR9LFxuXHRhY2Nlc3M6IGZ1bmN0aW9uKCBvd25lciwga2V5LCB2YWx1ZSApIHtcblxuXHRcdC8vIEluIGNhc2VzIHdoZXJlIGVpdGhlcjpcblx0XHQvL1xuXHRcdC8vICAgMS4gTm8ga2V5IHdhcyBzcGVjaWZpZWRcblx0XHQvLyAgIDIuIEEgc3RyaW5nIGtleSB3YXMgc3BlY2lmaWVkLCBidXQgbm8gdmFsdWUgcHJvdmlkZWRcblx0XHQvL1xuXHRcdC8vIFRha2UgdGhlIFwicmVhZFwiIHBhdGggYW5kIGFsbG93IHRoZSBnZXQgbWV0aG9kIHRvIGRldGVybWluZVxuXHRcdC8vIHdoaWNoIHZhbHVlIHRvIHJldHVybiwgcmVzcGVjdGl2ZWx5IGVpdGhlcjpcblx0XHQvL1xuXHRcdC8vICAgMS4gVGhlIGVudGlyZSBjYWNoZSBvYmplY3Rcblx0XHQvLyAgIDIuIFRoZSBkYXRhIHN0b3JlZCBhdCB0aGUga2V5XG5cdFx0Ly9cblx0XHRpZiAoIGtleSA9PT0gdW5kZWZpbmVkIHx8XG5cdFx0XHRcdCggKCBrZXkgJiYgdHlwZW9mIGtleSA9PT0gXCJzdHJpbmdcIiApICYmIHZhbHVlID09PSB1bmRlZmluZWQgKSApIHtcblxuXHRcdFx0cmV0dXJuIHRoaXMuZ2V0KCBvd25lciwga2V5ICk7XG5cdFx0fVxuXG5cdFx0Ly8gV2hlbiB0aGUga2V5IGlzIG5vdCBhIHN0cmluZywgb3IgYm90aCBhIGtleSBhbmQgdmFsdWVcblx0XHQvLyBhcmUgc3BlY2lmaWVkLCBzZXQgb3IgZXh0ZW5kIChleGlzdGluZyBvYmplY3RzKSB3aXRoIGVpdGhlcjpcblx0XHQvL1xuXHRcdC8vICAgMS4gQW4gb2JqZWN0IG9mIHByb3BlcnRpZXNcblx0XHQvLyAgIDIuIEEga2V5IGFuZCB2YWx1ZVxuXHRcdC8vXG5cdFx0dGhpcy5zZXQoIG93bmVyLCBrZXksIHZhbHVlICk7XG5cblx0XHQvLyBTaW5jZSB0aGUgXCJzZXRcIiBwYXRoIGNhbiBoYXZlIHR3byBwb3NzaWJsZSBlbnRyeSBwb2ludHNcblx0XHQvLyByZXR1cm4gdGhlIGV4cGVjdGVkIGRhdGEgYmFzZWQgb24gd2hpY2ggcGF0aCB3YXMgdGFrZW5bKl1cblx0XHRyZXR1cm4gdmFsdWUgIT09IHVuZGVmaW5lZCA/IHZhbHVlIDoga2V5O1xuXHR9LFxuXHRyZW1vdmU6IGZ1bmN0aW9uKCBvd25lciwga2V5ICkge1xuXHRcdHZhciBpLFxuXHRcdFx0Y2FjaGUgPSBvd25lclsgdGhpcy5leHBhbmRvIF07XG5cblx0XHRpZiAoIGNhY2hlID09PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0aWYgKCBrZXkgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0Ly8gU3VwcG9ydCBhcnJheSBvciBzcGFjZSBzZXBhcmF0ZWQgc3RyaW5nIG9mIGtleXNcblx0XHRcdGlmICggQXJyYXkuaXNBcnJheSgga2V5ICkgKSB7XG5cblx0XHRcdFx0Ly8gSWYga2V5IGlzIGFuIGFycmF5IG9mIGtleXMuLi5cblx0XHRcdFx0Ly8gV2UgYWx3YXlzIHNldCBjYW1lbENhc2Uga2V5cywgc28gcmVtb3ZlIHRoYXQuXG5cdFx0XHRcdGtleSA9IGtleS5tYXAoIGNhbWVsQ2FzZSApO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0a2V5ID0gY2FtZWxDYXNlKCBrZXkgKTtcblxuXHRcdFx0XHQvLyBJZiBhIGtleSB3aXRoIHRoZSBzcGFjZXMgZXhpc3RzLCB1c2UgaXQuXG5cdFx0XHRcdC8vIE90aGVyd2lzZSwgY3JlYXRlIGFuIGFycmF5IGJ5IG1hdGNoaW5nIG5vbi13aGl0ZXNwYWNlXG5cdFx0XHRcdGtleSA9IGtleSBpbiBjYWNoZSA/XG5cdFx0XHRcdFx0WyBrZXkgXSA6XG5cdFx0XHRcdFx0KCBrZXkubWF0Y2goIHJub3RodG1sd2hpdGUgKSB8fCBbXSApO1xuXHRcdFx0fVxuXG5cdFx0XHRpID0ga2V5Lmxlbmd0aDtcblxuXHRcdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRcdGRlbGV0ZSBjYWNoZVsga2V5WyBpIF0gXTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBSZW1vdmUgdGhlIGV4cGFuZG8gaWYgdGhlcmUncyBubyBtb3JlIGRhdGFcblx0XHRpZiAoIGtleSA9PT0gdW5kZWZpbmVkIHx8IGpRdWVyeS5pc0VtcHR5T2JqZWN0KCBjYWNoZSApICkge1xuXG5cdFx0XHQvLyBTdXBwb3J0OiBDaHJvbWUgPD0zNSAtIDQ1XG5cdFx0XHQvLyBXZWJraXQgJiBCbGluayBwZXJmb3JtYW5jZSBzdWZmZXJzIHdoZW4gZGVsZXRpbmcgcHJvcGVydGllc1xuXHRcdFx0Ly8gZnJvbSBET00gbm9kZXMsIHNvIHNldCB0byB1bmRlZmluZWQgaW5zdGVhZFxuXHRcdFx0Ly8gaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL2Nocm9taXVtL2lzc3Vlcy9kZXRhaWw/aWQ9Mzc4NjA3IChidWcgcmVzdHJpY3RlZClcblx0XHRcdGlmICggb3duZXIubm9kZVR5cGUgKSB7XG5cdFx0XHRcdG93bmVyWyB0aGlzLmV4cGFuZG8gXSA9IHVuZGVmaW5lZDtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGRlbGV0ZSBvd25lclsgdGhpcy5leHBhbmRvIF07XG5cdFx0XHR9XG5cdFx0fVxuXHR9LFxuXHRoYXNEYXRhOiBmdW5jdGlvbiggb3duZXIgKSB7XG5cdFx0dmFyIGNhY2hlID0gb3duZXJbIHRoaXMuZXhwYW5kbyBdO1xuXHRcdHJldHVybiBjYWNoZSAhPT0gdW5kZWZpbmVkICYmICFqUXVlcnkuaXNFbXB0eU9iamVjdCggY2FjaGUgKTtcblx0fVxufTtcbnZhciBkYXRhUHJpdiA9IG5ldyBEYXRhKCk7XG5cbnZhciBkYXRhVXNlciA9IG5ldyBEYXRhKCk7XG5cblxuXG4vL1x0SW1wbGVtZW50YXRpb24gU3VtbWFyeVxuLy9cbi8vXHQxLiBFbmZvcmNlIEFQSSBzdXJmYWNlIGFuZCBzZW1hbnRpYyBjb21wYXRpYmlsaXR5IHdpdGggMS45LnggYnJhbmNoXG4vL1x0Mi4gSW1wcm92ZSB0aGUgbW9kdWxlJ3MgbWFpbnRhaW5hYmlsaXR5IGJ5IHJlZHVjaW5nIHRoZSBzdG9yYWdlXG4vL1x0XHRwYXRocyB0byBhIHNpbmdsZSBtZWNoYW5pc20uXG4vL1x0My4gVXNlIHRoZSBzYW1lIHNpbmdsZSBtZWNoYW5pc20gdG8gc3VwcG9ydCBcInByaXZhdGVcIiBhbmQgXCJ1c2VyXCIgZGF0YS5cbi8vXHQ0LiBfTmV2ZXJfIGV4cG9zZSBcInByaXZhdGVcIiBkYXRhIHRvIHVzZXIgY29kZSAoVE9ETzogRHJvcCBfZGF0YSwgX3JlbW92ZURhdGEpXG4vL1x0NS4gQXZvaWQgZXhwb3NpbmcgaW1wbGVtZW50YXRpb24gZGV0YWlscyBvbiB1c2VyIG9iamVjdHMgKGVnLiBleHBhbmRvIHByb3BlcnRpZXMpXG4vL1x0Ni4gUHJvdmlkZSBhIGNsZWFyIHBhdGggZm9yIGltcGxlbWVudGF0aW9uIHVwZ3JhZGUgdG8gV2Vha01hcCBpbiAyMDE0XG5cbnZhciByYnJhY2UgPSAvXig/Olxce1tcXHdcXFddKlxcfXxcXFtbXFx3XFxXXSpcXF0pJC8sXG5cdHJtdWx0aURhc2ggPSAvW0EtWl0vZztcblxuZnVuY3Rpb24gZ2V0RGF0YSggZGF0YSApIHtcblx0aWYgKCBkYXRhID09PSBcInRydWVcIiApIHtcblx0XHRyZXR1cm4gdHJ1ZTtcblx0fVxuXG5cdGlmICggZGF0YSA9PT0gXCJmYWxzZVwiICkge1xuXHRcdHJldHVybiBmYWxzZTtcblx0fVxuXG5cdGlmICggZGF0YSA9PT0gXCJudWxsXCIgKSB7XG5cdFx0cmV0dXJuIG51bGw7XG5cdH1cblxuXHQvLyBPbmx5IGNvbnZlcnQgdG8gYSBudW1iZXIgaWYgaXQgZG9lc24ndCBjaGFuZ2UgdGhlIHN0cmluZ1xuXHRpZiAoIGRhdGEgPT09ICtkYXRhICsgXCJcIiApIHtcblx0XHRyZXR1cm4gK2RhdGE7XG5cdH1cblxuXHRpZiAoIHJicmFjZS50ZXN0KCBkYXRhICkgKSB7XG5cdFx0cmV0dXJuIEpTT04ucGFyc2UoIGRhdGEgKTtcblx0fVxuXG5cdHJldHVybiBkYXRhO1xufVxuXG5mdW5jdGlvbiBkYXRhQXR0ciggZWxlbSwga2V5LCBkYXRhICkge1xuXHR2YXIgbmFtZTtcblxuXHQvLyBJZiBub3RoaW5nIHdhcyBmb3VuZCBpbnRlcm5hbGx5LCB0cnkgdG8gZmV0Y2ggYW55XG5cdC8vIGRhdGEgZnJvbSB0aGUgSFRNTDUgZGF0YS0qIGF0dHJpYnV0ZVxuXHRpZiAoIGRhdGEgPT09IHVuZGVmaW5lZCAmJiBlbGVtLm5vZGVUeXBlID09PSAxICkge1xuXHRcdG5hbWUgPSBcImRhdGEtXCIgKyBrZXkucmVwbGFjZSggcm11bHRpRGFzaCwgXCItJCZcIiApLnRvTG93ZXJDYXNlKCk7XG5cdFx0ZGF0YSA9IGVsZW0uZ2V0QXR0cmlidXRlKCBuYW1lICk7XG5cblx0XHRpZiAoIHR5cGVvZiBkYXRhID09PSBcInN0cmluZ1wiICkge1xuXHRcdFx0dHJ5IHtcblx0XHRcdFx0ZGF0YSA9IGdldERhdGEoIGRhdGEgKTtcblx0XHRcdH0gY2F0Y2ggKCBlICkge31cblxuXHRcdFx0Ly8gTWFrZSBzdXJlIHdlIHNldCB0aGUgZGF0YSBzbyBpdCBpc24ndCBjaGFuZ2VkIGxhdGVyXG5cdFx0XHRkYXRhVXNlci5zZXQoIGVsZW0sIGtleSwgZGF0YSApO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRkYXRhID0gdW5kZWZpbmVkO1xuXHRcdH1cblx0fVxuXHRyZXR1cm4gZGF0YTtcbn1cblxualF1ZXJ5LmV4dGVuZCgge1xuXHRoYXNEYXRhOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRyZXR1cm4gZGF0YVVzZXIuaGFzRGF0YSggZWxlbSApIHx8IGRhdGFQcml2Lmhhc0RhdGEoIGVsZW0gKTtcblx0fSxcblxuXHRkYXRhOiBmdW5jdGlvbiggZWxlbSwgbmFtZSwgZGF0YSApIHtcblx0XHRyZXR1cm4gZGF0YVVzZXIuYWNjZXNzKCBlbGVtLCBuYW1lLCBkYXRhICk7XG5cdH0sXG5cblx0cmVtb3ZlRGF0YTogZnVuY3Rpb24oIGVsZW0sIG5hbWUgKSB7XG5cdFx0ZGF0YVVzZXIucmVtb3ZlKCBlbGVtLCBuYW1lICk7XG5cdH0sXG5cblx0Ly8gVE9ETzogTm93IHRoYXQgYWxsIGNhbGxzIHRvIF9kYXRhIGFuZCBfcmVtb3ZlRGF0YSBoYXZlIGJlZW4gcmVwbGFjZWRcblx0Ly8gd2l0aCBkaXJlY3QgY2FsbHMgdG8gZGF0YVByaXYgbWV0aG9kcywgdGhlc2UgY2FuIGJlIGRlcHJlY2F0ZWQuXG5cdF9kYXRhOiBmdW5jdGlvbiggZWxlbSwgbmFtZSwgZGF0YSApIHtcblx0XHRyZXR1cm4gZGF0YVByaXYuYWNjZXNzKCBlbGVtLCBuYW1lLCBkYXRhICk7XG5cdH0sXG5cblx0X3JlbW92ZURhdGE6IGZ1bmN0aW9uKCBlbGVtLCBuYW1lICkge1xuXHRcdGRhdGFQcml2LnJlbW92ZSggZWxlbSwgbmFtZSApO1xuXHR9XG59ICk7XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0ZGF0YTogZnVuY3Rpb24oIGtleSwgdmFsdWUgKSB7XG5cdFx0dmFyIGksIG5hbWUsIGRhdGEsXG5cdFx0XHRlbGVtID0gdGhpc1sgMCBdLFxuXHRcdFx0YXR0cnMgPSBlbGVtICYmIGVsZW0uYXR0cmlidXRlcztcblxuXHRcdC8vIEdldHMgYWxsIHZhbHVlc1xuXHRcdGlmICgga2V5ID09PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRpZiAoIHRoaXMubGVuZ3RoICkge1xuXHRcdFx0XHRkYXRhID0gZGF0YVVzZXIuZ2V0KCBlbGVtICk7XG5cblx0XHRcdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSAxICYmICFkYXRhUHJpdi5nZXQoIGVsZW0sIFwiaGFzRGF0YUF0dHJzXCIgKSApIHtcblx0XHRcdFx0XHRpID0gYXR0cnMubGVuZ3RoO1xuXHRcdFx0XHRcdHdoaWxlICggaS0tICkge1xuXG5cdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSAxMSBvbmx5XG5cdFx0XHRcdFx0XHQvLyBUaGUgYXR0cnMgZWxlbWVudHMgY2FuIGJlIG51bGwgKCMxNDg5NClcblx0XHRcdFx0XHRcdGlmICggYXR0cnNbIGkgXSApIHtcblx0XHRcdFx0XHRcdFx0bmFtZSA9IGF0dHJzWyBpIF0ubmFtZTtcblx0XHRcdFx0XHRcdFx0aWYgKCBuYW1lLmluZGV4T2YoIFwiZGF0YS1cIiApID09PSAwICkge1xuXHRcdFx0XHRcdFx0XHRcdG5hbWUgPSBjYW1lbENhc2UoIG5hbWUuc2xpY2UoIDUgKSApO1xuXHRcdFx0XHRcdFx0XHRcdGRhdGFBdHRyKCBlbGVtLCBuYW1lLCBkYXRhWyBuYW1lIF0gKTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRkYXRhUHJpdi5zZXQoIGVsZW0sIFwiaGFzRGF0YUF0dHJzXCIsIHRydWUgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gZGF0YTtcblx0XHR9XG5cblx0XHQvLyBTZXRzIG11bHRpcGxlIHZhbHVlc1xuXHRcdGlmICggdHlwZW9mIGtleSA9PT0gXCJvYmplY3RcIiApIHtcblx0XHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRkYXRhVXNlci5zZXQoIHRoaXMsIGtleSApO1xuXHRcdFx0fSApO1xuXHRcdH1cblxuXHRcdHJldHVybiBhY2Nlc3MoIHRoaXMsIGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHRcdHZhciBkYXRhO1xuXG5cdFx0XHQvLyBUaGUgY2FsbGluZyBqUXVlcnkgb2JqZWN0IChlbGVtZW50IG1hdGNoZXMpIGlzIG5vdCBlbXB0eVxuXHRcdFx0Ly8gKGFuZCB0aGVyZWZvcmUgaGFzIGFuIGVsZW1lbnQgYXBwZWFycyBhdCB0aGlzWyAwIF0pIGFuZCB0aGVcblx0XHRcdC8vIGB2YWx1ZWAgcGFyYW1ldGVyIHdhcyBub3QgdW5kZWZpbmVkLiBBbiBlbXB0eSBqUXVlcnkgb2JqZWN0XG5cdFx0XHQvLyB3aWxsIHJlc3VsdCBpbiBgdW5kZWZpbmVkYCBmb3IgZWxlbSA9IHRoaXNbIDAgXSB3aGljaCB3aWxsXG5cdFx0XHQvLyB0aHJvdyBhbiBleGNlcHRpb24gaWYgYW4gYXR0ZW1wdCB0byByZWFkIGEgZGF0YSBjYWNoZSBpcyBtYWRlLlxuXHRcdFx0aWYgKCBlbGVtICYmIHZhbHVlID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0Ly8gQXR0ZW1wdCB0byBnZXQgZGF0YSBmcm9tIHRoZSBjYWNoZVxuXHRcdFx0XHQvLyBUaGUga2V5IHdpbGwgYWx3YXlzIGJlIGNhbWVsQ2FzZWQgaW4gRGF0YVxuXHRcdFx0XHRkYXRhID0gZGF0YVVzZXIuZ2V0KCBlbGVtLCBrZXkgKTtcblx0XHRcdFx0aWYgKCBkYXRhICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIGRhdGE7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBBdHRlbXB0IHRvIFwiZGlzY292ZXJcIiB0aGUgZGF0YSBpblxuXHRcdFx0XHQvLyBIVE1MNSBjdXN0b20gZGF0YS0qIGF0dHJzXG5cdFx0XHRcdGRhdGEgPSBkYXRhQXR0ciggZWxlbSwga2V5ICk7XG5cdFx0XHRcdGlmICggZGF0YSAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRcdHJldHVybiBkYXRhO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gV2UgdHJpZWQgcmVhbGx5IGhhcmQsIGJ1dCB0aGUgZGF0YSBkb2Vzbid0IGV4aXN0LlxuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cblx0XHRcdC8vIFNldCB0aGUgZGF0YS4uLlxuXHRcdFx0dGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblxuXHRcdFx0XHQvLyBXZSBhbHdheXMgc3RvcmUgdGhlIGNhbWVsQ2FzZWQga2V5XG5cdFx0XHRcdGRhdGFVc2VyLnNldCggdGhpcywga2V5LCB2YWx1ZSApO1xuXHRcdFx0fSApO1xuXHRcdH0sIG51bGwsIHZhbHVlLCBhcmd1bWVudHMubGVuZ3RoID4gMSwgbnVsbCwgdHJ1ZSApO1xuXHR9LFxuXG5cdHJlbW92ZURhdGE6IGZ1bmN0aW9uKCBrZXkgKSB7XG5cdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHRkYXRhVXNlci5yZW1vdmUoIHRoaXMsIGtleSApO1xuXHRcdH0gKTtcblx0fVxufSApO1xuXG5cbmpRdWVyeS5leHRlbmQoIHtcblx0cXVldWU6IGZ1bmN0aW9uKCBlbGVtLCB0eXBlLCBkYXRhICkge1xuXHRcdHZhciBxdWV1ZTtcblxuXHRcdGlmICggZWxlbSApIHtcblx0XHRcdHR5cGUgPSAoIHR5cGUgfHwgXCJmeFwiICkgKyBcInF1ZXVlXCI7XG5cdFx0XHRxdWV1ZSA9IGRhdGFQcml2LmdldCggZWxlbSwgdHlwZSApO1xuXG5cdFx0XHQvLyBTcGVlZCB1cCBkZXF1ZXVlIGJ5IGdldHRpbmcgb3V0IHF1aWNrbHkgaWYgdGhpcyBpcyBqdXN0IGEgbG9va3VwXG5cdFx0XHRpZiAoIGRhdGEgKSB7XG5cdFx0XHRcdGlmICggIXF1ZXVlIHx8IEFycmF5LmlzQXJyYXkoIGRhdGEgKSApIHtcblx0XHRcdFx0XHRxdWV1ZSA9IGRhdGFQcml2LmFjY2VzcyggZWxlbSwgdHlwZSwgalF1ZXJ5Lm1ha2VBcnJheSggZGF0YSApICk7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0cXVldWUucHVzaCggZGF0YSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gcXVldWUgfHwgW107XG5cdFx0fVxuXHR9LFxuXG5cdGRlcXVldWU6IGZ1bmN0aW9uKCBlbGVtLCB0eXBlICkge1xuXHRcdHR5cGUgPSB0eXBlIHx8IFwiZnhcIjtcblxuXHRcdHZhciBxdWV1ZSA9IGpRdWVyeS5xdWV1ZSggZWxlbSwgdHlwZSApLFxuXHRcdFx0c3RhcnRMZW5ndGggPSBxdWV1ZS5sZW5ndGgsXG5cdFx0XHRmbiA9IHF1ZXVlLnNoaWZ0KCksXG5cdFx0XHRob29rcyA9IGpRdWVyeS5fcXVldWVIb29rcyggZWxlbSwgdHlwZSApLFxuXHRcdFx0bmV4dCA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRqUXVlcnkuZGVxdWV1ZSggZWxlbSwgdHlwZSApO1xuXHRcdFx0fTtcblxuXHRcdC8vIElmIHRoZSBmeCBxdWV1ZSBpcyBkZXF1ZXVlZCwgYWx3YXlzIHJlbW92ZSB0aGUgcHJvZ3Jlc3Mgc2VudGluZWxcblx0XHRpZiAoIGZuID09PSBcImlucHJvZ3Jlc3NcIiApIHtcblx0XHRcdGZuID0gcXVldWUuc2hpZnQoKTtcblx0XHRcdHN0YXJ0TGVuZ3RoLS07XG5cdFx0fVxuXG5cdFx0aWYgKCBmbiApIHtcblxuXHRcdFx0Ly8gQWRkIGEgcHJvZ3Jlc3Mgc2VudGluZWwgdG8gcHJldmVudCB0aGUgZnggcXVldWUgZnJvbSBiZWluZ1xuXHRcdFx0Ly8gYXV0b21hdGljYWxseSBkZXF1ZXVlZFxuXHRcdFx0aWYgKCB0eXBlID09PSBcImZ4XCIgKSB7XG5cdFx0XHRcdHF1ZXVlLnVuc2hpZnQoIFwiaW5wcm9ncmVzc1wiICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIENsZWFyIHVwIHRoZSBsYXN0IHF1ZXVlIHN0b3AgZnVuY3Rpb25cblx0XHRcdGRlbGV0ZSBob29rcy5zdG9wO1xuXHRcdFx0Zm4uY2FsbCggZWxlbSwgbmV4dCwgaG9va3MgKTtcblx0XHR9XG5cblx0XHRpZiAoICFzdGFydExlbmd0aCAmJiBob29rcyApIHtcblx0XHRcdGhvb2tzLmVtcHR5LmZpcmUoKTtcblx0XHR9XG5cdH0sXG5cblx0Ly8gTm90IHB1YmxpYyAtIGdlbmVyYXRlIGEgcXVldWVIb29rcyBvYmplY3QsIG9yIHJldHVybiB0aGUgY3VycmVudCBvbmVcblx0X3F1ZXVlSG9va3M6IGZ1bmN0aW9uKCBlbGVtLCB0eXBlICkge1xuXHRcdHZhciBrZXkgPSB0eXBlICsgXCJxdWV1ZUhvb2tzXCI7XG5cdFx0cmV0dXJuIGRhdGFQcml2LmdldCggZWxlbSwga2V5ICkgfHwgZGF0YVByaXYuYWNjZXNzKCBlbGVtLCBrZXksIHtcblx0XHRcdGVtcHR5OiBqUXVlcnkuQ2FsbGJhY2tzKCBcIm9uY2UgbWVtb3J5XCIgKS5hZGQoIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRkYXRhUHJpdi5yZW1vdmUoIGVsZW0sIFsgdHlwZSArIFwicXVldWVcIiwga2V5IF0gKTtcblx0XHRcdH0gKVxuXHRcdH0gKTtcblx0fVxufSApO1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdHF1ZXVlOiBmdW5jdGlvbiggdHlwZSwgZGF0YSApIHtcblx0XHR2YXIgc2V0dGVyID0gMjtcblxuXHRcdGlmICggdHlwZW9mIHR5cGUgIT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRkYXRhID0gdHlwZTtcblx0XHRcdHR5cGUgPSBcImZ4XCI7XG5cdFx0XHRzZXR0ZXItLTtcblx0XHR9XG5cblx0XHRpZiAoIGFyZ3VtZW50cy5sZW5ndGggPCBzZXR0ZXIgKSB7XG5cdFx0XHRyZXR1cm4galF1ZXJ5LnF1ZXVlKCB0aGlzWyAwIF0sIHR5cGUgKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gZGF0YSA9PT0gdW5kZWZpbmVkID9cblx0XHRcdHRoaXMgOlxuXHRcdFx0dGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdFx0dmFyIHF1ZXVlID0galF1ZXJ5LnF1ZXVlKCB0aGlzLCB0eXBlLCBkYXRhICk7XG5cblx0XHRcdFx0Ly8gRW5zdXJlIGEgaG9va3MgZm9yIHRoaXMgcXVldWVcblx0XHRcdFx0alF1ZXJ5Ll9xdWV1ZUhvb2tzKCB0aGlzLCB0eXBlICk7XG5cblx0XHRcdFx0aWYgKCB0eXBlID09PSBcImZ4XCIgJiYgcXVldWVbIDAgXSAhPT0gXCJpbnByb2dyZXNzXCIgKSB7XG5cdFx0XHRcdFx0alF1ZXJ5LmRlcXVldWUoIHRoaXMsIHR5cGUgKTtcblx0XHRcdFx0fVxuXHRcdFx0fSApO1xuXHR9LFxuXHRkZXF1ZXVlOiBmdW5jdGlvbiggdHlwZSApIHtcblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdGpRdWVyeS5kZXF1ZXVlKCB0aGlzLCB0eXBlICk7XG5cdFx0fSApO1xuXHR9LFxuXHRjbGVhclF1ZXVlOiBmdW5jdGlvbiggdHlwZSApIHtcblx0XHRyZXR1cm4gdGhpcy5xdWV1ZSggdHlwZSB8fCBcImZ4XCIsIFtdICk7XG5cdH0sXG5cblx0Ly8gR2V0IGEgcHJvbWlzZSByZXNvbHZlZCB3aGVuIHF1ZXVlcyBvZiBhIGNlcnRhaW4gdHlwZVxuXHQvLyBhcmUgZW1wdGllZCAoZnggaXMgdGhlIHR5cGUgYnkgZGVmYXVsdClcblx0cHJvbWlzZTogZnVuY3Rpb24oIHR5cGUsIG9iaiApIHtcblx0XHR2YXIgdG1wLFxuXHRcdFx0Y291bnQgPSAxLFxuXHRcdFx0ZGVmZXIgPSBqUXVlcnkuRGVmZXJyZWQoKSxcblx0XHRcdGVsZW1lbnRzID0gdGhpcyxcblx0XHRcdGkgPSB0aGlzLmxlbmd0aCxcblx0XHRcdHJlc29sdmUgPSBmdW5jdGlvbigpIHtcblx0XHRcdFx0aWYgKCAhKCAtLWNvdW50ICkgKSB7XG5cdFx0XHRcdFx0ZGVmZXIucmVzb2x2ZVdpdGgoIGVsZW1lbnRzLCBbIGVsZW1lbnRzIF0gKTtcblx0XHRcdFx0fVxuXHRcdFx0fTtcblxuXHRcdGlmICggdHlwZW9mIHR5cGUgIT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRvYmogPSB0eXBlO1xuXHRcdFx0dHlwZSA9IHVuZGVmaW5lZDtcblx0XHR9XG5cdFx0dHlwZSA9IHR5cGUgfHwgXCJmeFwiO1xuXG5cdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHR0bXAgPSBkYXRhUHJpdi5nZXQoIGVsZW1lbnRzWyBpIF0sIHR5cGUgKyBcInF1ZXVlSG9va3NcIiApO1xuXHRcdFx0aWYgKCB0bXAgJiYgdG1wLmVtcHR5ICkge1xuXHRcdFx0XHRjb3VudCsrO1xuXHRcdFx0XHR0bXAuZW1wdHkuYWRkKCByZXNvbHZlICk7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdHJlc29sdmUoKTtcblx0XHRyZXR1cm4gZGVmZXIucHJvbWlzZSggb2JqICk7XG5cdH1cbn0gKTtcbnZhciBwbnVtID0gKCAvWystXT8oPzpcXGQqXFwufClcXGQrKD86W2VFXVsrLV0/XFxkK3wpLyApLnNvdXJjZTtcblxudmFyIHJjc3NOdW0gPSBuZXcgUmVnRXhwKCBcIl4oPzooWystXSk9fCkoXCIgKyBwbnVtICsgXCIpKFthLXolXSopJFwiLCBcImlcIiApO1xuXG5cbnZhciBjc3NFeHBhbmQgPSBbIFwiVG9wXCIsIFwiUmlnaHRcIiwgXCJCb3R0b21cIiwgXCJMZWZ0XCIgXTtcblxudmFyIGRvY3VtZW50RWxlbWVudCA9IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudDtcblxuXG5cblx0dmFyIGlzQXR0YWNoZWQgPSBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiBqUXVlcnkuY29udGFpbnMoIGVsZW0ub3duZXJEb2N1bWVudCwgZWxlbSApO1xuXHRcdH0sXG5cdFx0Y29tcG9zZWQgPSB7IGNvbXBvc2VkOiB0cnVlIH07XG5cblx0Ly8gU3VwcG9ydDogSUUgOSAtIDExKywgRWRnZSAxMiAtIDE4KywgaU9TIDEwLjAgLSAxMC4yIG9ubHlcblx0Ly8gQ2hlY2sgYXR0YWNobWVudCBhY3Jvc3Mgc2hhZG93IERPTSBib3VuZGFyaWVzIHdoZW4gcG9zc2libGUgKGdoLTM1MDQpXG5cdC8vIFN1cHBvcnQ6IGlPUyAxMC4wLTEwLjIgb25seVxuXHQvLyBFYXJseSBpT1MgMTAgdmVyc2lvbnMgc3VwcG9ydCBgYXR0YWNoU2hhZG93YCBidXQgbm90IGBnZXRSb290Tm9kZWAsXG5cdC8vIGxlYWRpbmcgdG8gZXJyb3JzLiBXZSBuZWVkIHRvIGNoZWNrIGZvciBgZ2V0Um9vdE5vZGVgLlxuXHRpZiAoIGRvY3VtZW50RWxlbWVudC5nZXRSb290Tm9kZSApIHtcblx0XHRpc0F0dGFjaGVkID0gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4galF1ZXJ5LmNvbnRhaW5zKCBlbGVtLm93bmVyRG9jdW1lbnQsIGVsZW0gKSB8fFxuXHRcdFx0XHRlbGVtLmdldFJvb3ROb2RlKCBjb21wb3NlZCApID09PSBlbGVtLm93bmVyRG9jdW1lbnQ7XG5cdFx0fTtcblx0fVxudmFyIGlzSGlkZGVuV2l0aGluVHJlZSA9IGZ1bmN0aW9uKCBlbGVtLCBlbCApIHtcblxuXHRcdC8vIGlzSGlkZGVuV2l0aGluVHJlZSBtaWdodCBiZSBjYWxsZWQgZnJvbSBqUXVlcnkjZmlsdGVyIGZ1bmN0aW9uO1xuXHRcdC8vIGluIHRoYXQgY2FzZSwgZWxlbWVudCB3aWxsIGJlIHNlY29uZCBhcmd1bWVudFxuXHRcdGVsZW0gPSBlbCB8fCBlbGVtO1xuXG5cdFx0Ly8gSW5saW5lIHN0eWxlIHRydW1wcyBhbGxcblx0XHRyZXR1cm4gZWxlbS5zdHlsZS5kaXNwbGF5ID09PSBcIm5vbmVcIiB8fFxuXHRcdFx0ZWxlbS5zdHlsZS5kaXNwbGF5ID09PSBcIlwiICYmXG5cblx0XHRcdC8vIE90aGVyd2lzZSwgY2hlY2sgY29tcHV0ZWQgc3R5bGVcblx0XHRcdC8vIFN1cHBvcnQ6IEZpcmVmb3ggPD00MyAtIDQ1XG5cdFx0XHQvLyBEaXNjb25uZWN0ZWQgZWxlbWVudHMgY2FuIGhhdmUgY29tcHV0ZWQgZGlzcGxheTogbm9uZSwgc28gZmlyc3QgY29uZmlybSB0aGF0IGVsZW0gaXNcblx0XHRcdC8vIGluIHRoZSBkb2N1bWVudC5cblx0XHRcdGlzQXR0YWNoZWQoIGVsZW0gKSAmJlxuXG5cdFx0XHRqUXVlcnkuY3NzKCBlbGVtLCBcImRpc3BsYXlcIiApID09PSBcIm5vbmVcIjtcblx0fTtcblxuXG5cbmZ1bmN0aW9uIGFkanVzdENTUyggZWxlbSwgcHJvcCwgdmFsdWVQYXJ0cywgdHdlZW4gKSB7XG5cdHZhciBhZGp1c3RlZCwgc2NhbGUsXG5cdFx0bWF4SXRlcmF0aW9ucyA9IDIwLFxuXHRcdGN1cnJlbnRWYWx1ZSA9IHR3ZWVuID9cblx0XHRcdGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRyZXR1cm4gdHdlZW4uY3VyKCk7XG5cdFx0XHR9IDpcblx0XHRcdGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRyZXR1cm4galF1ZXJ5LmNzcyggZWxlbSwgcHJvcCwgXCJcIiApO1xuXHRcdFx0fSxcblx0XHRpbml0aWFsID0gY3VycmVudFZhbHVlKCksXG5cdFx0dW5pdCA9IHZhbHVlUGFydHMgJiYgdmFsdWVQYXJ0c1sgMyBdIHx8ICggalF1ZXJ5LmNzc051bWJlclsgcHJvcCBdID8gXCJcIiA6IFwicHhcIiApLFxuXG5cdFx0Ly8gU3RhcnRpbmcgdmFsdWUgY29tcHV0YXRpb24gaXMgcmVxdWlyZWQgZm9yIHBvdGVudGlhbCB1bml0IG1pc21hdGNoZXNcblx0XHRpbml0aWFsSW5Vbml0ID0gZWxlbS5ub2RlVHlwZSAmJlxuXHRcdFx0KCBqUXVlcnkuY3NzTnVtYmVyWyBwcm9wIF0gfHwgdW5pdCAhPT0gXCJweFwiICYmICtpbml0aWFsICkgJiZcblx0XHRcdHJjc3NOdW0uZXhlYyggalF1ZXJ5LmNzcyggZWxlbSwgcHJvcCApICk7XG5cblx0aWYgKCBpbml0aWFsSW5Vbml0ICYmIGluaXRpYWxJblVuaXRbIDMgXSAhPT0gdW5pdCApIHtcblxuXHRcdC8vIFN1cHBvcnQ6IEZpcmVmb3ggPD01NFxuXHRcdC8vIEhhbHZlIHRoZSBpdGVyYXRpb24gdGFyZ2V0IHZhbHVlIHRvIHByZXZlbnQgaW50ZXJmZXJlbmNlIGZyb20gQ1NTIHVwcGVyIGJvdW5kcyAoZ2gtMjE0NClcblx0XHRpbml0aWFsID0gaW5pdGlhbCAvIDI7XG5cblx0XHQvLyBUcnVzdCB1bml0cyByZXBvcnRlZCBieSBqUXVlcnkuY3NzXG5cdFx0dW5pdCA9IHVuaXQgfHwgaW5pdGlhbEluVW5pdFsgMyBdO1xuXG5cdFx0Ly8gSXRlcmF0aXZlbHkgYXBwcm94aW1hdGUgZnJvbSBhIG5vbnplcm8gc3RhcnRpbmcgcG9pbnRcblx0XHRpbml0aWFsSW5Vbml0ID0gK2luaXRpYWwgfHwgMTtcblxuXHRcdHdoaWxlICggbWF4SXRlcmF0aW9ucy0tICkge1xuXG5cdFx0XHQvLyBFdmFsdWF0ZSBhbmQgdXBkYXRlIG91ciBiZXN0IGd1ZXNzIChkb3VibGluZyBndWVzc2VzIHRoYXQgemVybyBvdXQpLlxuXHRcdFx0Ly8gRmluaXNoIGlmIHRoZSBzY2FsZSBlcXVhbHMgb3IgY3Jvc3NlcyAxIChtYWtpbmcgdGhlIG9sZCpuZXcgcHJvZHVjdCBub24tcG9zaXRpdmUpLlxuXHRcdFx0alF1ZXJ5LnN0eWxlKCBlbGVtLCBwcm9wLCBpbml0aWFsSW5Vbml0ICsgdW5pdCApO1xuXHRcdFx0aWYgKCAoIDEgLSBzY2FsZSApICogKCAxIC0gKCBzY2FsZSA9IGN1cnJlbnRWYWx1ZSgpIC8gaW5pdGlhbCB8fCAwLjUgKSApIDw9IDAgKSB7XG5cdFx0XHRcdG1heEl0ZXJhdGlvbnMgPSAwO1xuXHRcdFx0fVxuXHRcdFx0aW5pdGlhbEluVW5pdCA9IGluaXRpYWxJblVuaXQgLyBzY2FsZTtcblxuXHRcdH1cblxuXHRcdGluaXRpYWxJblVuaXQgPSBpbml0aWFsSW5Vbml0ICogMjtcblx0XHRqUXVlcnkuc3R5bGUoIGVsZW0sIHByb3AsIGluaXRpYWxJblVuaXQgKyB1bml0ICk7XG5cblx0XHQvLyBNYWtlIHN1cmUgd2UgdXBkYXRlIHRoZSB0d2VlbiBwcm9wZXJ0aWVzIGxhdGVyIG9uXG5cdFx0dmFsdWVQYXJ0cyA9IHZhbHVlUGFydHMgfHwgW107XG5cdH1cblxuXHRpZiAoIHZhbHVlUGFydHMgKSB7XG5cdFx0aW5pdGlhbEluVW5pdCA9ICtpbml0aWFsSW5Vbml0IHx8ICtpbml0aWFsIHx8IDA7XG5cblx0XHQvLyBBcHBseSByZWxhdGl2ZSBvZmZzZXQgKCs9Ly09KSBpZiBzcGVjaWZpZWRcblx0XHRhZGp1c3RlZCA9IHZhbHVlUGFydHNbIDEgXSA/XG5cdFx0XHRpbml0aWFsSW5Vbml0ICsgKCB2YWx1ZVBhcnRzWyAxIF0gKyAxICkgKiB2YWx1ZVBhcnRzWyAyIF0gOlxuXHRcdFx0K3ZhbHVlUGFydHNbIDIgXTtcblx0XHRpZiAoIHR3ZWVuICkge1xuXHRcdFx0dHdlZW4udW5pdCA9IHVuaXQ7XG5cdFx0XHR0d2Vlbi5zdGFydCA9IGluaXRpYWxJblVuaXQ7XG5cdFx0XHR0d2Vlbi5lbmQgPSBhZGp1c3RlZDtcblx0XHR9XG5cdH1cblx0cmV0dXJuIGFkanVzdGVkO1xufVxuXG5cbnZhciBkZWZhdWx0RGlzcGxheU1hcCA9IHt9O1xuXG5mdW5jdGlvbiBnZXREZWZhdWx0RGlzcGxheSggZWxlbSApIHtcblx0dmFyIHRlbXAsXG5cdFx0ZG9jID0gZWxlbS5vd25lckRvY3VtZW50LFxuXHRcdG5vZGVOYW1lID0gZWxlbS5ub2RlTmFtZSxcblx0XHRkaXNwbGF5ID0gZGVmYXVsdERpc3BsYXlNYXBbIG5vZGVOYW1lIF07XG5cblx0aWYgKCBkaXNwbGF5ICkge1xuXHRcdHJldHVybiBkaXNwbGF5O1xuXHR9XG5cblx0dGVtcCA9IGRvYy5ib2R5LmFwcGVuZENoaWxkKCBkb2MuY3JlYXRlRWxlbWVudCggbm9kZU5hbWUgKSApO1xuXHRkaXNwbGF5ID0galF1ZXJ5LmNzcyggdGVtcCwgXCJkaXNwbGF5XCIgKTtcblxuXHR0ZW1wLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoIHRlbXAgKTtcblxuXHRpZiAoIGRpc3BsYXkgPT09IFwibm9uZVwiICkge1xuXHRcdGRpc3BsYXkgPSBcImJsb2NrXCI7XG5cdH1cblx0ZGVmYXVsdERpc3BsYXlNYXBbIG5vZGVOYW1lIF0gPSBkaXNwbGF5O1xuXG5cdHJldHVybiBkaXNwbGF5O1xufVxuXG5mdW5jdGlvbiBzaG93SGlkZSggZWxlbWVudHMsIHNob3cgKSB7XG5cdHZhciBkaXNwbGF5LCBlbGVtLFxuXHRcdHZhbHVlcyA9IFtdLFxuXHRcdGluZGV4ID0gMCxcblx0XHRsZW5ndGggPSBlbGVtZW50cy5sZW5ndGg7XG5cblx0Ly8gRGV0ZXJtaW5lIG5ldyBkaXNwbGF5IHZhbHVlIGZvciBlbGVtZW50cyB0aGF0IG5lZWQgdG8gY2hhbmdlXG5cdGZvciAoIDsgaW5kZXggPCBsZW5ndGg7IGluZGV4KysgKSB7XG5cdFx0ZWxlbSA9IGVsZW1lbnRzWyBpbmRleCBdO1xuXHRcdGlmICggIWVsZW0uc3R5bGUgKSB7XG5cdFx0XHRjb250aW51ZTtcblx0XHR9XG5cblx0XHRkaXNwbGF5ID0gZWxlbS5zdHlsZS5kaXNwbGF5O1xuXHRcdGlmICggc2hvdyApIHtcblxuXHRcdFx0Ly8gU2luY2Ugd2UgZm9yY2UgdmlzaWJpbGl0eSB1cG9uIGNhc2NhZGUtaGlkZGVuIGVsZW1lbnRzLCBhbiBpbW1lZGlhdGUgKGFuZCBzbG93KVxuXHRcdFx0Ly8gY2hlY2sgaXMgcmVxdWlyZWQgaW4gdGhpcyBmaXJzdCBsb29wIHVubGVzcyB3ZSBoYXZlIGEgbm9uZW1wdHkgZGlzcGxheSB2YWx1ZSAoZWl0aGVyXG5cdFx0XHQvLyBpbmxpbmUgb3IgYWJvdXQtdG8tYmUtcmVzdG9yZWQpXG5cdFx0XHRpZiAoIGRpc3BsYXkgPT09IFwibm9uZVwiICkge1xuXHRcdFx0XHR2YWx1ZXNbIGluZGV4IF0gPSBkYXRhUHJpdi5nZXQoIGVsZW0sIFwiZGlzcGxheVwiICkgfHwgbnVsbDtcblx0XHRcdFx0aWYgKCAhdmFsdWVzWyBpbmRleCBdICkge1xuXHRcdFx0XHRcdGVsZW0uc3R5bGUuZGlzcGxheSA9IFwiXCI7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdGlmICggZWxlbS5zdHlsZS5kaXNwbGF5ID09PSBcIlwiICYmIGlzSGlkZGVuV2l0aGluVHJlZSggZWxlbSApICkge1xuXHRcdFx0XHR2YWx1ZXNbIGluZGV4IF0gPSBnZXREZWZhdWx0RGlzcGxheSggZWxlbSApO1xuXHRcdFx0fVxuXHRcdH0gZWxzZSB7XG5cdFx0XHRpZiAoIGRpc3BsYXkgIT09IFwibm9uZVwiICkge1xuXHRcdFx0XHR2YWx1ZXNbIGluZGV4IF0gPSBcIm5vbmVcIjtcblxuXHRcdFx0XHQvLyBSZW1lbWJlciB3aGF0IHdlJ3JlIG92ZXJ3cml0aW5nXG5cdFx0XHRcdGRhdGFQcml2LnNldCggZWxlbSwgXCJkaXNwbGF5XCIsIGRpc3BsYXkgKTtcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHQvLyBTZXQgdGhlIGRpc3BsYXkgb2YgdGhlIGVsZW1lbnRzIGluIGEgc2Vjb25kIGxvb3AgdG8gYXZvaWQgY29uc3RhbnQgcmVmbG93XG5cdGZvciAoIGluZGV4ID0gMDsgaW5kZXggPCBsZW5ndGg7IGluZGV4KysgKSB7XG5cdFx0aWYgKCB2YWx1ZXNbIGluZGV4IF0gIT0gbnVsbCApIHtcblx0XHRcdGVsZW1lbnRzWyBpbmRleCBdLnN0eWxlLmRpc3BsYXkgPSB2YWx1ZXNbIGluZGV4IF07XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIGVsZW1lbnRzO1xufVxuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdHNob3c6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiBzaG93SGlkZSggdGhpcywgdHJ1ZSApO1xuXHR9LFxuXHRoaWRlOiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gc2hvd0hpZGUoIHRoaXMgKTtcblx0fSxcblx0dG9nZ2xlOiBmdW5jdGlvbiggc3RhdGUgKSB7XG5cdFx0aWYgKCB0eXBlb2Ygc3RhdGUgPT09IFwiYm9vbGVhblwiICkge1xuXHRcdFx0cmV0dXJuIHN0YXRlID8gdGhpcy5zaG93KCkgOiB0aGlzLmhpZGUoKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdGlmICggaXNIaWRkZW5XaXRoaW5UcmVlKCB0aGlzICkgKSB7XG5cdFx0XHRcdGpRdWVyeSggdGhpcyApLnNob3coKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGpRdWVyeSggdGhpcyApLmhpZGUoKTtcblx0XHRcdH1cblx0XHR9ICk7XG5cdH1cbn0gKTtcbnZhciByY2hlY2thYmxlVHlwZSA9ICggL14oPzpjaGVja2JveHxyYWRpbykkL2kgKTtcblxudmFyIHJ0YWdOYW1lID0gKCAvPChbYS16XVteXFwvXFwwPlxceDIwXFx0XFxyXFxuXFxmXSopL2kgKTtcblxudmFyIHJzY3JpcHRUeXBlID0gKCAvXiR8Xm1vZHVsZSR8XFwvKD86amF2YXxlY21hKXNjcmlwdC9pICk7XG5cblxuXG4oIGZ1bmN0aW9uKCkge1xuXHR2YXIgZnJhZ21lbnQgPSBkb2N1bWVudC5jcmVhdGVEb2N1bWVudEZyYWdtZW50KCksXG5cdFx0ZGl2ID0gZnJhZ21lbnQuYXBwZW5kQ2hpbGQoIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiZGl2XCIgKSApLFxuXHRcdGlucHV0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJpbnB1dFwiICk7XG5cblx0Ly8gU3VwcG9ydDogQW5kcm9pZCA0LjAgLSA0LjMgb25seVxuXHQvLyBDaGVjayBzdGF0ZSBsb3N0IGlmIHRoZSBuYW1lIGlzIHNldCAoIzExMjE3KVxuXHQvLyBTdXBwb3J0OiBXaW5kb3dzIFdlYiBBcHBzIChXV0EpXG5cdC8vIGBuYW1lYCBhbmQgYHR5cGVgIG11c3QgdXNlIC5zZXRBdHRyaWJ1dGUgZm9yIFdXQSAoIzE0OTAxKVxuXHRpbnB1dC5zZXRBdHRyaWJ1dGUoIFwidHlwZVwiLCBcInJhZGlvXCIgKTtcblx0aW5wdXQuc2V0QXR0cmlidXRlKCBcImNoZWNrZWRcIiwgXCJjaGVja2VkXCIgKTtcblx0aW5wdXQuc2V0QXR0cmlidXRlKCBcIm5hbWVcIiwgXCJ0XCIgKTtcblxuXHRkaXYuYXBwZW5kQ2hpbGQoIGlucHV0ICk7XG5cblx0Ly8gU3VwcG9ydDogQW5kcm9pZCA8PTQuMSBvbmx5XG5cdC8vIE9sZGVyIFdlYktpdCBkb2Vzbid0IGNsb25lIGNoZWNrZWQgc3RhdGUgY29ycmVjdGx5IGluIGZyYWdtZW50c1xuXHRzdXBwb3J0LmNoZWNrQ2xvbmUgPSBkaXYuY2xvbmVOb2RlKCB0cnVlICkuY2xvbmVOb2RlKCB0cnVlICkubGFzdENoaWxkLmNoZWNrZWQ7XG5cblx0Ly8gU3VwcG9ydDogSUUgPD0xMSBvbmx5XG5cdC8vIE1ha2Ugc3VyZSB0ZXh0YXJlYSAoYW5kIGNoZWNrYm94KSBkZWZhdWx0VmFsdWUgaXMgcHJvcGVybHkgY2xvbmVkXG5cdGRpdi5pbm5lckhUTUwgPSBcIjx0ZXh0YXJlYT54PC90ZXh0YXJlYT5cIjtcblx0c3VwcG9ydC5ub0Nsb25lQ2hlY2tlZCA9ICEhZGl2LmNsb25lTm9kZSggdHJ1ZSApLmxhc3RDaGlsZC5kZWZhdWx0VmFsdWU7XG5cblx0Ly8gU3VwcG9ydDogSUUgPD05IG9ubHlcblx0Ly8gSUUgPD05IHJlcGxhY2VzIDxvcHRpb24+IHRhZ3Mgd2l0aCB0aGVpciBjb250ZW50cyB3aGVuIGluc2VydGVkIG91dHNpZGUgb2Zcblx0Ly8gdGhlIHNlbGVjdCBlbGVtZW50LlxuXHRkaXYuaW5uZXJIVE1MID0gXCI8b3B0aW9uPjwvb3B0aW9uPlwiO1xuXHRzdXBwb3J0Lm9wdGlvbiA9ICEhZGl2Lmxhc3RDaGlsZDtcbn0gKSgpO1xuXG5cbi8vIFdlIGhhdmUgdG8gY2xvc2UgdGhlc2UgdGFncyB0byBzdXBwb3J0IFhIVE1MICgjMTMyMDApXG52YXIgd3JhcE1hcCA9IHtcblxuXHQvLyBYSFRNTCBwYXJzZXJzIGRvIG5vdCBtYWdpY2FsbHkgaW5zZXJ0IGVsZW1lbnRzIGluIHRoZVxuXHQvLyBzYW1lIHdheSB0aGF0IHRhZyBzb3VwIHBhcnNlcnMgZG8uIFNvIHdlIGNhbm5vdCBzaG9ydGVuXG5cdC8vIHRoaXMgYnkgb21pdHRpbmcgPHRib2R5PiBvciBvdGhlciByZXF1aXJlZCBlbGVtZW50cy5cblx0dGhlYWQ6IFsgMSwgXCI8dGFibGU+XCIsIFwiPC90YWJsZT5cIiBdLFxuXHRjb2w6IFsgMiwgXCI8dGFibGU+PGNvbGdyb3VwPlwiLCBcIjwvY29sZ3JvdXA+PC90YWJsZT5cIiBdLFxuXHR0cjogWyAyLCBcIjx0YWJsZT48dGJvZHk+XCIsIFwiPC90Ym9keT48L3RhYmxlPlwiIF0sXG5cdHRkOiBbIDMsIFwiPHRhYmxlPjx0Ym9keT48dHI+XCIsIFwiPC90cj48L3Rib2R5PjwvdGFibGU+XCIgXSxcblxuXHRfZGVmYXVsdDogWyAwLCBcIlwiLCBcIlwiIF1cbn07XG5cbndyYXBNYXAudGJvZHkgPSB3cmFwTWFwLnRmb290ID0gd3JhcE1hcC5jb2xncm91cCA9IHdyYXBNYXAuY2FwdGlvbiA9IHdyYXBNYXAudGhlYWQ7XG53cmFwTWFwLnRoID0gd3JhcE1hcC50ZDtcblxuLy8gU3VwcG9ydDogSUUgPD05IG9ubHlcbmlmICggIXN1cHBvcnQub3B0aW9uICkge1xuXHR3cmFwTWFwLm9wdGdyb3VwID0gd3JhcE1hcC5vcHRpb24gPSBbIDEsIFwiPHNlbGVjdCBtdWx0aXBsZT0nbXVsdGlwbGUnPlwiLCBcIjwvc2VsZWN0PlwiIF07XG59XG5cblxuZnVuY3Rpb24gZ2V0QWxsKCBjb250ZXh0LCB0YWcgKSB7XG5cblx0Ly8gU3VwcG9ydDogSUUgPD05IC0gMTEgb25seVxuXHQvLyBVc2UgdHlwZW9mIHRvIGF2b2lkIHplcm8tYXJndW1lbnQgbWV0aG9kIGludm9jYXRpb24gb24gaG9zdCBvYmplY3RzICgjMTUxNTEpXG5cdHZhciByZXQ7XG5cblx0aWYgKCB0eXBlb2YgY29udGV4dC5nZXRFbGVtZW50c0J5VGFnTmFtZSAhPT0gXCJ1bmRlZmluZWRcIiApIHtcblx0XHRyZXQgPSBjb250ZXh0LmdldEVsZW1lbnRzQnlUYWdOYW1lKCB0YWcgfHwgXCIqXCIgKTtcblxuXHR9IGVsc2UgaWYgKCB0eXBlb2YgY29udGV4dC5xdWVyeVNlbGVjdG9yQWxsICE9PSBcInVuZGVmaW5lZFwiICkge1xuXHRcdHJldCA9IGNvbnRleHQucXVlcnlTZWxlY3RvckFsbCggdGFnIHx8IFwiKlwiICk7XG5cblx0fSBlbHNlIHtcblx0XHRyZXQgPSBbXTtcblx0fVxuXG5cdGlmICggdGFnID09PSB1bmRlZmluZWQgfHwgdGFnICYmIG5vZGVOYW1lKCBjb250ZXh0LCB0YWcgKSApIHtcblx0XHRyZXR1cm4galF1ZXJ5Lm1lcmdlKCBbIGNvbnRleHQgXSwgcmV0ICk7XG5cdH1cblxuXHRyZXR1cm4gcmV0O1xufVxuXG5cbi8vIE1hcmsgc2NyaXB0cyBhcyBoYXZpbmcgYWxyZWFkeSBiZWVuIGV2YWx1YXRlZFxuZnVuY3Rpb24gc2V0R2xvYmFsRXZhbCggZWxlbXMsIHJlZkVsZW1lbnRzICkge1xuXHR2YXIgaSA9IDAsXG5cdFx0bCA9IGVsZW1zLmxlbmd0aDtcblxuXHRmb3IgKCA7IGkgPCBsOyBpKysgKSB7XG5cdFx0ZGF0YVByaXYuc2V0KFxuXHRcdFx0ZWxlbXNbIGkgXSxcblx0XHRcdFwiZ2xvYmFsRXZhbFwiLFxuXHRcdFx0IXJlZkVsZW1lbnRzIHx8IGRhdGFQcml2LmdldCggcmVmRWxlbWVudHNbIGkgXSwgXCJnbG9iYWxFdmFsXCIgKVxuXHRcdCk7XG5cdH1cbn1cblxuXG52YXIgcmh0bWwgPSAvPHwmIz9cXHcrOy87XG5cbmZ1bmN0aW9uIGJ1aWxkRnJhZ21lbnQoIGVsZW1zLCBjb250ZXh0LCBzY3JpcHRzLCBzZWxlY3Rpb24sIGlnbm9yZWQgKSB7XG5cdHZhciBlbGVtLCB0bXAsIHRhZywgd3JhcCwgYXR0YWNoZWQsIGosXG5cdFx0ZnJhZ21lbnQgPSBjb250ZXh0LmNyZWF0ZURvY3VtZW50RnJhZ21lbnQoKSxcblx0XHRub2RlcyA9IFtdLFxuXHRcdGkgPSAwLFxuXHRcdGwgPSBlbGVtcy5sZW5ndGg7XG5cblx0Zm9yICggOyBpIDwgbDsgaSsrICkge1xuXHRcdGVsZW0gPSBlbGVtc1sgaSBdO1xuXG5cdFx0aWYgKCBlbGVtIHx8IGVsZW0gPT09IDAgKSB7XG5cblx0XHRcdC8vIEFkZCBub2RlcyBkaXJlY3RseVxuXHRcdFx0aWYgKCB0b1R5cGUoIGVsZW0gKSA9PT0gXCJvYmplY3RcIiApIHtcblxuXHRcdFx0XHQvLyBTdXBwb3J0OiBBbmRyb2lkIDw9NC4wIG9ubHksIFBoYW50b21KUyAxIG9ubHlcblx0XHRcdFx0Ly8gcHVzaC5hcHBseShfLCBhcnJheWxpa2UpIHRocm93cyBvbiBhbmNpZW50IFdlYktpdFxuXHRcdFx0XHRqUXVlcnkubWVyZ2UoIG5vZGVzLCBlbGVtLm5vZGVUeXBlID8gWyBlbGVtIF0gOiBlbGVtICk7XG5cblx0XHRcdC8vIENvbnZlcnQgbm9uLWh0bWwgaW50byBhIHRleHQgbm9kZVxuXHRcdFx0fSBlbHNlIGlmICggIXJodG1sLnRlc3QoIGVsZW0gKSApIHtcblx0XHRcdFx0bm9kZXMucHVzaCggY29udGV4dC5jcmVhdGVUZXh0Tm9kZSggZWxlbSApICk7XG5cblx0XHRcdC8vIENvbnZlcnQgaHRtbCBpbnRvIERPTSBub2Rlc1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0dG1wID0gdG1wIHx8IGZyYWdtZW50LmFwcGVuZENoaWxkKCBjb250ZXh0LmNyZWF0ZUVsZW1lbnQoIFwiZGl2XCIgKSApO1xuXG5cdFx0XHRcdC8vIERlc2VyaWFsaXplIGEgc3RhbmRhcmQgcmVwcmVzZW50YXRpb25cblx0XHRcdFx0dGFnID0gKCBydGFnTmFtZS5leGVjKCBlbGVtICkgfHwgWyBcIlwiLCBcIlwiIF0gKVsgMSBdLnRvTG93ZXJDYXNlKCk7XG5cdFx0XHRcdHdyYXAgPSB3cmFwTWFwWyB0YWcgXSB8fCB3cmFwTWFwLl9kZWZhdWx0O1xuXHRcdFx0XHR0bXAuaW5uZXJIVE1MID0gd3JhcFsgMSBdICsgalF1ZXJ5Lmh0bWxQcmVmaWx0ZXIoIGVsZW0gKSArIHdyYXBbIDIgXTtcblxuXHRcdFx0XHQvLyBEZXNjZW5kIHRocm91Z2ggd3JhcHBlcnMgdG8gdGhlIHJpZ2h0IGNvbnRlbnRcblx0XHRcdFx0aiA9IHdyYXBbIDAgXTtcblx0XHRcdFx0d2hpbGUgKCBqLS0gKSB7XG5cdFx0XHRcdFx0dG1wID0gdG1wLmxhc3RDaGlsZDtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IEFuZHJvaWQgPD00LjAgb25seSwgUGhhbnRvbUpTIDEgb25seVxuXHRcdFx0XHQvLyBwdXNoLmFwcGx5KF8sIGFycmF5bGlrZSkgdGhyb3dzIG9uIGFuY2llbnQgV2ViS2l0XG5cdFx0XHRcdGpRdWVyeS5tZXJnZSggbm9kZXMsIHRtcC5jaGlsZE5vZGVzICk7XG5cblx0XHRcdFx0Ly8gUmVtZW1iZXIgdGhlIHRvcC1sZXZlbCBjb250YWluZXJcblx0XHRcdFx0dG1wID0gZnJhZ21lbnQuZmlyc3RDaGlsZDtcblxuXHRcdFx0XHQvLyBFbnN1cmUgdGhlIGNyZWF0ZWQgbm9kZXMgYXJlIG9ycGhhbmVkICgjMTIzOTIpXG5cdFx0XHRcdHRtcC50ZXh0Q29udGVudCA9IFwiXCI7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0Ly8gUmVtb3ZlIHdyYXBwZXIgZnJvbSBmcmFnbWVudFxuXHRmcmFnbWVudC50ZXh0Q29udGVudCA9IFwiXCI7XG5cblx0aSA9IDA7XG5cdHdoaWxlICggKCBlbGVtID0gbm9kZXNbIGkrKyBdICkgKSB7XG5cblx0XHQvLyBTa2lwIGVsZW1lbnRzIGFscmVhZHkgaW4gdGhlIGNvbnRleHQgY29sbGVjdGlvbiAodHJhYy00MDg3KVxuXHRcdGlmICggc2VsZWN0aW9uICYmIGpRdWVyeS5pbkFycmF5KCBlbGVtLCBzZWxlY3Rpb24gKSA+IC0xICkge1xuXHRcdFx0aWYgKCBpZ25vcmVkICkge1xuXHRcdFx0XHRpZ25vcmVkLnB1c2goIGVsZW0gKTtcblx0XHRcdH1cblx0XHRcdGNvbnRpbnVlO1xuXHRcdH1cblxuXHRcdGF0dGFjaGVkID0gaXNBdHRhY2hlZCggZWxlbSApO1xuXG5cdFx0Ly8gQXBwZW5kIHRvIGZyYWdtZW50XG5cdFx0dG1wID0gZ2V0QWxsKCBmcmFnbWVudC5hcHBlbmRDaGlsZCggZWxlbSApLCBcInNjcmlwdFwiICk7XG5cblx0XHQvLyBQcmVzZXJ2ZSBzY3JpcHQgZXZhbHVhdGlvbiBoaXN0b3J5XG5cdFx0aWYgKCBhdHRhY2hlZCApIHtcblx0XHRcdHNldEdsb2JhbEV2YWwoIHRtcCApO1xuXHRcdH1cblxuXHRcdC8vIENhcHR1cmUgZXhlY3V0YWJsZXNcblx0XHRpZiAoIHNjcmlwdHMgKSB7XG5cdFx0XHRqID0gMDtcblx0XHRcdHdoaWxlICggKCBlbGVtID0gdG1wWyBqKysgXSApICkge1xuXHRcdFx0XHRpZiAoIHJzY3JpcHRUeXBlLnRlc3QoIGVsZW0udHlwZSB8fCBcIlwiICkgKSB7XG5cdFx0XHRcdFx0c2NyaXB0cy5wdXNoKCBlbGVtICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gZnJhZ21lbnQ7XG59XG5cblxudmFyXG5cdHJrZXlFdmVudCA9IC9ea2V5Lyxcblx0cm1vdXNlRXZlbnQgPSAvXig/Om1vdXNlfHBvaW50ZXJ8Y29udGV4dG1lbnV8ZHJhZ3xkcm9wKXxjbGljay8sXG5cdHJ0eXBlbmFtZXNwYWNlID0gL14oW14uXSopKD86XFwuKC4rKXwpLztcblxuZnVuY3Rpb24gcmV0dXJuVHJ1ZSgpIHtcblx0cmV0dXJuIHRydWU7XG59XG5cbmZ1bmN0aW9uIHJldHVybkZhbHNlKCkge1xuXHRyZXR1cm4gZmFsc2U7XG59XG5cbi8vIFN1cHBvcnQ6IElFIDw9OSAtIDExK1xuLy8gZm9jdXMoKSBhbmQgYmx1cigpIGFyZSBhc3luY2hyb25vdXMsIGV4Y2VwdCB3aGVuIHRoZXkgYXJlIG5vLW9wLlxuLy8gU28gZXhwZWN0IGZvY3VzIHRvIGJlIHN5bmNocm9ub3VzIHdoZW4gdGhlIGVsZW1lbnQgaXMgYWxyZWFkeSBhY3RpdmUsXG4vLyBhbmQgYmx1ciB0byBiZSBzeW5jaHJvbm91cyB3aGVuIHRoZSBlbGVtZW50IGlzIG5vdCBhbHJlYWR5IGFjdGl2ZS5cbi8vIChmb2N1cyBhbmQgYmx1ciBhcmUgYWx3YXlzIHN5bmNocm9ub3VzIGluIG90aGVyIHN1cHBvcnRlZCBicm93c2Vycyxcbi8vIHRoaXMganVzdCBkZWZpbmVzIHdoZW4gd2UgY2FuIGNvdW50IG9uIGl0KS5cbmZ1bmN0aW9uIGV4cGVjdFN5bmMoIGVsZW0sIHR5cGUgKSB7XG5cdHJldHVybiAoIGVsZW0gPT09IHNhZmVBY3RpdmVFbGVtZW50KCkgKSA9PT0gKCB0eXBlID09PSBcImZvY3VzXCIgKTtcbn1cblxuLy8gU3VwcG9ydDogSUUgPD05IG9ubHlcbi8vIEFjY2Vzc2luZyBkb2N1bWVudC5hY3RpdmVFbGVtZW50IGNhbiB0aHJvdyB1bmV4cGVjdGVkbHlcbi8vIGh0dHBzOi8vYnVncy5qcXVlcnkuY29tL3RpY2tldC8xMzM5M1xuZnVuY3Rpb24gc2FmZUFjdGl2ZUVsZW1lbnQoKSB7XG5cdHRyeSB7XG5cdFx0cmV0dXJuIGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQ7XG5cdH0gY2F0Y2ggKCBlcnIgKSB7IH1cbn1cblxuZnVuY3Rpb24gb24oIGVsZW0sIHR5cGVzLCBzZWxlY3RvciwgZGF0YSwgZm4sIG9uZSApIHtcblx0dmFyIG9yaWdGbiwgdHlwZTtcblxuXHQvLyBUeXBlcyBjYW4gYmUgYSBtYXAgb2YgdHlwZXMvaGFuZGxlcnNcblx0aWYgKCB0eXBlb2YgdHlwZXMgPT09IFwib2JqZWN0XCIgKSB7XG5cblx0XHQvLyAoIHR5cGVzLU9iamVjdCwgc2VsZWN0b3IsIGRhdGEgKVxuXHRcdGlmICggdHlwZW9mIHNlbGVjdG9yICE9PSBcInN0cmluZ1wiICkge1xuXG5cdFx0XHQvLyAoIHR5cGVzLU9iamVjdCwgZGF0YSApXG5cdFx0XHRkYXRhID0gZGF0YSB8fCBzZWxlY3Rvcjtcblx0XHRcdHNlbGVjdG9yID0gdW5kZWZpbmVkO1xuXHRcdH1cblx0XHRmb3IgKCB0eXBlIGluIHR5cGVzICkge1xuXHRcdFx0b24oIGVsZW0sIHR5cGUsIHNlbGVjdG9yLCBkYXRhLCB0eXBlc1sgdHlwZSBdLCBvbmUgKTtcblx0XHR9XG5cdFx0cmV0dXJuIGVsZW07XG5cdH1cblxuXHRpZiAoIGRhdGEgPT0gbnVsbCAmJiBmbiA9PSBudWxsICkge1xuXG5cdFx0Ly8gKCB0eXBlcywgZm4gKVxuXHRcdGZuID0gc2VsZWN0b3I7XG5cdFx0ZGF0YSA9IHNlbGVjdG9yID0gdW5kZWZpbmVkO1xuXHR9IGVsc2UgaWYgKCBmbiA9PSBudWxsICkge1xuXHRcdGlmICggdHlwZW9mIHNlbGVjdG9yID09PSBcInN0cmluZ1wiICkge1xuXG5cdFx0XHQvLyAoIHR5cGVzLCBzZWxlY3RvciwgZm4gKVxuXHRcdFx0Zm4gPSBkYXRhO1xuXHRcdFx0ZGF0YSA9IHVuZGVmaW5lZDtcblx0XHR9IGVsc2Uge1xuXG5cdFx0XHQvLyAoIHR5cGVzLCBkYXRhLCBmbiApXG5cdFx0XHRmbiA9IGRhdGE7XG5cdFx0XHRkYXRhID0gc2VsZWN0b3I7XG5cdFx0XHRzZWxlY3RvciA9IHVuZGVmaW5lZDtcblx0XHR9XG5cdH1cblx0aWYgKCBmbiA9PT0gZmFsc2UgKSB7XG5cdFx0Zm4gPSByZXR1cm5GYWxzZTtcblx0fSBlbHNlIGlmICggIWZuICkge1xuXHRcdHJldHVybiBlbGVtO1xuXHR9XG5cblx0aWYgKCBvbmUgPT09IDEgKSB7XG5cdFx0b3JpZ0ZuID0gZm47XG5cdFx0Zm4gPSBmdW5jdGlvbiggZXZlbnQgKSB7XG5cblx0XHRcdC8vIENhbiB1c2UgYW4gZW1wdHkgc2V0LCBzaW5jZSBldmVudCBjb250YWlucyB0aGUgaW5mb1xuXHRcdFx0alF1ZXJ5KCkub2ZmKCBldmVudCApO1xuXHRcdFx0cmV0dXJuIG9yaWdGbi5hcHBseSggdGhpcywgYXJndW1lbnRzICk7XG5cdFx0fTtcblxuXHRcdC8vIFVzZSBzYW1lIGd1aWQgc28gY2FsbGVyIGNhbiByZW1vdmUgdXNpbmcgb3JpZ0ZuXG5cdFx0Zm4uZ3VpZCA9IG9yaWdGbi5ndWlkIHx8ICggb3JpZ0ZuLmd1aWQgPSBqUXVlcnkuZ3VpZCsrICk7XG5cdH1cblx0cmV0dXJuIGVsZW0uZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0alF1ZXJ5LmV2ZW50LmFkZCggdGhpcywgdHlwZXMsIGZuLCBkYXRhLCBzZWxlY3RvciApO1xuXHR9ICk7XG59XG5cbi8qXG4gKiBIZWxwZXIgZnVuY3Rpb25zIGZvciBtYW5hZ2luZyBldmVudHMgLS0gbm90IHBhcnQgb2YgdGhlIHB1YmxpYyBpbnRlcmZhY2UuXG4gKiBQcm9wcyB0byBEZWFuIEVkd2FyZHMnIGFkZEV2ZW50IGxpYnJhcnkgZm9yIG1hbnkgb2YgdGhlIGlkZWFzLlxuICovXG5qUXVlcnkuZXZlbnQgPSB7XG5cblx0Z2xvYmFsOiB7fSxcblxuXHRhZGQ6IGZ1bmN0aW9uKCBlbGVtLCB0eXBlcywgaGFuZGxlciwgZGF0YSwgc2VsZWN0b3IgKSB7XG5cblx0XHR2YXIgaGFuZGxlT2JqSW4sIGV2ZW50SGFuZGxlLCB0bXAsXG5cdFx0XHRldmVudHMsIHQsIGhhbmRsZU9iaixcblx0XHRcdHNwZWNpYWwsIGhhbmRsZXJzLCB0eXBlLCBuYW1lc3BhY2VzLCBvcmlnVHlwZSxcblx0XHRcdGVsZW1EYXRhID0gZGF0YVByaXYuZ2V0KCBlbGVtICk7XG5cblx0XHQvLyBPbmx5IGF0dGFjaCBldmVudHMgdG8gb2JqZWN0cyB0aGF0IGFjY2VwdCBkYXRhXG5cdFx0aWYgKCAhYWNjZXB0RGF0YSggZWxlbSApICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdC8vIENhbGxlciBjYW4gcGFzcyBpbiBhbiBvYmplY3Qgb2YgY3VzdG9tIGRhdGEgaW4gbGlldSBvZiB0aGUgaGFuZGxlclxuXHRcdGlmICggaGFuZGxlci5oYW5kbGVyICkge1xuXHRcdFx0aGFuZGxlT2JqSW4gPSBoYW5kbGVyO1xuXHRcdFx0aGFuZGxlciA9IGhhbmRsZU9iakluLmhhbmRsZXI7XG5cdFx0XHRzZWxlY3RvciA9IGhhbmRsZU9iakluLnNlbGVjdG9yO1xuXHRcdH1cblxuXHRcdC8vIEVuc3VyZSB0aGF0IGludmFsaWQgc2VsZWN0b3JzIHRocm93IGV4Y2VwdGlvbnMgYXQgYXR0YWNoIHRpbWVcblx0XHQvLyBFdmFsdWF0ZSBhZ2FpbnN0IGRvY3VtZW50RWxlbWVudCBpbiBjYXNlIGVsZW0gaXMgYSBub24tZWxlbWVudCBub2RlIChlLmcuLCBkb2N1bWVudClcblx0XHRpZiAoIHNlbGVjdG9yICkge1xuXHRcdFx0alF1ZXJ5LmZpbmQubWF0Y2hlc1NlbGVjdG9yKCBkb2N1bWVudEVsZW1lbnQsIHNlbGVjdG9yICk7XG5cdFx0fVxuXG5cdFx0Ly8gTWFrZSBzdXJlIHRoYXQgdGhlIGhhbmRsZXIgaGFzIGEgdW5pcXVlIElELCB1c2VkIHRvIGZpbmQvcmVtb3ZlIGl0IGxhdGVyXG5cdFx0aWYgKCAhaGFuZGxlci5ndWlkICkge1xuXHRcdFx0aGFuZGxlci5ndWlkID0galF1ZXJ5Lmd1aWQrKztcblx0XHR9XG5cblx0XHQvLyBJbml0IHRoZSBlbGVtZW50J3MgZXZlbnQgc3RydWN0dXJlIGFuZCBtYWluIGhhbmRsZXIsIGlmIHRoaXMgaXMgdGhlIGZpcnN0XG5cdFx0aWYgKCAhKCBldmVudHMgPSBlbGVtRGF0YS5ldmVudHMgKSApIHtcblx0XHRcdGV2ZW50cyA9IGVsZW1EYXRhLmV2ZW50cyA9IE9iamVjdC5jcmVhdGUoIG51bGwgKTtcblx0XHR9XG5cdFx0aWYgKCAhKCBldmVudEhhbmRsZSA9IGVsZW1EYXRhLmhhbmRsZSApICkge1xuXHRcdFx0ZXZlbnRIYW5kbGUgPSBlbGVtRGF0YS5oYW5kbGUgPSBmdW5jdGlvbiggZSApIHtcblxuXHRcdFx0XHQvLyBEaXNjYXJkIHRoZSBzZWNvbmQgZXZlbnQgb2YgYSBqUXVlcnkuZXZlbnQudHJpZ2dlcigpIGFuZFxuXHRcdFx0XHQvLyB3aGVuIGFuIGV2ZW50IGlzIGNhbGxlZCBhZnRlciBhIHBhZ2UgaGFzIHVubG9hZGVkXG5cdFx0XHRcdHJldHVybiB0eXBlb2YgalF1ZXJ5ICE9PSBcInVuZGVmaW5lZFwiICYmIGpRdWVyeS5ldmVudC50cmlnZ2VyZWQgIT09IGUudHlwZSA/XG5cdFx0XHRcdFx0alF1ZXJ5LmV2ZW50LmRpc3BhdGNoLmFwcGx5KCBlbGVtLCBhcmd1bWVudHMgKSA6IHVuZGVmaW5lZDtcblx0XHRcdH07XG5cdFx0fVxuXG5cdFx0Ly8gSGFuZGxlIG11bHRpcGxlIGV2ZW50cyBzZXBhcmF0ZWQgYnkgYSBzcGFjZVxuXHRcdHR5cGVzID0gKCB0eXBlcyB8fCBcIlwiICkubWF0Y2goIHJub3RodG1sd2hpdGUgKSB8fCBbIFwiXCIgXTtcblx0XHR0ID0gdHlwZXMubGVuZ3RoO1xuXHRcdHdoaWxlICggdC0tICkge1xuXHRcdFx0dG1wID0gcnR5cGVuYW1lc3BhY2UuZXhlYyggdHlwZXNbIHQgXSApIHx8IFtdO1xuXHRcdFx0dHlwZSA9IG9yaWdUeXBlID0gdG1wWyAxIF07XG5cdFx0XHRuYW1lc3BhY2VzID0gKCB0bXBbIDIgXSB8fCBcIlwiICkuc3BsaXQoIFwiLlwiICkuc29ydCgpO1xuXG5cdFx0XHQvLyBUaGVyZSAqbXVzdCogYmUgYSB0eXBlLCBubyBhdHRhY2hpbmcgbmFtZXNwYWNlLW9ubHkgaGFuZGxlcnNcblx0XHRcdGlmICggIXR5cGUgKSB7XG5cdFx0XHRcdGNvbnRpbnVlO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBJZiBldmVudCBjaGFuZ2VzIGl0cyB0eXBlLCB1c2UgdGhlIHNwZWNpYWwgZXZlbnQgaGFuZGxlcnMgZm9yIHRoZSBjaGFuZ2VkIHR5cGVcblx0XHRcdHNwZWNpYWwgPSBqUXVlcnkuZXZlbnQuc3BlY2lhbFsgdHlwZSBdIHx8IHt9O1xuXG5cdFx0XHQvLyBJZiBzZWxlY3RvciBkZWZpbmVkLCBkZXRlcm1pbmUgc3BlY2lhbCBldmVudCBhcGkgdHlwZSwgb3RoZXJ3aXNlIGdpdmVuIHR5cGVcblx0XHRcdHR5cGUgPSAoIHNlbGVjdG9yID8gc3BlY2lhbC5kZWxlZ2F0ZVR5cGUgOiBzcGVjaWFsLmJpbmRUeXBlICkgfHwgdHlwZTtcblxuXHRcdFx0Ly8gVXBkYXRlIHNwZWNpYWwgYmFzZWQgb24gbmV3bHkgcmVzZXQgdHlwZVxuXHRcdFx0c3BlY2lhbCA9IGpRdWVyeS5ldmVudC5zcGVjaWFsWyB0eXBlIF0gfHwge307XG5cblx0XHRcdC8vIGhhbmRsZU9iaiBpcyBwYXNzZWQgdG8gYWxsIGV2ZW50IGhhbmRsZXJzXG5cdFx0XHRoYW5kbGVPYmogPSBqUXVlcnkuZXh0ZW5kKCB7XG5cdFx0XHRcdHR5cGU6IHR5cGUsXG5cdFx0XHRcdG9yaWdUeXBlOiBvcmlnVHlwZSxcblx0XHRcdFx0ZGF0YTogZGF0YSxcblx0XHRcdFx0aGFuZGxlcjogaGFuZGxlcixcblx0XHRcdFx0Z3VpZDogaGFuZGxlci5ndWlkLFxuXHRcdFx0XHRzZWxlY3Rvcjogc2VsZWN0b3IsXG5cdFx0XHRcdG5lZWRzQ29udGV4dDogc2VsZWN0b3IgJiYgalF1ZXJ5LmV4cHIubWF0Y2gubmVlZHNDb250ZXh0LnRlc3QoIHNlbGVjdG9yICksXG5cdFx0XHRcdG5hbWVzcGFjZTogbmFtZXNwYWNlcy5qb2luKCBcIi5cIiApXG5cdFx0XHR9LCBoYW5kbGVPYmpJbiApO1xuXG5cdFx0XHQvLyBJbml0IHRoZSBldmVudCBoYW5kbGVyIHF1ZXVlIGlmIHdlJ3JlIHRoZSBmaXJzdFxuXHRcdFx0aWYgKCAhKCBoYW5kbGVycyA9IGV2ZW50c1sgdHlwZSBdICkgKSB7XG5cdFx0XHRcdGhhbmRsZXJzID0gZXZlbnRzWyB0eXBlIF0gPSBbXTtcblx0XHRcdFx0aGFuZGxlcnMuZGVsZWdhdGVDb3VudCA9IDA7XG5cblx0XHRcdFx0Ly8gT25seSB1c2UgYWRkRXZlbnRMaXN0ZW5lciBpZiB0aGUgc3BlY2lhbCBldmVudHMgaGFuZGxlciByZXR1cm5zIGZhbHNlXG5cdFx0XHRcdGlmICggIXNwZWNpYWwuc2V0dXAgfHxcblx0XHRcdFx0XHRzcGVjaWFsLnNldHVwLmNhbGwoIGVsZW0sIGRhdGEsIG5hbWVzcGFjZXMsIGV2ZW50SGFuZGxlICkgPT09IGZhbHNlICkge1xuXG5cdFx0XHRcdFx0aWYgKCBlbGVtLmFkZEV2ZW50TGlzdGVuZXIgKSB7XG5cdFx0XHRcdFx0XHRlbGVtLmFkZEV2ZW50TGlzdGVuZXIoIHR5cGUsIGV2ZW50SGFuZGxlICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdGlmICggc3BlY2lhbC5hZGQgKSB7XG5cdFx0XHRcdHNwZWNpYWwuYWRkLmNhbGwoIGVsZW0sIGhhbmRsZU9iaiApO1xuXG5cdFx0XHRcdGlmICggIWhhbmRsZU9iai5oYW5kbGVyLmd1aWQgKSB7XG5cdFx0XHRcdFx0aGFuZGxlT2JqLmhhbmRsZXIuZ3VpZCA9IGhhbmRsZXIuZ3VpZDtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvLyBBZGQgdG8gdGhlIGVsZW1lbnQncyBoYW5kbGVyIGxpc3QsIGRlbGVnYXRlcyBpbiBmcm9udFxuXHRcdFx0aWYgKCBzZWxlY3RvciApIHtcblx0XHRcdFx0aGFuZGxlcnMuc3BsaWNlKCBoYW5kbGVycy5kZWxlZ2F0ZUNvdW50KyssIDAsIGhhbmRsZU9iaiApO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0aGFuZGxlcnMucHVzaCggaGFuZGxlT2JqICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIEtlZXAgdHJhY2sgb2Ygd2hpY2ggZXZlbnRzIGhhdmUgZXZlciBiZWVuIHVzZWQsIGZvciBldmVudCBvcHRpbWl6YXRpb25cblx0XHRcdGpRdWVyeS5ldmVudC5nbG9iYWxbIHR5cGUgXSA9IHRydWU7XG5cdFx0fVxuXG5cdH0sXG5cblx0Ly8gRGV0YWNoIGFuIGV2ZW50IG9yIHNldCBvZiBldmVudHMgZnJvbSBhbiBlbGVtZW50XG5cdHJlbW92ZTogZnVuY3Rpb24oIGVsZW0sIHR5cGVzLCBoYW5kbGVyLCBzZWxlY3RvciwgbWFwcGVkVHlwZXMgKSB7XG5cblx0XHR2YXIgaiwgb3JpZ0NvdW50LCB0bXAsXG5cdFx0XHRldmVudHMsIHQsIGhhbmRsZU9iaixcblx0XHRcdHNwZWNpYWwsIGhhbmRsZXJzLCB0eXBlLCBuYW1lc3BhY2VzLCBvcmlnVHlwZSxcblx0XHRcdGVsZW1EYXRhID0gZGF0YVByaXYuaGFzRGF0YSggZWxlbSApICYmIGRhdGFQcml2LmdldCggZWxlbSApO1xuXG5cdFx0aWYgKCAhZWxlbURhdGEgfHwgISggZXZlbnRzID0gZWxlbURhdGEuZXZlbnRzICkgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Ly8gT25jZSBmb3IgZWFjaCB0eXBlLm5hbWVzcGFjZSBpbiB0eXBlczsgdHlwZSBtYXkgYmUgb21pdHRlZFxuXHRcdHR5cGVzID0gKCB0eXBlcyB8fCBcIlwiICkubWF0Y2goIHJub3RodG1sd2hpdGUgKSB8fCBbIFwiXCIgXTtcblx0XHR0ID0gdHlwZXMubGVuZ3RoO1xuXHRcdHdoaWxlICggdC0tICkge1xuXHRcdFx0dG1wID0gcnR5cGVuYW1lc3BhY2UuZXhlYyggdHlwZXNbIHQgXSApIHx8IFtdO1xuXHRcdFx0dHlwZSA9IG9yaWdUeXBlID0gdG1wWyAxIF07XG5cdFx0XHRuYW1lc3BhY2VzID0gKCB0bXBbIDIgXSB8fCBcIlwiICkuc3BsaXQoIFwiLlwiICkuc29ydCgpO1xuXG5cdFx0XHQvLyBVbmJpbmQgYWxsIGV2ZW50cyAob24gdGhpcyBuYW1lc3BhY2UsIGlmIHByb3ZpZGVkKSBmb3IgdGhlIGVsZW1lbnRcblx0XHRcdGlmICggIXR5cGUgKSB7XG5cdFx0XHRcdGZvciAoIHR5cGUgaW4gZXZlbnRzICkge1xuXHRcdFx0XHRcdGpRdWVyeS5ldmVudC5yZW1vdmUoIGVsZW0sIHR5cGUgKyB0eXBlc1sgdCBdLCBoYW5kbGVyLCBzZWxlY3RvciwgdHJ1ZSApO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGNvbnRpbnVlO1xuXHRcdFx0fVxuXG5cdFx0XHRzcGVjaWFsID0galF1ZXJ5LmV2ZW50LnNwZWNpYWxbIHR5cGUgXSB8fCB7fTtcblx0XHRcdHR5cGUgPSAoIHNlbGVjdG9yID8gc3BlY2lhbC5kZWxlZ2F0ZVR5cGUgOiBzcGVjaWFsLmJpbmRUeXBlICkgfHwgdHlwZTtcblx0XHRcdGhhbmRsZXJzID0gZXZlbnRzWyB0eXBlIF0gfHwgW107XG5cdFx0XHR0bXAgPSB0bXBbIDIgXSAmJlxuXHRcdFx0XHRuZXcgUmVnRXhwKCBcIihefFxcXFwuKVwiICsgbmFtZXNwYWNlcy5qb2luKCBcIlxcXFwuKD86LipcXFxcLnwpXCIgKSArIFwiKFxcXFwufCQpXCIgKTtcblxuXHRcdFx0Ly8gUmVtb3ZlIG1hdGNoaW5nIGV2ZW50c1xuXHRcdFx0b3JpZ0NvdW50ID0gaiA9IGhhbmRsZXJzLmxlbmd0aDtcblx0XHRcdHdoaWxlICggai0tICkge1xuXHRcdFx0XHRoYW5kbGVPYmogPSBoYW5kbGVyc1sgaiBdO1xuXG5cdFx0XHRcdGlmICggKCBtYXBwZWRUeXBlcyB8fCBvcmlnVHlwZSA9PT0gaGFuZGxlT2JqLm9yaWdUeXBlICkgJiZcblx0XHRcdFx0XHQoICFoYW5kbGVyIHx8IGhhbmRsZXIuZ3VpZCA9PT0gaGFuZGxlT2JqLmd1aWQgKSAmJlxuXHRcdFx0XHRcdCggIXRtcCB8fCB0bXAudGVzdCggaGFuZGxlT2JqLm5hbWVzcGFjZSApICkgJiZcblx0XHRcdFx0XHQoICFzZWxlY3RvciB8fCBzZWxlY3RvciA9PT0gaGFuZGxlT2JqLnNlbGVjdG9yIHx8XG5cdFx0XHRcdFx0XHRzZWxlY3RvciA9PT0gXCIqKlwiICYmIGhhbmRsZU9iai5zZWxlY3RvciApICkge1xuXHRcdFx0XHRcdGhhbmRsZXJzLnNwbGljZSggaiwgMSApO1xuXG5cdFx0XHRcdFx0aWYgKCBoYW5kbGVPYmouc2VsZWN0b3IgKSB7XG5cdFx0XHRcdFx0XHRoYW5kbGVycy5kZWxlZ2F0ZUNvdW50LS07XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGlmICggc3BlY2lhbC5yZW1vdmUgKSB7XG5cdFx0XHRcdFx0XHRzcGVjaWFsLnJlbW92ZS5jYWxsKCBlbGVtLCBoYW5kbGVPYmogKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gUmVtb3ZlIGdlbmVyaWMgZXZlbnQgaGFuZGxlciBpZiB3ZSByZW1vdmVkIHNvbWV0aGluZyBhbmQgbm8gbW9yZSBoYW5kbGVycyBleGlzdFxuXHRcdFx0Ly8gKGF2b2lkcyBwb3RlbnRpYWwgZm9yIGVuZGxlc3MgcmVjdXJzaW9uIGR1cmluZyByZW1vdmFsIG9mIHNwZWNpYWwgZXZlbnQgaGFuZGxlcnMpXG5cdFx0XHRpZiAoIG9yaWdDb3VudCAmJiAhaGFuZGxlcnMubGVuZ3RoICkge1xuXHRcdFx0XHRpZiAoICFzcGVjaWFsLnRlYXJkb3duIHx8XG5cdFx0XHRcdFx0c3BlY2lhbC50ZWFyZG93bi5jYWxsKCBlbGVtLCBuYW1lc3BhY2VzLCBlbGVtRGF0YS5oYW5kbGUgKSA9PT0gZmFsc2UgKSB7XG5cblx0XHRcdFx0XHRqUXVlcnkucmVtb3ZlRXZlbnQoIGVsZW0sIHR5cGUsIGVsZW1EYXRhLmhhbmRsZSApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0ZGVsZXRlIGV2ZW50c1sgdHlwZSBdO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIFJlbW92ZSBkYXRhIGFuZCB0aGUgZXhwYW5kbyBpZiBpdCdzIG5vIGxvbmdlciB1c2VkXG5cdFx0aWYgKCBqUXVlcnkuaXNFbXB0eU9iamVjdCggZXZlbnRzICkgKSB7XG5cdFx0XHRkYXRhUHJpdi5yZW1vdmUoIGVsZW0sIFwiaGFuZGxlIGV2ZW50c1wiICk7XG5cdFx0fVxuXHR9LFxuXG5cdGRpc3BhdGNoOiBmdW5jdGlvbiggbmF0aXZlRXZlbnQgKSB7XG5cblx0XHR2YXIgaSwgaiwgcmV0LCBtYXRjaGVkLCBoYW5kbGVPYmosIGhhbmRsZXJRdWV1ZSxcblx0XHRcdGFyZ3MgPSBuZXcgQXJyYXkoIGFyZ3VtZW50cy5sZW5ndGggKSxcblxuXHRcdFx0Ly8gTWFrZSBhIHdyaXRhYmxlIGpRdWVyeS5FdmVudCBmcm9tIHRoZSBuYXRpdmUgZXZlbnQgb2JqZWN0XG5cdFx0XHRldmVudCA9IGpRdWVyeS5ldmVudC5maXgoIG5hdGl2ZUV2ZW50ICksXG5cblx0XHRcdGhhbmRsZXJzID0gKFxuXHRcdFx0XHRcdGRhdGFQcml2LmdldCggdGhpcywgXCJldmVudHNcIiApIHx8IE9iamVjdC5jcmVhdGUoIG51bGwgKVxuXHRcdFx0XHQpWyBldmVudC50eXBlIF0gfHwgW10sXG5cdFx0XHRzcGVjaWFsID0galF1ZXJ5LmV2ZW50LnNwZWNpYWxbIGV2ZW50LnR5cGUgXSB8fCB7fTtcblxuXHRcdC8vIFVzZSB0aGUgZml4LWVkIGpRdWVyeS5FdmVudCByYXRoZXIgdGhhbiB0aGUgKHJlYWQtb25seSkgbmF0aXZlIGV2ZW50XG5cdFx0YXJnc1sgMCBdID0gZXZlbnQ7XG5cblx0XHRmb3IgKCBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKyApIHtcblx0XHRcdGFyZ3NbIGkgXSA9IGFyZ3VtZW50c1sgaSBdO1xuXHRcdH1cblxuXHRcdGV2ZW50LmRlbGVnYXRlVGFyZ2V0ID0gdGhpcztcblxuXHRcdC8vIENhbGwgdGhlIHByZURpc3BhdGNoIGhvb2sgZm9yIHRoZSBtYXBwZWQgdHlwZSwgYW5kIGxldCBpdCBiYWlsIGlmIGRlc2lyZWRcblx0XHRpZiAoIHNwZWNpYWwucHJlRGlzcGF0Y2ggJiYgc3BlY2lhbC5wcmVEaXNwYXRjaC5jYWxsKCB0aGlzLCBldmVudCApID09PSBmYWxzZSApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHQvLyBEZXRlcm1pbmUgaGFuZGxlcnNcblx0XHRoYW5kbGVyUXVldWUgPSBqUXVlcnkuZXZlbnQuaGFuZGxlcnMuY2FsbCggdGhpcywgZXZlbnQsIGhhbmRsZXJzICk7XG5cblx0XHQvLyBSdW4gZGVsZWdhdGVzIGZpcnN0OyB0aGV5IG1heSB3YW50IHRvIHN0b3AgcHJvcGFnYXRpb24gYmVuZWF0aCB1c1xuXHRcdGkgPSAwO1xuXHRcdHdoaWxlICggKCBtYXRjaGVkID0gaGFuZGxlclF1ZXVlWyBpKysgXSApICYmICFldmVudC5pc1Byb3BhZ2F0aW9uU3RvcHBlZCgpICkge1xuXHRcdFx0ZXZlbnQuY3VycmVudFRhcmdldCA9IG1hdGNoZWQuZWxlbTtcblxuXHRcdFx0aiA9IDA7XG5cdFx0XHR3aGlsZSAoICggaGFuZGxlT2JqID0gbWF0Y2hlZC5oYW5kbGVyc1sgaisrIF0gKSAmJlxuXHRcdFx0XHQhZXZlbnQuaXNJbW1lZGlhdGVQcm9wYWdhdGlvblN0b3BwZWQoKSApIHtcblxuXHRcdFx0XHQvLyBJZiB0aGUgZXZlbnQgaXMgbmFtZXNwYWNlZCwgdGhlbiBlYWNoIGhhbmRsZXIgaXMgb25seSBpbnZva2VkIGlmIGl0IGlzXG5cdFx0XHRcdC8vIHNwZWNpYWxseSB1bml2ZXJzYWwgb3IgaXRzIG5hbWVzcGFjZXMgYXJlIGEgc3VwZXJzZXQgb2YgdGhlIGV2ZW50J3MuXG5cdFx0XHRcdGlmICggIWV2ZW50LnJuYW1lc3BhY2UgfHwgaGFuZGxlT2JqLm5hbWVzcGFjZSA9PT0gZmFsc2UgfHxcblx0XHRcdFx0XHRldmVudC5ybmFtZXNwYWNlLnRlc3QoIGhhbmRsZU9iai5uYW1lc3BhY2UgKSApIHtcblxuXHRcdFx0XHRcdGV2ZW50LmhhbmRsZU9iaiA9IGhhbmRsZU9iajtcblx0XHRcdFx0XHRldmVudC5kYXRhID0gaGFuZGxlT2JqLmRhdGE7XG5cblx0XHRcdFx0XHRyZXQgPSAoICggalF1ZXJ5LmV2ZW50LnNwZWNpYWxbIGhhbmRsZU9iai5vcmlnVHlwZSBdIHx8IHt9ICkuaGFuZGxlIHx8XG5cdFx0XHRcdFx0XHRoYW5kbGVPYmouaGFuZGxlciApLmFwcGx5KCBtYXRjaGVkLmVsZW0sIGFyZ3MgKTtcblxuXHRcdFx0XHRcdGlmICggcmV0ICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdFx0XHRpZiAoICggZXZlbnQucmVzdWx0ID0gcmV0ICkgPT09IGZhbHNlICkge1xuXHRcdFx0XHRcdFx0XHRldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuXHRcdFx0XHRcdFx0XHRldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBDYWxsIHRoZSBwb3N0RGlzcGF0Y2ggaG9vayBmb3IgdGhlIG1hcHBlZCB0eXBlXG5cdFx0aWYgKCBzcGVjaWFsLnBvc3REaXNwYXRjaCApIHtcblx0XHRcdHNwZWNpYWwucG9zdERpc3BhdGNoLmNhbGwoIHRoaXMsIGV2ZW50ICk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGV2ZW50LnJlc3VsdDtcblx0fSxcblxuXHRoYW5kbGVyczogZnVuY3Rpb24oIGV2ZW50LCBoYW5kbGVycyApIHtcblx0XHR2YXIgaSwgaGFuZGxlT2JqLCBzZWwsIG1hdGNoZWRIYW5kbGVycywgbWF0Y2hlZFNlbGVjdG9ycyxcblx0XHRcdGhhbmRsZXJRdWV1ZSA9IFtdLFxuXHRcdFx0ZGVsZWdhdGVDb3VudCA9IGhhbmRsZXJzLmRlbGVnYXRlQ291bnQsXG5cdFx0XHRjdXIgPSBldmVudC50YXJnZXQ7XG5cblx0XHQvLyBGaW5kIGRlbGVnYXRlIGhhbmRsZXJzXG5cdFx0aWYgKCBkZWxlZ2F0ZUNvdW50ICYmXG5cblx0XHRcdC8vIFN1cHBvcnQ6IElFIDw9OVxuXHRcdFx0Ly8gQmxhY2staG9sZSBTVkcgPHVzZT4gaW5zdGFuY2UgdHJlZXMgKHRyYWMtMTMxODApXG5cdFx0XHRjdXIubm9kZVR5cGUgJiZcblxuXHRcdFx0Ly8gU3VwcG9ydDogRmlyZWZveCA8PTQyXG5cdFx0XHQvLyBTdXBwcmVzcyBzcGVjLXZpb2xhdGluZyBjbGlja3MgaW5kaWNhdGluZyBhIG5vbi1wcmltYXJ5IHBvaW50ZXIgYnV0dG9uICh0cmFjLTM4NjEpXG5cdFx0XHQvLyBodHRwczovL3d3dy53My5vcmcvVFIvRE9NLUxldmVsLTMtRXZlbnRzLyNldmVudC10eXBlLWNsaWNrXG5cdFx0XHQvLyBTdXBwb3J0OiBJRSAxMSBvbmx5XG5cdFx0XHQvLyAuLi5idXQgbm90IGFycm93IGtleSBcImNsaWNrc1wiIG9mIHJhZGlvIGlucHV0cywgd2hpY2ggY2FuIGhhdmUgYGJ1dHRvbmAgLTEgKGdoLTIzNDMpXG5cdFx0XHQhKCBldmVudC50eXBlID09PSBcImNsaWNrXCIgJiYgZXZlbnQuYnV0dG9uID49IDEgKSApIHtcblxuXHRcdFx0Zm9yICggOyBjdXIgIT09IHRoaXM7IGN1ciA9IGN1ci5wYXJlbnROb2RlIHx8IHRoaXMgKSB7XG5cblx0XHRcdFx0Ly8gRG9uJ3QgY2hlY2sgbm9uLWVsZW1lbnRzICgjMTMyMDgpXG5cdFx0XHRcdC8vIERvbid0IHByb2Nlc3MgY2xpY2tzIG9uIGRpc2FibGVkIGVsZW1lbnRzICgjNjkxMSwgIzgxNjUsICMxMTM4MiwgIzExNzY0KVxuXHRcdFx0XHRpZiAoIGN1ci5ub2RlVHlwZSA9PT0gMSAmJiAhKCBldmVudC50eXBlID09PSBcImNsaWNrXCIgJiYgY3VyLmRpc2FibGVkID09PSB0cnVlICkgKSB7XG5cdFx0XHRcdFx0bWF0Y2hlZEhhbmRsZXJzID0gW107XG5cdFx0XHRcdFx0bWF0Y2hlZFNlbGVjdG9ycyA9IHt9O1xuXHRcdFx0XHRcdGZvciAoIGkgPSAwOyBpIDwgZGVsZWdhdGVDb3VudDsgaSsrICkge1xuXHRcdFx0XHRcdFx0aGFuZGxlT2JqID0gaGFuZGxlcnNbIGkgXTtcblxuXHRcdFx0XHRcdFx0Ly8gRG9uJ3QgY29uZmxpY3Qgd2l0aCBPYmplY3QucHJvdG90eXBlIHByb3BlcnRpZXMgKCMxMzIwMylcblx0XHRcdFx0XHRcdHNlbCA9IGhhbmRsZU9iai5zZWxlY3RvciArIFwiIFwiO1xuXG5cdFx0XHRcdFx0XHRpZiAoIG1hdGNoZWRTZWxlY3RvcnNbIHNlbCBdID09PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdFx0XHRcdG1hdGNoZWRTZWxlY3RvcnNbIHNlbCBdID0gaGFuZGxlT2JqLm5lZWRzQ29udGV4dCA/XG5cdFx0XHRcdFx0XHRcdFx0alF1ZXJ5KCBzZWwsIHRoaXMgKS5pbmRleCggY3VyICkgPiAtMSA6XG5cdFx0XHRcdFx0XHRcdFx0alF1ZXJ5LmZpbmQoIHNlbCwgdGhpcywgbnVsbCwgWyBjdXIgXSApLmxlbmd0aDtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdGlmICggbWF0Y2hlZFNlbGVjdG9yc1sgc2VsIF0gKSB7XG5cdFx0XHRcdFx0XHRcdG1hdGNoZWRIYW5kbGVycy5wdXNoKCBoYW5kbGVPYmogKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0aWYgKCBtYXRjaGVkSGFuZGxlcnMubGVuZ3RoICkge1xuXHRcdFx0XHRcdFx0aGFuZGxlclF1ZXVlLnB1c2goIHsgZWxlbTogY3VyLCBoYW5kbGVyczogbWF0Y2hlZEhhbmRsZXJzIH0gKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBBZGQgdGhlIHJlbWFpbmluZyAoZGlyZWN0bHktYm91bmQpIGhhbmRsZXJzXG5cdFx0Y3VyID0gdGhpcztcblx0XHRpZiAoIGRlbGVnYXRlQ291bnQgPCBoYW5kbGVycy5sZW5ndGggKSB7XG5cdFx0XHRoYW5kbGVyUXVldWUucHVzaCggeyBlbGVtOiBjdXIsIGhhbmRsZXJzOiBoYW5kbGVycy5zbGljZSggZGVsZWdhdGVDb3VudCApIH0gKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gaGFuZGxlclF1ZXVlO1xuXHR9LFxuXG5cdGFkZFByb3A6IGZ1bmN0aW9uKCBuYW1lLCBob29rICkge1xuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eSggalF1ZXJ5LkV2ZW50LnByb3RvdHlwZSwgbmFtZSwge1xuXHRcdFx0ZW51bWVyYWJsZTogdHJ1ZSxcblx0XHRcdGNvbmZpZ3VyYWJsZTogdHJ1ZSxcblxuXHRcdFx0Z2V0OiBpc0Z1bmN0aW9uKCBob29rICkgP1xuXHRcdFx0XHRmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRpZiAoIHRoaXMub3JpZ2luYWxFdmVudCApIHtcblx0XHRcdFx0XHRcdFx0cmV0dXJuIGhvb2soIHRoaXMub3JpZ2luYWxFdmVudCApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSA6XG5cdFx0XHRcdGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdGlmICggdGhpcy5vcmlnaW5hbEV2ZW50ICkge1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4gdGhpcy5vcmlnaW5hbEV2ZW50WyBuYW1lIF07XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9LFxuXG5cdFx0XHRzZXQ6IGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KCB0aGlzLCBuYW1lLCB7XG5cdFx0XHRcdFx0ZW51bWVyYWJsZTogdHJ1ZSxcblx0XHRcdFx0XHRjb25maWd1cmFibGU6IHRydWUsXG5cdFx0XHRcdFx0d3JpdGFibGU6IHRydWUsXG5cdFx0XHRcdFx0dmFsdWU6IHZhbHVlXG5cdFx0XHRcdH0gKTtcblx0XHRcdH1cblx0XHR9ICk7XG5cdH0sXG5cblx0Zml4OiBmdW5jdGlvbiggb3JpZ2luYWxFdmVudCApIHtcblx0XHRyZXR1cm4gb3JpZ2luYWxFdmVudFsgalF1ZXJ5LmV4cGFuZG8gXSA/XG5cdFx0XHRvcmlnaW5hbEV2ZW50IDpcblx0XHRcdG5ldyBqUXVlcnkuRXZlbnQoIG9yaWdpbmFsRXZlbnQgKTtcblx0fSxcblxuXHRzcGVjaWFsOiB7XG5cdFx0bG9hZDoge1xuXG5cdFx0XHQvLyBQcmV2ZW50IHRyaWdnZXJlZCBpbWFnZS5sb2FkIGV2ZW50cyBmcm9tIGJ1YmJsaW5nIHRvIHdpbmRvdy5sb2FkXG5cdFx0XHRub0J1YmJsZTogdHJ1ZVxuXHRcdH0sXG5cdFx0Y2xpY2s6IHtcblxuXHRcdFx0Ly8gVXRpbGl6ZSBuYXRpdmUgZXZlbnQgdG8gZW5zdXJlIGNvcnJlY3Qgc3RhdGUgZm9yIGNoZWNrYWJsZSBpbnB1dHNcblx0XHRcdHNldHVwOiBmdW5jdGlvbiggZGF0YSApIHtcblxuXHRcdFx0XHQvLyBGb3IgbXV0dWFsIGNvbXByZXNzaWJpbGl0eSB3aXRoIF9kZWZhdWx0LCByZXBsYWNlIGB0aGlzYCBhY2Nlc3Mgd2l0aCBhIGxvY2FsIHZhci5cblx0XHRcdFx0Ly8gYHx8IGRhdGFgIGlzIGRlYWQgY29kZSBtZWFudCBvbmx5IHRvIHByZXNlcnZlIHRoZSB2YXJpYWJsZSB0aHJvdWdoIG1pbmlmaWNhdGlvbi5cblx0XHRcdFx0dmFyIGVsID0gdGhpcyB8fCBkYXRhO1xuXG5cdFx0XHRcdC8vIENsYWltIHRoZSBmaXJzdCBoYW5kbGVyXG5cdFx0XHRcdGlmICggcmNoZWNrYWJsZVR5cGUudGVzdCggZWwudHlwZSApICYmXG5cdFx0XHRcdFx0ZWwuY2xpY2sgJiYgbm9kZU5hbWUoIGVsLCBcImlucHV0XCIgKSApIHtcblxuXHRcdFx0XHRcdC8vIGRhdGFQcml2LnNldCggZWwsIFwiY2xpY2tcIiwgLi4uIClcblx0XHRcdFx0XHRsZXZlcmFnZU5hdGl2ZSggZWwsIFwiY2xpY2tcIiwgcmV0dXJuVHJ1ZSApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gUmV0dXJuIGZhbHNlIHRvIGFsbG93IG5vcm1hbCBwcm9jZXNzaW5nIGluIHRoZSBjYWxsZXJcblx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0fSxcblx0XHRcdHRyaWdnZXI6IGZ1bmN0aW9uKCBkYXRhICkge1xuXG5cdFx0XHRcdC8vIEZvciBtdXR1YWwgY29tcHJlc3NpYmlsaXR5IHdpdGggX2RlZmF1bHQsIHJlcGxhY2UgYHRoaXNgIGFjY2VzcyB3aXRoIGEgbG9jYWwgdmFyLlxuXHRcdFx0XHQvLyBgfHwgZGF0YWAgaXMgZGVhZCBjb2RlIG1lYW50IG9ubHkgdG8gcHJlc2VydmUgdGhlIHZhcmlhYmxlIHRocm91Z2ggbWluaWZpY2F0aW9uLlxuXHRcdFx0XHR2YXIgZWwgPSB0aGlzIHx8IGRhdGE7XG5cblx0XHRcdFx0Ly8gRm9yY2Ugc2V0dXAgYmVmb3JlIHRyaWdnZXJpbmcgYSBjbGlja1xuXHRcdFx0XHRpZiAoIHJjaGVja2FibGVUeXBlLnRlc3QoIGVsLnR5cGUgKSAmJlxuXHRcdFx0XHRcdGVsLmNsaWNrICYmIG5vZGVOYW1lKCBlbCwgXCJpbnB1dFwiICkgKSB7XG5cblx0XHRcdFx0XHRsZXZlcmFnZU5hdGl2ZSggZWwsIFwiY2xpY2tcIiApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gUmV0dXJuIG5vbi1mYWxzZSB0byBhbGxvdyBub3JtYWwgZXZlbnQtcGF0aCBwcm9wYWdhdGlvblxuXHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdH0sXG5cblx0XHRcdC8vIEZvciBjcm9zcy1icm93c2VyIGNvbnNpc3RlbmN5LCBzdXBwcmVzcyBuYXRpdmUgLmNsaWNrKCkgb24gbGlua3Ncblx0XHRcdC8vIEFsc28gcHJldmVudCBpdCBpZiB3ZSdyZSBjdXJyZW50bHkgaW5zaWRlIGEgbGV2ZXJhZ2VkIG5hdGl2ZS1ldmVudCBzdGFja1xuXHRcdFx0X2RlZmF1bHQ6IGZ1bmN0aW9uKCBldmVudCApIHtcblx0XHRcdFx0dmFyIHRhcmdldCA9IGV2ZW50LnRhcmdldDtcblx0XHRcdFx0cmV0dXJuIHJjaGVja2FibGVUeXBlLnRlc3QoIHRhcmdldC50eXBlICkgJiZcblx0XHRcdFx0XHR0YXJnZXQuY2xpY2sgJiYgbm9kZU5hbWUoIHRhcmdldCwgXCJpbnB1dFwiICkgJiZcblx0XHRcdFx0XHRkYXRhUHJpdi5nZXQoIHRhcmdldCwgXCJjbGlja1wiICkgfHxcblx0XHRcdFx0XHRub2RlTmFtZSggdGFyZ2V0LCBcImFcIiApO1xuXHRcdFx0fVxuXHRcdH0sXG5cblx0XHRiZWZvcmV1bmxvYWQ6IHtcblx0XHRcdHBvc3REaXNwYXRjaDogZnVuY3Rpb24oIGV2ZW50ICkge1xuXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IEZpcmVmb3ggMjArXG5cdFx0XHRcdC8vIEZpcmVmb3ggZG9lc24ndCBhbGVydCBpZiB0aGUgcmV0dXJuVmFsdWUgZmllbGQgaXMgbm90IHNldC5cblx0XHRcdFx0aWYgKCBldmVudC5yZXN1bHQgIT09IHVuZGVmaW5lZCAmJiBldmVudC5vcmlnaW5hbEV2ZW50ICkge1xuXHRcdFx0XHRcdGV2ZW50Lm9yaWdpbmFsRXZlbnQucmV0dXJuVmFsdWUgPSBldmVudC5yZXN1bHQ7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cbn07XG5cbi8vIEVuc3VyZSB0aGUgcHJlc2VuY2Ugb2YgYW4gZXZlbnQgbGlzdGVuZXIgdGhhdCBoYW5kbGVzIG1hbnVhbGx5LXRyaWdnZXJlZFxuLy8gc3ludGhldGljIGV2ZW50cyBieSBpbnRlcnJ1cHRpbmcgcHJvZ3Jlc3MgdW50aWwgcmVpbnZva2VkIGluIHJlc3BvbnNlIHRvXG4vLyAqbmF0aXZlKiBldmVudHMgdGhhdCBpdCBmaXJlcyBkaXJlY3RseSwgZW5zdXJpbmcgdGhhdCBzdGF0ZSBjaGFuZ2VzIGhhdmVcbi8vIGFscmVhZHkgb2NjdXJyZWQgYmVmb3JlIG90aGVyIGxpc3RlbmVycyBhcmUgaW52b2tlZC5cbmZ1bmN0aW9uIGxldmVyYWdlTmF0aXZlKCBlbCwgdHlwZSwgZXhwZWN0U3luYyApIHtcblxuXHQvLyBNaXNzaW5nIGV4cGVjdFN5bmMgaW5kaWNhdGVzIGEgdHJpZ2dlciBjYWxsLCB3aGljaCBtdXN0IGZvcmNlIHNldHVwIHRocm91Z2ggalF1ZXJ5LmV2ZW50LmFkZFxuXHRpZiAoICFleHBlY3RTeW5jICkge1xuXHRcdGlmICggZGF0YVByaXYuZ2V0KCBlbCwgdHlwZSApID09PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRqUXVlcnkuZXZlbnQuYWRkKCBlbCwgdHlwZSwgcmV0dXJuVHJ1ZSApO1xuXHRcdH1cblx0XHRyZXR1cm47XG5cdH1cblxuXHQvLyBSZWdpc3RlciB0aGUgY29udHJvbGxlciBhcyBhIHNwZWNpYWwgdW5pdmVyc2FsIGhhbmRsZXIgZm9yIGFsbCBldmVudCBuYW1lc3BhY2VzXG5cdGRhdGFQcml2LnNldCggZWwsIHR5cGUsIGZhbHNlICk7XG5cdGpRdWVyeS5ldmVudC5hZGQoIGVsLCB0eXBlLCB7XG5cdFx0bmFtZXNwYWNlOiBmYWxzZSxcblx0XHRoYW5kbGVyOiBmdW5jdGlvbiggZXZlbnQgKSB7XG5cdFx0XHR2YXIgbm90QXN5bmMsIHJlc3VsdCxcblx0XHRcdFx0c2F2ZWQgPSBkYXRhUHJpdi5nZXQoIHRoaXMsIHR5cGUgKTtcblxuXHRcdFx0aWYgKCAoIGV2ZW50LmlzVHJpZ2dlciAmIDEgKSAmJiB0aGlzWyB0eXBlIF0gKSB7XG5cblx0XHRcdFx0Ly8gSW50ZXJydXB0IHByb2Nlc3Npbmcgb2YgdGhlIG91dGVyIHN5bnRoZXRpYyAudHJpZ2dlcigpZWQgZXZlbnRcblx0XHRcdFx0Ly8gU2F2ZWQgZGF0YSBzaG91bGQgYmUgZmFsc2UgaW4gc3VjaCBjYXNlcywgYnV0IG1pZ2h0IGJlIGEgbGVmdG92ZXIgY2FwdHVyZSBvYmplY3Rcblx0XHRcdFx0Ly8gZnJvbSBhbiBhc3luYyBuYXRpdmUgaGFuZGxlciAoZ2gtNDM1MClcblx0XHRcdFx0aWYgKCAhc2F2ZWQubGVuZ3RoICkge1xuXG5cdFx0XHRcdFx0Ly8gU3RvcmUgYXJndW1lbnRzIGZvciB1c2Ugd2hlbiBoYW5kbGluZyB0aGUgaW5uZXIgbmF0aXZlIGV2ZW50XG5cdFx0XHRcdFx0Ly8gVGhlcmUgd2lsbCBhbHdheXMgYmUgYXQgbGVhc3Qgb25lIGFyZ3VtZW50IChhbiBldmVudCBvYmplY3QpLCBzbyB0aGlzIGFycmF5XG5cdFx0XHRcdFx0Ly8gd2lsbCBub3QgYmUgY29uZnVzZWQgd2l0aCBhIGxlZnRvdmVyIGNhcHR1cmUgb2JqZWN0LlxuXHRcdFx0XHRcdHNhdmVkID0gc2xpY2UuY2FsbCggYXJndW1lbnRzICk7XG5cdFx0XHRcdFx0ZGF0YVByaXYuc2V0KCB0aGlzLCB0eXBlLCBzYXZlZCApO1xuXG5cdFx0XHRcdFx0Ly8gVHJpZ2dlciB0aGUgbmF0aXZlIGV2ZW50IGFuZCBjYXB0dXJlIGl0cyByZXN1bHRcblx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA8PTkgLSAxMStcblx0XHRcdFx0XHQvLyBmb2N1cygpIGFuZCBibHVyKCkgYXJlIGFzeW5jaHJvbm91c1xuXHRcdFx0XHRcdG5vdEFzeW5jID0gZXhwZWN0U3luYyggdGhpcywgdHlwZSApO1xuXHRcdFx0XHRcdHRoaXNbIHR5cGUgXSgpO1xuXHRcdFx0XHRcdHJlc3VsdCA9IGRhdGFQcml2LmdldCggdGhpcywgdHlwZSApO1xuXHRcdFx0XHRcdGlmICggc2F2ZWQgIT09IHJlc3VsdCB8fCBub3RBc3luYyApIHtcblx0XHRcdFx0XHRcdGRhdGFQcml2LnNldCggdGhpcywgdHlwZSwgZmFsc2UgKTtcblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0cmVzdWx0ID0ge307XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGlmICggc2F2ZWQgIT09IHJlc3VsdCApIHtcblxuXHRcdFx0XHRcdFx0Ly8gQ2FuY2VsIHRoZSBvdXRlciBzeW50aGV0aWMgZXZlbnRcblx0XHRcdFx0XHRcdGV2ZW50LnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbigpO1xuXHRcdFx0XHRcdFx0ZXZlbnQucHJldmVudERlZmF1bHQoKTtcblx0XHRcdFx0XHRcdHJldHVybiByZXN1bHQudmFsdWU7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIElmIHRoaXMgaXMgYW4gaW5uZXIgc3ludGhldGljIGV2ZW50IGZvciBhbiBldmVudCB3aXRoIGEgYnViYmxpbmcgc3Vycm9nYXRlXG5cdFx0XHRcdC8vIChmb2N1cyBvciBibHVyKSwgYXNzdW1lIHRoYXQgdGhlIHN1cnJvZ2F0ZSBhbHJlYWR5IHByb3BhZ2F0ZWQgZnJvbSB0cmlnZ2VyaW5nIHRoZVxuXHRcdFx0XHQvLyBuYXRpdmUgZXZlbnQgYW5kIHByZXZlbnQgdGhhdCBmcm9tIGhhcHBlbmluZyBhZ2FpbiBoZXJlLlxuXHRcdFx0XHQvLyBUaGlzIHRlY2huaWNhbGx5IGdldHMgdGhlIG9yZGVyaW5nIHdyb25nIHcuci50LiB0byBgLnRyaWdnZXIoKWAgKGluIHdoaWNoIHRoZVxuXHRcdFx0XHQvLyBidWJibGluZyBzdXJyb2dhdGUgcHJvcGFnYXRlcyAqYWZ0ZXIqIHRoZSBub24tYnViYmxpbmcgYmFzZSksIGJ1dCB0aGF0IHNlZW1zXG5cdFx0XHRcdC8vIGxlc3MgYmFkIHRoYW4gZHVwbGljYXRpb24uXG5cdFx0XHRcdH0gZWxzZSBpZiAoICggalF1ZXJ5LmV2ZW50LnNwZWNpYWxbIHR5cGUgXSB8fCB7fSApLmRlbGVnYXRlVHlwZSApIHtcblx0XHRcdFx0XHRldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcblx0XHRcdFx0fVxuXG5cdFx0XHQvLyBJZiB0aGlzIGlzIGEgbmF0aXZlIGV2ZW50IHRyaWdnZXJlZCBhYm92ZSwgZXZlcnl0aGluZyBpcyBub3cgaW4gb3JkZXJcblx0XHRcdC8vIEZpcmUgYW4gaW5uZXIgc3ludGhldGljIGV2ZW50IHdpdGggdGhlIG9yaWdpbmFsIGFyZ3VtZW50c1xuXHRcdFx0fSBlbHNlIGlmICggc2F2ZWQubGVuZ3RoICkge1xuXG5cdFx0XHRcdC8vIC4uLmFuZCBjYXB0dXJlIHRoZSByZXN1bHRcblx0XHRcdFx0ZGF0YVByaXYuc2V0KCB0aGlzLCB0eXBlLCB7XG5cdFx0XHRcdFx0dmFsdWU6IGpRdWVyeS5ldmVudC50cmlnZ2VyKFxuXG5cdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA8PTkgLSAxMStcblx0XHRcdFx0XHRcdC8vIEV4dGVuZCB3aXRoIHRoZSBwcm90b3R5cGUgdG8gcmVzZXQgdGhlIGFib3ZlIHN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbigpXG5cdFx0XHRcdFx0XHRqUXVlcnkuZXh0ZW5kKCBzYXZlZFsgMCBdLCBqUXVlcnkuRXZlbnQucHJvdG90eXBlICksXG5cdFx0XHRcdFx0XHRzYXZlZC5zbGljZSggMSApLFxuXHRcdFx0XHRcdFx0dGhpc1xuXHRcdFx0XHRcdClcblx0XHRcdFx0fSApO1xuXG5cdFx0XHRcdC8vIEFib3J0IGhhbmRsaW5nIG9mIHRoZSBuYXRpdmUgZXZlbnRcblx0XHRcdFx0ZXZlbnQuc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uKCk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9ICk7XG59XG5cbmpRdWVyeS5yZW1vdmVFdmVudCA9IGZ1bmN0aW9uKCBlbGVtLCB0eXBlLCBoYW5kbGUgKSB7XG5cblx0Ly8gVGhpcyBcImlmXCIgaXMgbmVlZGVkIGZvciBwbGFpbiBvYmplY3RzXG5cdGlmICggZWxlbS5yZW1vdmVFdmVudExpc3RlbmVyICkge1xuXHRcdGVsZW0ucmVtb3ZlRXZlbnRMaXN0ZW5lciggdHlwZSwgaGFuZGxlICk7XG5cdH1cbn07XG5cbmpRdWVyeS5FdmVudCA9IGZ1bmN0aW9uKCBzcmMsIHByb3BzICkge1xuXG5cdC8vIEFsbG93IGluc3RhbnRpYXRpb24gd2l0aG91dCB0aGUgJ25ldycga2V5d29yZFxuXHRpZiAoICEoIHRoaXMgaW5zdGFuY2VvZiBqUXVlcnkuRXZlbnQgKSApIHtcblx0XHRyZXR1cm4gbmV3IGpRdWVyeS5FdmVudCggc3JjLCBwcm9wcyApO1xuXHR9XG5cblx0Ly8gRXZlbnQgb2JqZWN0XG5cdGlmICggc3JjICYmIHNyYy50eXBlICkge1xuXHRcdHRoaXMub3JpZ2luYWxFdmVudCA9IHNyYztcblx0XHR0aGlzLnR5cGUgPSBzcmMudHlwZTtcblxuXHRcdC8vIEV2ZW50cyBidWJibGluZyB1cCB0aGUgZG9jdW1lbnQgbWF5IGhhdmUgYmVlbiBtYXJrZWQgYXMgcHJldmVudGVkXG5cdFx0Ly8gYnkgYSBoYW5kbGVyIGxvd2VyIGRvd24gdGhlIHRyZWU7IHJlZmxlY3QgdGhlIGNvcnJlY3QgdmFsdWUuXG5cdFx0dGhpcy5pc0RlZmF1bHRQcmV2ZW50ZWQgPSBzcmMuZGVmYXVsdFByZXZlbnRlZCB8fFxuXHRcdFx0XHRzcmMuZGVmYXVsdFByZXZlbnRlZCA9PT0gdW5kZWZpbmVkICYmXG5cblx0XHRcdFx0Ly8gU3VwcG9ydDogQW5kcm9pZCA8PTIuMyBvbmx5XG5cdFx0XHRcdHNyYy5yZXR1cm5WYWx1ZSA9PT0gZmFsc2UgP1xuXHRcdFx0cmV0dXJuVHJ1ZSA6XG5cdFx0XHRyZXR1cm5GYWxzZTtcblxuXHRcdC8vIENyZWF0ZSB0YXJnZXQgcHJvcGVydGllc1xuXHRcdC8vIFN1cHBvcnQ6IFNhZmFyaSA8PTYgLSA3IG9ubHlcblx0XHQvLyBUYXJnZXQgc2hvdWxkIG5vdCBiZSBhIHRleHQgbm9kZSAoIzUwNCwgIzEzMTQzKVxuXHRcdHRoaXMudGFyZ2V0ID0gKCBzcmMudGFyZ2V0ICYmIHNyYy50YXJnZXQubm9kZVR5cGUgPT09IDMgKSA/XG5cdFx0XHRzcmMudGFyZ2V0LnBhcmVudE5vZGUgOlxuXHRcdFx0c3JjLnRhcmdldDtcblxuXHRcdHRoaXMuY3VycmVudFRhcmdldCA9IHNyYy5jdXJyZW50VGFyZ2V0O1xuXHRcdHRoaXMucmVsYXRlZFRhcmdldCA9IHNyYy5yZWxhdGVkVGFyZ2V0O1xuXG5cdC8vIEV2ZW50IHR5cGVcblx0fSBlbHNlIHtcblx0XHR0aGlzLnR5cGUgPSBzcmM7XG5cdH1cblxuXHQvLyBQdXQgZXhwbGljaXRseSBwcm92aWRlZCBwcm9wZXJ0aWVzIG9udG8gdGhlIGV2ZW50IG9iamVjdFxuXHRpZiAoIHByb3BzICkge1xuXHRcdGpRdWVyeS5leHRlbmQoIHRoaXMsIHByb3BzICk7XG5cdH1cblxuXHQvLyBDcmVhdGUgYSB0aW1lc3RhbXAgaWYgaW5jb21pbmcgZXZlbnQgZG9lc24ndCBoYXZlIG9uZVxuXHR0aGlzLnRpbWVTdGFtcCA9IHNyYyAmJiBzcmMudGltZVN0YW1wIHx8IERhdGUubm93KCk7XG5cblx0Ly8gTWFyayBpdCBhcyBmaXhlZFxuXHR0aGlzWyBqUXVlcnkuZXhwYW5kbyBdID0gdHJ1ZTtcbn07XG5cbi8vIGpRdWVyeS5FdmVudCBpcyBiYXNlZCBvbiBET00zIEV2ZW50cyBhcyBzcGVjaWZpZWQgYnkgdGhlIEVDTUFTY3JpcHQgTGFuZ3VhZ2UgQmluZGluZ1xuLy8gaHR0cHM6Ly93d3cudzMub3JnL1RSLzIwMDMvV0QtRE9NLUxldmVsLTMtRXZlbnRzLTIwMDMwMzMxL2VjbWEtc2NyaXB0LWJpbmRpbmcuaHRtbFxualF1ZXJ5LkV2ZW50LnByb3RvdHlwZSA9IHtcblx0Y29uc3RydWN0b3I6IGpRdWVyeS5FdmVudCxcblx0aXNEZWZhdWx0UHJldmVudGVkOiByZXR1cm5GYWxzZSxcblx0aXNQcm9wYWdhdGlvblN0b3BwZWQ6IHJldHVybkZhbHNlLFxuXHRpc0ltbWVkaWF0ZVByb3BhZ2F0aW9uU3RvcHBlZDogcmV0dXJuRmFsc2UsXG5cdGlzU2ltdWxhdGVkOiBmYWxzZSxcblxuXHRwcmV2ZW50RGVmYXVsdDogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIGUgPSB0aGlzLm9yaWdpbmFsRXZlbnQ7XG5cblx0XHR0aGlzLmlzRGVmYXVsdFByZXZlbnRlZCA9IHJldHVyblRydWU7XG5cblx0XHRpZiAoIGUgJiYgIXRoaXMuaXNTaW11bGF0ZWQgKSB7XG5cdFx0XHRlLnByZXZlbnREZWZhdWx0KCk7XG5cdFx0fVxuXHR9LFxuXHRzdG9wUHJvcGFnYXRpb246IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBlID0gdGhpcy5vcmlnaW5hbEV2ZW50O1xuXG5cdFx0dGhpcy5pc1Byb3BhZ2F0aW9uU3RvcHBlZCA9IHJldHVyblRydWU7XG5cblx0XHRpZiAoIGUgJiYgIXRoaXMuaXNTaW11bGF0ZWQgKSB7XG5cdFx0XHRlLnN0b3BQcm9wYWdhdGlvbigpO1xuXHRcdH1cblx0fSxcblx0c3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uOiBmdW5jdGlvbigpIHtcblx0XHR2YXIgZSA9IHRoaXMub3JpZ2luYWxFdmVudDtcblxuXHRcdHRoaXMuaXNJbW1lZGlhdGVQcm9wYWdhdGlvblN0b3BwZWQgPSByZXR1cm5UcnVlO1xuXG5cdFx0aWYgKCBlICYmICF0aGlzLmlzU2ltdWxhdGVkICkge1xuXHRcdFx0ZS5zdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24oKTtcblx0XHR9XG5cblx0XHR0aGlzLnN0b3BQcm9wYWdhdGlvbigpO1xuXHR9XG59O1xuXG4vLyBJbmNsdWRlcyBhbGwgY29tbW9uIGV2ZW50IHByb3BzIGluY2x1ZGluZyBLZXlFdmVudCBhbmQgTW91c2VFdmVudCBzcGVjaWZpYyBwcm9wc1xualF1ZXJ5LmVhY2goIHtcblx0YWx0S2V5OiB0cnVlLFxuXHRidWJibGVzOiB0cnVlLFxuXHRjYW5jZWxhYmxlOiB0cnVlLFxuXHRjaGFuZ2VkVG91Y2hlczogdHJ1ZSxcblx0Y3RybEtleTogdHJ1ZSxcblx0ZGV0YWlsOiB0cnVlLFxuXHRldmVudFBoYXNlOiB0cnVlLFxuXHRtZXRhS2V5OiB0cnVlLFxuXHRwYWdlWDogdHJ1ZSxcblx0cGFnZVk6IHRydWUsXG5cdHNoaWZ0S2V5OiB0cnVlLFxuXHR2aWV3OiB0cnVlLFxuXHRcImNoYXJcIjogdHJ1ZSxcblx0Y29kZTogdHJ1ZSxcblx0Y2hhckNvZGU6IHRydWUsXG5cdGtleTogdHJ1ZSxcblx0a2V5Q29kZTogdHJ1ZSxcblx0YnV0dG9uOiB0cnVlLFxuXHRidXR0b25zOiB0cnVlLFxuXHRjbGllbnRYOiB0cnVlLFxuXHRjbGllbnRZOiB0cnVlLFxuXHRvZmZzZXRYOiB0cnVlLFxuXHRvZmZzZXRZOiB0cnVlLFxuXHRwb2ludGVySWQ6IHRydWUsXG5cdHBvaW50ZXJUeXBlOiB0cnVlLFxuXHRzY3JlZW5YOiB0cnVlLFxuXHRzY3JlZW5ZOiB0cnVlLFxuXHR0YXJnZXRUb3VjaGVzOiB0cnVlLFxuXHR0b0VsZW1lbnQ6IHRydWUsXG5cdHRvdWNoZXM6IHRydWUsXG5cblx0d2hpY2g6IGZ1bmN0aW9uKCBldmVudCApIHtcblx0XHR2YXIgYnV0dG9uID0gZXZlbnQuYnV0dG9uO1xuXG5cdFx0Ly8gQWRkIHdoaWNoIGZvciBrZXkgZXZlbnRzXG5cdFx0aWYgKCBldmVudC53aGljaCA9PSBudWxsICYmIHJrZXlFdmVudC50ZXN0KCBldmVudC50eXBlICkgKSB7XG5cdFx0XHRyZXR1cm4gZXZlbnQuY2hhckNvZGUgIT0gbnVsbCA/IGV2ZW50LmNoYXJDb2RlIDogZXZlbnQua2V5Q29kZTtcblx0XHR9XG5cblx0XHQvLyBBZGQgd2hpY2ggZm9yIGNsaWNrOiAxID09PSBsZWZ0OyAyID09PSBtaWRkbGU7IDMgPT09IHJpZ2h0XG5cdFx0aWYgKCAhZXZlbnQud2hpY2ggJiYgYnV0dG9uICE9PSB1bmRlZmluZWQgJiYgcm1vdXNlRXZlbnQudGVzdCggZXZlbnQudHlwZSApICkge1xuXHRcdFx0aWYgKCBidXR0b24gJiAxICkge1xuXHRcdFx0XHRyZXR1cm4gMTtcblx0XHRcdH1cblxuXHRcdFx0aWYgKCBidXR0b24gJiAyICkge1xuXHRcdFx0XHRyZXR1cm4gMztcblx0XHRcdH1cblxuXHRcdFx0aWYgKCBidXR0b24gJiA0ICkge1xuXHRcdFx0XHRyZXR1cm4gMjtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIDA7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGV2ZW50LndoaWNoO1xuXHR9XG59LCBqUXVlcnkuZXZlbnQuYWRkUHJvcCApO1xuXG5qUXVlcnkuZWFjaCggeyBmb2N1czogXCJmb2N1c2luXCIsIGJsdXI6IFwiZm9jdXNvdXRcIiB9LCBmdW5jdGlvbiggdHlwZSwgZGVsZWdhdGVUeXBlICkge1xuXHRqUXVlcnkuZXZlbnQuc3BlY2lhbFsgdHlwZSBdID0ge1xuXG5cdFx0Ly8gVXRpbGl6ZSBuYXRpdmUgZXZlbnQgaWYgcG9zc2libGUgc28gYmx1ci9mb2N1cyBzZXF1ZW5jZSBpcyBjb3JyZWN0XG5cdFx0c2V0dXA6IGZ1bmN0aW9uKCkge1xuXG5cdFx0XHQvLyBDbGFpbSB0aGUgZmlyc3QgaGFuZGxlclxuXHRcdFx0Ly8gZGF0YVByaXYuc2V0KCB0aGlzLCBcImZvY3VzXCIsIC4uLiApXG5cdFx0XHQvLyBkYXRhUHJpdi5zZXQoIHRoaXMsIFwiYmx1clwiLCAuLi4gKVxuXHRcdFx0bGV2ZXJhZ2VOYXRpdmUoIHRoaXMsIHR5cGUsIGV4cGVjdFN5bmMgKTtcblxuXHRcdFx0Ly8gUmV0dXJuIGZhbHNlIHRvIGFsbG93IG5vcm1hbCBwcm9jZXNzaW5nIGluIHRoZSBjYWxsZXJcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9LFxuXHRcdHRyaWdnZXI6IGZ1bmN0aW9uKCkge1xuXG5cdFx0XHQvLyBGb3JjZSBzZXR1cCBiZWZvcmUgdHJpZ2dlclxuXHRcdFx0bGV2ZXJhZ2VOYXRpdmUoIHRoaXMsIHR5cGUgKTtcblxuXHRcdFx0Ly8gUmV0dXJuIG5vbi1mYWxzZSB0byBhbGxvdyBub3JtYWwgZXZlbnQtcGF0aCBwcm9wYWdhdGlvblxuXHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0fSxcblxuXHRcdGRlbGVnYXRlVHlwZTogZGVsZWdhdGVUeXBlXG5cdH07XG59ICk7XG5cbi8vIENyZWF0ZSBtb3VzZWVudGVyL2xlYXZlIGV2ZW50cyB1c2luZyBtb3VzZW92ZXIvb3V0IGFuZCBldmVudC10aW1lIGNoZWNrc1xuLy8gc28gdGhhdCBldmVudCBkZWxlZ2F0aW9uIHdvcmtzIGluIGpRdWVyeS5cbi8vIERvIHRoZSBzYW1lIGZvciBwb2ludGVyZW50ZXIvcG9pbnRlcmxlYXZlIGFuZCBwb2ludGVyb3Zlci9wb2ludGVyb3V0XG4vL1xuLy8gU3VwcG9ydDogU2FmYXJpIDcgb25seVxuLy8gU2FmYXJpIHNlbmRzIG1vdXNlZW50ZXIgdG9vIG9mdGVuOyBzZWU6XG4vLyBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvY2hyb21pdW0vaXNzdWVzL2RldGFpbD9pZD00NzAyNThcbi8vIGZvciB0aGUgZGVzY3JpcHRpb24gb2YgdGhlIGJ1ZyAoaXQgZXhpc3RlZCBpbiBvbGRlciBDaHJvbWUgdmVyc2lvbnMgYXMgd2VsbCkuXG5qUXVlcnkuZWFjaCgge1xuXHRtb3VzZWVudGVyOiBcIm1vdXNlb3ZlclwiLFxuXHRtb3VzZWxlYXZlOiBcIm1vdXNlb3V0XCIsXG5cdHBvaW50ZXJlbnRlcjogXCJwb2ludGVyb3ZlclwiLFxuXHRwb2ludGVybGVhdmU6IFwicG9pbnRlcm91dFwiXG59LCBmdW5jdGlvbiggb3JpZywgZml4ICkge1xuXHRqUXVlcnkuZXZlbnQuc3BlY2lhbFsgb3JpZyBdID0ge1xuXHRcdGRlbGVnYXRlVHlwZTogZml4LFxuXHRcdGJpbmRUeXBlOiBmaXgsXG5cblx0XHRoYW5kbGU6IGZ1bmN0aW9uKCBldmVudCApIHtcblx0XHRcdHZhciByZXQsXG5cdFx0XHRcdHRhcmdldCA9IHRoaXMsXG5cdFx0XHRcdHJlbGF0ZWQgPSBldmVudC5yZWxhdGVkVGFyZ2V0LFxuXHRcdFx0XHRoYW5kbGVPYmogPSBldmVudC5oYW5kbGVPYmo7XG5cblx0XHRcdC8vIEZvciBtb3VzZWVudGVyL2xlYXZlIGNhbGwgdGhlIGhhbmRsZXIgaWYgcmVsYXRlZCBpcyBvdXRzaWRlIHRoZSB0YXJnZXQuXG5cdFx0XHQvLyBOQjogTm8gcmVsYXRlZFRhcmdldCBpZiB0aGUgbW91c2UgbGVmdC9lbnRlcmVkIHRoZSBicm93c2VyIHdpbmRvd1xuXHRcdFx0aWYgKCAhcmVsYXRlZCB8fCAoIHJlbGF0ZWQgIT09IHRhcmdldCAmJiAhalF1ZXJ5LmNvbnRhaW5zKCB0YXJnZXQsIHJlbGF0ZWQgKSApICkge1xuXHRcdFx0XHRldmVudC50eXBlID0gaGFuZGxlT2JqLm9yaWdUeXBlO1xuXHRcdFx0XHRyZXQgPSBoYW5kbGVPYmouaGFuZGxlci5hcHBseSggdGhpcywgYXJndW1lbnRzICk7XG5cdFx0XHRcdGV2ZW50LnR5cGUgPSBmaXg7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gcmV0O1xuXHRcdH1cblx0fTtcbn0gKTtcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXG5cdG9uOiBmdW5jdGlvbiggdHlwZXMsIHNlbGVjdG9yLCBkYXRhLCBmbiApIHtcblx0XHRyZXR1cm4gb24oIHRoaXMsIHR5cGVzLCBzZWxlY3RvciwgZGF0YSwgZm4gKTtcblx0fSxcblx0b25lOiBmdW5jdGlvbiggdHlwZXMsIHNlbGVjdG9yLCBkYXRhLCBmbiApIHtcblx0XHRyZXR1cm4gb24oIHRoaXMsIHR5cGVzLCBzZWxlY3RvciwgZGF0YSwgZm4sIDEgKTtcblx0fSxcblx0b2ZmOiBmdW5jdGlvbiggdHlwZXMsIHNlbGVjdG9yLCBmbiApIHtcblx0XHR2YXIgaGFuZGxlT2JqLCB0eXBlO1xuXHRcdGlmICggdHlwZXMgJiYgdHlwZXMucHJldmVudERlZmF1bHQgJiYgdHlwZXMuaGFuZGxlT2JqICkge1xuXG5cdFx0XHQvLyAoIGV2ZW50ICkgIGRpc3BhdGNoZWQgalF1ZXJ5LkV2ZW50XG5cdFx0XHRoYW5kbGVPYmogPSB0eXBlcy5oYW5kbGVPYmo7XG5cdFx0XHRqUXVlcnkoIHR5cGVzLmRlbGVnYXRlVGFyZ2V0ICkub2ZmKFxuXHRcdFx0XHRoYW5kbGVPYmoubmFtZXNwYWNlID9cblx0XHRcdFx0XHRoYW5kbGVPYmoub3JpZ1R5cGUgKyBcIi5cIiArIGhhbmRsZU9iai5uYW1lc3BhY2UgOlxuXHRcdFx0XHRcdGhhbmRsZU9iai5vcmlnVHlwZSxcblx0XHRcdFx0aGFuZGxlT2JqLnNlbGVjdG9yLFxuXHRcdFx0XHRoYW5kbGVPYmouaGFuZGxlclxuXHRcdFx0KTtcblx0XHRcdHJldHVybiB0aGlzO1xuXHRcdH1cblx0XHRpZiAoIHR5cGVvZiB0eXBlcyA9PT0gXCJvYmplY3RcIiApIHtcblxuXHRcdFx0Ly8gKCB0eXBlcy1vYmplY3QgWywgc2VsZWN0b3JdIClcblx0XHRcdGZvciAoIHR5cGUgaW4gdHlwZXMgKSB7XG5cdFx0XHRcdHRoaXMub2ZmKCB0eXBlLCBzZWxlY3RvciwgdHlwZXNbIHR5cGUgXSApO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0fVxuXHRcdGlmICggc2VsZWN0b3IgPT09IGZhbHNlIHx8IHR5cGVvZiBzZWxlY3RvciA9PT0gXCJmdW5jdGlvblwiICkge1xuXG5cdFx0XHQvLyAoIHR5cGVzIFssIGZuXSApXG5cdFx0XHRmbiA9IHNlbGVjdG9yO1xuXHRcdFx0c2VsZWN0b3IgPSB1bmRlZmluZWQ7XG5cdFx0fVxuXHRcdGlmICggZm4gPT09IGZhbHNlICkge1xuXHRcdFx0Zm4gPSByZXR1cm5GYWxzZTtcblx0XHR9XG5cdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHRqUXVlcnkuZXZlbnQucmVtb3ZlKCB0aGlzLCB0eXBlcywgZm4sIHNlbGVjdG9yICk7XG5cdFx0fSApO1xuXHR9XG59ICk7XG5cblxudmFyXG5cblx0Ly8gU3VwcG9ydDogSUUgPD0xMCAtIDExLCBFZGdlIDEyIC0gMTMgb25seVxuXHQvLyBJbiBJRS9FZGdlIHVzaW5nIHJlZ2V4IGdyb3VwcyBoZXJlIGNhdXNlcyBzZXZlcmUgc2xvd2Rvd25zLlxuXHQvLyBTZWUgaHR0cHM6Ly9jb25uZWN0Lm1pY3Jvc29mdC5jb20vSUUvZmVlZGJhY2svZGV0YWlscy8xNzM2NTEyL1xuXHRybm9Jbm5lcmh0bWwgPSAvPHNjcmlwdHw8c3R5bGV8PGxpbmsvaSxcblxuXHQvLyBjaGVja2VkPVwiY2hlY2tlZFwiIG9yIGNoZWNrZWRcblx0cmNoZWNrZWQgPSAvY2hlY2tlZFxccyooPzpbXj1dfD1cXHMqLmNoZWNrZWQuKS9pLFxuXHRyY2xlYW5TY3JpcHQgPSAvXlxccyo8ISg/OlxcW0NEQVRBXFxbfC0tKXwoPzpcXF1cXF18LS0pPlxccyokL2c7XG5cbi8vIFByZWZlciBhIHRib2R5IG92ZXIgaXRzIHBhcmVudCB0YWJsZSBmb3IgY29udGFpbmluZyBuZXcgcm93c1xuZnVuY3Rpb24gbWFuaXB1bGF0aW9uVGFyZ2V0KCBlbGVtLCBjb250ZW50ICkge1xuXHRpZiAoIG5vZGVOYW1lKCBlbGVtLCBcInRhYmxlXCIgKSAmJlxuXHRcdG5vZGVOYW1lKCBjb250ZW50Lm5vZGVUeXBlICE9PSAxMSA/IGNvbnRlbnQgOiBjb250ZW50LmZpcnN0Q2hpbGQsIFwidHJcIiApICkge1xuXG5cdFx0cmV0dXJuIGpRdWVyeSggZWxlbSApLmNoaWxkcmVuKCBcInRib2R5XCIgKVsgMCBdIHx8IGVsZW07XG5cdH1cblxuXHRyZXR1cm4gZWxlbTtcbn1cblxuLy8gUmVwbGFjZS9yZXN0b3JlIHRoZSB0eXBlIGF0dHJpYnV0ZSBvZiBzY3JpcHQgZWxlbWVudHMgZm9yIHNhZmUgRE9NIG1hbmlwdWxhdGlvblxuZnVuY3Rpb24gZGlzYWJsZVNjcmlwdCggZWxlbSApIHtcblx0ZWxlbS50eXBlID0gKCBlbGVtLmdldEF0dHJpYnV0ZSggXCJ0eXBlXCIgKSAhPT0gbnVsbCApICsgXCIvXCIgKyBlbGVtLnR5cGU7XG5cdHJldHVybiBlbGVtO1xufVxuZnVuY3Rpb24gcmVzdG9yZVNjcmlwdCggZWxlbSApIHtcblx0aWYgKCAoIGVsZW0udHlwZSB8fCBcIlwiICkuc2xpY2UoIDAsIDUgKSA9PT0gXCJ0cnVlL1wiICkge1xuXHRcdGVsZW0udHlwZSA9IGVsZW0udHlwZS5zbGljZSggNSApO1xuXHR9IGVsc2Uge1xuXHRcdGVsZW0ucmVtb3ZlQXR0cmlidXRlKCBcInR5cGVcIiApO1xuXHR9XG5cblx0cmV0dXJuIGVsZW07XG59XG5cbmZ1bmN0aW9uIGNsb25lQ29weUV2ZW50KCBzcmMsIGRlc3QgKSB7XG5cdHZhciBpLCBsLCB0eXBlLCBwZGF0YU9sZCwgdWRhdGFPbGQsIHVkYXRhQ3VyLCBldmVudHM7XG5cblx0aWYgKCBkZXN0Lm5vZGVUeXBlICE9PSAxICkge1xuXHRcdHJldHVybjtcblx0fVxuXG5cdC8vIDEuIENvcHkgcHJpdmF0ZSBkYXRhOiBldmVudHMsIGhhbmRsZXJzLCBldGMuXG5cdGlmICggZGF0YVByaXYuaGFzRGF0YSggc3JjICkgKSB7XG5cdFx0cGRhdGFPbGQgPSBkYXRhUHJpdi5nZXQoIHNyYyApO1xuXHRcdGV2ZW50cyA9IHBkYXRhT2xkLmV2ZW50cztcblxuXHRcdGlmICggZXZlbnRzICkge1xuXHRcdFx0ZGF0YVByaXYucmVtb3ZlKCBkZXN0LCBcImhhbmRsZSBldmVudHNcIiApO1xuXG5cdFx0XHRmb3IgKCB0eXBlIGluIGV2ZW50cyApIHtcblx0XHRcdFx0Zm9yICggaSA9IDAsIGwgPSBldmVudHNbIHR5cGUgXS5sZW5ndGg7IGkgPCBsOyBpKysgKSB7XG5cdFx0XHRcdFx0alF1ZXJ5LmV2ZW50LmFkZCggZGVzdCwgdHlwZSwgZXZlbnRzWyB0eXBlIF1bIGkgXSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0Ly8gMi4gQ29weSB1c2VyIGRhdGFcblx0aWYgKCBkYXRhVXNlci5oYXNEYXRhKCBzcmMgKSApIHtcblx0XHR1ZGF0YU9sZCA9IGRhdGFVc2VyLmFjY2Vzcyggc3JjICk7XG5cdFx0dWRhdGFDdXIgPSBqUXVlcnkuZXh0ZW5kKCB7fSwgdWRhdGFPbGQgKTtcblxuXHRcdGRhdGFVc2VyLnNldCggZGVzdCwgdWRhdGFDdXIgKTtcblx0fVxufVxuXG4vLyBGaXggSUUgYnVncywgc2VlIHN1cHBvcnQgdGVzdHNcbmZ1bmN0aW9uIGZpeElucHV0KCBzcmMsIGRlc3QgKSB7XG5cdHZhciBub2RlTmFtZSA9IGRlc3Qubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtcblxuXHQvLyBGYWlscyB0byBwZXJzaXN0IHRoZSBjaGVja2VkIHN0YXRlIG9mIGEgY2xvbmVkIGNoZWNrYm94IG9yIHJhZGlvIGJ1dHRvbi5cblx0aWYgKCBub2RlTmFtZSA9PT0gXCJpbnB1dFwiICYmIHJjaGVja2FibGVUeXBlLnRlc3QoIHNyYy50eXBlICkgKSB7XG5cdFx0ZGVzdC5jaGVja2VkID0gc3JjLmNoZWNrZWQ7XG5cblx0Ly8gRmFpbHMgdG8gcmV0dXJuIHRoZSBzZWxlY3RlZCBvcHRpb24gdG8gdGhlIGRlZmF1bHQgc2VsZWN0ZWQgc3RhdGUgd2hlbiBjbG9uaW5nIG9wdGlvbnNcblx0fSBlbHNlIGlmICggbm9kZU5hbWUgPT09IFwiaW5wdXRcIiB8fCBub2RlTmFtZSA9PT0gXCJ0ZXh0YXJlYVwiICkge1xuXHRcdGRlc3QuZGVmYXVsdFZhbHVlID0gc3JjLmRlZmF1bHRWYWx1ZTtcblx0fVxufVxuXG5mdW5jdGlvbiBkb21NYW5pcCggY29sbGVjdGlvbiwgYXJncywgY2FsbGJhY2ssIGlnbm9yZWQgKSB7XG5cblx0Ly8gRmxhdHRlbiBhbnkgbmVzdGVkIGFycmF5c1xuXHRhcmdzID0gZmxhdCggYXJncyApO1xuXG5cdHZhciBmcmFnbWVudCwgZmlyc3QsIHNjcmlwdHMsIGhhc1NjcmlwdHMsIG5vZGUsIGRvYyxcblx0XHRpID0gMCxcblx0XHRsID0gY29sbGVjdGlvbi5sZW5ndGgsXG5cdFx0aU5vQ2xvbmUgPSBsIC0gMSxcblx0XHR2YWx1ZSA9IGFyZ3NbIDAgXSxcblx0XHR2YWx1ZUlzRnVuY3Rpb24gPSBpc0Z1bmN0aW9uKCB2YWx1ZSApO1xuXG5cdC8vIFdlIGNhbid0IGNsb25lTm9kZSBmcmFnbWVudHMgdGhhdCBjb250YWluIGNoZWNrZWQsIGluIFdlYktpdFxuXHRpZiAoIHZhbHVlSXNGdW5jdGlvbiB8fFxuXHRcdFx0KCBsID4gMSAmJiB0eXBlb2YgdmFsdWUgPT09IFwic3RyaW5nXCIgJiZcblx0XHRcdFx0IXN1cHBvcnQuY2hlY2tDbG9uZSAmJiByY2hlY2tlZC50ZXN0KCB2YWx1ZSApICkgKSB7XG5cdFx0cmV0dXJuIGNvbGxlY3Rpb24uZWFjaCggZnVuY3Rpb24oIGluZGV4ICkge1xuXHRcdFx0dmFyIHNlbGYgPSBjb2xsZWN0aW9uLmVxKCBpbmRleCApO1xuXHRcdFx0aWYgKCB2YWx1ZUlzRnVuY3Rpb24gKSB7XG5cdFx0XHRcdGFyZ3NbIDAgXSA9IHZhbHVlLmNhbGwoIHRoaXMsIGluZGV4LCBzZWxmLmh0bWwoKSApO1xuXHRcdFx0fVxuXHRcdFx0ZG9tTWFuaXAoIHNlbGYsIGFyZ3MsIGNhbGxiYWNrLCBpZ25vcmVkICk7XG5cdFx0fSApO1xuXHR9XG5cblx0aWYgKCBsICkge1xuXHRcdGZyYWdtZW50ID0gYnVpbGRGcmFnbWVudCggYXJncywgY29sbGVjdGlvblsgMCBdLm93bmVyRG9jdW1lbnQsIGZhbHNlLCBjb2xsZWN0aW9uLCBpZ25vcmVkICk7XG5cdFx0Zmlyc3QgPSBmcmFnbWVudC5maXJzdENoaWxkO1xuXG5cdFx0aWYgKCBmcmFnbWVudC5jaGlsZE5vZGVzLmxlbmd0aCA9PT0gMSApIHtcblx0XHRcdGZyYWdtZW50ID0gZmlyc3Q7XG5cdFx0fVxuXG5cdFx0Ly8gUmVxdWlyZSBlaXRoZXIgbmV3IGNvbnRlbnQgb3IgYW4gaW50ZXJlc3QgaW4gaWdub3JlZCBlbGVtZW50cyB0byBpbnZva2UgdGhlIGNhbGxiYWNrXG5cdFx0aWYgKCBmaXJzdCB8fCBpZ25vcmVkICkge1xuXHRcdFx0c2NyaXB0cyA9IGpRdWVyeS5tYXAoIGdldEFsbCggZnJhZ21lbnQsIFwic2NyaXB0XCIgKSwgZGlzYWJsZVNjcmlwdCApO1xuXHRcdFx0aGFzU2NyaXB0cyA9IHNjcmlwdHMubGVuZ3RoO1xuXG5cdFx0XHQvLyBVc2UgdGhlIG9yaWdpbmFsIGZyYWdtZW50IGZvciB0aGUgbGFzdCBpdGVtXG5cdFx0XHQvLyBpbnN0ZWFkIG9mIHRoZSBmaXJzdCBiZWNhdXNlIGl0IGNhbiBlbmQgdXBcblx0XHRcdC8vIGJlaW5nIGVtcHRpZWQgaW5jb3JyZWN0bHkgaW4gY2VydGFpbiBzaXR1YXRpb25zICgjODA3MCkuXG5cdFx0XHRmb3IgKCA7IGkgPCBsOyBpKysgKSB7XG5cdFx0XHRcdG5vZGUgPSBmcmFnbWVudDtcblxuXHRcdFx0XHRpZiAoIGkgIT09IGlOb0Nsb25lICkge1xuXHRcdFx0XHRcdG5vZGUgPSBqUXVlcnkuY2xvbmUoIG5vZGUsIHRydWUsIHRydWUgKTtcblxuXHRcdFx0XHRcdC8vIEtlZXAgcmVmZXJlbmNlcyB0byBjbG9uZWQgc2NyaXB0cyBmb3IgbGF0ZXIgcmVzdG9yYXRpb25cblx0XHRcdFx0XHRpZiAoIGhhc1NjcmlwdHMgKSB7XG5cblx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IEFuZHJvaWQgPD00LjAgb25seSwgUGhhbnRvbUpTIDEgb25seVxuXHRcdFx0XHRcdFx0Ly8gcHVzaC5hcHBseShfLCBhcnJheWxpa2UpIHRocm93cyBvbiBhbmNpZW50IFdlYktpdFxuXHRcdFx0XHRcdFx0alF1ZXJ5Lm1lcmdlKCBzY3JpcHRzLCBnZXRBbGwoIG5vZGUsIFwic2NyaXB0XCIgKSApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHRcdGNhbGxiYWNrLmNhbGwoIGNvbGxlY3Rpb25bIGkgXSwgbm9kZSwgaSApO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIGhhc1NjcmlwdHMgKSB7XG5cdFx0XHRcdGRvYyA9IHNjcmlwdHNbIHNjcmlwdHMubGVuZ3RoIC0gMSBdLm93bmVyRG9jdW1lbnQ7XG5cblx0XHRcdFx0Ly8gUmVlbmFibGUgc2NyaXB0c1xuXHRcdFx0XHRqUXVlcnkubWFwKCBzY3JpcHRzLCByZXN0b3JlU2NyaXB0ICk7XG5cblx0XHRcdFx0Ly8gRXZhbHVhdGUgZXhlY3V0YWJsZSBzY3JpcHRzIG9uIGZpcnN0IGRvY3VtZW50IGluc2VydGlvblxuXHRcdFx0XHRmb3IgKCBpID0gMDsgaSA8IGhhc1NjcmlwdHM7IGkrKyApIHtcblx0XHRcdFx0XHRub2RlID0gc2NyaXB0c1sgaSBdO1xuXHRcdFx0XHRcdGlmICggcnNjcmlwdFR5cGUudGVzdCggbm9kZS50eXBlIHx8IFwiXCIgKSAmJlxuXHRcdFx0XHRcdFx0IWRhdGFQcml2LmFjY2Vzcyggbm9kZSwgXCJnbG9iYWxFdmFsXCIgKSAmJlxuXHRcdFx0XHRcdFx0alF1ZXJ5LmNvbnRhaW5zKCBkb2MsIG5vZGUgKSApIHtcblxuXHRcdFx0XHRcdFx0aWYgKCBub2RlLnNyYyAmJiAoIG5vZGUudHlwZSB8fCBcIlwiICkudG9Mb3dlckNhc2UoKSAgIT09IFwibW9kdWxlXCIgKSB7XG5cblx0XHRcdFx0XHRcdFx0Ly8gT3B0aW9uYWwgQUpBWCBkZXBlbmRlbmN5LCBidXQgd29uJ3QgcnVuIHNjcmlwdHMgaWYgbm90IHByZXNlbnRcblx0XHRcdFx0XHRcdFx0aWYgKCBqUXVlcnkuX2V2YWxVcmwgJiYgIW5vZGUubm9Nb2R1bGUgKSB7XG5cdFx0XHRcdFx0XHRcdFx0alF1ZXJ5Ll9ldmFsVXJsKCBub2RlLnNyYywge1xuXHRcdFx0XHRcdFx0XHRcdFx0bm9uY2U6IG5vZGUubm9uY2UgfHwgbm9kZS5nZXRBdHRyaWJ1dGUoIFwibm9uY2VcIiApXG5cdFx0XHRcdFx0XHRcdFx0fSwgZG9jICk7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdERPTUV2YWwoIG5vZGUudGV4dENvbnRlbnQucmVwbGFjZSggcmNsZWFuU2NyaXB0LCBcIlwiICksIG5vZGUsIGRvYyApO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdHJldHVybiBjb2xsZWN0aW9uO1xufVxuXG5mdW5jdGlvbiByZW1vdmUoIGVsZW0sIHNlbGVjdG9yLCBrZWVwRGF0YSApIHtcblx0dmFyIG5vZGUsXG5cdFx0bm9kZXMgPSBzZWxlY3RvciA/IGpRdWVyeS5maWx0ZXIoIHNlbGVjdG9yLCBlbGVtICkgOiBlbGVtLFxuXHRcdGkgPSAwO1xuXG5cdGZvciAoIDsgKCBub2RlID0gbm9kZXNbIGkgXSApICE9IG51bGw7IGkrKyApIHtcblx0XHRpZiAoICFrZWVwRGF0YSAmJiBub2RlLm5vZGVUeXBlID09PSAxICkge1xuXHRcdFx0alF1ZXJ5LmNsZWFuRGF0YSggZ2V0QWxsKCBub2RlICkgKTtcblx0XHR9XG5cblx0XHRpZiAoIG5vZGUucGFyZW50Tm9kZSApIHtcblx0XHRcdGlmICgga2VlcERhdGEgJiYgaXNBdHRhY2hlZCggbm9kZSApICkge1xuXHRcdFx0XHRzZXRHbG9iYWxFdmFsKCBnZXRBbGwoIG5vZGUsIFwic2NyaXB0XCIgKSApO1xuXHRcdFx0fVxuXHRcdFx0bm9kZS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKCBub2RlICk7XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIGVsZW07XG59XG5cbmpRdWVyeS5leHRlbmQoIHtcblx0aHRtbFByZWZpbHRlcjogZnVuY3Rpb24oIGh0bWwgKSB7XG5cdFx0cmV0dXJuIGh0bWw7XG5cdH0sXG5cblx0Y2xvbmU6IGZ1bmN0aW9uKCBlbGVtLCBkYXRhQW5kRXZlbnRzLCBkZWVwRGF0YUFuZEV2ZW50cyApIHtcblx0XHR2YXIgaSwgbCwgc3JjRWxlbWVudHMsIGRlc3RFbGVtZW50cyxcblx0XHRcdGNsb25lID0gZWxlbS5jbG9uZU5vZGUoIHRydWUgKSxcblx0XHRcdGluUGFnZSA9IGlzQXR0YWNoZWQoIGVsZW0gKTtcblxuXHRcdC8vIEZpeCBJRSBjbG9uaW5nIGlzc3Vlc1xuXHRcdGlmICggIXN1cHBvcnQubm9DbG9uZUNoZWNrZWQgJiYgKCBlbGVtLm5vZGVUeXBlID09PSAxIHx8IGVsZW0ubm9kZVR5cGUgPT09IDExICkgJiZcblx0XHRcdFx0IWpRdWVyeS5pc1hNTERvYyggZWxlbSApICkge1xuXG5cdFx0XHQvLyBXZSBlc2NoZXcgU2l6emxlIGhlcmUgZm9yIHBlcmZvcm1hbmNlIHJlYXNvbnM6IGh0dHBzOi8vanNwZXJmLmNvbS9nZXRhbGwtdnMtc2l6emxlLzJcblx0XHRcdGRlc3RFbGVtZW50cyA9IGdldEFsbCggY2xvbmUgKTtcblx0XHRcdHNyY0VsZW1lbnRzID0gZ2V0QWxsKCBlbGVtICk7XG5cblx0XHRcdGZvciAoIGkgPSAwLCBsID0gc3JjRWxlbWVudHMubGVuZ3RoOyBpIDwgbDsgaSsrICkge1xuXHRcdFx0XHRmaXhJbnB1dCggc3JjRWxlbWVudHNbIGkgXSwgZGVzdEVsZW1lbnRzWyBpIF0gKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBDb3B5IHRoZSBldmVudHMgZnJvbSB0aGUgb3JpZ2luYWwgdG8gdGhlIGNsb25lXG5cdFx0aWYgKCBkYXRhQW5kRXZlbnRzICkge1xuXHRcdFx0aWYgKCBkZWVwRGF0YUFuZEV2ZW50cyApIHtcblx0XHRcdFx0c3JjRWxlbWVudHMgPSBzcmNFbGVtZW50cyB8fCBnZXRBbGwoIGVsZW0gKTtcblx0XHRcdFx0ZGVzdEVsZW1lbnRzID0gZGVzdEVsZW1lbnRzIHx8IGdldEFsbCggY2xvbmUgKTtcblxuXHRcdFx0XHRmb3IgKCBpID0gMCwgbCA9IHNyY0VsZW1lbnRzLmxlbmd0aDsgaSA8IGw7IGkrKyApIHtcblx0XHRcdFx0XHRjbG9uZUNvcHlFdmVudCggc3JjRWxlbWVudHNbIGkgXSwgZGVzdEVsZW1lbnRzWyBpIF0gKTtcblx0XHRcdFx0fVxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0Y2xvbmVDb3B5RXZlbnQoIGVsZW0sIGNsb25lICk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gUHJlc2VydmUgc2NyaXB0IGV2YWx1YXRpb24gaGlzdG9yeVxuXHRcdGRlc3RFbGVtZW50cyA9IGdldEFsbCggY2xvbmUsIFwic2NyaXB0XCIgKTtcblx0XHRpZiAoIGRlc3RFbGVtZW50cy5sZW5ndGggPiAwICkge1xuXHRcdFx0c2V0R2xvYmFsRXZhbCggZGVzdEVsZW1lbnRzLCAhaW5QYWdlICYmIGdldEFsbCggZWxlbSwgXCJzY3JpcHRcIiApICk7XG5cdFx0fVxuXG5cdFx0Ly8gUmV0dXJuIHRoZSBjbG9uZWQgc2V0XG5cdFx0cmV0dXJuIGNsb25lO1xuXHR9LFxuXG5cdGNsZWFuRGF0YTogZnVuY3Rpb24oIGVsZW1zICkge1xuXHRcdHZhciBkYXRhLCBlbGVtLCB0eXBlLFxuXHRcdFx0c3BlY2lhbCA9IGpRdWVyeS5ldmVudC5zcGVjaWFsLFxuXHRcdFx0aSA9IDA7XG5cblx0XHRmb3IgKCA7ICggZWxlbSA9IGVsZW1zWyBpIF0gKSAhPT0gdW5kZWZpbmVkOyBpKysgKSB7XG5cdFx0XHRpZiAoIGFjY2VwdERhdGEoIGVsZW0gKSApIHtcblx0XHRcdFx0aWYgKCAoIGRhdGEgPSBlbGVtWyBkYXRhUHJpdi5leHBhbmRvIF0gKSApIHtcblx0XHRcdFx0XHRpZiAoIGRhdGEuZXZlbnRzICkge1xuXHRcdFx0XHRcdFx0Zm9yICggdHlwZSBpbiBkYXRhLmV2ZW50cyApIHtcblx0XHRcdFx0XHRcdFx0aWYgKCBzcGVjaWFsWyB0eXBlIF0gKSB7XG5cdFx0XHRcdFx0XHRcdFx0alF1ZXJ5LmV2ZW50LnJlbW92ZSggZWxlbSwgdHlwZSApO1xuXG5cdFx0XHRcdFx0XHRcdC8vIFRoaXMgaXMgYSBzaG9ydGN1dCB0byBhdm9pZCBqUXVlcnkuZXZlbnQucmVtb3ZlJ3Mgb3ZlcmhlYWRcblx0XHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0XHRqUXVlcnkucmVtb3ZlRXZlbnQoIGVsZW0sIHR5cGUsIGRhdGEuaGFuZGxlICk7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvLyBTdXBwb3J0OiBDaHJvbWUgPD0zNSAtIDQ1K1xuXHRcdFx0XHRcdC8vIEFzc2lnbiB1bmRlZmluZWQgaW5zdGVhZCBvZiB1c2luZyBkZWxldGUsIHNlZSBEYXRhI3JlbW92ZVxuXHRcdFx0XHRcdGVsZW1bIGRhdGFQcml2LmV4cGFuZG8gXSA9IHVuZGVmaW5lZDtcblx0XHRcdFx0fVxuXHRcdFx0XHRpZiAoIGVsZW1bIGRhdGFVc2VyLmV4cGFuZG8gXSApIHtcblxuXHRcdFx0XHRcdC8vIFN1cHBvcnQ6IENocm9tZSA8PTM1IC0gNDUrXG5cdFx0XHRcdFx0Ly8gQXNzaWduIHVuZGVmaW5lZCBpbnN0ZWFkIG9mIHVzaW5nIGRlbGV0ZSwgc2VlIERhdGEjcmVtb3ZlXG5cdFx0XHRcdFx0ZWxlbVsgZGF0YVVzZXIuZXhwYW5kbyBdID0gdW5kZWZpbmVkO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG59ICk7XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0ZGV0YWNoOiBmdW5jdGlvbiggc2VsZWN0b3IgKSB7XG5cdFx0cmV0dXJuIHJlbW92ZSggdGhpcywgc2VsZWN0b3IsIHRydWUgKTtcblx0fSxcblxuXHRyZW1vdmU6IGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcblx0XHRyZXR1cm4gcmVtb3ZlKCB0aGlzLCBzZWxlY3RvciApO1xuXHR9LFxuXG5cdHRleHQ6IGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHRyZXR1cm4gYWNjZXNzKCB0aGlzLCBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0XHRyZXR1cm4gdmFsdWUgPT09IHVuZGVmaW5lZCA/XG5cdFx0XHRcdGpRdWVyeS50ZXh0KCB0aGlzICkgOlxuXHRcdFx0XHR0aGlzLmVtcHR5KCkuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0aWYgKCB0aGlzLm5vZGVUeXBlID09PSAxIHx8IHRoaXMubm9kZVR5cGUgPT09IDExIHx8IHRoaXMubm9kZVR5cGUgPT09IDkgKSB7XG5cdFx0XHRcdFx0XHR0aGlzLnRleHRDb250ZW50ID0gdmFsdWU7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9ICk7XG5cdFx0fSwgbnVsbCwgdmFsdWUsIGFyZ3VtZW50cy5sZW5ndGggKTtcblx0fSxcblxuXHRhcHBlbmQ6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiBkb21NYW5pcCggdGhpcywgYXJndW1lbnRzLCBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdGlmICggdGhpcy5ub2RlVHlwZSA9PT0gMSB8fCB0aGlzLm5vZGVUeXBlID09PSAxMSB8fCB0aGlzLm5vZGVUeXBlID09PSA5ICkge1xuXHRcdFx0XHR2YXIgdGFyZ2V0ID0gbWFuaXB1bGF0aW9uVGFyZ2V0KCB0aGlzLCBlbGVtICk7XG5cdFx0XHRcdHRhcmdldC5hcHBlbmRDaGlsZCggZWxlbSApO1xuXHRcdFx0fVxuXHRcdH0gKTtcblx0fSxcblxuXHRwcmVwZW5kOiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gZG9tTWFuaXAoIHRoaXMsIGFyZ3VtZW50cywgZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRpZiAoIHRoaXMubm9kZVR5cGUgPT09IDEgfHwgdGhpcy5ub2RlVHlwZSA9PT0gMTEgfHwgdGhpcy5ub2RlVHlwZSA9PT0gOSApIHtcblx0XHRcdFx0dmFyIHRhcmdldCA9IG1hbmlwdWxhdGlvblRhcmdldCggdGhpcywgZWxlbSApO1xuXHRcdFx0XHR0YXJnZXQuaW5zZXJ0QmVmb3JlKCBlbGVtLCB0YXJnZXQuZmlyc3RDaGlsZCApO1xuXHRcdFx0fVxuXHRcdH0gKTtcblx0fSxcblxuXHRiZWZvcmU6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiBkb21NYW5pcCggdGhpcywgYXJndW1lbnRzLCBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdGlmICggdGhpcy5wYXJlbnROb2RlICkge1xuXHRcdFx0XHR0aGlzLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKCBlbGVtLCB0aGlzICk7XG5cdFx0XHR9XG5cdFx0fSApO1xuXHR9LFxuXG5cdGFmdGVyOiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gZG9tTWFuaXAoIHRoaXMsIGFyZ3VtZW50cywgZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRpZiAoIHRoaXMucGFyZW50Tm9kZSApIHtcblx0XHRcdFx0dGhpcy5wYXJlbnROb2RlLmluc2VydEJlZm9yZSggZWxlbSwgdGhpcy5uZXh0U2libGluZyApO1xuXHRcdFx0fVxuXHRcdH0gKTtcblx0fSxcblxuXHRlbXB0eTogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIGVsZW0sXG5cdFx0XHRpID0gMDtcblxuXHRcdGZvciAoIDsgKCBlbGVtID0gdGhpc1sgaSBdICkgIT0gbnVsbDsgaSsrICkge1xuXHRcdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSAxICkge1xuXG5cdFx0XHRcdC8vIFByZXZlbnQgbWVtb3J5IGxlYWtzXG5cdFx0XHRcdGpRdWVyeS5jbGVhbkRhdGEoIGdldEFsbCggZWxlbSwgZmFsc2UgKSApO1xuXG5cdFx0XHRcdC8vIFJlbW92ZSBhbnkgcmVtYWluaW5nIG5vZGVzXG5cdFx0XHRcdGVsZW0udGV4dENvbnRlbnQgPSBcIlwiO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzO1xuXHR9LFxuXG5cdGNsb25lOiBmdW5jdGlvbiggZGF0YUFuZEV2ZW50cywgZGVlcERhdGFBbmRFdmVudHMgKSB7XG5cdFx0ZGF0YUFuZEV2ZW50cyA9IGRhdGFBbmRFdmVudHMgPT0gbnVsbCA/IGZhbHNlIDogZGF0YUFuZEV2ZW50cztcblx0XHRkZWVwRGF0YUFuZEV2ZW50cyA9IGRlZXBEYXRhQW5kRXZlbnRzID09IG51bGwgPyBkYXRhQW5kRXZlbnRzIDogZGVlcERhdGFBbmRFdmVudHM7XG5cblx0XHRyZXR1cm4gdGhpcy5tYXAoIGZ1bmN0aW9uKCkge1xuXHRcdFx0cmV0dXJuIGpRdWVyeS5jbG9uZSggdGhpcywgZGF0YUFuZEV2ZW50cywgZGVlcERhdGFBbmRFdmVudHMgKTtcblx0XHR9ICk7XG5cdH0sXG5cblx0aHRtbDogZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdHJldHVybiBhY2Nlc3MoIHRoaXMsIGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHRcdHZhciBlbGVtID0gdGhpc1sgMCBdIHx8IHt9LFxuXHRcdFx0XHRpID0gMCxcblx0XHRcdFx0bCA9IHRoaXMubGVuZ3RoO1xuXG5cdFx0XHRpZiAoIHZhbHVlID09PSB1bmRlZmluZWQgJiYgZWxlbS5ub2RlVHlwZSA9PT0gMSApIHtcblx0XHRcdFx0cmV0dXJuIGVsZW0uaW5uZXJIVE1MO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBTZWUgaWYgd2UgY2FuIHRha2UgYSBzaG9ydGN1dCBhbmQganVzdCB1c2UgaW5uZXJIVE1MXG5cdFx0XHRpZiAoIHR5cGVvZiB2YWx1ZSA9PT0gXCJzdHJpbmdcIiAmJiAhcm5vSW5uZXJodG1sLnRlc3QoIHZhbHVlICkgJiZcblx0XHRcdFx0IXdyYXBNYXBbICggcnRhZ05hbWUuZXhlYyggdmFsdWUgKSB8fCBbIFwiXCIsIFwiXCIgXSApWyAxIF0udG9Mb3dlckNhc2UoKSBdICkge1xuXG5cdFx0XHRcdHZhbHVlID0galF1ZXJ5Lmh0bWxQcmVmaWx0ZXIoIHZhbHVlICk7XG5cblx0XHRcdFx0dHJ5IHtcblx0XHRcdFx0XHRmb3IgKCA7IGkgPCBsOyBpKysgKSB7XG5cdFx0XHRcdFx0XHRlbGVtID0gdGhpc1sgaSBdIHx8IHt9O1xuXG5cdFx0XHRcdFx0XHQvLyBSZW1vdmUgZWxlbWVudCBub2RlcyBhbmQgcHJldmVudCBtZW1vcnkgbGVha3Ncblx0XHRcdFx0XHRcdGlmICggZWxlbS5ub2RlVHlwZSA9PT0gMSApIHtcblx0XHRcdFx0XHRcdFx0alF1ZXJ5LmNsZWFuRGF0YSggZ2V0QWxsKCBlbGVtLCBmYWxzZSApICk7XG5cdFx0XHRcdFx0XHRcdGVsZW0uaW5uZXJIVE1MID0gdmFsdWU7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0ZWxlbSA9IDA7XG5cblx0XHRcdFx0Ly8gSWYgdXNpbmcgaW5uZXJIVE1MIHRocm93cyBhbiBleGNlcHRpb24sIHVzZSB0aGUgZmFsbGJhY2sgbWV0aG9kXG5cdFx0XHRcdH0gY2F0Y2ggKCBlICkge31cblx0XHRcdH1cblxuXHRcdFx0aWYgKCBlbGVtICkge1xuXHRcdFx0XHR0aGlzLmVtcHR5KCkuYXBwZW5kKCB2YWx1ZSApO1xuXHRcdFx0fVxuXHRcdH0sIG51bGwsIHZhbHVlLCBhcmd1bWVudHMubGVuZ3RoICk7XG5cdH0sXG5cblx0cmVwbGFjZVdpdGg6IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBpZ25vcmVkID0gW107XG5cblx0XHQvLyBNYWtlIHRoZSBjaGFuZ2VzLCByZXBsYWNpbmcgZWFjaCBub24taWdub3JlZCBjb250ZXh0IGVsZW1lbnQgd2l0aCB0aGUgbmV3IGNvbnRlbnRcblx0XHRyZXR1cm4gZG9tTWFuaXAoIHRoaXMsIGFyZ3VtZW50cywgZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHR2YXIgcGFyZW50ID0gdGhpcy5wYXJlbnROb2RlO1xuXG5cdFx0XHRpZiAoIGpRdWVyeS5pbkFycmF5KCB0aGlzLCBpZ25vcmVkICkgPCAwICkge1xuXHRcdFx0XHRqUXVlcnkuY2xlYW5EYXRhKCBnZXRBbGwoIHRoaXMgKSApO1xuXHRcdFx0XHRpZiAoIHBhcmVudCApIHtcblx0XHRcdFx0XHRwYXJlbnQucmVwbGFjZUNoaWxkKCBlbGVtLCB0aGlzICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdC8vIEZvcmNlIGNhbGxiYWNrIGludm9jYXRpb25cblx0XHR9LCBpZ25vcmVkICk7XG5cdH1cbn0gKTtcblxualF1ZXJ5LmVhY2goIHtcblx0YXBwZW5kVG86IFwiYXBwZW5kXCIsXG5cdHByZXBlbmRUbzogXCJwcmVwZW5kXCIsXG5cdGluc2VydEJlZm9yZTogXCJiZWZvcmVcIixcblx0aW5zZXJ0QWZ0ZXI6IFwiYWZ0ZXJcIixcblx0cmVwbGFjZUFsbDogXCJyZXBsYWNlV2l0aFwiXG59LCBmdW5jdGlvbiggbmFtZSwgb3JpZ2luYWwgKSB7XG5cdGpRdWVyeS5mblsgbmFtZSBdID0gZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdHZhciBlbGVtcyxcblx0XHRcdHJldCA9IFtdLFxuXHRcdFx0aW5zZXJ0ID0galF1ZXJ5KCBzZWxlY3RvciApLFxuXHRcdFx0bGFzdCA9IGluc2VydC5sZW5ndGggLSAxLFxuXHRcdFx0aSA9IDA7XG5cblx0XHRmb3IgKCA7IGkgPD0gbGFzdDsgaSsrICkge1xuXHRcdFx0ZWxlbXMgPSBpID09PSBsYXN0ID8gdGhpcyA6IHRoaXMuY2xvbmUoIHRydWUgKTtcblx0XHRcdGpRdWVyeSggaW5zZXJ0WyBpIF0gKVsgb3JpZ2luYWwgXSggZWxlbXMgKTtcblxuXHRcdFx0Ly8gU3VwcG9ydDogQW5kcm9pZCA8PTQuMCBvbmx5LCBQaGFudG9tSlMgMSBvbmx5XG5cdFx0XHQvLyAuZ2V0KCkgYmVjYXVzZSBwdXNoLmFwcGx5KF8sIGFycmF5bGlrZSkgdGhyb3dzIG9uIGFuY2llbnQgV2ViS2l0XG5cdFx0XHRwdXNoLmFwcGx5KCByZXQsIGVsZW1zLmdldCgpICk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXMucHVzaFN0YWNrKCByZXQgKTtcblx0fTtcbn0gKTtcbnZhciBybnVtbm9ucHggPSBuZXcgUmVnRXhwKCBcIl4oXCIgKyBwbnVtICsgXCIpKD8hcHgpW2EteiVdKyRcIiwgXCJpXCIgKTtcblxudmFyIGdldFN0eWxlcyA9IGZ1bmN0aW9uKCBlbGVtICkge1xuXG5cdFx0Ly8gU3VwcG9ydDogSUUgPD0xMSBvbmx5LCBGaXJlZm94IDw9MzAgKCMxNTA5OCwgIzE0MTUwKVxuXHRcdC8vIElFIHRocm93cyBvbiBlbGVtZW50cyBjcmVhdGVkIGluIHBvcHVwc1xuXHRcdC8vIEZGIG1lYW53aGlsZSB0aHJvd3Mgb24gZnJhbWUgZWxlbWVudHMgdGhyb3VnaCBcImRlZmF1bHRWaWV3LmdldENvbXB1dGVkU3R5bGVcIlxuXHRcdHZhciB2aWV3ID0gZWxlbS5vd25lckRvY3VtZW50LmRlZmF1bHRWaWV3O1xuXG5cdFx0aWYgKCAhdmlldyB8fCAhdmlldy5vcGVuZXIgKSB7XG5cdFx0XHR2aWV3ID0gd2luZG93O1xuXHRcdH1cblxuXHRcdHJldHVybiB2aWV3LmdldENvbXB1dGVkU3R5bGUoIGVsZW0gKTtcblx0fTtcblxudmFyIHN3YXAgPSBmdW5jdGlvbiggZWxlbSwgb3B0aW9ucywgY2FsbGJhY2sgKSB7XG5cdHZhciByZXQsIG5hbWUsXG5cdFx0b2xkID0ge307XG5cblx0Ly8gUmVtZW1iZXIgdGhlIG9sZCB2YWx1ZXMsIGFuZCBpbnNlcnQgdGhlIG5ldyBvbmVzXG5cdGZvciAoIG5hbWUgaW4gb3B0aW9ucyApIHtcblx0XHRvbGRbIG5hbWUgXSA9IGVsZW0uc3R5bGVbIG5hbWUgXTtcblx0XHRlbGVtLnN0eWxlWyBuYW1lIF0gPSBvcHRpb25zWyBuYW1lIF07XG5cdH1cblxuXHRyZXQgPSBjYWxsYmFjay5jYWxsKCBlbGVtICk7XG5cblx0Ly8gUmV2ZXJ0IHRoZSBvbGQgdmFsdWVzXG5cdGZvciAoIG5hbWUgaW4gb3B0aW9ucyApIHtcblx0XHRlbGVtLnN0eWxlWyBuYW1lIF0gPSBvbGRbIG5hbWUgXTtcblx0fVxuXG5cdHJldHVybiByZXQ7XG59O1xuXG5cbnZhciByYm94U3R5bGUgPSBuZXcgUmVnRXhwKCBjc3NFeHBhbmQuam9pbiggXCJ8XCIgKSwgXCJpXCIgKTtcblxuXG5cbiggZnVuY3Rpb24oKSB7XG5cblx0Ly8gRXhlY3V0aW5nIGJvdGggcGl4ZWxQb3NpdGlvbiAmIGJveFNpemluZ1JlbGlhYmxlIHRlc3RzIHJlcXVpcmUgb25seSBvbmUgbGF5b3V0XG5cdC8vIHNvIHRoZXkncmUgZXhlY3V0ZWQgYXQgdGhlIHNhbWUgdGltZSB0byBzYXZlIHRoZSBzZWNvbmQgY29tcHV0YXRpb24uXG5cdGZ1bmN0aW9uIGNvbXB1dGVTdHlsZVRlc3RzKCkge1xuXG5cdFx0Ly8gVGhpcyBpcyBhIHNpbmdsZXRvbiwgd2UgbmVlZCB0byBleGVjdXRlIGl0IG9ubHkgb25jZVxuXHRcdGlmICggIWRpdiApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHRjb250YWluZXIuc3R5bGUuY3NzVGV4dCA9IFwicG9zaXRpb246YWJzb2x1dGU7bGVmdDotMTExMTFweDt3aWR0aDo2MHB4O1wiICtcblx0XHRcdFwibWFyZ2luLXRvcDoxcHg7cGFkZGluZzowO2JvcmRlcjowXCI7XG5cdFx0ZGl2LnN0eWxlLmNzc1RleHQgPVxuXHRcdFx0XCJwb3NpdGlvbjpyZWxhdGl2ZTtkaXNwbGF5OmJsb2NrO2JveC1zaXppbmc6Ym9yZGVyLWJveDtvdmVyZmxvdzpzY3JvbGw7XCIgK1xuXHRcdFx0XCJtYXJnaW46YXV0bztib3JkZXI6MXB4O3BhZGRpbmc6MXB4O1wiICtcblx0XHRcdFwid2lkdGg6NjAlO3RvcDoxJVwiO1xuXHRcdGRvY3VtZW50RWxlbWVudC5hcHBlbmRDaGlsZCggY29udGFpbmVyICkuYXBwZW5kQ2hpbGQoIGRpdiApO1xuXG5cdFx0dmFyIGRpdlN0eWxlID0gd2luZG93LmdldENvbXB1dGVkU3R5bGUoIGRpdiApO1xuXHRcdHBpeGVsUG9zaXRpb25WYWwgPSBkaXZTdHlsZS50b3AgIT09IFwiMSVcIjtcblxuXHRcdC8vIFN1cHBvcnQ6IEFuZHJvaWQgNC4wIC0gNC4zIG9ubHksIEZpcmVmb3ggPD0zIC0gNDRcblx0XHRyZWxpYWJsZU1hcmdpbkxlZnRWYWwgPSByb3VuZFBpeGVsTWVhc3VyZXMoIGRpdlN0eWxlLm1hcmdpbkxlZnQgKSA9PT0gMTI7XG5cblx0XHQvLyBTdXBwb3J0OiBBbmRyb2lkIDQuMCAtIDQuMyBvbmx5LCBTYWZhcmkgPD05LjEgLSAxMC4xLCBpT1MgPD03LjAgLSA5LjNcblx0XHQvLyBTb21lIHN0eWxlcyBjb21lIGJhY2sgd2l0aCBwZXJjZW50YWdlIHZhbHVlcywgZXZlbiB0aG91Z2ggdGhleSBzaG91bGRuJ3Rcblx0XHRkaXYuc3R5bGUucmlnaHQgPSBcIjYwJVwiO1xuXHRcdHBpeGVsQm94U3R5bGVzVmFsID0gcm91bmRQaXhlbE1lYXN1cmVzKCBkaXZTdHlsZS5yaWdodCApID09PSAzNjtcblxuXHRcdC8vIFN1cHBvcnQ6IElFIDkgLSAxMSBvbmx5XG5cdFx0Ly8gRGV0ZWN0IG1pc3JlcG9ydGluZyBvZiBjb250ZW50IGRpbWVuc2lvbnMgZm9yIGJveC1zaXppbmc6Ym9yZGVyLWJveCBlbGVtZW50c1xuXHRcdGJveFNpemluZ1JlbGlhYmxlVmFsID0gcm91bmRQaXhlbE1lYXN1cmVzKCBkaXZTdHlsZS53aWR0aCApID09PSAzNjtcblxuXHRcdC8vIFN1cHBvcnQ6IElFIDkgb25seVxuXHRcdC8vIERldGVjdCBvdmVyZmxvdzpzY3JvbGwgc2NyZXdpbmVzcyAoZ2gtMzY5OSlcblx0XHQvLyBTdXBwb3J0OiBDaHJvbWUgPD02NFxuXHRcdC8vIERvbid0IGdldCB0cmlja2VkIHdoZW4gem9vbSBhZmZlY3RzIG9mZnNldFdpZHRoIChnaC00MDI5KVxuXHRcdGRpdi5zdHlsZS5wb3NpdGlvbiA9IFwiYWJzb2x1dGVcIjtcblx0XHRzY3JvbGxib3hTaXplVmFsID0gcm91bmRQaXhlbE1lYXN1cmVzKCBkaXYub2Zmc2V0V2lkdGggLyAzICkgPT09IDEyO1xuXG5cdFx0ZG9jdW1lbnRFbGVtZW50LnJlbW92ZUNoaWxkKCBjb250YWluZXIgKTtcblxuXHRcdC8vIE51bGxpZnkgdGhlIGRpdiBzbyBpdCB3b3VsZG4ndCBiZSBzdG9yZWQgaW4gdGhlIG1lbW9yeSBhbmRcblx0XHQvLyBpdCB3aWxsIGFsc28gYmUgYSBzaWduIHRoYXQgY2hlY2tzIGFscmVhZHkgcGVyZm9ybWVkXG5cdFx0ZGl2ID0gbnVsbDtcblx0fVxuXG5cdGZ1bmN0aW9uIHJvdW5kUGl4ZWxNZWFzdXJlcyggbWVhc3VyZSApIHtcblx0XHRyZXR1cm4gTWF0aC5yb3VuZCggcGFyc2VGbG9hdCggbWVhc3VyZSApICk7XG5cdH1cblxuXHR2YXIgcGl4ZWxQb3NpdGlvblZhbCwgYm94U2l6aW5nUmVsaWFibGVWYWwsIHNjcm9sbGJveFNpemVWYWwsIHBpeGVsQm94U3R5bGVzVmFsLFxuXHRcdHJlbGlhYmxlVHJEaW1lbnNpb25zVmFsLCByZWxpYWJsZU1hcmdpbkxlZnRWYWwsXG5cdFx0Y29udGFpbmVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJkaXZcIiApLFxuXHRcdGRpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiZGl2XCIgKTtcblxuXHQvLyBGaW5pc2ggZWFybHkgaW4gbGltaXRlZCAobm9uLWJyb3dzZXIpIGVudmlyb25tZW50c1xuXHRpZiAoICFkaXYuc3R5bGUgKSB7XG5cdFx0cmV0dXJuO1xuXHR9XG5cblx0Ly8gU3VwcG9ydDogSUUgPD05IC0gMTEgb25seVxuXHQvLyBTdHlsZSBvZiBjbG9uZWQgZWxlbWVudCBhZmZlY3RzIHNvdXJjZSBlbGVtZW50IGNsb25lZCAoIzg5MDgpXG5cdGRpdi5zdHlsZS5iYWNrZ3JvdW5kQ2xpcCA9IFwiY29udGVudC1ib3hcIjtcblx0ZGl2LmNsb25lTm9kZSggdHJ1ZSApLnN0eWxlLmJhY2tncm91bmRDbGlwID0gXCJcIjtcblx0c3VwcG9ydC5jbGVhckNsb25lU3R5bGUgPSBkaXYuc3R5bGUuYmFja2dyb3VuZENsaXAgPT09IFwiY29udGVudC1ib3hcIjtcblxuXHRqUXVlcnkuZXh0ZW5kKCBzdXBwb3J0LCB7XG5cdFx0Ym94U2l6aW5nUmVsaWFibGU6IGZ1bmN0aW9uKCkge1xuXHRcdFx0Y29tcHV0ZVN0eWxlVGVzdHMoKTtcblx0XHRcdHJldHVybiBib3hTaXppbmdSZWxpYWJsZVZhbDtcblx0XHR9LFxuXHRcdHBpeGVsQm94U3R5bGVzOiBmdW5jdGlvbigpIHtcblx0XHRcdGNvbXB1dGVTdHlsZVRlc3RzKCk7XG5cdFx0XHRyZXR1cm4gcGl4ZWxCb3hTdHlsZXNWYWw7XG5cdFx0fSxcblx0XHRwaXhlbFBvc2l0aW9uOiBmdW5jdGlvbigpIHtcblx0XHRcdGNvbXB1dGVTdHlsZVRlc3RzKCk7XG5cdFx0XHRyZXR1cm4gcGl4ZWxQb3NpdGlvblZhbDtcblx0XHR9LFxuXHRcdHJlbGlhYmxlTWFyZ2luTGVmdDogZnVuY3Rpb24oKSB7XG5cdFx0XHRjb21wdXRlU3R5bGVUZXN0cygpO1xuXHRcdFx0cmV0dXJuIHJlbGlhYmxlTWFyZ2luTGVmdFZhbDtcblx0XHR9LFxuXHRcdHNjcm9sbGJveFNpemU6IGZ1bmN0aW9uKCkge1xuXHRcdFx0Y29tcHV0ZVN0eWxlVGVzdHMoKTtcblx0XHRcdHJldHVybiBzY3JvbGxib3hTaXplVmFsO1xuXHRcdH0sXG5cblx0XHQvLyBTdXBwb3J0OiBJRSA5IC0gMTErLCBFZGdlIDE1IC0gMTgrXG5cdFx0Ly8gSUUvRWRnZSBtaXNyZXBvcnQgYGdldENvbXB1dGVkU3R5bGVgIG9mIHRhYmxlIHJvd3Mgd2l0aCB3aWR0aC9oZWlnaHRcblx0XHQvLyBzZXQgaW4gQ1NTIHdoaWxlIGBvZmZzZXQqYCBwcm9wZXJ0aWVzIHJlcG9ydCBjb3JyZWN0IHZhbHVlcy5cblx0XHQvLyBCZWhhdmlvciBpbiBJRSA5IGlzIG1vcmUgc3VidGxlIHRoYW4gaW4gbmV3ZXIgdmVyc2lvbnMgJiBpdCBwYXNzZXNcblx0XHQvLyBzb21lIHZlcnNpb25zIG9mIHRoaXMgdGVzdDsgbWFrZSBzdXJlIG5vdCB0byBtYWtlIGl0IHBhc3MgdGhlcmUhXG5cdFx0cmVsaWFibGVUckRpbWVuc2lvbnM6IGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIHRhYmxlLCB0ciwgdHJDaGlsZCwgdHJTdHlsZTtcblx0XHRcdGlmICggcmVsaWFibGVUckRpbWVuc2lvbnNWYWwgPT0gbnVsbCApIHtcblx0XHRcdFx0dGFibGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcInRhYmxlXCIgKTtcblx0XHRcdFx0dHIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcInRyXCIgKTtcblx0XHRcdFx0dHJDaGlsZCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiZGl2XCIgKTtcblxuXHRcdFx0XHR0YWJsZS5zdHlsZS5jc3NUZXh0ID0gXCJwb3NpdGlvbjphYnNvbHV0ZTtsZWZ0Oi0xMTExMXB4XCI7XG5cdFx0XHRcdHRyLnN0eWxlLmhlaWdodCA9IFwiMXB4XCI7XG5cdFx0XHRcdHRyQ2hpbGQuc3R5bGUuaGVpZ2h0ID0gXCI5cHhcIjtcblxuXHRcdFx0XHRkb2N1bWVudEVsZW1lbnRcblx0XHRcdFx0XHQuYXBwZW5kQ2hpbGQoIHRhYmxlIClcblx0XHRcdFx0XHQuYXBwZW5kQ2hpbGQoIHRyIClcblx0XHRcdFx0XHQuYXBwZW5kQ2hpbGQoIHRyQ2hpbGQgKTtcblxuXHRcdFx0XHR0clN0eWxlID0gd2luZG93LmdldENvbXB1dGVkU3R5bGUoIHRyICk7XG5cdFx0XHRcdHJlbGlhYmxlVHJEaW1lbnNpb25zVmFsID0gcGFyc2VJbnQoIHRyU3R5bGUuaGVpZ2h0ICkgPiAzO1xuXG5cdFx0XHRcdGRvY3VtZW50RWxlbWVudC5yZW1vdmVDaGlsZCggdGFibGUgKTtcblx0XHRcdH1cblx0XHRcdHJldHVybiByZWxpYWJsZVRyRGltZW5zaW9uc1ZhbDtcblx0XHR9XG5cdH0gKTtcbn0gKSgpO1xuXG5cbmZ1bmN0aW9uIGN1ckNTUyggZWxlbSwgbmFtZSwgY29tcHV0ZWQgKSB7XG5cdHZhciB3aWR0aCwgbWluV2lkdGgsIG1heFdpZHRoLCByZXQsXG5cblx0XHQvLyBTdXBwb3J0OiBGaXJlZm94IDUxK1xuXHRcdC8vIFJldHJpZXZpbmcgc3R5bGUgYmVmb3JlIGNvbXB1dGVkIHNvbWVob3dcblx0XHQvLyBmaXhlcyBhbiBpc3N1ZSB3aXRoIGdldHRpbmcgd3JvbmcgdmFsdWVzXG5cdFx0Ly8gb24gZGV0YWNoZWQgZWxlbWVudHNcblx0XHRzdHlsZSA9IGVsZW0uc3R5bGU7XG5cblx0Y29tcHV0ZWQgPSBjb21wdXRlZCB8fCBnZXRTdHlsZXMoIGVsZW0gKTtcblxuXHQvLyBnZXRQcm9wZXJ0eVZhbHVlIGlzIG5lZWRlZCBmb3I6XG5cdC8vICAgLmNzcygnZmlsdGVyJykgKElFIDkgb25seSwgIzEyNTM3KVxuXHQvLyAgIC5jc3MoJy0tY3VzdG9tUHJvcGVydHkpICgjMzE0NClcblx0aWYgKCBjb21wdXRlZCApIHtcblx0XHRyZXQgPSBjb21wdXRlZC5nZXRQcm9wZXJ0eVZhbHVlKCBuYW1lICkgfHwgY29tcHV0ZWRbIG5hbWUgXTtcblxuXHRcdGlmICggcmV0ID09PSBcIlwiICYmICFpc0F0dGFjaGVkKCBlbGVtICkgKSB7XG5cdFx0XHRyZXQgPSBqUXVlcnkuc3R5bGUoIGVsZW0sIG5hbWUgKTtcblx0XHR9XG5cblx0XHQvLyBBIHRyaWJ1dGUgdG8gdGhlIFwiYXdlc29tZSBoYWNrIGJ5IERlYW4gRWR3YXJkc1wiXG5cdFx0Ly8gQW5kcm9pZCBCcm93c2VyIHJldHVybnMgcGVyY2VudGFnZSBmb3Igc29tZSB2YWx1ZXMsXG5cdFx0Ly8gYnV0IHdpZHRoIHNlZW1zIHRvIGJlIHJlbGlhYmx5IHBpeGVscy5cblx0XHQvLyBUaGlzIGlzIGFnYWluc3QgdGhlIENTU09NIGRyYWZ0IHNwZWM6XG5cdFx0Ly8gaHR0cHM6Ly9kcmFmdHMuY3Nzd2cub3JnL2Nzc29tLyNyZXNvbHZlZC12YWx1ZXNcblx0XHRpZiAoICFzdXBwb3J0LnBpeGVsQm94U3R5bGVzKCkgJiYgcm51bW5vbnB4LnRlc3QoIHJldCApICYmIHJib3hTdHlsZS50ZXN0KCBuYW1lICkgKSB7XG5cblx0XHRcdC8vIFJlbWVtYmVyIHRoZSBvcmlnaW5hbCB2YWx1ZXNcblx0XHRcdHdpZHRoID0gc3R5bGUud2lkdGg7XG5cdFx0XHRtaW5XaWR0aCA9IHN0eWxlLm1pbldpZHRoO1xuXHRcdFx0bWF4V2lkdGggPSBzdHlsZS5tYXhXaWR0aDtcblxuXHRcdFx0Ly8gUHV0IGluIHRoZSBuZXcgdmFsdWVzIHRvIGdldCBhIGNvbXB1dGVkIHZhbHVlIG91dFxuXHRcdFx0c3R5bGUubWluV2lkdGggPSBzdHlsZS5tYXhXaWR0aCA9IHN0eWxlLndpZHRoID0gcmV0O1xuXHRcdFx0cmV0ID0gY29tcHV0ZWQud2lkdGg7XG5cblx0XHRcdC8vIFJldmVydCB0aGUgY2hhbmdlZCB2YWx1ZXNcblx0XHRcdHN0eWxlLndpZHRoID0gd2lkdGg7XG5cdFx0XHRzdHlsZS5taW5XaWR0aCA9IG1pbldpZHRoO1xuXHRcdFx0c3R5bGUubWF4V2lkdGggPSBtYXhXaWR0aDtcblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gcmV0ICE9PSB1bmRlZmluZWQgP1xuXG5cdFx0Ly8gU3VwcG9ydDogSUUgPD05IC0gMTEgb25seVxuXHRcdC8vIElFIHJldHVybnMgekluZGV4IHZhbHVlIGFzIGFuIGludGVnZXIuXG5cdFx0cmV0ICsgXCJcIiA6XG5cdFx0cmV0O1xufVxuXG5cbmZ1bmN0aW9uIGFkZEdldEhvb2tJZiggY29uZGl0aW9uRm4sIGhvb2tGbiApIHtcblxuXHQvLyBEZWZpbmUgdGhlIGhvb2ssIHdlJ2xsIGNoZWNrIG9uIHRoZSBmaXJzdCBydW4gaWYgaXQncyByZWFsbHkgbmVlZGVkLlxuXHRyZXR1cm4ge1xuXHRcdGdldDogZnVuY3Rpb24oKSB7XG5cdFx0XHRpZiAoIGNvbmRpdGlvbkZuKCkgKSB7XG5cblx0XHRcdFx0Ly8gSG9vayBub3QgbmVlZGVkIChvciBpdCdzIG5vdCBwb3NzaWJsZSB0byB1c2UgaXQgZHVlXG5cdFx0XHRcdC8vIHRvIG1pc3NpbmcgZGVwZW5kZW5jeSksIHJlbW92ZSBpdC5cblx0XHRcdFx0ZGVsZXRlIHRoaXMuZ2V0O1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cblx0XHRcdC8vIEhvb2sgbmVlZGVkOyByZWRlZmluZSBpdCBzbyB0aGF0IHRoZSBzdXBwb3J0IHRlc3QgaXMgbm90IGV4ZWN1dGVkIGFnYWluLlxuXHRcdFx0cmV0dXJuICggdGhpcy5nZXQgPSBob29rRm4gKS5hcHBseSggdGhpcywgYXJndW1lbnRzICk7XG5cdFx0fVxuXHR9O1xufVxuXG5cbnZhciBjc3NQcmVmaXhlcyA9IFsgXCJXZWJraXRcIiwgXCJNb3pcIiwgXCJtc1wiIF0sXG5cdGVtcHR5U3R5bGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImRpdlwiICkuc3R5bGUsXG5cdHZlbmRvclByb3BzID0ge307XG5cbi8vIFJldHVybiBhIHZlbmRvci1wcmVmaXhlZCBwcm9wZXJ0eSBvciB1bmRlZmluZWRcbmZ1bmN0aW9uIHZlbmRvclByb3BOYW1lKCBuYW1lICkge1xuXG5cdC8vIENoZWNrIGZvciB2ZW5kb3IgcHJlZml4ZWQgbmFtZXNcblx0dmFyIGNhcE5hbWUgPSBuYW1lWyAwIF0udG9VcHBlckNhc2UoKSArIG5hbWUuc2xpY2UoIDEgKSxcblx0XHRpID0gY3NzUHJlZml4ZXMubGVuZ3RoO1xuXG5cdHdoaWxlICggaS0tICkge1xuXHRcdG5hbWUgPSBjc3NQcmVmaXhlc1sgaSBdICsgY2FwTmFtZTtcblx0XHRpZiAoIG5hbWUgaW4gZW1wdHlTdHlsZSApIHtcblx0XHRcdHJldHVybiBuYW1lO1xuXHRcdH1cblx0fVxufVxuXG4vLyBSZXR1cm4gYSBwb3RlbnRpYWxseS1tYXBwZWQgalF1ZXJ5LmNzc1Byb3BzIG9yIHZlbmRvciBwcmVmaXhlZCBwcm9wZXJ0eVxuZnVuY3Rpb24gZmluYWxQcm9wTmFtZSggbmFtZSApIHtcblx0dmFyIGZpbmFsID0galF1ZXJ5LmNzc1Byb3BzWyBuYW1lIF0gfHwgdmVuZG9yUHJvcHNbIG5hbWUgXTtcblxuXHRpZiAoIGZpbmFsICkge1xuXHRcdHJldHVybiBmaW5hbDtcblx0fVxuXHRpZiAoIG5hbWUgaW4gZW1wdHlTdHlsZSApIHtcblx0XHRyZXR1cm4gbmFtZTtcblx0fVxuXHRyZXR1cm4gdmVuZG9yUHJvcHNbIG5hbWUgXSA9IHZlbmRvclByb3BOYW1lKCBuYW1lICkgfHwgbmFtZTtcbn1cblxuXG52YXJcblxuXHQvLyBTd2FwcGFibGUgaWYgZGlzcGxheSBpcyBub25lIG9yIHN0YXJ0cyB3aXRoIHRhYmxlXG5cdC8vIGV4Y2VwdCBcInRhYmxlXCIsIFwidGFibGUtY2VsbFwiLCBvciBcInRhYmxlLWNhcHRpb25cIlxuXHQvLyBTZWUgaGVyZSBmb3IgZGlzcGxheSB2YWx1ZXM6IGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvQ1NTL2Rpc3BsYXlcblx0cmRpc3BsYXlzd2FwID0gL14obm9uZXx0YWJsZSg/IS1jW2VhXSkuKykvLFxuXHRyY3VzdG9tUHJvcCA9IC9eLS0vLFxuXHRjc3NTaG93ID0geyBwb3NpdGlvbjogXCJhYnNvbHV0ZVwiLCB2aXNpYmlsaXR5OiBcImhpZGRlblwiLCBkaXNwbGF5OiBcImJsb2NrXCIgfSxcblx0Y3NzTm9ybWFsVHJhbnNmb3JtID0ge1xuXHRcdGxldHRlclNwYWNpbmc6IFwiMFwiLFxuXHRcdGZvbnRXZWlnaHQ6IFwiNDAwXCJcblx0fTtcblxuZnVuY3Rpb24gc2V0UG9zaXRpdmVOdW1iZXIoIF9lbGVtLCB2YWx1ZSwgc3VidHJhY3QgKSB7XG5cblx0Ly8gQW55IHJlbGF0aXZlICgrLy0pIHZhbHVlcyBoYXZlIGFscmVhZHkgYmVlblxuXHQvLyBub3JtYWxpemVkIGF0IHRoaXMgcG9pbnRcblx0dmFyIG1hdGNoZXMgPSByY3NzTnVtLmV4ZWMoIHZhbHVlICk7XG5cdHJldHVybiBtYXRjaGVzID9cblxuXHRcdC8vIEd1YXJkIGFnYWluc3QgdW5kZWZpbmVkIFwic3VidHJhY3RcIiwgZS5nLiwgd2hlbiB1c2VkIGFzIGluIGNzc0hvb2tzXG5cdFx0TWF0aC5tYXgoIDAsIG1hdGNoZXNbIDIgXSAtICggc3VidHJhY3QgfHwgMCApICkgKyAoIG1hdGNoZXNbIDMgXSB8fCBcInB4XCIgKSA6XG5cdFx0dmFsdWU7XG59XG5cbmZ1bmN0aW9uIGJveE1vZGVsQWRqdXN0bWVudCggZWxlbSwgZGltZW5zaW9uLCBib3gsIGlzQm9yZGVyQm94LCBzdHlsZXMsIGNvbXB1dGVkVmFsICkge1xuXHR2YXIgaSA9IGRpbWVuc2lvbiA9PT0gXCJ3aWR0aFwiID8gMSA6IDAsXG5cdFx0ZXh0cmEgPSAwLFxuXHRcdGRlbHRhID0gMDtcblxuXHQvLyBBZGp1c3RtZW50IG1heSBub3QgYmUgbmVjZXNzYXJ5XG5cdGlmICggYm94ID09PSAoIGlzQm9yZGVyQm94ID8gXCJib3JkZXJcIiA6IFwiY29udGVudFwiICkgKSB7XG5cdFx0cmV0dXJuIDA7XG5cdH1cblxuXHRmb3IgKCA7IGkgPCA0OyBpICs9IDIgKSB7XG5cblx0XHQvLyBCb3RoIGJveCBtb2RlbHMgZXhjbHVkZSBtYXJnaW5cblx0XHRpZiAoIGJveCA9PT0gXCJtYXJnaW5cIiApIHtcblx0XHRcdGRlbHRhICs9IGpRdWVyeS5jc3MoIGVsZW0sIGJveCArIGNzc0V4cGFuZFsgaSBdLCB0cnVlLCBzdHlsZXMgKTtcblx0XHR9XG5cblx0XHQvLyBJZiB3ZSBnZXQgaGVyZSB3aXRoIGEgY29udGVudC1ib3gsIHdlJ3JlIHNlZWtpbmcgXCJwYWRkaW5nXCIgb3IgXCJib3JkZXJcIiBvciBcIm1hcmdpblwiXG5cdFx0aWYgKCAhaXNCb3JkZXJCb3ggKSB7XG5cblx0XHRcdC8vIEFkZCBwYWRkaW5nXG5cdFx0XHRkZWx0YSArPSBqUXVlcnkuY3NzKCBlbGVtLCBcInBhZGRpbmdcIiArIGNzc0V4cGFuZFsgaSBdLCB0cnVlLCBzdHlsZXMgKTtcblxuXHRcdFx0Ly8gRm9yIFwiYm9yZGVyXCIgb3IgXCJtYXJnaW5cIiwgYWRkIGJvcmRlclxuXHRcdFx0aWYgKCBib3ggIT09IFwicGFkZGluZ1wiICkge1xuXHRcdFx0XHRkZWx0YSArPSBqUXVlcnkuY3NzKCBlbGVtLCBcImJvcmRlclwiICsgY3NzRXhwYW5kWyBpIF0gKyBcIldpZHRoXCIsIHRydWUsIHN0eWxlcyApO1xuXG5cdFx0XHQvLyBCdXQgc3RpbGwga2VlcCB0cmFjayBvZiBpdCBvdGhlcndpc2Vcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGV4dHJhICs9IGpRdWVyeS5jc3MoIGVsZW0sIFwiYm9yZGVyXCIgKyBjc3NFeHBhbmRbIGkgXSArIFwiV2lkdGhcIiwgdHJ1ZSwgc3R5bGVzICk7XG5cdFx0XHR9XG5cblx0XHQvLyBJZiB3ZSBnZXQgaGVyZSB3aXRoIGEgYm9yZGVyLWJveCAoY29udGVudCArIHBhZGRpbmcgKyBib3JkZXIpLCB3ZSdyZSBzZWVraW5nIFwiY29udGVudFwiIG9yXG5cdFx0Ly8gXCJwYWRkaW5nXCIgb3IgXCJtYXJnaW5cIlxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdC8vIEZvciBcImNvbnRlbnRcIiwgc3VidHJhY3QgcGFkZGluZ1xuXHRcdFx0aWYgKCBib3ggPT09IFwiY29udGVudFwiICkge1xuXHRcdFx0XHRkZWx0YSAtPSBqUXVlcnkuY3NzKCBlbGVtLCBcInBhZGRpbmdcIiArIGNzc0V4cGFuZFsgaSBdLCB0cnVlLCBzdHlsZXMgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gRm9yIFwiY29udGVudFwiIG9yIFwicGFkZGluZ1wiLCBzdWJ0cmFjdCBib3JkZXJcblx0XHRcdGlmICggYm94ICE9PSBcIm1hcmdpblwiICkge1xuXHRcdFx0XHRkZWx0YSAtPSBqUXVlcnkuY3NzKCBlbGVtLCBcImJvcmRlclwiICsgY3NzRXhwYW5kWyBpIF0gKyBcIldpZHRoXCIsIHRydWUsIHN0eWxlcyApO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdC8vIEFjY291bnQgZm9yIHBvc2l0aXZlIGNvbnRlbnQtYm94IHNjcm9sbCBndXR0ZXIgd2hlbiByZXF1ZXN0ZWQgYnkgcHJvdmlkaW5nIGNvbXB1dGVkVmFsXG5cdGlmICggIWlzQm9yZGVyQm94ICYmIGNvbXB1dGVkVmFsID49IDAgKSB7XG5cblx0XHQvLyBvZmZzZXRXaWR0aC9vZmZzZXRIZWlnaHQgaXMgYSByb3VuZGVkIHN1bSBvZiBjb250ZW50LCBwYWRkaW5nLCBzY3JvbGwgZ3V0dGVyLCBhbmQgYm9yZGVyXG5cdFx0Ly8gQXNzdW1pbmcgaW50ZWdlciBzY3JvbGwgZ3V0dGVyLCBzdWJ0cmFjdCB0aGUgcmVzdCBhbmQgcm91bmQgZG93blxuXHRcdGRlbHRhICs9IE1hdGgubWF4KCAwLCBNYXRoLmNlaWwoXG5cdFx0XHRlbGVtWyBcIm9mZnNldFwiICsgZGltZW5zaW9uWyAwIF0udG9VcHBlckNhc2UoKSArIGRpbWVuc2lvbi5zbGljZSggMSApIF0gLVxuXHRcdFx0Y29tcHV0ZWRWYWwgLVxuXHRcdFx0ZGVsdGEgLVxuXHRcdFx0ZXh0cmEgLVxuXHRcdFx0MC41XG5cblx0XHQvLyBJZiBvZmZzZXRXaWR0aC9vZmZzZXRIZWlnaHQgaXMgdW5rbm93biwgdGhlbiB3ZSBjYW4ndCBkZXRlcm1pbmUgY29udGVudC1ib3ggc2Nyb2xsIGd1dHRlclxuXHRcdC8vIFVzZSBhbiBleHBsaWNpdCB6ZXJvIHRvIGF2b2lkIE5hTiAoZ2gtMzk2NClcblx0XHQpICkgfHwgMDtcblx0fVxuXG5cdHJldHVybiBkZWx0YTtcbn1cblxuZnVuY3Rpb24gZ2V0V2lkdGhPckhlaWdodCggZWxlbSwgZGltZW5zaW9uLCBleHRyYSApIHtcblxuXHQvLyBTdGFydCB3aXRoIGNvbXB1dGVkIHN0eWxlXG5cdHZhciBzdHlsZXMgPSBnZXRTdHlsZXMoIGVsZW0gKSxcblxuXHRcdC8vIFRvIGF2b2lkIGZvcmNpbmcgYSByZWZsb3csIG9ubHkgZmV0Y2ggYm94U2l6aW5nIGlmIHdlIG5lZWQgaXQgKGdoLTQzMjIpLlxuXHRcdC8vIEZha2UgY29udGVudC1ib3ggdW50aWwgd2Uga25vdyBpdCdzIG5lZWRlZCB0byBrbm93IHRoZSB0cnVlIHZhbHVlLlxuXHRcdGJveFNpemluZ05lZWRlZCA9ICFzdXBwb3J0LmJveFNpemluZ1JlbGlhYmxlKCkgfHwgZXh0cmEsXG5cdFx0aXNCb3JkZXJCb3ggPSBib3hTaXppbmdOZWVkZWQgJiZcblx0XHRcdGpRdWVyeS5jc3MoIGVsZW0sIFwiYm94U2l6aW5nXCIsIGZhbHNlLCBzdHlsZXMgKSA9PT0gXCJib3JkZXItYm94XCIsXG5cdFx0dmFsdWVJc0JvcmRlckJveCA9IGlzQm9yZGVyQm94LFxuXG5cdFx0dmFsID0gY3VyQ1NTKCBlbGVtLCBkaW1lbnNpb24sIHN0eWxlcyApLFxuXHRcdG9mZnNldFByb3AgPSBcIm9mZnNldFwiICsgZGltZW5zaW9uWyAwIF0udG9VcHBlckNhc2UoKSArIGRpbWVuc2lvbi5zbGljZSggMSApO1xuXG5cdC8vIFN1cHBvcnQ6IEZpcmVmb3ggPD01NFxuXHQvLyBSZXR1cm4gYSBjb25mb3VuZGluZyBub24tcGl4ZWwgdmFsdWUgb3IgZmVpZ24gaWdub3JhbmNlLCBhcyBhcHByb3ByaWF0ZS5cblx0aWYgKCBybnVtbm9ucHgudGVzdCggdmFsICkgKSB7XG5cdFx0aWYgKCAhZXh0cmEgKSB7XG5cdFx0XHRyZXR1cm4gdmFsO1xuXHRcdH1cblx0XHR2YWwgPSBcImF1dG9cIjtcblx0fVxuXG5cblx0Ly8gU3VwcG9ydDogSUUgOSAtIDExIG9ubHlcblx0Ly8gVXNlIG9mZnNldFdpZHRoL29mZnNldEhlaWdodCBmb3Igd2hlbiBib3ggc2l6aW5nIGlzIHVucmVsaWFibGUuXG5cdC8vIEluIHRob3NlIGNhc2VzLCB0aGUgY29tcHV0ZWQgdmFsdWUgY2FuIGJlIHRydXN0ZWQgdG8gYmUgYm9yZGVyLWJveC5cblx0aWYgKCAoICFzdXBwb3J0LmJveFNpemluZ1JlbGlhYmxlKCkgJiYgaXNCb3JkZXJCb3ggfHxcblxuXHRcdC8vIFN1cHBvcnQ6IElFIDEwIC0gMTErLCBFZGdlIDE1IC0gMTgrXG5cdFx0Ly8gSUUvRWRnZSBtaXNyZXBvcnQgYGdldENvbXB1dGVkU3R5bGVgIG9mIHRhYmxlIHJvd3Mgd2l0aCB3aWR0aC9oZWlnaHRcblx0XHQvLyBzZXQgaW4gQ1NTIHdoaWxlIGBvZmZzZXQqYCBwcm9wZXJ0aWVzIHJlcG9ydCBjb3JyZWN0IHZhbHVlcy5cblx0XHQvLyBJbnRlcmVzdGluZ2x5LCBpbiBzb21lIGNhc2VzIElFIDkgZG9lc24ndCBzdWZmZXIgZnJvbSB0aGlzIGlzc3VlLlxuXHRcdCFzdXBwb3J0LnJlbGlhYmxlVHJEaW1lbnNpb25zKCkgJiYgbm9kZU5hbWUoIGVsZW0sIFwidHJcIiApIHx8XG5cblx0XHQvLyBGYWxsIGJhY2sgdG8gb2Zmc2V0V2lkdGgvb2Zmc2V0SGVpZ2h0IHdoZW4gdmFsdWUgaXMgXCJhdXRvXCJcblx0XHQvLyBUaGlzIGhhcHBlbnMgZm9yIGlubGluZSBlbGVtZW50cyB3aXRoIG5vIGV4cGxpY2l0IHNldHRpbmcgKGdoLTM1NzEpXG5cdFx0dmFsID09PSBcImF1dG9cIiB8fFxuXG5cdFx0Ly8gU3VwcG9ydDogQW5kcm9pZCA8PTQuMSAtIDQuMyBvbmx5XG5cdFx0Ly8gQWxzbyB1c2Ugb2Zmc2V0V2lkdGgvb2Zmc2V0SGVpZ2h0IGZvciBtaXNyZXBvcnRlZCBpbmxpbmUgZGltZW5zaW9ucyAoZ2gtMzYwMilcblx0XHQhcGFyc2VGbG9hdCggdmFsICkgJiYgalF1ZXJ5LmNzcyggZWxlbSwgXCJkaXNwbGF5XCIsIGZhbHNlLCBzdHlsZXMgKSA9PT0gXCJpbmxpbmVcIiApICYmXG5cblx0XHQvLyBNYWtlIHN1cmUgdGhlIGVsZW1lbnQgaXMgdmlzaWJsZSAmIGNvbm5lY3RlZFxuXHRcdGVsZW0uZ2V0Q2xpZW50UmVjdHMoKS5sZW5ndGggKSB7XG5cblx0XHRpc0JvcmRlckJveCA9IGpRdWVyeS5jc3MoIGVsZW0sIFwiYm94U2l6aW5nXCIsIGZhbHNlLCBzdHlsZXMgKSA9PT0gXCJib3JkZXItYm94XCI7XG5cblx0XHQvLyBXaGVyZSBhdmFpbGFibGUsIG9mZnNldFdpZHRoL29mZnNldEhlaWdodCBhcHByb3hpbWF0ZSBib3JkZXIgYm94IGRpbWVuc2lvbnMuXG5cdFx0Ly8gV2hlcmUgbm90IGF2YWlsYWJsZSAoZS5nLiwgU1ZHKSwgYXNzdW1lIHVucmVsaWFibGUgYm94LXNpemluZyBhbmQgaW50ZXJwcmV0IHRoZVxuXHRcdC8vIHJldHJpZXZlZCB2YWx1ZSBhcyBhIGNvbnRlbnQgYm94IGRpbWVuc2lvbi5cblx0XHR2YWx1ZUlzQm9yZGVyQm94ID0gb2Zmc2V0UHJvcCBpbiBlbGVtO1xuXHRcdGlmICggdmFsdWVJc0JvcmRlckJveCApIHtcblx0XHRcdHZhbCA9IGVsZW1bIG9mZnNldFByb3AgXTtcblx0XHR9XG5cdH1cblxuXHQvLyBOb3JtYWxpemUgXCJcIiBhbmQgYXV0b1xuXHR2YWwgPSBwYXJzZUZsb2F0KCB2YWwgKSB8fCAwO1xuXG5cdC8vIEFkanVzdCBmb3IgdGhlIGVsZW1lbnQncyBib3ggbW9kZWxcblx0cmV0dXJuICggdmFsICtcblx0XHRib3hNb2RlbEFkanVzdG1lbnQoXG5cdFx0XHRlbGVtLFxuXHRcdFx0ZGltZW5zaW9uLFxuXHRcdFx0ZXh0cmEgfHwgKCBpc0JvcmRlckJveCA/IFwiYm9yZGVyXCIgOiBcImNvbnRlbnRcIiApLFxuXHRcdFx0dmFsdWVJc0JvcmRlckJveCxcblx0XHRcdHN0eWxlcyxcblxuXHRcdFx0Ly8gUHJvdmlkZSB0aGUgY3VycmVudCBjb21wdXRlZCBzaXplIHRvIHJlcXVlc3Qgc2Nyb2xsIGd1dHRlciBjYWxjdWxhdGlvbiAoZ2gtMzU4OSlcblx0XHRcdHZhbFxuXHRcdClcblx0KSArIFwicHhcIjtcbn1cblxualF1ZXJ5LmV4dGVuZCgge1xuXG5cdC8vIEFkZCBpbiBzdHlsZSBwcm9wZXJ0eSBob29rcyBmb3Igb3ZlcnJpZGluZyB0aGUgZGVmYXVsdFxuXHQvLyBiZWhhdmlvciBvZiBnZXR0aW5nIGFuZCBzZXR0aW5nIGEgc3R5bGUgcHJvcGVydHlcblx0Y3NzSG9va3M6IHtcblx0XHRvcGFjaXR5OiB7XG5cdFx0XHRnZXQ6IGZ1bmN0aW9uKCBlbGVtLCBjb21wdXRlZCApIHtcblx0XHRcdFx0aWYgKCBjb21wdXRlZCApIHtcblxuXHRcdFx0XHRcdC8vIFdlIHNob3VsZCBhbHdheXMgZ2V0IGEgbnVtYmVyIGJhY2sgZnJvbSBvcGFjaXR5XG5cdFx0XHRcdFx0dmFyIHJldCA9IGN1ckNTUyggZWxlbSwgXCJvcGFjaXR5XCIgKTtcblx0XHRcdFx0XHRyZXR1cm4gcmV0ID09PSBcIlwiID8gXCIxXCIgOiByZXQ7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH0sXG5cblx0Ly8gRG9uJ3QgYXV0b21hdGljYWxseSBhZGQgXCJweFwiIHRvIHRoZXNlIHBvc3NpYmx5LXVuaXRsZXNzIHByb3BlcnRpZXNcblx0Y3NzTnVtYmVyOiB7XG5cdFx0XCJhbmltYXRpb25JdGVyYXRpb25Db3VudFwiOiB0cnVlLFxuXHRcdFwiY29sdW1uQ291bnRcIjogdHJ1ZSxcblx0XHRcImZpbGxPcGFjaXR5XCI6IHRydWUsXG5cdFx0XCJmbGV4R3Jvd1wiOiB0cnVlLFxuXHRcdFwiZmxleFNocmlua1wiOiB0cnVlLFxuXHRcdFwiZm9udFdlaWdodFwiOiB0cnVlLFxuXHRcdFwiZ3JpZEFyZWFcIjogdHJ1ZSxcblx0XHRcImdyaWRDb2x1bW5cIjogdHJ1ZSxcblx0XHRcImdyaWRDb2x1bW5FbmRcIjogdHJ1ZSxcblx0XHRcImdyaWRDb2x1bW5TdGFydFwiOiB0cnVlLFxuXHRcdFwiZ3JpZFJvd1wiOiB0cnVlLFxuXHRcdFwiZ3JpZFJvd0VuZFwiOiB0cnVlLFxuXHRcdFwiZ3JpZFJvd1N0YXJ0XCI6IHRydWUsXG5cdFx0XCJsaW5lSGVpZ2h0XCI6IHRydWUsXG5cdFx0XCJvcGFjaXR5XCI6IHRydWUsXG5cdFx0XCJvcmRlclwiOiB0cnVlLFxuXHRcdFwib3JwaGFuc1wiOiB0cnVlLFxuXHRcdFwid2lkb3dzXCI6IHRydWUsXG5cdFx0XCJ6SW5kZXhcIjogdHJ1ZSxcblx0XHRcInpvb21cIjogdHJ1ZVxuXHR9LFxuXG5cdC8vIEFkZCBpbiBwcm9wZXJ0aWVzIHdob3NlIG5hbWVzIHlvdSB3aXNoIHRvIGZpeCBiZWZvcmVcblx0Ly8gc2V0dGluZyBvciBnZXR0aW5nIHRoZSB2YWx1ZVxuXHRjc3NQcm9wczoge30sXG5cblx0Ly8gR2V0IGFuZCBzZXQgdGhlIHN0eWxlIHByb3BlcnR5IG9uIGEgRE9NIE5vZGVcblx0c3R5bGU6IGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCB2YWx1ZSwgZXh0cmEgKSB7XG5cblx0XHQvLyBEb24ndCBzZXQgc3R5bGVzIG9uIHRleHQgYW5kIGNvbW1lbnQgbm9kZXNcblx0XHRpZiAoICFlbGVtIHx8IGVsZW0ubm9kZVR5cGUgPT09IDMgfHwgZWxlbS5ub2RlVHlwZSA9PT0gOCB8fCAhZWxlbS5zdHlsZSApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHQvLyBNYWtlIHN1cmUgdGhhdCB3ZSdyZSB3b3JraW5nIHdpdGggdGhlIHJpZ2h0IG5hbWVcblx0XHR2YXIgcmV0LCB0eXBlLCBob29rcyxcblx0XHRcdG9yaWdOYW1lID0gY2FtZWxDYXNlKCBuYW1lICksXG5cdFx0XHRpc0N1c3RvbVByb3AgPSByY3VzdG9tUHJvcC50ZXN0KCBuYW1lICksXG5cdFx0XHRzdHlsZSA9IGVsZW0uc3R5bGU7XG5cblx0XHQvLyBNYWtlIHN1cmUgdGhhdCB3ZSdyZSB3b3JraW5nIHdpdGggdGhlIHJpZ2h0IG5hbWUuIFdlIGRvbid0XG5cdFx0Ly8gd2FudCB0byBxdWVyeSB0aGUgdmFsdWUgaWYgaXQgaXMgYSBDU1MgY3VzdG9tIHByb3BlcnR5XG5cdFx0Ly8gc2luY2UgdGhleSBhcmUgdXNlci1kZWZpbmVkLlxuXHRcdGlmICggIWlzQ3VzdG9tUHJvcCApIHtcblx0XHRcdG5hbWUgPSBmaW5hbFByb3BOYW1lKCBvcmlnTmFtZSApO1xuXHRcdH1cblxuXHRcdC8vIEdldHMgaG9vayBmb3IgdGhlIHByZWZpeGVkIHZlcnNpb24sIHRoZW4gdW5wcmVmaXhlZCB2ZXJzaW9uXG5cdFx0aG9va3MgPSBqUXVlcnkuY3NzSG9va3NbIG5hbWUgXSB8fCBqUXVlcnkuY3NzSG9va3NbIG9yaWdOYW1lIF07XG5cblx0XHQvLyBDaGVjayBpZiB3ZSdyZSBzZXR0aW5nIGEgdmFsdWVcblx0XHRpZiAoIHZhbHVlICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHR0eXBlID0gdHlwZW9mIHZhbHVlO1xuXG5cdFx0XHQvLyBDb252ZXJ0IFwiKz1cIiBvciBcIi09XCIgdG8gcmVsYXRpdmUgbnVtYmVycyAoIzczNDUpXG5cdFx0XHRpZiAoIHR5cGUgPT09IFwic3RyaW5nXCIgJiYgKCByZXQgPSByY3NzTnVtLmV4ZWMoIHZhbHVlICkgKSAmJiByZXRbIDEgXSApIHtcblx0XHRcdFx0dmFsdWUgPSBhZGp1c3RDU1MoIGVsZW0sIG5hbWUsIHJldCApO1xuXG5cdFx0XHRcdC8vIEZpeGVzIGJ1ZyAjOTIzN1xuXHRcdFx0XHR0eXBlID0gXCJudW1iZXJcIjtcblx0XHRcdH1cblxuXHRcdFx0Ly8gTWFrZSBzdXJlIHRoYXQgbnVsbCBhbmQgTmFOIHZhbHVlcyBhcmVuJ3Qgc2V0ICgjNzExNilcblx0XHRcdGlmICggdmFsdWUgPT0gbnVsbCB8fCB2YWx1ZSAhPT0gdmFsdWUgKSB7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblxuXHRcdFx0Ly8gSWYgYSBudW1iZXIgd2FzIHBhc3NlZCBpbiwgYWRkIHRoZSB1bml0IChleGNlcHQgZm9yIGNlcnRhaW4gQ1NTIHByb3BlcnRpZXMpXG5cdFx0XHQvLyBUaGUgaXNDdXN0b21Qcm9wIGNoZWNrIGNhbiBiZSByZW1vdmVkIGluIGpRdWVyeSA0LjAgd2hlbiB3ZSBvbmx5IGF1dG8tYXBwZW5kXG5cdFx0XHQvLyBcInB4XCIgdG8gYSBmZXcgaGFyZGNvZGVkIHZhbHVlcy5cblx0XHRcdGlmICggdHlwZSA9PT0gXCJudW1iZXJcIiAmJiAhaXNDdXN0b21Qcm9wICkge1xuXHRcdFx0XHR2YWx1ZSArPSByZXQgJiYgcmV0WyAzIF0gfHwgKCBqUXVlcnkuY3NzTnVtYmVyWyBvcmlnTmFtZSBdID8gXCJcIiA6IFwicHhcIiApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBiYWNrZ3JvdW5kLSogcHJvcHMgYWZmZWN0IG9yaWdpbmFsIGNsb25lJ3MgdmFsdWVzXG5cdFx0XHRpZiAoICFzdXBwb3J0LmNsZWFyQ2xvbmVTdHlsZSAmJiB2YWx1ZSA9PT0gXCJcIiAmJiBuYW1lLmluZGV4T2YoIFwiYmFja2dyb3VuZFwiICkgPT09IDAgKSB7XG5cdFx0XHRcdHN0eWxlWyBuYW1lIF0gPSBcImluaGVyaXRcIjtcblx0XHRcdH1cblxuXHRcdFx0Ly8gSWYgYSBob29rIHdhcyBwcm92aWRlZCwgdXNlIHRoYXQgdmFsdWUsIG90aGVyd2lzZSBqdXN0IHNldCB0aGUgc3BlY2lmaWVkIHZhbHVlXG5cdFx0XHRpZiAoICFob29rcyB8fCAhKCBcInNldFwiIGluIGhvb2tzICkgfHxcblx0XHRcdFx0KCB2YWx1ZSA9IGhvb2tzLnNldCggZWxlbSwgdmFsdWUsIGV4dHJhICkgKSAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdGlmICggaXNDdXN0b21Qcm9wICkge1xuXHRcdFx0XHRcdHN0eWxlLnNldFByb3BlcnR5KCBuYW1lLCB2YWx1ZSApO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdHN0eWxlWyBuYW1lIF0gPSB2YWx1ZTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0Ly8gSWYgYSBob29rIHdhcyBwcm92aWRlZCBnZXQgdGhlIG5vbi1jb21wdXRlZCB2YWx1ZSBmcm9tIHRoZXJlXG5cdFx0XHRpZiAoIGhvb2tzICYmIFwiZ2V0XCIgaW4gaG9va3MgJiZcblx0XHRcdFx0KCByZXQgPSBob29rcy5nZXQoIGVsZW0sIGZhbHNlLCBleHRyYSApICkgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHRyZXR1cm4gcmV0O1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBPdGhlcndpc2UganVzdCBnZXQgdGhlIHZhbHVlIGZyb20gdGhlIHN0eWxlIG9iamVjdFxuXHRcdFx0cmV0dXJuIHN0eWxlWyBuYW1lIF07XG5cdFx0fVxuXHR9LFxuXG5cdGNzczogZnVuY3Rpb24oIGVsZW0sIG5hbWUsIGV4dHJhLCBzdHlsZXMgKSB7XG5cdFx0dmFyIHZhbCwgbnVtLCBob29rcyxcblx0XHRcdG9yaWdOYW1lID0gY2FtZWxDYXNlKCBuYW1lICksXG5cdFx0XHRpc0N1c3RvbVByb3AgPSByY3VzdG9tUHJvcC50ZXN0KCBuYW1lICk7XG5cblx0XHQvLyBNYWtlIHN1cmUgdGhhdCB3ZSdyZSB3b3JraW5nIHdpdGggdGhlIHJpZ2h0IG5hbWUuIFdlIGRvbid0XG5cdFx0Ly8gd2FudCB0byBtb2RpZnkgdGhlIHZhbHVlIGlmIGl0IGlzIGEgQ1NTIGN1c3RvbSBwcm9wZXJ0eVxuXHRcdC8vIHNpbmNlIHRoZXkgYXJlIHVzZXItZGVmaW5lZC5cblx0XHRpZiAoICFpc0N1c3RvbVByb3AgKSB7XG5cdFx0XHRuYW1lID0gZmluYWxQcm9wTmFtZSggb3JpZ05hbWUgKTtcblx0XHR9XG5cblx0XHQvLyBUcnkgcHJlZml4ZWQgbmFtZSBmb2xsb3dlZCBieSB0aGUgdW5wcmVmaXhlZCBuYW1lXG5cdFx0aG9va3MgPSBqUXVlcnkuY3NzSG9va3NbIG5hbWUgXSB8fCBqUXVlcnkuY3NzSG9va3NbIG9yaWdOYW1lIF07XG5cblx0XHQvLyBJZiBhIGhvb2sgd2FzIHByb3ZpZGVkIGdldCB0aGUgY29tcHV0ZWQgdmFsdWUgZnJvbSB0aGVyZVxuXHRcdGlmICggaG9va3MgJiYgXCJnZXRcIiBpbiBob29rcyApIHtcblx0XHRcdHZhbCA9IGhvb2tzLmdldCggZWxlbSwgdHJ1ZSwgZXh0cmEgKTtcblx0XHR9XG5cblx0XHQvLyBPdGhlcndpc2UsIGlmIGEgd2F5IHRvIGdldCB0aGUgY29tcHV0ZWQgdmFsdWUgZXhpc3RzLCB1c2UgdGhhdFxuXHRcdGlmICggdmFsID09PSB1bmRlZmluZWQgKSB7XG5cdFx0XHR2YWwgPSBjdXJDU1MoIGVsZW0sIG5hbWUsIHN0eWxlcyApO1xuXHRcdH1cblxuXHRcdC8vIENvbnZlcnQgXCJub3JtYWxcIiB0byBjb21wdXRlZCB2YWx1ZVxuXHRcdGlmICggdmFsID09PSBcIm5vcm1hbFwiICYmIG5hbWUgaW4gY3NzTm9ybWFsVHJhbnNmb3JtICkge1xuXHRcdFx0dmFsID0gY3NzTm9ybWFsVHJhbnNmb3JtWyBuYW1lIF07XG5cdFx0fVxuXG5cdFx0Ly8gTWFrZSBudW1lcmljIGlmIGZvcmNlZCBvciBhIHF1YWxpZmllciB3YXMgcHJvdmlkZWQgYW5kIHZhbCBsb29rcyBudW1lcmljXG5cdFx0aWYgKCBleHRyYSA9PT0gXCJcIiB8fCBleHRyYSApIHtcblx0XHRcdG51bSA9IHBhcnNlRmxvYXQoIHZhbCApO1xuXHRcdFx0cmV0dXJuIGV4dHJhID09PSB0cnVlIHx8IGlzRmluaXRlKCBudW0gKSA/IG51bSB8fCAwIDogdmFsO1xuXHRcdH1cblxuXHRcdHJldHVybiB2YWw7XG5cdH1cbn0gKTtcblxualF1ZXJ5LmVhY2goIFsgXCJoZWlnaHRcIiwgXCJ3aWR0aFwiIF0sIGZ1bmN0aW9uKCBfaSwgZGltZW5zaW9uICkge1xuXHRqUXVlcnkuY3NzSG9va3NbIGRpbWVuc2lvbiBdID0ge1xuXHRcdGdldDogZnVuY3Rpb24oIGVsZW0sIGNvbXB1dGVkLCBleHRyYSApIHtcblx0XHRcdGlmICggY29tcHV0ZWQgKSB7XG5cblx0XHRcdFx0Ly8gQ2VydGFpbiBlbGVtZW50cyBjYW4gaGF2ZSBkaW1lbnNpb24gaW5mbyBpZiB3ZSBpbnZpc2libHkgc2hvdyB0aGVtXG5cdFx0XHRcdC8vIGJ1dCBpdCBtdXN0IGhhdmUgYSBjdXJyZW50IGRpc3BsYXkgc3R5bGUgdGhhdCB3b3VsZCBiZW5lZml0XG5cdFx0XHRcdHJldHVybiByZGlzcGxheXN3YXAudGVzdCggalF1ZXJ5LmNzcyggZWxlbSwgXCJkaXNwbGF5XCIgKSApICYmXG5cblx0XHRcdFx0XHQvLyBTdXBwb3J0OiBTYWZhcmkgOCtcblx0XHRcdFx0XHQvLyBUYWJsZSBjb2x1bW5zIGluIFNhZmFyaSBoYXZlIG5vbi16ZXJvIG9mZnNldFdpZHRoICYgemVyb1xuXHRcdFx0XHRcdC8vIGdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLndpZHRoIHVubGVzcyBkaXNwbGF5IGlzIGNoYW5nZWQuXG5cdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgPD0xMSBvbmx5XG5cdFx0XHRcdFx0Ly8gUnVubmluZyBnZXRCb3VuZGluZ0NsaWVudFJlY3Qgb24gYSBkaXNjb25uZWN0ZWQgbm9kZVxuXHRcdFx0XHRcdC8vIGluIElFIHRocm93cyBhbiBlcnJvci5cblx0XHRcdFx0XHQoICFlbGVtLmdldENsaWVudFJlY3RzKCkubGVuZ3RoIHx8ICFlbGVtLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLndpZHRoICkgP1xuXHRcdFx0XHRcdFx0c3dhcCggZWxlbSwgY3NzU2hvdywgZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0XHRcdHJldHVybiBnZXRXaWR0aE9ySGVpZ2h0KCBlbGVtLCBkaW1lbnNpb24sIGV4dHJhICk7XG5cdFx0XHRcdFx0XHR9ICkgOlxuXHRcdFx0XHRcdFx0Z2V0V2lkdGhPckhlaWdodCggZWxlbSwgZGltZW5zaW9uLCBleHRyYSApO1xuXHRcdFx0fVxuXHRcdH0sXG5cblx0XHRzZXQ6IGZ1bmN0aW9uKCBlbGVtLCB2YWx1ZSwgZXh0cmEgKSB7XG5cdFx0XHR2YXIgbWF0Y2hlcyxcblx0XHRcdFx0c3R5bGVzID0gZ2V0U3R5bGVzKCBlbGVtICksXG5cblx0XHRcdFx0Ly8gT25seSByZWFkIHN0eWxlcy5wb3NpdGlvbiBpZiB0aGUgdGVzdCBoYXMgYSBjaGFuY2UgdG8gZmFpbFxuXHRcdFx0XHQvLyB0byBhdm9pZCBmb3JjaW5nIGEgcmVmbG93LlxuXHRcdFx0XHRzY3JvbGxib3hTaXplQnVnZ3kgPSAhc3VwcG9ydC5zY3JvbGxib3hTaXplKCkgJiZcblx0XHRcdFx0XHRzdHlsZXMucG9zaXRpb24gPT09IFwiYWJzb2x1dGVcIixcblxuXHRcdFx0XHQvLyBUbyBhdm9pZCBmb3JjaW5nIGEgcmVmbG93LCBvbmx5IGZldGNoIGJveFNpemluZyBpZiB3ZSBuZWVkIGl0IChnaC0zOTkxKVxuXHRcdFx0XHRib3hTaXppbmdOZWVkZWQgPSBzY3JvbGxib3hTaXplQnVnZ3kgfHwgZXh0cmEsXG5cdFx0XHRcdGlzQm9yZGVyQm94ID0gYm94U2l6aW5nTmVlZGVkICYmXG5cdFx0XHRcdFx0alF1ZXJ5LmNzcyggZWxlbSwgXCJib3hTaXppbmdcIiwgZmFsc2UsIHN0eWxlcyApID09PSBcImJvcmRlci1ib3hcIixcblx0XHRcdFx0c3VidHJhY3QgPSBleHRyYSA/XG5cdFx0XHRcdFx0Ym94TW9kZWxBZGp1c3RtZW50KFxuXHRcdFx0XHRcdFx0ZWxlbSxcblx0XHRcdFx0XHRcdGRpbWVuc2lvbixcblx0XHRcdFx0XHRcdGV4dHJhLFxuXHRcdFx0XHRcdFx0aXNCb3JkZXJCb3gsXG5cdFx0XHRcdFx0XHRzdHlsZXNcblx0XHRcdFx0XHQpIDpcblx0XHRcdFx0XHQwO1xuXG5cdFx0XHQvLyBBY2NvdW50IGZvciB1bnJlbGlhYmxlIGJvcmRlci1ib3ggZGltZW5zaW9ucyBieSBjb21wYXJpbmcgb2Zmc2V0KiB0byBjb21wdXRlZCBhbmRcblx0XHRcdC8vIGZha2luZyBhIGNvbnRlbnQtYm94IHRvIGdldCBib3JkZXIgYW5kIHBhZGRpbmcgKGdoLTM2OTkpXG5cdFx0XHRpZiAoIGlzQm9yZGVyQm94ICYmIHNjcm9sbGJveFNpemVCdWdneSApIHtcblx0XHRcdFx0c3VidHJhY3QgLT0gTWF0aC5jZWlsKFxuXHRcdFx0XHRcdGVsZW1bIFwib2Zmc2V0XCIgKyBkaW1lbnNpb25bIDAgXS50b1VwcGVyQ2FzZSgpICsgZGltZW5zaW9uLnNsaWNlKCAxICkgXSAtXG5cdFx0XHRcdFx0cGFyc2VGbG9hdCggc3R5bGVzWyBkaW1lbnNpb24gXSApIC1cblx0XHRcdFx0XHRib3hNb2RlbEFkanVzdG1lbnQoIGVsZW0sIGRpbWVuc2lvbiwgXCJib3JkZXJcIiwgZmFsc2UsIHN0eWxlcyApIC1cblx0XHRcdFx0XHQwLjVcblx0XHRcdFx0KTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gQ29udmVydCB0byBwaXhlbHMgaWYgdmFsdWUgYWRqdXN0bWVudCBpcyBuZWVkZWRcblx0XHRcdGlmICggc3VidHJhY3QgJiYgKCBtYXRjaGVzID0gcmNzc051bS5leGVjKCB2YWx1ZSApICkgJiZcblx0XHRcdFx0KCBtYXRjaGVzWyAzIF0gfHwgXCJweFwiICkgIT09IFwicHhcIiApIHtcblxuXHRcdFx0XHRlbGVtLnN0eWxlWyBkaW1lbnNpb24gXSA9IHZhbHVlO1xuXHRcdFx0XHR2YWx1ZSA9IGpRdWVyeS5jc3MoIGVsZW0sIGRpbWVuc2lvbiApO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gc2V0UG9zaXRpdmVOdW1iZXIoIGVsZW0sIHZhbHVlLCBzdWJ0cmFjdCApO1xuXHRcdH1cblx0fTtcbn0gKTtcblxualF1ZXJ5LmNzc0hvb2tzLm1hcmdpbkxlZnQgPSBhZGRHZXRIb29rSWYoIHN1cHBvcnQucmVsaWFibGVNYXJnaW5MZWZ0LFxuXHRmdW5jdGlvbiggZWxlbSwgY29tcHV0ZWQgKSB7XG5cdFx0aWYgKCBjb21wdXRlZCApIHtcblx0XHRcdHJldHVybiAoIHBhcnNlRmxvYXQoIGN1ckNTUyggZWxlbSwgXCJtYXJnaW5MZWZ0XCIgKSApIHx8XG5cdFx0XHRcdGVsZW0uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkubGVmdCAtXG5cdFx0XHRcdFx0c3dhcCggZWxlbSwgeyBtYXJnaW5MZWZ0OiAwIH0sIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdFx0cmV0dXJuIGVsZW0uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkubGVmdDtcblx0XHRcdFx0XHR9IClcblx0XHRcdFx0KSArIFwicHhcIjtcblx0XHR9XG5cdH1cbik7XG5cbi8vIFRoZXNlIGhvb2tzIGFyZSB1c2VkIGJ5IGFuaW1hdGUgdG8gZXhwYW5kIHByb3BlcnRpZXNcbmpRdWVyeS5lYWNoKCB7XG5cdG1hcmdpbjogXCJcIixcblx0cGFkZGluZzogXCJcIixcblx0Ym9yZGVyOiBcIldpZHRoXCJcbn0sIGZ1bmN0aW9uKCBwcmVmaXgsIHN1ZmZpeCApIHtcblx0alF1ZXJ5LmNzc0hvb2tzWyBwcmVmaXggKyBzdWZmaXggXSA9IHtcblx0XHRleHBhbmQ6IGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHRcdHZhciBpID0gMCxcblx0XHRcdFx0ZXhwYW5kZWQgPSB7fSxcblxuXHRcdFx0XHQvLyBBc3N1bWVzIGEgc2luZ2xlIG51bWJlciBpZiBub3QgYSBzdHJpbmdcblx0XHRcdFx0cGFydHMgPSB0eXBlb2YgdmFsdWUgPT09IFwic3RyaW5nXCIgPyB2YWx1ZS5zcGxpdCggXCIgXCIgKSA6IFsgdmFsdWUgXTtcblxuXHRcdFx0Zm9yICggOyBpIDwgNDsgaSsrICkge1xuXHRcdFx0XHRleHBhbmRlZFsgcHJlZml4ICsgY3NzRXhwYW5kWyBpIF0gKyBzdWZmaXggXSA9XG5cdFx0XHRcdFx0cGFydHNbIGkgXSB8fCBwYXJ0c1sgaSAtIDIgXSB8fCBwYXJ0c1sgMCBdO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gZXhwYW5kZWQ7XG5cdFx0fVxuXHR9O1xuXG5cdGlmICggcHJlZml4ICE9PSBcIm1hcmdpblwiICkge1xuXHRcdGpRdWVyeS5jc3NIb29rc1sgcHJlZml4ICsgc3VmZml4IF0uc2V0ID0gc2V0UG9zaXRpdmVOdW1iZXI7XG5cdH1cbn0gKTtcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHRjc3M6IGZ1bmN0aW9uKCBuYW1lLCB2YWx1ZSApIHtcblx0XHRyZXR1cm4gYWNjZXNzKCB0aGlzLCBmdW5jdGlvbiggZWxlbSwgbmFtZSwgdmFsdWUgKSB7XG5cdFx0XHR2YXIgc3R5bGVzLCBsZW4sXG5cdFx0XHRcdG1hcCA9IHt9LFxuXHRcdFx0XHRpID0gMDtcblxuXHRcdFx0aWYgKCBBcnJheS5pc0FycmF5KCBuYW1lICkgKSB7XG5cdFx0XHRcdHN0eWxlcyA9IGdldFN0eWxlcyggZWxlbSApO1xuXHRcdFx0XHRsZW4gPSBuYW1lLmxlbmd0aDtcblxuXHRcdFx0XHRmb3IgKCA7IGkgPCBsZW47IGkrKyApIHtcblx0XHRcdFx0XHRtYXBbIG5hbWVbIGkgXSBdID0galF1ZXJ5LmNzcyggZWxlbSwgbmFtZVsgaSBdLCBmYWxzZSwgc3R5bGVzICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRyZXR1cm4gbWFwO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gdmFsdWUgIT09IHVuZGVmaW5lZCA/XG5cdFx0XHRcdGpRdWVyeS5zdHlsZSggZWxlbSwgbmFtZSwgdmFsdWUgKSA6XG5cdFx0XHRcdGpRdWVyeS5jc3MoIGVsZW0sIG5hbWUgKTtcblx0XHR9LCBuYW1lLCB2YWx1ZSwgYXJndW1lbnRzLmxlbmd0aCA+IDEgKTtcblx0fVxufSApO1xuXG5cbmZ1bmN0aW9uIFR3ZWVuKCBlbGVtLCBvcHRpb25zLCBwcm9wLCBlbmQsIGVhc2luZyApIHtcblx0cmV0dXJuIG5ldyBUd2Vlbi5wcm90b3R5cGUuaW5pdCggZWxlbSwgb3B0aW9ucywgcHJvcCwgZW5kLCBlYXNpbmcgKTtcbn1cbmpRdWVyeS5Ud2VlbiA9IFR3ZWVuO1xuXG5Ud2Vlbi5wcm90b3R5cGUgPSB7XG5cdGNvbnN0cnVjdG9yOiBUd2Vlbixcblx0aW5pdDogZnVuY3Rpb24oIGVsZW0sIG9wdGlvbnMsIHByb3AsIGVuZCwgZWFzaW5nLCB1bml0ICkge1xuXHRcdHRoaXMuZWxlbSA9IGVsZW07XG5cdFx0dGhpcy5wcm9wID0gcHJvcDtcblx0XHR0aGlzLmVhc2luZyA9IGVhc2luZyB8fCBqUXVlcnkuZWFzaW5nLl9kZWZhdWx0O1xuXHRcdHRoaXMub3B0aW9ucyA9IG9wdGlvbnM7XG5cdFx0dGhpcy5zdGFydCA9IHRoaXMubm93ID0gdGhpcy5jdXIoKTtcblx0XHR0aGlzLmVuZCA9IGVuZDtcblx0XHR0aGlzLnVuaXQgPSB1bml0IHx8ICggalF1ZXJ5LmNzc051bWJlclsgcHJvcCBdID8gXCJcIiA6IFwicHhcIiApO1xuXHR9LFxuXHRjdXI6IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBob29rcyA9IFR3ZWVuLnByb3BIb29rc1sgdGhpcy5wcm9wIF07XG5cblx0XHRyZXR1cm4gaG9va3MgJiYgaG9va3MuZ2V0ID9cblx0XHRcdGhvb2tzLmdldCggdGhpcyApIDpcblx0XHRcdFR3ZWVuLnByb3BIb29rcy5fZGVmYXVsdC5nZXQoIHRoaXMgKTtcblx0fSxcblx0cnVuOiBmdW5jdGlvbiggcGVyY2VudCApIHtcblx0XHR2YXIgZWFzZWQsXG5cdFx0XHRob29rcyA9IFR3ZWVuLnByb3BIb29rc1sgdGhpcy5wcm9wIF07XG5cblx0XHRpZiAoIHRoaXMub3B0aW9ucy5kdXJhdGlvbiApIHtcblx0XHRcdHRoaXMucG9zID0gZWFzZWQgPSBqUXVlcnkuZWFzaW5nWyB0aGlzLmVhc2luZyBdKFxuXHRcdFx0XHRwZXJjZW50LCB0aGlzLm9wdGlvbnMuZHVyYXRpb24gKiBwZXJjZW50LCAwLCAxLCB0aGlzLm9wdGlvbnMuZHVyYXRpb25cblx0XHRcdCk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHRoaXMucG9zID0gZWFzZWQgPSBwZXJjZW50O1xuXHRcdH1cblx0XHR0aGlzLm5vdyA9ICggdGhpcy5lbmQgLSB0aGlzLnN0YXJ0ICkgKiBlYXNlZCArIHRoaXMuc3RhcnQ7XG5cblx0XHRpZiAoIHRoaXMub3B0aW9ucy5zdGVwICkge1xuXHRcdFx0dGhpcy5vcHRpb25zLnN0ZXAuY2FsbCggdGhpcy5lbGVtLCB0aGlzLm5vdywgdGhpcyApO1xuXHRcdH1cblxuXHRcdGlmICggaG9va3MgJiYgaG9va3Muc2V0ICkge1xuXHRcdFx0aG9va3Muc2V0KCB0aGlzICk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdFR3ZWVuLnByb3BIb29rcy5fZGVmYXVsdC5zZXQoIHRoaXMgKTtcblx0XHR9XG5cdFx0cmV0dXJuIHRoaXM7XG5cdH1cbn07XG5cblR3ZWVuLnByb3RvdHlwZS5pbml0LnByb3RvdHlwZSA9IFR3ZWVuLnByb3RvdHlwZTtcblxuVHdlZW4ucHJvcEhvb2tzID0ge1xuXHRfZGVmYXVsdDoge1xuXHRcdGdldDogZnVuY3Rpb24oIHR3ZWVuICkge1xuXHRcdFx0dmFyIHJlc3VsdDtcblxuXHRcdFx0Ly8gVXNlIGEgcHJvcGVydHkgb24gdGhlIGVsZW1lbnQgZGlyZWN0bHkgd2hlbiBpdCBpcyBub3QgYSBET00gZWxlbWVudCxcblx0XHRcdC8vIG9yIHdoZW4gdGhlcmUgaXMgbm8gbWF0Y2hpbmcgc3R5bGUgcHJvcGVydHkgdGhhdCBleGlzdHMuXG5cdFx0XHRpZiAoIHR3ZWVuLmVsZW0ubm9kZVR5cGUgIT09IDEgfHxcblx0XHRcdFx0dHdlZW4uZWxlbVsgdHdlZW4ucHJvcCBdICE9IG51bGwgJiYgdHdlZW4uZWxlbS5zdHlsZVsgdHdlZW4ucHJvcCBdID09IG51bGwgKSB7XG5cdFx0XHRcdHJldHVybiB0d2Vlbi5lbGVtWyB0d2Vlbi5wcm9wIF07XG5cdFx0XHR9XG5cblx0XHRcdC8vIFBhc3NpbmcgYW4gZW1wdHkgc3RyaW5nIGFzIGEgM3JkIHBhcmFtZXRlciB0byAuY3NzIHdpbGwgYXV0b21hdGljYWxseVxuXHRcdFx0Ly8gYXR0ZW1wdCBhIHBhcnNlRmxvYXQgYW5kIGZhbGxiYWNrIHRvIGEgc3RyaW5nIGlmIHRoZSBwYXJzZSBmYWlscy5cblx0XHRcdC8vIFNpbXBsZSB2YWx1ZXMgc3VjaCBhcyBcIjEwcHhcIiBhcmUgcGFyc2VkIHRvIEZsb2F0O1xuXHRcdFx0Ly8gY29tcGxleCB2YWx1ZXMgc3VjaCBhcyBcInJvdGF0ZSgxcmFkKVwiIGFyZSByZXR1cm5lZCBhcy1pcy5cblx0XHRcdHJlc3VsdCA9IGpRdWVyeS5jc3MoIHR3ZWVuLmVsZW0sIHR3ZWVuLnByb3AsIFwiXCIgKTtcblxuXHRcdFx0Ly8gRW1wdHkgc3RyaW5ncywgbnVsbCwgdW5kZWZpbmVkIGFuZCBcImF1dG9cIiBhcmUgY29udmVydGVkIHRvIDAuXG5cdFx0XHRyZXR1cm4gIXJlc3VsdCB8fCByZXN1bHQgPT09IFwiYXV0b1wiID8gMCA6IHJlc3VsdDtcblx0XHR9LFxuXHRcdHNldDogZnVuY3Rpb24oIHR3ZWVuICkge1xuXG5cdFx0XHQvLyBVc2Ugc3RlcCBob29rIGZvciBiYWNrIGNvbXBhdC5cblx0XHRcdC8vIFVzZSBjc3NIb29rIGlmIGl0cyB0aGVyZS5cblx0XHRcdC8vIFVzZSAuc3R5bGUgaWYgYXZhaWxhYmxlIGFuZCB1c2UgcGxhaW4gcHJvcGVydGllcyB3aGVyZSBhdmFpbGFibGUuXG5cdFx0XHRpZiAoIGpRdWVyeS5meC5zdGVwWyB0d2Vlbi5wcm9wIF0gKSB7XG5cdFx0XHRcdGpRdWVyeS5meC5zdGVwWyB0d2Vlbi5wcm9wIF0oIHR3ZWVuICk7XG5cdFx0XHR9IGVsc2UgaWYgKCB0d2Vlbi5lbGVtLm5vZGVUeXBlID09PSAxICYmIChcblx0XHRcdFx0XHRqUXVlcnkuY3NzSG9va3NbIHR3ZWVuLnByb3AgXSB8fFxuXHRcdFx0XHRcdHR3ZWVuLmVsZW0uc3R5bGVbIGZpbmFsUHJvcE5hbWUoIHR3ZWVuLnByb3AgKSBdICE9IG51bGwgKSApIHtcblx0XHRcdFx0alF1ZXJ5LnN0eWxlKCB0d2Vlbi5lbGVtLCB0d2Vlbi5wcm9wLCB0d2Vlbi5ub3cgKyB0d2Vlbi51bml0ICk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHR0d2Vlbi5lbGVtWyB0d2Vlbi5wcm9wIF0gPSB0d2Vlbi5ub3c7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG59O1xuXG4vLyBTdXBwb3J0OiBJRSA8PTkgb25seVxuLy8gUGFuaWMgYmFzZWQgYXBwcm9hY2ggdG8gc2V0dGluZyB0aGluZ3Mgb24gZGlzY29ubmVjdGVkIG5vZGVzXG5Ud2Vlbi5wcm9wSG9va3Muc2Nyb2xsVG9wID0gVHdlZW4ucHJvcEhvb2tzLnNjcm9sbExlZnQgPSB7XG5cdHNldDogZnVuY3Rpb24oIHR3ZWVuICkge1xuXHRcdGlmICggdHdlZW4uZWxlbS5ub2RlVHlwZSAmJiB0d2Vlbi5lbGVtLnBhcmVudE5vZGUgKSB7XG5cdFx0XHR0d2Vlbi5lbGVtWyB0d2Vlbi5wcm9wIF0gPSB0d2Vlbi5ub3c7XG5cdFx0fVxuXHR9XG59O1xuXG5qUXVlcnkuZWFzaW5nID0ge1xuXHRsaW5lYXI6IGZ1bmN0aW9uKCBwICkge1xuXHRcdHJldHVybiBwO1xuXHR9LFxuXHRzd2luZzogZnVuY3Rpb24oIHAgKSB7XG5cdFx0cmV0dXJuIDAuNSAtIE1hdGguY29zKCBwICogTWF0aC5QSSApIC8gMjtcblx0fSxcblx0X2RlZmF1bHQ6IFwic3dpbmdcIlxufTtcblxualF1ZXJ5LmZ4ID0gVHdlZW4ucHJvdG90eXBlLmluaXQ7XG5cbi8vIEJhY2sgY29tcGF0IDwxLjggZXh0ZW5zaW9uIHBvaW50XG5qUXVlcnkuZnguc3RlcCA9IHt9O1xuXG5cblxuXG52YXJcblx0ZnhOb3csIGluUHJvZ3Jlc3MsXG5cdHJmeHR5cGVzID0gL14oPzp0b2dnbGV8c2hvd3xoaWRlKSQvLFxuXHRycnVuID0gL3F1ZXVlSG9va3MkLztcblxuZnVuY3Rpb24gc2NoZWR1bGUoKSB7XG5cdGlmICggaW5Qcm9ncmVzcyApIHtcblx0XHRpZiAoIGRvY3VtZW50LmhpZGRlbiA9PT0gZmFsc2UgJiYgd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZSApIHtcblx0XHRcdHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUoIHNjaGVkdWxlICk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHdpbmRvdy5zZXRUaW1lb3V0KCBzY2hlZHVsZSwgalF1ZXJ5LmZ4LmludGVydmFsICk7XG5cdFx0fVxuXG5cdFx0alF1ZXJ5LmZ4LnRpY2soKTtcblx0fVxufVxuXG4vLyBBbmltYXRpb25zIGNyZWF0ZWQgc3luY2hyb25vdXNseSB3aWxsIHJ1biBzeW5jaHJvbm91c2x5XG5mdW5jdGlvbiBjcmVhdGVGeE5vdygpIHtcblx0d2luZG93LnNldFRpbWVvdXQoIGZ1bmN0aW9uKCkge1xuXHRcdGZ4Tm93ID0gdW5kZWZpbmVkO1xuXHR9ICk7XG5cdHJldHVybiAoIGZ4Tm93ID0gRGF0ZS5ub3coKSApO1xufVxuXG4vLyBHZW5lcmF0ZSBwYXJhbWV0ZXJzIHRvIGNyZWF0ZSBhIHN0YW5kYXJkIGFuaW1hdGlvblxuZnVuY3Rpb24gZ2VuRngoIHR5cGUsIGluY2x1ZGVXaWR0aCApIHtcblx0dmFyIHdoaWNoLFxuXHRcdGkgPSAwLFxuXHRcdGF0dHJzID0geyBoZWlnaHQ6IHR5cGUgfTtcblxuXHQvLyBJZiB3ZSBpbmNsdWRlIHdpZHRoLCBzdGVwIHZhbHVlIGlzIDEgdG8gZG8gYWxsIGNzc0V4cGFuZCB2YWx1ZXMsXG5cdC8vIG90aGVyd2lzZSBzdGVwIHZhbHVlIGlzIDIgdG8gc2tpcCBvdmVyIExlZnQgYW5kIFJpZ2h0XG5cdGluY2x1ZGVXaWR0aCA9IGluY2x1ZGVXaWR0aCA/IDEgOiAwO1xuXHRmb3IgKCA7IGkgPCA0OyBpICs9IDIgLSBpbmNsdWRlV2lkdGggKSB7XG5cdFx0d2hpY2ggPSBjc3NFeHBhbmRbIGkgXTtcblx0XHRhdHRyc1sgXCJtYXJnaW5cIiArIHdoaWNoIF0gPSBhdHRyc1sgXCJwYWRkaW5nXCIgKyB3aGljaCBdID0gdHlwZTtcblx0fVxuXG5cdGlmICggaW5jbHVkZVdpZHRoICkge1xuXHRcdGF0dHJzLm9wYWNpdHkgPSBhdHRycy53aWR0aCA9IHR5cGU7XG5cdH1cblxuXHRyZXR1cm4gYXR0cnM7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZVR3ZWVuKCB2YWx1ZSwgcHJvcCwgYW5pbWF0aW9uICkge1xuXHR2YXIgdHdlZW4sXG5cdFx0Y29sbGVjdGlvbiA9ICggQW5pbWF0aW9uLnR3ZWVuZXJzWyBwcm9wIF0gfHwgW10gKS5jb25jYXQoIEFuaW1hdGlvbi50d2VlbmVyc1sgXCIqXCIgXSApLFxuXHRcdGluZGV4ID0gMCxcblx0XHRsZW5ndGggPSBjb2xsZWN0aW9uLmxlbmd0aDtcblx0Zm9yICggOyBpbmRleCA8IGxlbmd0aDsgaW5kZXgrKyApIHtcblx0XHRpZiAoICggdHdlZW4gPSBjb2xsZWN0aW9uWyBpbmRleCBdLmNhbGwoIGFuaW1hdGlvbiwgcHJvcCwgdmFsdWUgKSApICkge1xuXG5cdFx0XHQvLyBXZSdyZSBkb25lIHdpdGggdGhpcyBwcm9wZXJ0eVxuXHRcdFx0cmV0dXJuIHR3ZWVuO1xuXHRcdH1cblx0fVxufVxuXG5mdW5jdGlvbiBkZWZhdWx0UHJlZmlsdGVyKCBlbGVtLCBwcm9wcywgb3B0cyApIHtcblx0dmFyIHByb3AsIHZhbHVlLCB0b2dnbGUsIGhvb2tzLCBvbGRmaXJlLCBwcm9wVHdlZW4sIHJlc3RvcmVEaXNwbGF5LCBkaXNwbGF5LFxuXHRcdGlzQm94ID0gXCJ3aWR0aFwiIGluIHByb3BzIHx8IFwiaGVpZ2h0XCIgaW4gcHJvcHMsXG5cdFx0YW5pbSA9IHRoaXMsXG5cdFx0b3JpZyA9IHt9LFxuXHRcdHN0eWxlID0gZWxlbS5zdHlsZSxcblx0XHRoaWRkZW4gPSBlbGVtLm5vZGVUeXBlICYmIGlzSGlkZGVuV2l0aGluVHJlZSggZWxlbSApLFxuXHRcdGRhdGFTaG93ID0gZGF0YVByaXYuZ2V0KCBlbGVtLCBcImZ4c2hvd1wiICk7XG5cblx0Ly8gUXVldWUtc2tpcHBpbmcgYW5pbWF0aW9ucyBoaWphY2sgdGhlIGZ4IGhvb2tzXG5cdGlmICggIW9wdHMucXVldWUgKSB7XG5cdFx0aG9va3MgPSBqUXVlcnkuX3F1ZXVlSG9va3MoIGVsZW0sIFwiZnhcIiApO1xuXHRcdGlmICggaG9va3MudW5xdWV1ZWQgPT0gbnVsbCApIHtcblx0XHRcdGhvb2tzLnVucXVldWVkID0gMDtcblx0XHRcdG9sZGZpcmUgPSBob29rcy5lbXB0eS5maXJlO1xuXHRcdFx0aG9va3MuZW1wdHkuZmlyZSA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRpZiAoICFob29rcy51bnF1ZXVlZCApIHtcblx0XHRcdFx0XHRvbGRmaXJlKCk7XG5cdFx0XHRcdH1cblx0XHRcdH07XG5cdFx0fVxuXHRcdGhvb2tzLnVucXVldWVkKys7XG5cblx0XHRhbmltLmFsd2F5cyggZnVuY3Rpb24oKSB7XG5cblx0XHRcdC8vIEVuc3VyZSB0aGUgY29tcGxldGUgaGFuZGxlciBpcyBjYWxsZWQgYmVmb3JlIHRoaXMgY29tcGxldGVzXG5cdFx0XHRhbmltLmFsd2F5cyggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGhvb2tzLnVucXVldWVkLS07XG5cdFx0XHRcdGlmICggIWpRdWVyeS5xdWV1ZSggZWxlbSwgXCJmeFwiICkubGVuZ3RoICkge1xuXHRcdFx0XHRcdGhvb2tzLmVtcHR5LmZpcmUoKTtcblx0XHRcdFx0fVxuXHRcdFx0fSApO1xuXHRcdH0gKTtcblx0fVxuXG5cdC8vIERldGVjdCBzaG93L2hpZGUgYW5pbWF0aW9uc1xuXHRmb3IgKCBwcm9wIGluIHByb3BzICkge1xuXHRcdHZhbHVlID0gcHJvcHNbIHByb3AgXTtcblx0XHRpZiAoIHJmeHR5cGVzLnRlc3QoIHZhbHVlICkgKSB7XG5cdFx0XHRkZWxldGUgcHJvcHNbIHByb3AgXTtcblx0XHRcdHRvZ2dsZSA9IHRvZ2dsZSB8fCB2YWx1ZSA9PT0gXCJ0b2dnbGVcIjtcblx0XHRcdGlmICggdmFsdWUgPT09ICggaGlkZGVuID8gXCJoaWRlXCIgOiBcInNob3dcIiApICkge1xuXG5cdFx0XHRcdC8vIFByZXRlbmQgdG8gYmUgaGlkZGVuIGlmIHRoaXMgaXMgYSBcInNob3dcIiBhbmRcblx0XHRcdFx0Ly8gdGhlcmUgaXMgc3RpbGwgZGF0YSBmcm9tIGEgc3RvcHBlZCBzaG93L2hpZGVcblx0XHRcdFx0aWYgKCB2YWx1ZSA9PT0gXCJzaG93XCIgJiYgZGF0YVNob3cgJiYgZGF0YVNob3dbIHByb3AgXSAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRcdGhpZGRlbiA9IHRydWU7XG5cblx0XHRcdFx0Ly8gSWdub3JlIGFsbCBvdGhlciBuby1vcCBzaG93L2hpZGUgZGF0YVxuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdGNvbnRpbnVlO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRvcmlnWyBwcm9wIF0gPSBkYXRhU2hvdyAmJiBkYXRhU2hvd1sgcHJvcCBdIHx8IGpRdWVyeS5zdHlsZSggZWxlbSwgcHJvcCApO1xuXHRcdH1cblx0fVxuXG5cdC8vIEJhaWwgb3V0IGlmIHRoaXMgaXMgYSBuby1vcCBsaWtlIC5oaWRlKCkuaGlkZSgpXG5cdHByb3BUd2VlbiA9ICFqUXVlcnkuaXNFbXB0eU9iamVjdCggcHJvcHMgKTtcblx0aWYgKCAhcHJvcFR3ZWVuICYmIGpRdWVyeS5pc0VtcHR5T2JqZWN0KCBvcmlnICkgKSB7XG5cdFx0cmV0dXJuO1xuXHR9XG5cblx0Ly8gUmVzdHJpY3QgXCJvdmVyZmxvd1wiIGFuZCBcImRpc3BsYXlcIiBzdHlsZXMgZHVyaW5nIGJveCBhbmltYXRpb25zXG5cdGlmICggaXNCb3ggJiYgZWxlbS5ub2RlVHlwZSA9PT0gMSApIHtcblxuXHRcdC8vIFN1cHBvcnQ6IElFIDw9OSAtIDExLCBFZGdlIDEyIC0gMTVcblx0XHQvLyBSZWNvcmQgYWxsIDMgb3ZlcmZsb3cgYXR0cmlidXRlcyBiZWNhdXNlIElFIGRvZXMgbm90IGluZmVyIHRoZSBzaG9ydGhhbmRcblx0XHQvLyBmcm9tIGlkZW50aWNhbGx5LXZhbHVlZCBvdmVyZmxvd1ggYW5kIG92ZXJmbG93WSBhbmQgRWRnZSBqdXN0IG1pcnJvcnNcblx0XHQvLyB0aGUgb3ZlcmZsb3dYIHZhbHVlIHRoZXJlLlxuXHRcdG9wdHMub3ZlcmZsb3cgPSBbIHN0eWxlLm92ZXJmbG93LCBzdHlsZS5vdmVyZmxvd1gsIHN0eWxlLm92ZXJmbG93WSBdO1xuXG5cdFx0Ly8gSWRlbnRpZnkgYSBkaXNwbGF5IHR5cGUsIHByZWZlcnJpbmcgb2xkIHNob3cvaGlkZSBkYXRhIG92ZXIgdGhlIENTUyBjYXNjYWRlXG5cdFx0cmVzdG9yZURpc3BsYXkgPSBkYXRhU2hvdyAmJiBkYXRhU2hvdy5kaXNwbGF5O1xuXHRcdGlmICggcmVzdG9yZURpc3BsYXkgPT0gbnVsbCApIHtcblx0XHRcdHJlc3RvcmVEaXNwbGF5ID0gZGF0YVByaXYuZ2V0KCBlbGVtLCBcImRpc3BsYXlcIiApO1xuXHRcdH1cblx0XHRkaXNwbGF5ID0galF1ZXJ5LmNzcyggZWxlbSwgXCJkaXNwbGF5XCIgKTtcblx0XHRpZiAoIGRpc3BsYXkgPT09IFwibm9uZVwiICkge1xuXHRcdFx0aWYgKCByZXN0b3JlRGlzcGxheSApIHtcblx0XHRcdFx0ZGlzcGxheSA9IHJlc3RvcmVEaXNwbGF5O1xuXHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHQvLyBHZXQgbm9uZW1wdHkgdmFsdWUocykgYnkgdGVtcG9yYXJpbHkgZm9yY2luZyB2aXNpYmlsaXR5XG5cdFx0XHRcdHNob3dIaWRlKCBbIGVsZW0gXSwgdHJ1ZSApO1xuXHRcdFx0XHRyZXN0b3JlRGlzcGxheSA9IGVsZW0uc3R5bGUuZGlzcGxheSB8fCByZXN0b3JlRGlzcGxheTtcblx0XHRcdFx0ZGlzcGxheSA9IGpRdWVyeS5jc3MoIGVsZW0sIFwiZGlzcGxheVwiICk7XG5cdFx0XHRcdHNob3dIaWRlKCBbIGVsZW0gXSApO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIEFuaW1hdGUgaW5saW5lIGVsZW1lbnRzIGFzIGlubGluZS1ibG9ja1xuXHRcdGlmICggZGlzcGxheSA9PT0gXCJpbmxpbmVcIiB8fCBkaXNwbGF5ID09PSBcImlubGluZS1ibG9ja1wiICYmIHJlc3RvcmVEaXNwbGF5ICE9IG51bGwgKSB7XG5cdFx0XHRpZiAoIGpRdWVyeS5jc3MoIGVsZW0sIFwiZmxvYXRcIiApID09PSBcIm5vbmVcIiApIHtcblxuXHRcdFx0XHQvLyBSZXN0b3JlIHRoZSBvcmlnaW5hbCBkaXNwbGF5IHZhbHVlIGF0IHRoZSBlbmQgb2YgcHVyZSBzaG93L2hpZGUgYW5pbWF0aW9uc1xuXHRcdFx0XHRpZiAoICFwcm9wVHdlZW4gKSB7XG5cdFx0XHRcdFx0YW5pbS5kb25lKCBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRcdHN0eWxlLmRpc3BsYXkgPSByZXN0b3JlRGlzcGxheTtcblx0XHRcdFx0XHR9ICk7XG5cdFx0XHRcdFx0aWYgKCByZXN0b3JlRGlzcGxheSA9PSBudWxsICkge1xuXHRcdFx0XHRcdFx0ZGlzcGxheSA9IHN0eWxlLmRpc3BsYXk7XG5cdFx0XHRcdFx0XHRyZXN0b3JlRGlzcGxheSA9IGRpc3BsYXkgPT09IFwibm9uZVwiID8gXCJcIiA6IGRpc3BsYXk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHRcdHN0eWxlLmRpc3BsYXkgPSBcImlubGluZS1ibG9ja1wiO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdGlmICggb3B0cy5vdmVyZmxvdyApIHtcblx0XHRzdHlsZS5vdmVyZmxvdyA9IFwiaGlkZGVuXCI7XG5cdFx0YW5pbS5hbHdheXMoIGZ1bmN0aW9uKCkge1xuXHRcdFx0c3R5bGUub3ZlcmZsb3cgPSBvcHRzLm92ZXJmbG93WyAwIF07XG5cdFx0XHRzdHlsZS5vdmVyZmxvd1ggPSBvcHRzLm92ZXJmbG93WyAxIF07XG5cdFx0XHRzdHlsZS5vdmVyZmxvd1kgPSBvcHRzLm92ZXJmbG93WyAyIF07XG5cdFx0fSApO1xuXHR9XG5cblx0Ly8gSW1wbGVtZW50IHNob3cvaGlkZSBhbmltYXRpb25zXG5cdHByb3BUd2VlbiA9IGZhbHNlO1xuXHRmb3IgKCBwcm9wIGluIG9yaWcgKSB7XG5cblx0XHQvLyBHZW5lcmFsIHNob3cvaGlkZSBzZXR1cCBmb3IgdGhpcyBlbGVtZW50IGFuaW1hdGlvblxuXHRcdGlmICggIXByb3BUd2VlbiApIHtcblx0XHRcdGlmICggZGF0YVNob3cgKSB7XG5cdFx0XHRcdGlmICggXCJoaWRkZW5cIiBpbiBkYXRhU2hvdyApIHtcblx0XHRcdFx0XHRoaWRkZW4gPSBkYXRhU2hvdy5oaWRkZW47XG5cdFx0XHRcdH1cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGRhdGFTaG93ID0gZGF0YVByaXYuYWNjZXNzKCBlbGVtLCBcImZ4c2hvd1wiLCB7IGRpc3BsYXk6IHJlc3RvcmVEaXNwbGF5IH0gKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gU3RvcmUgaGlkZGVuL3Zpc2libGUgZm9yIHRvZ2dsZSBzbyBgLnN0b3AoKS50b2dnbGUoKWAgXCJyZXZlcnNlc1wiXG5cdFx0XHRpZiAoIHRvZ2dsZSApIHtcblx0XHRcdFx0ZGF0YVNob3cuaGlkZGVuID0gIWhpZGRlbjtcblx0XHRcdH1cblxuXHRcdFx0Ly8gU2hvdyBlbGVtZW50cyBiZWZvcmUgYW5pbWF0aW5nIHRoZW1cblx0XHRcdGlmICggaGlkZGVuICkge1xuXHRcdFx0XHRzaG93SGlkZSggWyBlbGVtIF0sIHRydWUgKTtcblx0XHRcdH1cblxuXHRcdFx0LyogZXNsaW50LWRpc2FibGUgbm8tbG9vcC1mdW5jICovXG5cblx0XHRcdGFuaW0uZG9uZSggZnVuY3Rpb24oKSB7XG5cblx0XHRcdC8qIGVzbGludC1lbmFibGUgbm8tbG9vcC1mdW5jICovXG5cblx0XHRcdFx0Ly8gVGhlIGZpbmFsIHN0ZXAgb2YgYSBcImhpZGVcIiBhbmltYXRpb24gaXMgYWN0dWFsbHkgaGlkaW5nIHRoZSBlbGVtZW50XG5cdFx0XHRcdGlmICggIWhpZGRlbiApIHtcblx0XHRcdFx0XHRzaG93SGlkZSggWyBlbGVtIF0gKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRkYXRhUHJpdi5yZW1vdmUoIGVsZW0sIFwiZnhzaG93XCIgKTtcblx0XHRcdFx0Zm9yICggcHJvcCBpbiBvcmlnICkge1xuXHRcdFx0XHRcdGpRdWVyeS5zdHlsZSggZWxlbSwgcHJvcCwgb3JpZ1sgcHJvcCBdICk7XG5cdFx0XHRcdH1cblx0XHRcdH0gKTtcblx0XHR9XG5cblx0XHQvLyBQZXItcHJvcGVydHkgc2V0dXBcblx0XHRwcm9wVHdlZW4gPSBjcmVhdGVUd2VlbiggaGlkZGVuID8gZGF0YVNob3dbIHByb3AgXSA6IDAsIHByb3AsIGFuaW0gKTtcblx0XHRpZiAoICEoIHByb3AgaW4gZGF0YVNob3cgKSApIHtcblx0XHRcdGRhdGFTaG93WyBwcm9wIF0gPSBwcm9wVHdlZW4uc3RhcnQ7XG5cdFx0XHRpZiAoIGhpZGRlbiApIHtcblx0XHRcdFx0cHJvcFR3ZWVuLmVuZCA9IHByb3BUd2Vlbi5zdGFydDtcblx0XHRcdFx0cHJvcFR3ZWVuLnN0YXJ0ID0gMDtcblx0XHRcdH1cblx0XHR9XG5cdH1cbn1cblxuZnVuY3Rpb24gcHJvcEZpbHRlciggcHJvcHMsIHNwZWNpYWxFYXNpbmcgKSB7XG5cdHZhciBpbmRleCwgbmFtZSwgZWFzaW5nLCB2YWx1ZSwgaG9va3M7XG5cblx0Ly8gY2FtZWxDYXNlLCBzcGVjaWFsRWFzaW5nIGFuZCBleHBhbmQgY3NzSG9vayBwYXNzXG5cdGZvciAoIGluZGV4IGluIHByb3BzICkge1xuXHRcdG5hbWUgPSBjYW1lbENhc2UoIGluZGV4ICk7XG5cdFx0ZWFzaW5nID0gc3BlY2lhbEVhc2luZ1sgbmFtZSBdO1xuXHRcdHZhbHVlID0gcHJvcHNbIGluZGV4IF07XG5cdFx0aWYgKCBBcnJheS5pc0FycmF5KCB2YWx1ZSApICkge1xuXHRcdFx0ZWFzaW5nID0gdmFsdWVbIDEgXTtcblx0XHRcdHZhbHVlID0gcHJvcHNbIGluZGV4IF0gPSB2YWx1ZVsgMCBdO1xuXHRcdH1cblxuXHRcdGlmICggaW5kZXggIT09IG5hbWUgKSB7XG5cdFx0XHRwcm9wc1sgbmFtZSBdID0gdmFsdWU7XG5cdFx0XHRkZWxldGUgcHJvcHNbIGluZGV4IF07XG5cdFx0fVxuXG5cdFx0aG9va3MgPSBqUXVlcnkuY3NzSG9va3NbIG5hbWUgXTtcblx0XHRpZiAoIGhvb2tzICYmIFwiZXhwYW5kXCIgaW4gaG9va3MgKSB7XG5cdFx0XHR2YWx1ZSA9IGhvb2tzLmV4cGFuZCggdmFsdWUgKTtcblx0XHRcdGRlbGV0ZSBwcm9wc1sgbmFtZSBdO1xuXG5cdFx0XHQvLyBOb3QgcXVpdGUgJC5leHRlbmQsIHRoaXMgd29uJ3Qgb3ZlcndyaXRlIGV4aXN0aW5nIGtleXMuXG5cdFx0XHQvLyBSZXVzaW5nICdpbmRleCcgYmVjYXVzZSB3ZSBoYXZlIHRoZSBjb3JyZWN0IFwibmFtZVwiXG5cdFx0XHRmb3IgKCBpbmRleCBpbiB2YWx1ZSApIHtcblx0XHRcdFx0aWYgKCAhKCBpbmRleCBpbiBwcm9wcyApICkge1xuXHRcdFx0XHRcdHByb3BzWyBpbmRleCBdID0gdmFsdWVbIGluZGV4IF07XG5cdFx0XHRcdFx0c3BlY2lhbEVhc2luZ1sgaW5kZXggXSA9IGVhc2luZztcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0gZWxzZSB7XG5cdFx0XHRzcGVjaWFsRWFzaW5nWyBuYW1lIF0gPSBlYXNpbmc7XG5cdFx0fVxuXHR9XG59XG5cbmZ1bmN0aW9uIEFuaW1hdGlvbiggZWxlbSwgcHJvcGVydGllcywgb3B0aW9ucyApIHtcblx0dmFyIHJlc3VsdCxcblx0XHRzdG9wcGVkLFxuXHRcdGluZGV4ID0gMCxcblx0XHRsZW5ndGggPSBBbmltYXRpb24ucHJlZmlsdGVycy5sZW5ndGgsXG5cdFx0ZGVmZXJyZWQgPSBqUXVlcnkuRGVmZXJyZWQoKS5hbHdheXMoIGZ1bmN0aW9uKCkge1xuXG5cdFx0XHQvLyBEb24ndCBtYXRjaCBlbGVtIGluIHRoZSA6YW5pbWF0ZWQgc2VsZWN0b3Jcblx0XHRcdGRlbGV0ZSB0aWNrLmVsZW07XG5cdFx0fSApLFxuXHRcdHRpY2sgPSBmdW5jdGlvbigpIHtcblx0XHRcdGlmICggc3RvcHBlZCApIHtcblx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0fVxuXHRcdFx0dmFyIGN1cnJlbnRUaW1lID0gZnhOb3cgfHwgY3JlYXRlRnhOb3coKSxcblx0XHRcdFx0cmVtYWluaW5nID0gTWF0aC5tYXgoIDAsIGFuaW1hdGlvbi5zdGFydFRpbWUgKyBhbmltYXRpb24uZHVyYXRpb24gLSBjdXJyZW50VGltZSApLFxuXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IEFuZHJvaWQgMi4zIG9ubHlcblx0XHRcdFx0Ly8gQXJjaGFpYyBjcmFzaCBidWcgd29uJ3QgYWxsb3cgdXMgdG8gdXNlIGAxIC0gKCAwLjUgfHwgMCApYCAoIzEyNDk3KVxuXHRcdFx0XHR0ZW1wID0gcmVtYWluaW5nIC8gYW5pbWF0aW9uLmR1cmF0aW9uIHx8IDAsXG5cdFx0XHRcdHBlcmNlbnQgPSAxIC0gdGVtcCxcblx0XHRcdFx0aW5kZXggPSAwLFxuXHRcdFx0XHRsZW5ndGggPSBhbmltYXRpb24udHdlZW5zLmxlbmd0aDtcblxuXHRcdFx0Zm9yICggOyBpbmRleCA8IGxlbmd0aDsgaW5kZXgrKyApIHtcblx0XHRcdFx0YW5pbWF0aW9uLnR3ZWVuc1sgaW5kZXggXS5ydW4oIHBlcmNlbnQgKTtcblx0XHRcdH1cblxuXHRcdFx0ZGVmZXJyZWQubm90aWZ5V2l0aCggZWxlbSwgWyBhbmltYXRpb24sIHBlcmNlbnQsIHJlbWFpbmluZyBdICk7XG5cblx0XHRcdC8vIElmIHRoZXJlJ3MgbW9yZSB0byBkbywgeWllbGRcblx0XHRcdGlmICggcGVyY2VudCA8IDEgJiYgbGVuZ3RoICkge1xuXHRcdFx0XHRyZXR1cm4gcmVtYWluaW5nO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBJZiB0aGlzIHdhcyBhbiBlbXB0eSBhbmltYXRpb24sIHN5bnRoZXNpemUgYSBmaW5hbCBwcm9ncmVzcyBub3RpZmljYXRpb25cblx0XHRcdGlmICggIWxlbmd0aCApIHtcblx0XHRcdFx0ZGVmZXJyZWQubm90aWZ5V2l0aCggZWxlbSwgWyBhbmltYXRpb24sIDEsIDAgXSApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBSZXNvbHZlIHRoZSBhbmltYXRpb24gYW5kIHJlcG9ydCBpdHMgY29uY2x1c2lvblxuXHRcdFx0ZGVmZXJyZWQucmVzb2x2ZVdpdGgoIGVsZW0sIFsgYW5pbWF0aW9uIF0gKTtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9LFxuXHRcdGFuaW1hdGlvbiA9IGRlZmVycmVkLnByb21pc2UoIHtcblx0XHRcdGVsZW06IGVsZW0sXG5cdFx0XHRwcm9wczogalF1ZXJ5LmV4dGVuZCgge30sIHByb3BlcnRpZXMgKSxcblx0XHRcdG9wdHM6IGpRdWVyeS5leHRlbmQoIHRydWUsIHtcblx0XHRcdFx0c3BlY2lhbEVhc2luZzoge30sXG5cdFx0XHRcdGVhc2luZzogalF1ZXJ5LmVhc2luZy5fZGVmYXVsdFxuXHRcdFx0fSwgb3B0aW9ucyApLFxuXHRcdFx0b3JpZ2luYWxQcm9wZXJ0aWVzOiBwcm9wZXJ0aWVzLFxuXHRcdFx0b3JpZ2luYWxPcHRpb25zOiBvcHRpb25zLFxuXHRcdFx0c3RhcnRUaW1lOiBmeE5vdyB8fCBjcmVhdGVGeE5vdygpLFxuXHRcdFx0ZHVyYXRpb246IG9wdGlvbnMuZHVyYXRpb24sXG5cdFx0XHR0d2VlbnM6IFtdLFxuXHRcdFx0Y3JlYXRlVHdlZW46IGZ1bmN0aW9uKCBwcm9wLCBlbmQgKSB7XG5cdFx0XHRcdHZhciB0d2VlbiA9IGpRdWVyeS5Ud2VlbiggZWxlbSwgYW5pbWF0aW9uLm9wdHMsIHByb3AsIGVuZCxcblx0XHRcdFx0XHRcdGFuaW1hdGlvbi5vcHRzLnNwZWNpYWxFYXNpbmdbIHByb3AgXSB8fCBhbmltYXRpb24ub3B0cy5lYXNpbmcgKTtcblx0XHRcdFx0YW5pbWF0aW9uLnR3ZWVucy5wdXNoKCB0d2VlbiApO1xuXHRcdFx0XHRyZXR1cm4gdHdlZW47XG5cdFx0XHR9LFxuXHRcdFx0c3RvcDogZnVuY3Rpb24oIGdvdG9FbmQgKSB7XG5cdFx0XHRcdHZhciBpbmRleCA9IDAsXG5cblx0XHRcdFx0XHQvLyBJZiB3ZSBhcmUgZ29pbmcgdG8gdGhlIGVuZCwgd2Ugd2FudCB0byBydW4gYWxsIHRoZSB0d2VlbnNcblx0XHRcdFx0XHQvLyBvdGhlcndpc2Ugd2Ugc2tpcCB0aGlzIHBhcnRcblx0XHRcdFx0XHRsZW5ndGggPSBnb3RvRW5kID8gYW5pbWF0aW9uLnR3ZWVucy5sZW5ndGggOiAwO1xuXHRcdFx0XHRpZiAoIHN0b3BwZWQgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHRcdH1cblx0XHRcdFx0c3RvcHBlZCA9IHRydWU7XG5cdFx0XHRcdGZvciAoIDsgaW5kZXggPCBsZW5ndGg7IGluZGV4KysgKSB7XG5cdFx0XHRcdFx0YW5pbWF0aW9uLnR3ZWVuc1sgaW5kZXggXS5ydW4oIDEgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIFJlc29sdmUgd2hlbiB3ZSBwbGF5ZWQgdGhlIGxhc3QgZnJhbWU7IG90aGVyd2lzZSwgcmVqZWN0XG5cdFx0XHRcdGlmICggZ290b0VuZCApIHtcblx0XHRcdFx0XHRkZWZlcnJlZC5ub3RpZnlXaXRoKCBlbGVtLCBbIGFuaW1hdGlvbiwgMSwgMCBdICk7XG5cdFx0XHRcdFx0ZGVmZXJyZWQucmVzb2x2ZVdpdGgoIGVsZW0sIFsgYW5pbWF0aW9uLCBnb3RvRW5kIF0gKTtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRkZWZlcnJlZC5yZWplY3RXaXRoKCBlbGVtLCBbIGFuaW1hdGlvbiwgZ290b0VuZCBdICk7XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHR9XG5cdFx0fSApLFxuXHRcdHByb3BzID0gYW5pbWF0aW9uLnByb3BzO1xuXG5cdHByb3BGaWx0ZXIoIHByb3BzLCBhbmltYXRpb24ub3B0cy5zcGVjaWFsRWFzaW5nICk7XG5cblx0Zm9yICggOyBpbmRleCA8IGxlbmd0aDsgaW5kZXgrKyApIHtcblx0XHRyZXN1bHQgPSBBbmltYXRpb24ucHJlZmlsdGVyc1sgaW5kZXggXS5jYWxsKCBhbmltYXRpb24sIGVsZW0sIHByb3BzLCBhbmltYXRpb24ub3B0cyApO1xuXHRcdGlmICggcmVzdWx0ICkge1xuXHRcdFx0aWYgKCBpc0Z1bmN0aW9uKCByZXN1bHQuc3RvcCApICkge1xuXHRcdFx0XHRqUXVlcnkuX3F1ZXVlSG9va3MoIGFuaW1hdGlvbi5lbGVtLCBhbmltYXRpb24ub3B0cy5xdWV1ZSApLnN0b3AgPVxuXHRcdFx0XHRcdHJlc3VsdC5zdG9wLmJpbmQoIHJlc3VsdCApO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHJlc3VsdDtcblx0XHR9XG5cdH1cblxuXHRqUXVlcnkubWFwKCBwcm9wcywgY3JlYXRlVHdlZW4sIGFuaW1hdGlvbiApO1xuXG5cdGlmICggaXNGdW5jdGlvbiggYW5pbWF0aW9uLm9wdHMuc3RhcnQgKSApIHtcblx0XHRhbmltYXRpb24ub3B0cy5zdGFydC5jYWxsKCBlbGVtLCBhbmltYXRpb24gKTtcblx0fVxuXG5cdC8vIEF0dGFjaCBjYWxsYmFja3MgZnJvbSBvcHRpb25zXG5cdGFuaW1hdGlvblxuXHRcdC5wcm9ncmVzcyggYW5pbWF0aW9uLm9wdHMucHJvZ3Jlc3MgKVxuXHRcdC5kb25lKCBhbmltYXRpb24ub3B0cy5kb25lLCBhbmltYXRpb24ub3B0cy5jb21wbGV0ZSApXG5cdFx0LmZhaWwoIGFuaW1hdGlvbi5vcHRzLmZhaWwgKVxuXHRcdC5hbHdheXMoIGFuaW1hdGlvbi5vcHRzLmFsd2F5cyApO1xuXG5cdGpRdWVyeS5meC50aW1lcihcblx0XHRqUXVlcnkuZXh0ZW5kKCB0aWNrLCB7XG5cdFx0XHRlbGVtOiBlbGVtLFxuXHRcdFx0YW5pbTogYW5pbWF0aW9uLFxuXHRcdFx0cXVldWU6IGFuaW1hdGlvbi5vcHRzLnF1ZXVlXG5cdFx0fSApXG5cdCk7XG5cblx0cmV0dXJuIGFuaW1hdGlvbjtcbn1cblxualF1ZXJ5LkFuaW1hdGlvbiA9IGpRdWVyeS5leHRlbmQoIEFuaW1hdGlvbiwge1xuXG5cdHR3ZWVuZXJzOiB7XG5cdFx0XCIqXCI6IFsgZnVuY3Rpb24oIHByb3AsIHZhbHVlICkge1xuXHRcdFx0dmFyIHR3ZWVuID0gdGhpcy5jcmVhdGVUd2VlbiggcHJvcCwgdmFsdWUgKTtcblx0XHRcdGFkanVzdENTUyggdHdlZW4uZWxlbSwgcHJvcCwgcmNzc051bS5leGVjKCB2YWx1ZSApLCB0d2VlbiApO1xuXHRcdFx0cmV0dXJuIHR3ZWVuO1xuXHRcdH0gXVxuXHR9LFxuXG5cdHR3ZWVuZXI6IGZ1bmN0aW9uKCBwcm9wcywgY2FsbGJhY2sgKSB7XG5cdFx0aWYgKCBpc0Z1bmN0aW9uKCBwcm9wcyApICkge1xuXHRcdFx0Y2FsbGJhY2sgPSBwcm9wcztcblx0XHRcdHByb3BzID0gWyBcIipcIiBdO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRwcm9wcyA9IHByb3BzLm1hdGNoKCBybm90aHRtbHdoaXRlICk7XG5cdFx0fVxuXG5cdFx0dmFyIHByb3AsXG5cdFx0XHRpbmRleCA9IDAsXG5cdFx0XHRsZW5ndGggPSBwcm9wcy5sZW5ndGg7XG5cblx0XHRmb3IgKCA7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCsrICkge1xuXHRcdFx0cHJvcCA9IHByb3BzWyBpbmRleCBdO1xuXHRcdFx0QW5pbWF0aW9uLnR3ZWVuZXJzWyBwcm9wIF0gPSBBbmltYXRpb24udHdlZW5lcnNbIHByb3AgXSB8fCBbXTtcblx0XHRcdEFuaW1hdGlvbi50d2VlbmVyc1sgcHJvcCBdLnVuc2hpZnQoIGNhbGxiYWNrICk7XG5cdFx0fVxuXHR9LFxuXG5cdHByZWZpbHRlcnM6IFsgZGVmYXVsdFByZWZpbHRlciBdLFxuXG5cdHByZWZpbHRlcjogZnVuY3Rpb24oIGNhbGxiYWNrLCBwcmVwZW5kICkge1xuXHRcdGlmICggcHJlcGVuZCApIHtcblx0XHRcdEFuaW1hdGlvbi5wcmVmaWx0ZXJzLnVuc2hpZnQoIGNhbGxiYWNrICk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdEFuaW1hdGlvbi5wcmVmaWx0ZXJzLnB1c2goIGNhbGxiYWNrICk7XG5cdFx0fVxuXHR9XG59ICk7XG5cbmpRdWVyeS5zcGVlZCA9IGZ1bmN0aW9uKCBzcGVlZCwgZWFzaW5nLCBmbiApIHtcblx0dmFyIG9wdCA9IHNwZWVkICYmIHR5cGVvZiBzcGVlZCA9PT0gXCJvYmplY3RcIiA/IGpRdWVyeS5leHRlbmQoIHt9LCBzcGVlZCApIDoge1xuXHRcdGNvbXBsZXRlOiBmbiB8fCAhZm4gJiYgZWFzaW5nIHx8XG5cdFx0XHRpc0Z1bmN0aW9uKCBzcGVlZCApICYmIHNwZWVkLFxuXHRcdGR1cmF0aW9uOiBzcGVlZCxcblx0XHRlYXNpbmc6IGZuICYmIGVhc2luZyB8fCBlYXNpbmcgJiYgIWlzRnVuY3Rpb24oIGVhc2luZyApICYmIGVhc2luZ1xuXHR9O1xuXG5cdC8vIEdvIHRvIHRoZSBlbmQgc3RhdGUgaWYgZnggYXJlIG9mZlxuXHRpZiAoIGpRdWVyeS5meC5vZmYgKSB7XG5cdFx0b3B0LmR1cmF0aW9uID0gMDtcblxuXHR9IGVsc2Uge1xuXHRcdGlmICggdHlwZW9mIG9wdC5kdXJhdGlvbiAhPT0gXCJudW1iZXJcIiApIHtcblx0XHRcdGlmICggb3B0LmR1cmF0aW9uIGluIGpRdWVyeS5meC5zcGVlZHMgKSB7XG5cdFx0XHRcdG9wdC5kdXJhdGlvbiA9IGpRdWVyeS5meC5zcGVlZHNbIG9wdC5kdXJhdGlvbiBdO1xuXG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRvcHQuZHVyYXRpb24gPSBqUXVlcnkuZnguc3BlZWRzLl9kZWZhdWx0O1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdC8vIE5vcm1hbGl6ZSBvcHQucXVldWUgLSB0cnVlL3VuZGVmaW5lZC9udWxsIC0+IFwiZnhcIlxuXHRpZiAoIG9wdC5xdWV1ZSA9PSBudWxsIHx8IG9wdC5xdWV1ZSA9PT0gdHJ1ZSApIHtcblx0XHRvcHQucXVldWUgPSBcImZ4XCI7XG5cdH1cblxuXHQvLyBRdWV1ZWluZ1xuXHRvcHQub2xkID0gb3B0LmNvbXBsZXRlO1xuXG5cdG9wdC5jb21wbGV0ZSA9IGZ1bmN0aW9uKCkge1xuXHRcdGlmICggaXNGdW5jdGlvbiggb3B0Lm9sZCApICkge1xuXHRcdFx0b3B0Lm9sZC5jYWxsKCB0aGlzICk7XG5cdFx0fVxuXG5cdFx0aWYgKCBvcHQucXVldWUgKSB7XG5cdFx0XHRqUXVlcnkuZGVxdWV1ZSggdGhpcywgb3B0LnF1ZXVlICk7XG5cdFx0fVxuXHR9O1xuXG5cdHJldHVybiBvcHQ7XG59O1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdGZhZGVUbzogZnVuY3Rpb24oIHNwZWVkLCB0bywgZWFzaW5nLCBjYWxsYmFjayApIHtcblxuXHRcdC8vIFNob3cgYW55IGhpZGRlbiBlbGVtZW50cyBhZnRlciBzZXR0aW5nIG9wYWNpdHkgdG8gMFxuXHRcdHJldHVybiB0aGlzLmZpbHRlciggaXNIaWRkZW5XaXRoaW5UcmVlICkuY3NzKCBcIm9wYWNpdHlcIiwgMCApLnNob3coKVxuXG5cdFx0XHQvLyBBbmltYXRlIHRvIHRoZSB2YWx1ZSBzcGVjaWZpZWRcblx0XHRcdC5lbmQoKS5hbmltYXRlKCB7IG9wYWNpdHk6IHRvIH0sIHNwZWVkLCBlYXNpbmcsIGNhbGxiYWNrICk7XG5cdH0sXG5cdGFuaW1hdGU6IGZ1bmN0aW9uKCBwcm9wLCBzcGVlZCwgZWFzaW5nLCBjYWxsYmFjayApIHtcblx0XHR2YXIgZW1wdHkgPSBqUXVlcnkuaXNFbXB0eU9iamVjdCggcHJvcCApLFxuXHRcdFx0b3B0YWxsID0galF1ZXJ5LnNwZWVkKCBzcGVlZCwgZWFzaW5nLCBjYWxsYmFjayApLFxuXHRcdFx0ZG9BbmltYXRpb24gPSBmdW5jdGlvbigpIHtcblxuXHRcdFx0XHQvLyBPcGVyYXRlIG9uIGEgY29weSBvZiBwcm9wIHNvIHBlci1wcm9wZXJ0eSBlYXNpbmcgd29uJ3QgYmUgbG9zdFxuXHRcdFx0XHR2YXIgYW5pbSA9IEFuaW1hdGlvbiggdGhpcywgalF1ZXJ5LmV4dGVuZCgge30sIHByb3AgKSwgb3B0YWxsICk7XG5cblx0XHRcdFx0Ly8gRW1wdHkgYW5pbWF0aW9ucywgb3IgZmluaXNoaW5nIHJlc29sdmVzIGltbWVkaWF0ZWx5XG5cdFx0XHRcdGlmICggZW1wdHkgfHwgZGF0YVByaXYuZ2V0KCB0aGlzLCBcImZpbmlzaFwiICkgKSB7XG5cdFx0XHRcdFx0YW5pbS5zdG9wKCB0cnVlICk7XG5cdFx0XHRcdH1cblx0XHRcdH07XG5cdFx0XHRkb0FuaW1hdGlvbi5maW5pc2ggPSBkb0FuaW1hdGlvbjtcblxuXHRcdHJldHVybiBlbXB0eSB8fCBvcHRhbGwucXVldWUgPT09IGZhbHNlID9cblx0XHRcdHRoaXMuZWFjaCggZG9BbmltYXRpb24gKSA6XG5cdFx0XHR0aGlzLnF1ZXVlKCBvcHRhbGwucXVldWUsIGRvQW5pbWF0aW9uICk7XG5cdH0sXG5cdHN0b3A6IGZ1bmN0aW9uKCB0eXBlLCBjbGVhclF1ZXVlLCBnb3RvRW5kICkge1xuXHRcdHZhciBzdG9wUXVldWUgPSBmdW5jdGlvbiggaG9va3MgKSB7XG5cdFx0XHR2YXIgc3RvcCA9IGhvb2tzLnN0b3A7XG5cdFx0XHRkZWxldGUgaG9va3Muc3RvcDtcblx0XHRcdHN0b3AoIGdvdG9FbmQgKTtcblx0XHR9O1xuXG5cdFx0aWYgKCB0eXBlb2YgdHlwZSAhPT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdGdvdG9FbmQgPSBjbGVhclF1ZXVlO1xuXHRcdFx0Y2xlYXJRdWV1ZSA9IHR5cGU7XG5cdFx0XHR0eXBlID0gdW5kZWZpbmVkO1xuXHRcdH1cblx0XHRpZiAoIGNsZWFyUXVldWUgKSB7XG5cdFx0XHR0aGlzLnF1ZXVlKCB0eXBlIHx8IFwiZnhcIiwgW10gKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdHZhciBkZXF1ZXVlID0gdHJ1ZSxcblx0XHRcdFx0aW5kZXggPSB0eXBlICE9IG51bGwgJiYgdHlwZSArIFwicXVldWVIb29rc1wiLFxuXHRcdFx0XHR0aW1lcnMgPSBqUXVlcnkudGltZXJzLFxuXHRcdFx0XHRkYXRhID0gZGF0YVByaXYuZ2V0KCB0aGlzICk7XG5cblx0XHRcdGlmICggaW5kZXggKSB7XG5cdFx0XHRcdGlmICggZGF0YVsgaW5kZXggXSAmJiBkYXRhWyBpbmRleCBdLnN0b3AgKSB7XG5cdFx0XHRcdFx0c3RvcFF1ZXVlKCBkYXRhWyBpbmRleCBdICk7XG5cdFx0XHRcdH1cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGZvciAoIGluZGV4IGluIGRhdGEgKSB7XG5cdFx0XHRcdFx0aWYgKCBkYXRhWyBpbmRleCBdICYmIGRhdGFbIGluZGV4IF0uc3RvcCAmJiBycnVuLnRlc3QoIGluZGV4ICkgKSB7XG5cdFx0XHRcdFx0XHRzdG9wUXVldWUoIGRhdGFbIGluZGV4IF0gKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Zm9yICggaW5kZXggPSB0aW1lcnMubGVuZ3RoOyBpbmRleC0tOyApIHtcblx0XHRcdFx0aWYgKCB0aW1lcnNbIGluZGV4IF0uZWxlbSA9PT0gdGhpcyAmJlxuXHRcdFx0XHRcdCggdHlwZSA9PSBudWxsIHx8IHRpbWVyc1sgaW5kZXggXS5xdWV1ZSA9PT0gdHlwZSApICkge1xuXG5cdFx0XHRcdFx0dGltZXJzWyBpbmRleCBdLmFuaW0uc3RvcCggZ290b0VuZCApO1xuXHRcdFx0XHRcdGRlcXVldWUgPSBmYWxzZTtcblx0XHRcdFx0XHR0aW1lcnMuc3BsaWNlKCBpbmRleCwgMSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdC8vIFN0YXJ0IHRoZSBuZXh0IGluIHRoZSBxdWV1ZSBpZiB0aGUgbGFzdCBzdGVwIHdhc24ndCBmb3JjZWQuXG5cdFx0XHQvLyBUaW1lcnMgY3VycmVudGx5IHdpbGwgY2FsbCB0aGVpciBjb21wbGV0ZSBjYWxsYmFja3MsIHdoaWNoXG5cdFx0XHQvLyB3aWxsIGRlcXVldWUgYnV0IG9ubHkgaWYgdGhleSB3ZXJlIGdvdG9FbmQuXG5cdFx0XHRpZiAoIGRlcXVldWUgfHwgIWdvdG9FbmQgKSB7XG5cdFx0XHRcdGpRdWVyeS5kZXF1ZXVlKCB0aGlzLCB0eXBlICk7XG5cdFx0XHR9XG5cdFx0fSApO1xuXHR9LFxuXHRmaW5pc2g6IGZ1bmN0aW9uKCB0eXBlICkge1xuXHRcdGlmICggdHlwZSAhPT0gZmFsc2UgKSB7XG5cdFx0XHR0eXBlID0gdHlwZSB8fCBcImZ4XCI7XG5cdFx0fVxuXHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIGluZGV4LFxuXHRcdFx0XHRkYXRhID0gZGF0YVByaXYuZ2V0KCB0aGlzICksXG5cdFx0XHRcdHF1ZXVlID0gZGF0YVsgdHlwZSArIFwicXVldWVcIiBdLFxuXHRcdFx0XHRob29rcyA9IGRhdGFbIHR5cGUgKyBcInF1ZXVlSG9va3NcIiBdLFxuXHRcdFx0XHR0aW1lcnMgPSBqUXVlcnkudGltZXJzLFxuXHRcdFx0XHRsZW5ndGggPSBxdWV1ZSA/IHF1ZXVlLmxlbmd0aCA6IDA7XG5cblx0XHRcdC8vIEVuYWJsZSBmaW5pc2hpbmcgZmxhZyBvbiBwcml2YXRlIGRhdGFcblx0XHRcdGRhdGEuZmluaXNoID0gdHJ1ZTtcblxuXHRcdFx0Ly8gRW1wdHkgdGhlIHF1ZXVlIGZpcnN0XG5cdFx0XHRqUXVlcnkucXVldWUoIHRoaXMsIHR5cGUsIFtdICk7XG5cblx0XHRcdGlmICggaG9va3MgJiYgaG9va3Muc3RvcCApIHtcblx0XHRcdFx0aG9va3Muc3RvcC5jYWxsKCB0aGlzLCB0cnVlICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIExvb2sgZm9yIGFueSBhY3RpdmUgYW5pbWF0aW9ucywgYW5kIGZpbmlzaCB0aGVtXG5cdFx0XHRmb3IgKCBpbmRleCA9IHRpbWVycy5sZW5ndGg7IGluZGV4LS07ICkge1xuXHRcdFx0XHRpZiAoIHRpbWVyc1sgaW5kZXggXS5lbGVtID09PSB0aGlzICYmIHRpbWVyc1sgaW5kZXggXS5xdWV1ZSA9PT0gdHlwZSApIHtcblx0XHRcdFx0XHR0aW1lcnNbIGluZGV4IF0uYW5pbS5zdG9wKCB0cnVlICk7XG5cdFx0XHRcdFx0dGltZXJzLnNwbGljZSggaW5kZXgsIDEgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvLyBMb29rIGZvciBhbnkgYW5pbWF0aW9ucyBpbiB0aGUgb2xkIHF1ZXVlIGFuZCBmaW5pc2ggdGhlbVxuXHRcdFx0Zm9yICggaW5kZXggPSAwOyBpbmRleCA8IGxlbmd0aDsgaW5kZXgrKyApIHtcblx0XHRcdFx0aWYgKCBxdWV1ZVsgaW5kZXggXSAmJiBxdWV1ZVsgaW5kZXggXS5maW5pc2ggKSB7XG5cdFx0XHRcdFx0cXVldWVbIGluZGV4IF0uZmluaXNoLmNhbGwoIHRoaXMgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvLyBUdXJuIG9mZiBmaW5pc2hpbmcgZmxhZ1xuXHRcdFx0ZGVsZXRlIGRhdGEuZmluaXNoO1xuXHRcdH0gKTtcblx0fVxufSApO1xuXG5qUXVlcnkuZWFjaCggWyBcInRvZ2dsZVwiLCBcInNob3dcIiwgXCJoaWRlXCIgXSwgZnVuY3Rpb24oIF9pLCBuYW1lICkge1xuXHR2YXIgY3NzRm4gPSBqUXVlcnkuZm5bIG5hbWUgXTtcblx0alF1ZXJ5LmZuWyBuYW1lIF0gPSBmdW5jdGlvbiggc3BlZWQsIGVhc2luZywgY2FsbGJhY2sgKSB7XG5cdFx0cmV0dXJuIHNwZWVkID09IG51bGwgfHwgdHlwZW9mIHNwZWVkID09PSBcImJvb2xlYW5cIiA/XG5cdFx0XHRjc3NGbi5hcHBseSggdGhpcywgYXJndW1lbnRzICkgOlxuXHRcdFx0dGhpcy5hbmltYXRlKCBnZW5GeCggbmFtZSwgdHJ1ZSApLCBzcGVlZCwgZWFzaW5nLCBjYWxsYmFjayApO1xuXHR9O1xufSApO1xuXG4vLyBHZW5lcmF0ZSBzaG9ydGN1dHMgZm9yIGN1c3RvbSBhbmltYXRpb25zXG5qUXVlcnkuZWFjaCgge1xuXHRzbGlkZURvd246IGdlbkZ4KCBcInNob3dcIiApLFxuXHRzbGlkZVVwOiBnZW5GeCggXCJoaWRlXCIgKSxcblx0c2xpZGVUb2dnbGU6IGdlbkZ4KCBcInRvZ2dsZVwiICksXG5cdGZhZGVJbjogeyBvcGFjaXR5OiBcInNob3dcIiB9LFxuXHRmYWRlT3V0OiB7IG9wYWNpdHk6IFwiaGlkZVwiIH0sXG5cdGZhZGVUb2dnbGU6IHsgb3BhY2l0eTogXCJ0b2dnbGVcIiB9XG59LCBmdW5jdGlvbiggbmFtZSwgcHJvcHMgKSB7XG5cdGpRdWVyeS5mblsgbmFtZSBdID0gZnVuY3Rpb24oIHNwZWVkLCBlYXNpbmcsIGNhbGxiYWNrICkge1xuXHRcdHJldHVybiB0aGlzLmFuaW1hdGUoIHByb3BzLCBzcGVlZCwgZWFzaW5nLCBjYWxsYmFjayApO1xuXHR9O1xufSApO1xuXG5qUXVlcnkudGltZXJzID0gW107XG5qUXVlcnkuZngudGljayA9IGZ1bmN0aW9uKCkge1xuXHR2YXIgdGltZXIsXG5cdFx0aSA9IDAsXG5cdFx0dGltZXJzID0galF1ZXJ5LnRpbWVycztcblxuXHRmeE5vdyA9IERhdGUubm93KCk7XG5cblx0Zm9yICggOyBpIDwgdGltZXJzLmxlbmd0aDsgaSsrICkge1xuXHRcdHRpbWVyID0gdGltZXJzWyBpIF07XG5cblx0XHQvLyBSdW4gdGhlIHRpbWVyIGFuZCBzYWZlbHkgcmVtb3ZlIGl0IHdoZW4gZG9uZSAoYWxsb3dpbmcgZm9yIGV4dGVybmFsIHJlbW92YWwpXG5cdFx0aWYgKCAhdGltZXIoKSAmJiB0aW1lcnNbIGkgXSA9PT0gdGltZXIgKSB7XG5cdFx0XHR0aW1lcnMuc3BsaWNlKCBpLS0sIDEgKTtcblx0XHR9XG5cdH1cblxuXHRpZiAoICF0aW1lcnMubGVuZ3RoICkge1xuXHRcdGpRdWVyeS5meC5zdG9wKCk7XG5cdH1cblx0ZnhOb3cgPSB1bmRlZmluZWQ7XG59O1xuXG5qUXVlcnkuZngudGltZXIgPSBmdW5jdGlvbiggdGltZXIgKSB7XG5cdGpRdWVyeS50aW1lcnMucHVzaCggdGltZXIgKTtcblx0alF1ZXJ5LmZ4LnN0YXJ0KCk7XG59O1xuXG5qUXVlcnkuZnguaW50ZXJ2YWwgPSAxMztcbmpRdWVyeS5meC5zdGFydCA9IGZ1bmN0aW9uKCkge1xuXHRpZiAoIGluUHJvZ3Jlc3MgKSB7XG5cdFx0cmV0dXJuO1xuXHR9XG5cblx0aW5Qcm9ncmVzcyA9IHRydWU7XG5cdHNjaGVkdWxlKCk7XG59O1xuXG5qUXVlcnkuZnguc3RvcCA9IGZ1bmN0aW9uKCkge1xuXHRpblByb2dyZXNzID0gbnVsbDtcbn07XG5cbmpRdWVyeS5meC5zcGVlZHMgPSB7XG5cdHNsb3c6IDYwMCxcblx0ZmFzdDogMjAwLFxuXG5cdC8vIERlZmF1bHQgc3BlZWRcblx0X2RlZmF1bHQ6IDQwMFxufTtcblxuXG4vLyBCYXNlZCBvZmYgb2YgdGhlIHBsdWdpbiBieSBDbGludCBIZWxmZXJzLCB3aXRoIHBlcm1pc3Npb24uXG4vLyBodHRwczovL3dlYi5hcmNoaXZlLm9yZy93ZWIvMjAxMDAzMjQwMTQ3NDcvaHR0cDovL2JsaW5kc2lnbmFscy5jb20vaW5kZXgucGhwLzIwMDkvMDcvanF1ZXJ5LWRlbGF5L1xualF1ZXJ5LmZuLmRlbGF5ID0gZnVuY3Rpb24oIHRpbWUsIHR5cGUgKSB7XG5cdHRpbWUgPSBqUXVlcnkuZnggPyBqUXVlcnkuZnguc3BlZWRzWyB0aW1lIF0gfHwgdGltZSA6IHRpbWU7XG5cdHR5cGUgPSB0eXBlIHx8IFwiZnhcIjtcblxuXHRyZXR1cm4gdGhpcy5xdWV1ZSggdHlwZSwgZnVuY3Rpb24oIG5leHQsIGhvb2tzICkge1xuXHRcdHZhciB0aW1lb3V0ID0gd2luZG93LnNldFRpbWVvdXQoIG5leHQsIHRpbWUgKTtcblx0XHRob29rcy5zdG9wID0gZnVuY3Rpb24oKSB7XG5cdFx0XHR3aW5kb3cuY2xlYXJUaW1lb3V0KCB0aW1lb3V0ICk7XG5cdFx0fTtcblx0fSApO1xufTtcblxuXG4oIGZ1bmN0aW9uKCkge1xuXHR2YXIgaW5wdXQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImlucHV0XCIgKSxcblx0XHRzZWxlY3QgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcInNlbGVjdFwiICksXG5cdFx0b3B0ID0gc2VsZWN0LmFwcGVuZENoaWxkKCBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcIm9wdGlvblwiICkgKTtcblxuXHRpbnB1dC50eXBlID0gXCJjaGVja2JveFwiO1xuXG5cdC8vIFN1cHBvcnQ6IEFuZHJvaWQgPD00LjMgb25seVxuXHQvLyBEZWZhdWx0IHZhbHVlIGZvciBhIGNoZWNrYm94IHNob3VsZCBiZSBcIm9uXCJcblx0c3VwcG9ydC5jaGVja09uID0gaW5wdXQudmFsdWUgIT09IFwiXCI7XG5cblx0Ly8gU3VwcG9ydDogSUUgPD0xMSBvbmx5XG5cdC8vIE11c3QgYWNjZXNzIHNlbGVjdGVkSW5kZXggdG8gbWFrZSBkZWZhdWx0IG9wdGlvbnMgc2VsZWN0XG5cdHN1cHBvcnQub3B0U2VsZWN0ZWQgPSBvcHQuc2VsZWN0ZWQ7XG5cblx0Ly8gU3VwcG9ydDogSUUgPD0xMSBvbmx5XG5cdC8vIEFuIGlucHV0IGxvc2VzIGl0cyB2YWx1ZSBhZnRlciBiZWNvbWluZyBhIHJhZGlvXG5cdGlucHV0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJpbnB1dFwiICk7XG5cdGlucHV0LnZhbHVlID0gXCJ0XCI7XG5cdGlucHV0LnR5cGUgPSBcInJhZGlvXCI7XG5cdHN1cHBvcnQucmFkaW9WYWx1ZSA9IGlucHV0LnZhbHVlID09PSBcInRcIjtcbn0gKSgpO1xuXG5cbnZhciBib29sSG9vayxcblx0YXR0ckhhbmRsZSA9IGpRdWVyeS5leHByLmF0dHJIYW5kbGU7XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0YXR0cjogZnVuY3Rpb24oIG5hbWUsIHZhbHVlICkge1xuXHRcdHJldHVybiBhY2Nlc3MoIHRoaXMsIGpRdWVyeS5hdHRyLCBuYW1lLCB2YWx1ZSwgYXJndW1lbnRzLmxlbmd0aCA+IDEgKTtcblx0fSxcblxuXHRyZW1vdmVBdHRyOiBmdW5jdGlvbiggbmFtZSApIHtcblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdGpRdWVyeS5yZW1vdmVBdHRyKCB0aGlzLCBuYW1lICk7XG5cdFx0fSApO1xuXHR9XG59ICk7XG5cbmpRdWVyeS5leHRlbmQoIHtcblx0YXR0cjogZnVuY3Rpb24oIGVsZW0sIG5hbWUsIHZhbHVlICkge1xuXHRcdHZhciByZXQsIGhvb2tzLFxuXHRcdFx0blR5cGUgPSBlbGVtLm5vZGVUeXBlO1xuXG5cdFx0Ly8gRG9uJ3QgZ2V0L3NldCBhdHRyaWJ1dGVzIG9uIHRleHQsIGNvbW1lbnQgYW5kIGF0dHJpYnV0ZSBub2Rlc1xuXHRcdGlmICggblR5cGUgPT09IDMgfHwgblR5cGUgPT09IDggfHwgblR5cGUgPT09IDIgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Ly8gRmFsbGJhY2sgdG8gcHJvcCB3aGVuIGF0dHJpYnV0ZXMgYXJlIG5vdCBzdXBwb3J0ZWRcblx0XHRpZiAoIHR5cGVvZiBlbGVtLmdldEF0dHJpYnV0ZSA9PT0gXCJ1bmRlZmluZWRcIiApIHtcblx0XHRcdHJldHVybiBqUXVlcnkucHJvcCggZWxlbSwgbmFtZSwgdmFsdWUgKTtcblx0XHR9XG5cblx0XHQvLyBBdHRyaWJ1dGUgaG9va3MgYXJlIGRldGVybWluZWQgYnkgdGhlIGxvd2VyY2FzZSB2ZXJzaW9uXG5cdFx0Ly8gR3JhYiBuZWNlc3NhcnkgaG9vayBpZiBvbmUgaXMgZGVmaW5lZFxuXHRcdGlmICggblR5cGUgIT09IDEgfHwgIWpRdWVyeS5pc1hNTERvYyggZWxlbSApICkge1xuXHRcdFx0aG9va3MgPSBqUXVlcnkuYXR0ckhvb2tzWyBuYW1lLnRvTG93ZXJDYXNlKCkgXSB8fFxuXHRcdFx0XHQoIGpRdWVyeS5leHByLm1hdGNoLmJvb2wudGVzdCggbmFtZSApID8gYm9vbEhvb2sgOiB1bmRlZmluZWQgKTtcblx0XHR9XG5cblx0XHRpZiAoIHZhbHVlICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRpZiAoIHZhbHVlID09PSBudWxsICkge1xuXHRcdFx0XHRqUXVlcnkucmVtb3ZlQXR0ciggZWxlbSwgbmFtZSApO1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cblx0XHRcdGlmICggaG9va3MgJiYgXCJzZXRcIiBpbiBob29rcyAmJlxuXHRcdFx0XHQoIHJldCA9IGhvb2tzLnNldCggZWxlbSwgdmFsdWUsIG5hbWUgKSApICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdHJldHVybiByZXQ7XG5cdFx0XHR9XG5cblx0XHRcdGVsZW0uc2V0QXR0cmlidXRlKCBuYW1lLCB2YWx1ZSArIFwiXCIgKTtcblx0XHRcdHJldHVybiB2YWx1ZTtcblx0XHR9XG5cblx0XHRpZiAoIGhvb2tzICYmIFwiZ2V0XCIgaW4gaG9va3MgJiYgKCByZXQgPSBob29rcy5nZXQoIGVsZW0sIG5hbWUgKSApICE9PSBudWxsICkge1xuXHRcdFx0cmV0dXJuIHJldDtcblx0XHR9XG5cblx0XHRyZXQgPSBqUXVlcnkuZmluZC5hdHRyKCBlbGVtLCBuYW1lICk7XG5cblx0XHQvLyBOb24tZXhpc3RlbnQgYXR0cmlidXRlcyByZXR1cm4gbnVsbCwgd2Ugbm9ybWFsaXplIHRvIHVuZGVmaW5lZFxuXHRcdHJldHVybiByZXQgPT0gbnVsbCA/IHVuZGVmaW5lZCA6IHJldDtcblx0fSxcblxuXHRhdHRySG9va3M6IHtcblx0XHR0eXBlOiB7XG5cdFx0XHRzZXQ6IGZ1bmN0aW9uKCBlbGVtLCB2YWx1ZSApIHtcblx0XHRcdFx0aWYgKCAhc3VwcG9ydC5yYWRpb1ZhbHVlICYmIHZhbHVlID09PSBcInJhZGlvXCIgJiZcblx0XHRcdFx0XHRub2RlTmFtZSggZWxlbSwgXCJpbnB1dFwiICkgKSB7XG5cdFx0XHRcdFx0dmFyIHZhbCA9IGVsZW0udmFsdWU7XG5cdFx0XHRcdFx0ZWxlbS5zZXRBdHRyaWJ1dGUoIFwidHlwZVwiLCB2YWx1ZSApO1xuXHRcdFx0XHRcdGlmICggdmFsICkge1xuXHRcdFx0XHRcdFx0ZWxlbS52YWx1ZSA9IHZhbDtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0cmV0dXJuIHZhbHVlO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9LFxuXG5cdHJlbW92ZUF0dHI6IGZ1bmN0aW9uKCBlbGVtLCB2YWx1ZSApIHtcblx0XHR2YXIgbmFtZSxcblx0XHRcdGkgPSAwLFxuXG5cdFx0XHQvLyBBdHRyaWJ1dGUgbmFtZXMgY2FuIGNvbnRhaW4gbm9uLUhUTUwgd2hpdGVzcGFjZSBjaGFyYWN0ZXJzXG5cdFx0XHQvLyBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnL211bHRpcGFnZS9zeW50YXguaHRtbCNhdHRyaWJ1dGVzLTJcblx0XHRcdGF0dHJOYW1lcyA9IHZhbHVlICYmIHZhbHVlLm1hdGNoKCBybm90aHRtbHdoaXRlICk7XG5cblx0XHRpZiAoIGF0dHJOYW1lcyAmJiBlbGVtLm5vZGVUeXBlID09PSAxICkge1xuXHRcdFx0d2hpbGUgKCAoIG5hbWUgPSBhdHRyTmFtZXNbIGkrKyBdICkgKSB7XG5cdFx0XHRcdGVsZW0ucmVtb3ZlQXR0cmlidXRlKCBuYW1lICk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG59ICk7XG5cbi8vIEhvb2tzIGZvciBib29sZWFuIGF0dHJpYnV0ZXNcbmJvb2xIb29rID0ge1xuXHRzZXQ6IGZ1bmN0aW9uKCBlbGVtLCB2YWx1ZSwgbmFtZSApIHtcblx0XHRpZiAoIHZhbHVlID09PSBmYWxzZSApIHtcblxuXHRcdFx0Ly8gUmVtb3ZlIGJvb2xlYW4gYXR0cmlidXRlcyB3aGVuIHNldCB0byBmYWxzZVxuXHRcdFx0alF1ZXJ5LnJlbW92ZUF0dHIoIGVsZW0sIG5hbWUgKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0ZWxlbS5zZXRBdHRyaWJ1dGUoIG5hbWUsIG5hbWUgKTtcblx0XHR9XG5cdFx0cmV0dXJuIG5hbWU7XG5cdH1cbn07XG5cbmpRdWVyeS5lYWNoKCBqUXVlcnkuZXhwci5tYXRjaC5ib29sLnNvdXJjZS5tYXRjaCggL1xcdysvZyApLCBmdW5jdGlvbiggX2ksIG5hbWUgKSB7XG5cdHZhciBnZXR0ZXIgPSBhdHRySGFuZGxlWyBuYW1lIF0gfHwgalF1ZXJ5LmZpbmQuYXR0cjtcblxuXHRhdHRySGFuZGxlWyBuYW1lIF0gPSBmdW5jdGlvbiggZWxlbSwgbmFtZSwgaXNYTUwgKSB7XG5cdFx0dmFyIHJldCwgaGFuZGxlLFxuXHRcdFx0bG93ZXJjYXNlTmFtZSA9IG5hbWUudG9Mb3dlckNhc2UoKTtcblxuXHRcdGlmICggIWlzWE1MICkge1xuXG5cdFx0XHQvLyBBdm9pZCBhbiBpbmZpbml0ZSBsb29wIGJ5IHRlbXBvcmFyaWx5IHJlbW92aW5nIHRoaXMgZnVuY3Rpb24gZnJvbSB0aGUgZ2V0dGVyXG5cdFx0XHRoYW5kbGUgPSBhdHRySGFuZGxlWyBsb3dlcmNhc2VOYW1lIF07XG5cdFx0XHRhdHRySGFuZGxlWyBsb3dlcmNhc2VOYW1lIF0gPSByZXQ7XG5cdFx0XHRyZXQgPSBnZXR0ZXIoIGVsZW0sIG5hbWUsIGlzWE1MICkgIT0gbnVsbCA/XG5cdFx0XHRcdGxvd2VyY2FzZU5hbWUgOlxuXHRcdFx0XHRudWxsO1xuXHRcdFx0YXR0ckhhbmRsZVsgbG93ZXJjYXNlTmFtZSBdID0gaGFuZGxlO1xuXHRcdH1cblx0XHRyZXR1cm4gcmV0O1xuXHR9O1xufSApO1xuXG5cblxuXG52YXIgcmZvY3VzYWJsZSA9IC9eKD86aW5wdXR8c2VsZWN0fHRleHRhcmVhfGJ1dHRvbikkL2ksXG5cdHJjbGlja2FibGUgPSAvXig/OmF8YXJlYSkkL2k7XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0cHJvcDogZnVuY3Rpb24oIG5hbWUsIHZhbHVlICkge1xuXHRcdHJldHVybiBhY2Nlc3MoIHRoaXMsIGpRdWVyeS5wcm9wLCBuYW1lLCB2YWx1ZSwgYXJndW1lbnRzLmxlbmd0aCA+IDEgKTtcblx0fSxcblxuXHRyZW1vdmVQcm9wOiBmdW5jdGlvbiggbmFtZSApIHtcblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdGRlbGV0ZSB0aGlzWyBqUXVlcnkucHJvcEZpeFsgbmFtZSBdIHx8IG5hbWUgXTtcblx0XHR9ICk7XG5cdH1cbn0gKTtcblxualF1ZXJ5LmV4dGVuZCgge1xuXHRwcm9wOiBmdW5jdGlvbiggZWxlbSwgbmFtZSwgdmFsdWUgKSB7XG5cdFx0dmFyIHJldCwgaG9va3MsXG5cdFx0XHRuVHlwZSA9IGVsZW0ubm9kZVR5cGU7XG5cblx0XHQvLyBEb24ndCBnZXQvc2V0IHByb3BlcnRpZXMgb24gdGV4dCwgY29tbWVudCBhbmQgYXR0cmlidXRlIG5vZGVzXG5cdFx0aWYgKCBuVHlwZSA9PT0gMyB8fCBuVHlwZSA9PT0gOCB8fCBuVHlwZSA9PT0gMiApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHRpZiAoIG5UeXBlICE9PSAxIHx8ICFqUXVlcnkuaXNYTUxEb2MoIGVsZW0gKSApIHtcblxuXHRcdFx0Ly8gRml4IG5hbWUgYW5kIGF0dGFjaCBob29rc1xuXHRcdFx0bmFtZSA9IGpRdWVyeS5wcm9wRml4WyBuYW1lIF0gfHwgbmFtZTtcblx0XHRcdGhvb2tzID0galF1ZXJ5LnByb3BIb29rc1sgbmFtZSBdO1xuXHRcdH1cblxuXHRcdGlmICggdmFsdWUgIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdGlmICggaG9va3MgJiYgXCJzZXRcIiBpbiBob29rcyAmJlxuXHRcdFx0XHQoIHJldCA9IGhvb2tzLnNldCggZWxlbSwgdmFsdWUsIG5hbWUgKSApICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdHJldHVybiByZXQ7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiAoIGVsZW1bIG5hbWUgXSA9IHZhbHVlICk7XG5cdFx0fVxuXG5cdFx0aWYgKCBob29rcyAmJiBcImdldFwiIGluIGhvb2tzICYmICggcmV0ID0gaG9va3MuZ2V0KCBlbGVtLCBuYW1lICkgKSAhPT0gbnVsbCApIHtcblx0XHRcdHJldHVybiByZXQ7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGVsZW1bIG5hbWUgXTtcblx0fSxcblxuXHRwcm9wSG9va3M6IHtcblx0XHR0YWJJbmRleDoge1xuXHRcdFx0Z2V0OiBmdW5jdGlvbiggZWxlbSApIHtcblxuXHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA8PTkgLSAxMSBvbmx5XG5cdFx0XHRcdC8vIGVsZW0udGFiSW5kZXggZG9lc24ndCBhbHdheXMgcmV0dXJuIHRoZVxuXHRcdFx0XHQvLyBjb3JyZWN0IHZhbHVlIHdoZW4gaXQgaGFzbid0IGJlZW4gZXhwbGljaXRseSBzZXRcblx0XHRcdFx0Ly8gaHR0cHM6Ly93ZWIuYXJjaGl2ZS5vcmcvd2ViLzIwMTQxMTE2MjMzMzQ3L2h0dHA6Ly9mbHVpZHByb2plY3Qub3JnL2Jsb2cvMjAwOC8wMS8wOS9nZXR0aW5nLXNldHRpbmctYW5kLXJlbW92aW5nLXRhYmluZGV4LXZhbHVlcy13aXRoLWphdmFzY3JpcHQvXG5cdFx0XHRcdC8vIFVzZSBwcm9wZXIgYXR0cmlidXRlIHJldHJpZXZhbCgjMTIwNzIpXG5cdFx0XHRcdHZhciB0YWJpbmRleCA9IGpRdWVyeS5maW5kLmF0dHIoIGVsZW0sIFwidGFiaW5kZXhcIiApO1xuXG5cdFx0XHRcdGlmICggdGFiaW5kZXggKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHBhcnNlSW50KCB0YWJpbmRleCwgMTAgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGlmIChcblx0XHRcdFx0XHRyZm9jdXNhYmxlLnRlc3QoIGVsZW0ubm9kZU5hbWUgKSB8fFxuXHRcdFx0XHRcdHJjbGlja2FibGUudGVzdCggZWxlbS5ub2RlTmFtZSApICYmXG5cdFx0XHRcdFx0ZWxlbS5ocmVmXG5cdFx0XHRcdCkge1xuXHRcdFx0XHRcdHJldHVybiAwO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0cmV0dXJuIC0xO1xuXHRcdFx0fVxuXHRcdH1cblx0fSxcblxuXHRwcm9wRml4OiB7XG5cdFx0XCJmb3JcIjogXCJodG1sRm9yXCIsXG5cdFx0XCJjbGFzc1wiOiBcImNsYXNzTmFtZVwiXG5cdH1cbn0gKTtcblxuLy8gU3VwcG9ydDogSUUgPD0xMSBvbmx5XG4vLyBBY2Nlc3NpbmcgdGhlIHNlbGVjdGVkSW5kZXggcHJvcGVydHlcbi8vIGZvcmNlcyB0aGUgYnJvd3NlciB0byByZXNwZWN0IHNldHRpbmcgc2VsZWN0ZWRcbi8vIG9uIHRoZSBvcHRpb25cbi8vIFRoZSBnZXR0ZXIgZW5zdXJlcyBhIGRlZmF1bHQgb3B0aW9uIGlzIHNlbGVjdGVkXG4vLyB3aGVuIGluIGFuIG9wdGdyb3VwXG4vLyBlc2xpbnQgcnVsZSBcIm5vLXVudXNlZC1leHByZXNzaW9uc1wiIGlzIGRpc2FibGVkIGZvciB0aGlzIGNvZGVcbi8vIHNpbmNlIGl0IGNvbnNpZGVycyBzdWNoIGFjY2Vzc2lvbnMgbm9vcFxuaWYgKCAhc3VwcG9ydC5vcHRTZWxlY3RlZCApIHtcblx0alF1ZXJ5LnByb3BIb29rcy5zZWxlY3RlZCA9IHtcblx0XHRnZXQ6IGZ1bmN0aW9uKCBlbGVtICkge1xuXG5cdFx0XHQvKiBlc2xpbnQgbm8tdW51c2VkLWV4cHJlc3Npb25zOiBcIm9mZlwiICovXG5cblx0XHRcdHZhciBwYXJlbnQgPSBlbGVtLnBhcmVudE5vZGU7XG5cdFx0XHRpZiAoIHBhcmVudCAmJiBwYXJlbnQucGFyZW50Tm9kZSApIHtcblx0XHRcdFx0cGFyZW50LnBhcmVudE5vZGUuc2VsZWN0ZWRJbmRleDtcblx0XHRcdH1cblx0XHRcdHJldHVybiBudWxsO1xuXHRcdH0sXG5cdFx0c2V0OiBmdW5jdGlvbiggZWxlbSApIHtcblxuXHRcdFx0LyogZXNsaW50IG5vLXVudXNlZC1leHByZXNzaW9uczogXCJvZmZcIiAqL1xuXG5cdFx0XHR2YXIgcGFyZW50ID0gZWxlbS5wYXJlbnROb2RlO1xuXHRcdFx0aWYgKCBwYXJlbnQgKSB7XG5cdFx0XHRcdHBhcmVudC5zZWxlY3RlZEluZGV4O1xuXG5cdFx0XHRcdGlmICggcGFyZW50LnBhcmVudE5vZGUgKSB7XG5cdFx0XHRcdFx0cGFyZW50LnBhcmVudE5vZGUuc2VsZWN0ZWRJbmRleDtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fTtcbn1cblxualF1ZXJ5LmVhY2goIFtcblx0XCJ0YWJJbmRleFwiLFxuXHRcInJlYWRPbmx5XCIsXG5cdFwibWF4TGVuZ3RoXCIsXG5cdFwiY2VsbFNwYWNpbmdcIixcblx0XCJjZWxsUGFkZGluZ1wiLFxuXHRcInJvd1NwYW5cIixcblx0XCJjb2xTcGFuXCIsXG5cdFwidXNlTWFwXCIsXG5cdFwiZnJhbWVCb3JkZXJcIixcblx0XCJjb250ZW50RWRpdGFibGVcIlxuXSwgZnVuY3Rpb24oKSB7XG5cdGpRdWVyeS5wcm9wRml4WyB0aGlzLnRvTG93ZXJDYXNlKCkgXSA9IHRoaXM7XG59ICk7XG5cblxuXG5cblx0Ly8gU3RyaXAgYW5kIGNvbGxhcHNlIHdoaXRlc3BhY2UgYWNjb3JkaW5nIHRvIEhUTUwgc3BlY1xuXHQvLyBodHRwczovL2luZnJhLnNwZWMud2hhdHdnLm9yZy8jc3RyaXAtYW5kLWNvbGxhcHNlLWFzY2lpLXdoaXRlc3BhY2Vcblx0ZnVuY3Rpb24gc3RyaXBBbmRDb2xsYXBzZSggdmFsdWUgKSB7XG5cdFx0dmFyIHRva2VucyA9IHZhbHVlLm1hdGNoKCBybm90aHRtbHdoaXRlICkgfHwgW107XG5cdFx0cmV0dXJuIHRva2Vucy5qb2luKCBcIiBcIiApO1xuXHR9XG5cblxuZnVuY3Rpb24gZ2V0Q2xhc3MoIGVsZW0gKSB7XG5cdHJldHVybiBlbGVtLmdldEF0dHJpYnV0ZSAmJiBlbGVtLmdldEF0dHJpYnV0ZSggXCJjbGFzc1wiICkgfHwgXCJcIjtcbn1cblxuZnVuY3Rpb24gY2xhc3Nlc1RvQXJyYXkoIHZhbHVlICkge1xuXHRpZiAoIEFycmF5LmlzQXJyYXkoIHZhbHVlICkgKSB7XG5cdFx0cmV0dXJuIHZhbHVlO1xuXHR9XG5cdGlmICggdHlwZW9mIHZhbHVlID09PSBcInN0cmluZ1wiICkge1xuXHRcdHJldHVybiB2YWx1ZS5tYXRjaCggcm5vdGh0bWx3aGl0ZSApIHx8IFtdO1xuXHR9XG5cdHJldHVybiBbXTtcbn1cblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHRhZGRDbGFzczogZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdHZhciBjbGFzc2VzLCBlbGVtLCBjdXIsIGN1clZhbHVlLCBjbGF6eiwgaiwgZmluYWxWYWx1ZSxcblx0XHRcdGkgPSAwO1xuXG5cdFx0aWYgKCBpc0Z1bmN0aW9uKCB2YWx1ZSApICkge1xuXHRcdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oIGogKSB7XG5cdFx0XHRcdGpRdWVyeSggdGhpcyApLmFkZENsYXNzKCB2YWx1ZS5jYWxsKCB0aGlzLCBqLCBnZXRDbGFzcyggdGhpcyApICkgKTtcblx0XHRcdH0gKTtcblx0XHR9XG5cblx0XHRjbGFzc2VzID0gY2xhc3Nlc1RvQXJyYXkoIHZhbHVlICk7XG5cblx0XHRpZiAoIGNsYXNzZXMubGVuZ3RoICkge1xuXHRcdFx0d2hpbGUgKCAoIGVsZW0gPSB0aGlzWyBpKysgXSApICkge1xuXHRcdFx0XHRjdXJWYWx1ZSA9IGdldENsYXNzKCBlbGVtICk7XG5cdFx0XHRcdGN1ciA9IGVsZW0ubm9kZVR5cGUgPT09IDEgJiYgKCBcIiBcIiArIHN0cmlwQW5kQ29sbGFwc2UoIGN1clZhbHVlICkgKyBcIiBcIiApO1xuXG5cdFx0XHRcdGlmICggY3VyICkge1xuXHRcdFx0XHRcdGogPSAwO1xuXHRcdFx0XHRcdHdoaWxlICggKCBjbGF6eiA9IGNsYXNzZXNbIGorKyBdICkgKSB7XG5cdFx0XHRcdFx0XHRpZiAoIGN1ci5pbmRleE9mKCBcIiBcIiArIGNsYXp6ICsgXCIgXCIgKSA8IDAgKSB7XG5cdFx0XHRcdFx0XHRcdGN1ciArPSBjbGF6eiArIFwiIFwiO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8vIE9ubHkgYXNzaWduIGlmIGRpZmZlcmVudCB0byBhdm9pZCB1bm5lZWRlZCByZW5kZXJpbmcuXG5cdFx0XHRcdFx0ZmluYWxWYWx1ZSA9IHN0cmlwQW5kQ29sbGFwc2UoIGN1ciApO1xuXHRcdFx0XHRcdGlmICggY3VyVmFsdWUgIT09IGZpbmFsVmFsdWUgKSB7XG5cdFx0XHRcdFx0XHRlbGVtLnNldEF0dHJpYnV0ZSggXCJjbGFzc1wiLCBmaW5hbFZhbHVlICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXM7XG5cdH0sXG5cblx0cmVtb3ZlQ2xhc3M6IGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHR2YXIgY2xhc3NlcywgZWxlbSwgY3VyLCBjdXJWYWx1ZSwgY2xhenosIGosIGZpbmFsVmFsdWUsXG5cdFx0XHRpID0gMDtcblxuXHRcdGlmICggaXNGdW5jdGlvbiggdmFsdWUgKSApIHtcblx0XHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCBqICkge1xuXHRcdFx0XHRqUXVlcnkoIHRoaXMgKS5yZW1vdmVDbGFzcyggdmFsdWUuY2FsbCggdGhpcywgaiwgZ2V0Q2xhc3MoIHRoaXMgKSApICk7XG5cdFx0XHR9ICk7XG5cdFx0fVxuXG5cdFx0aWYgKCAhYXJndW1lbnRzLmxlbmd0aCApIHtcblx0XHRcdHJldHVybiB0aGlzLmF0dHIoIFwiY2xhc3NcIiwgXCJcIiApO1xuXHRcdH1cblxuXHRcdGNsYXNzZXMgPSBjbGFzc2VzVG9BcnJheSggdmFsdWUgKTtcblxuXHRcdGlmICggY2xhc3Nlcy5sZW5ndGggKSB7XG5cdFx0XHR3aGlsZSAoICggZWxlbSA9IHRoaXNbIGkrKyBdICkgKSB7XG5cdFx0XHRcdGN1clZhbHVlID0gZ2V0Q2xhc3MoIGVsZW0gKTtcblxuXHRcdFx0XHQvLyBUaGlzIGV4cHJlc3Npb24gaXMgaGVyZSBmb3IgYmV0dGVyIGNvbXByZXNzaWJpbGl0eSAoc2VlIGFkZENsYXNzKVxuXHRcdFx0XHRjdXIgPSBlbGVtLm5vZGVUeXBlID09PSAxICYmICggXCIgXCIgKyBzdHJpcEFuZENvbGxhcHNlKCBjdXJWYWx1ZSApICsgXCIgXCIgKTtcblxuXHRcdFx0XHRpZiAoIGN1ciApIHtcblx0XHRcdFx0XHRqID0gMDtcblx0XHRcdFx0XHR3aGlsZSAoICggY2xhenogPSBjbGFzc2VzWyBqKysgXSApICkge1xuXG5cdFx0XHRcdFx0XHQvLyBSZW1vdmUgKmFsbCogaW5zdGFuY2VzXG5cdFx0XHRcdFx0XHR3aGlsZSAoIGN1ci5pbmRleE9mKCBcIiBcIiArIGNsYXp6ICsgXCIgXCIgKSA+IC0xICkge1xuXHRcdFx0XHRcdFx0XHRjdXIgPSBjdXIucmVwbGFjZSggXCIgXCIgKyBjbGF6eiArIFwiIFwiLCBcIiBcIiApO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8vIE9ubHkgYXNzaWduIGlmIGRpZmZlcmVudCB0byBhdm9pZCB1bm5lZWRlZCByZW5kZXJpbmcuXG5cdFx0XHRcdFx0ZmluYWxWYWx1ZSA9IHN0cmlwQW5kQ29sbGFwc2UoIGN1ciApO1xuXHRcdFx0XHRcdGlmICggY3VyVmFsdWUgIT09IGZpbmFsVmFsdWUgKSB7XG5cdFx0XHRcdFx0XHRlbGVtLnNldEF0dHJpYnV0ZSggXCJjbGFzc1wiLCBmaW5hbFZhbHVlICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXM7XG5cdH0sXG5cblx0dG9nZ2xlQ2xhc3M6IGZ1bmN0aW9uKCB2YWx1ZSwgc3RhdGVWYWwgKSB7XG5cdFx0dmFyIHR5cGUgPSB0eXBlb2YgdmFsdWUsXG5cdFx0XHRpc1ZhbGlkVmFsdWUgPSB0eXBlID09PSBcInN0cmluZ1wiIHx8IEFycmF5LmlzQXJyYXkoIHZhbHVlICk7XG5cblx0XHRpZiAoIHR5cGVvZiBzdGF0ZVZhbCA9PT0gXCJib29sZWFuXCIgJiYgaXNWYWxpZFZhbHVlICkge1xuXHRcdFx0cmV0dXJuIHN0YXRlVmFsID8gdGhpcy5hZGRDbGFzcyggdmFsdWUgKSA6IHRoaXMucmVtb3ZlQ2xhc3MoIHZhbHVlICk7XG5cdFx0fVxuXG5cdFx0aWYgKCBpc0Z1bmN0aW9uKCB2YWx1ZSApICkge1xuXHRcdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oIGkgKSB7XG5cdFx0XHRcdGpRdWVyeSggdGhpcyApLnRvZ2dsZUNsYXNzKFxuXHRcdFx0XHRcdHZhbHVlLmNhbGwoIHRoaXMsIGksIGdldENsYXNzKCB0aGlzICksIHN0YXRlVmFsICksXG5cdFx0XHRcdFx0c3RhdGVWYWxcblx0XHRcdFx0KTtcblx0XHRcdH0gKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdHZhciBjbGFzc05hbWUsIGksIHNlbGYsIGNsYXNzTmFtZXM7XG5cblx0XHRcdGlmICggaXNWYWxpZFZhbHVlICkge1xuXG5cdFx0XHRcdC8vIFRvZ2dsZSBpbmRpdmlkdWFsIGNsYXNzIG5hbWVzXG5cdFx0XHRcdGkgPSAwO1xuXHRcdFx0XHRzZWxmID0galF1ZXJ5KCB0aGlzICk7XG5cdFx0XHRcdGNsYXNzTmFtZXMgPSBjbGFzc2VzVG9BcnJheSggdmFsdWUgKTtcblxuXHRcdFx0XHR3aGlsZSAoICggY2xhc3NOYW1lID0gY2xhc3NOYW1lc1sgaSsrIF0gKSApIHtcblxuXHRcdFx0XHRcdC8vIENoZWNrIGVhY2ggY2xhc3NOYW1lIGdpdmVuLCBzcGFjZSBzZXBhcmF0ZWQgbGlzdFxuXHRcdFx0XHRcdGlmICggc2VsZi5oYXNDbGFzcyggY2xhc3NOYW1lICkgKSB7XG5cdFx0XHRcdFx0XHRzZWxmLnJlbW92ZUNsYXNzKCBjbGFzc05hbWUgKTtcblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0c2VsZi5hZGRDbGFzcyggY2xhc3NOYW1lICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdC8vIFRvZ2dsZSB3aG9sZSBjbGFzcyBuYW1lXG5cdFx0XHR9IGVsc2UgaWYgKCB2YWx1ZSA9PT0gdW5kZWZpbmVkIHx8IHR5cGUgPT09IFwiYm9vbGVhblwiICkge1xuXHRcdFx0XHRjbGFzc05hbWUgPSBnZXRDbGFzcyggdGhpcyApO1xuXHRcdFx0XHRpZiAoIGNsYXNzTmFtZSApIHtcblxuXHRcdFx0XHRcdC8vIFN0b3JlIGNsYXNzTmFtZSBpZiBzZXRcblx0XHRcdFx0XHRkYXRhUHJpdi5zZXQoIHRoaXMsIFwiX19jbGFzc05hbWVfX1wiLCBjbGFzc05hbWUgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIElmIHRoZSBlbGVtZW50IGhhcyBhIGNsYXNzIG5hbWUgb3IgaWYgd2UncmUgcGFzc2VkIGBmYWxzZWAsXG5cdFx0XHRcdC8vIHRoZW4gcmVtb3ZlIHRoZSB3aG9sZSBjbGFzc25hbWUgKGlmIHRoZXJlIHdhcyBvbmUsIHRoZSBhYm92ZSBzYXZlZCBpdCkuXG5cdFx0XHRcdC8vIE90aGVyd2lzZSBicmluZyBiYWNrIHdoYXRldmVyIHdhcyBwcmV2aW91c2x5IHNhdmVkIChpZiBhbnl0aGluZyksXG5cdFx0XHRcdC8vIGZhbGxpbmcgYmFjayB0byB0aGUgZW1wdHkgc3RyaW5nIGlmIG5vdGhpbmcgd2FzIHN0b3JlZC5cblx0XHRcdFx0aWYgKCB0aGlzLnNldEF0dHJpYnV0ZSApIHtcblx0XHRcdFx0XHR0aGlzLnNldEF0dHJpYnV0ZSggXCJjbGFzc1wiLFxuXHRcdFx0XHRcdFx0Y2xhc3NOYW1lIHx8IHZhbHVlID09PSBmYWxzZSA/XG5cdFx0XHRcdFx0XHRcIlwiIDpcblx0XHRcdFx0XHRcdGRhdGFQcml2LmdldCggdGhpcywgXCJfX2NsYXNzTmFtZV9fXCIgKSB8fCBcIlwiXG5cdFx0XHRcdFx0KTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0gKTtcblx0fSxcblxuXHRoYXNDbGFzczogZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdHZhciBjbGFzc05hbWUsIGVsZW0sXG5cdFx0XHRpID0gMDtcblxuXHRcdGNsYXNzTmFtZSA9IFwiIFwiICsgc2VsZWN0b3IgKyBcIiBcIjtcblx0XHR3aGlsZSAoICggZWxlbSA9IHRoaXNbIGkrKyBdICkgKSB7XG5cdFx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDEgJiZcblx0XHRcdFx0KCBcIiBcIiArIHN0cmlwQW5kQ29sbGFwc2UoIGdldENsYXNzKCBlbGVtICkgKSArIFwiIFwiICkuaW5kZXhPZiggY2xhc3NOYW1lICkgPiAtMSApIHtcblx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cbn0gKTtcblxuXG5cblxudmFyIHJyZXR1cm4gPSAvXFxyL2c7XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0dmFsOiBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0dmFyIGhvb2tzLCByZXQsIHZhbHVlSXNGdW5jdGlvbixcblx0XHRcdGVsZW0gPSB0aGlzWyAwIF07XG5cblx0XHRpZiAoICFhcmd1bWVudHMubGVuZ3RoICkge1xuXHRcdFx0aWYgKCBlbGVtICkge1xuXHRcdFx0XHRob29rcyA9IGpRdWVyeS52YWxIb29rc1sgZWxlbS50eXBlIF0gfHxcblx0XHRcdFx0XHRqUXVlcnkudmFsSG9va3NbIGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKSBdO1xuXG5cdFx0XHRcdGlmICggaG9va3MgJiZcblx0XHRcdFx0XHRcImdldFwiIGluIGhvb2tzICYmXG5cdFx0XHRcdFx0KCByZXQgPSBob29rcy5nZXQoIGVsZW0sIFwidmFsdWVcIiApICkgIT09IHVuZGVmaW5lZFxuXHRcdFx0XHQpIHtcblx0XHRcdFx0XHRyZXR1cm4gcmV0O1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0cmV0ID0gZWxlbS52YWx1ZTtcblxuXHRcdFx0XHQvLyBIYW5kbGUgbW9zdCBjb21tb24gc3RyaW5nIGNhc2VzXG5cdFx0XHRcdGlmICggdHlwZW9mIHJldCA9PT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdFx0XHRyZXR1cm4gcmV0LnJlcGxhY2UoIHJyZXR1cm4sIFwiXCIgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIEhhbmRsZSBjYXNlcyB3aGVyZSB2YWx1ZSBpcyBudWxsL3VuZGVmIG9yIG51bWJlclxuXHRcdFx0XHRyZXR1cm4gcmV0ID09IG51bGwgPyBcIlwiIDogcmV0O1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0dmFsdWVJc0Z1bmN0aW9uID0gaXNGdW5jdGlvbiggdmFsdWUgKTtcblxuXHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCBpICkge1xuXHRcdFx0dmFyIHZhbDtcblxuXHRcdFx0aWYgKCB0aGlzLm5vZGVUeXBlICE9PSAxICkge1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cblx0XHRcdGlmICggdmFsdWVJc0Z1bmN0aW9uICkge1xuXHRcdFx0XHR2YWwgPSB2YWx1ZS5jYWxsKCB0aGlzLCBpLCBqUXVlcnkoIHRoaXMgKS52YWwoKSApO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0dmFsID0gdmFsdWU7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFRyZWF0IG51bGwvdW5kZWZpbmVkIGFzIFwiXCI7IGNvbnZlcnQgbnVtYmVycyB0byBzdHJpbmdcblx0XHRcdGlmICggdmFsID09IG51bGwgKSB7XG5cdFx0XHRcdHZhbCA9IFwiXCI7XG5cblx0XHRcdH0gZWxzZSBpZiAoIHR5cGVvZiB2YWwgPT09IFwibnVtYmVyXCIgKSB7XG5cdFx0XHRcdHZhbCArPSBcIlwiO1xuXG5cdFx0XHR9IGVsc2UgaWYgKCBBcnJheS5pc0FycmF5KCB2YWwgKSApIHtcblx0XHRcdFx0dmFsID0galF1ZXJ5Lm1hcCggdmFsLCBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHZhbHVlID09IG51bGwgPyBcIlwiIDogdmFsdWUgKyBcIlwiO1xuXHRcdFx0XHR9ICk7XG5cdFx0XHR9XG5cblx0XHRcdGhvb2tzID0galF1ZXJ5LnZhbEhvb2tzWyB0aGlzLnR5cGUgXSB8fCBqUXVlcnkudmFsSG9va3NbIHRoaXMubm9kZU5hbWUudG9Mb3dlckNhc2UoKSBdO1xuXG5cdFx0XHQvLyBJZiBzZXQgcmV0dXJucyB1bmRlZmluZWQsIGZhbGwgYmFjayB0byBub3JtYWwgc2V0dGluZ1xuXHRcdFx0aWYgKCAhaG9va3MgfHwgISggXCJzZXRcIiBpbiBob29rcyApIHx8IGhvb2tzLnNldCggdGhpcywgdmFsLCBcInZhbHVlXCIgKSA9PT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHR0aGlzLnZhbHVlID0gdmFsO1xuXHRcdFx0fVxuXHRcdH0gKTtcblx0fVxufSApO1xuXG5qUXVlcnkuZXh0ZW5kKCB7XG5cdHZhbEhvb2tzOiB7XG5cdFx0b3B0aW9uOiB7XG5cdFx0XHRnZXQ6IGZ1bmN0aW9uKCBlbGVtICkge1xuXG5cdFx0XHRcdHZhciB2YWwgPSBqUXVlcnkuZmluZC5hdHRyKCBlbGVtLCBcInZhbHVlXCIgKTtcblx0XHRcdFx0cmV0dXJuIHZhbCAhPSBudWxsID9cblx0XHRcdFx0XHR2YWwgOlxuXG5cdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgPD0xMCAtIDExIG9ubHlcblx0XHRcdFx0XHQvLyBvcHRpb24udGV4dCB0aHJvd3MgZXhjZXB0aW9ucyAoIzE0Njg2LCAjMTQ4NTgpXG5cdFx0XHRcdFx0Ly8gU3RyaXAgYW5kIGNvbGxhcHNlIHdoaXRlc3BhY2Vcblx0XHRcdFx0XHQvLyBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnLyNzdHJpcC1hbmQtY29sbGFwc2Utd2hpdGVzcGFjZVxuXHRcdFx0XHRcdHN0cmlwQW5kQ29sbGFwc2UoIGpRdWVyeS50ZXh0KCBlbGVtICkgKTtcblx0XHRcdH1cblx0XHR9LFxuXHRcdHNlbGVjdDoge1xuXHRcdFx0Z2V0OiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdFx0dmFyIHZhbHVlLCBvcHRpb24sIGksXG5cdFx0XHRcdFx0b3B0aW9ucyA9IGVsZW0ub3B0aW9ucyxcblx0XHRcdFx0XHRpbmRleCA9IGVsZW0uc2VsZWN0ZWRJbmRleCxcblx0XHRcdFx0XHRvbmUgPSBlbGVtLnR5cGUgPT09IFwic2VsZWN0LW9uZVwiLFxuXHRcdFx0XHRcdHZhbHVlcyA9IG9uZSA/IG51bGwgOiBbXSxcblx0XHRcdFx0XHRtYXggPSBvbmUgPyBpbmRleCArIDEgOiBvcHRpb25zLmxlbmd0aDtcblxuXHRcdFx0XHRpZiAoIGluZGV4IDwgMCApIHtcblx0XHRcdFx0XHRpID0gbWF4O1xuXG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0aSA9IG9uZSA/IGluZGV4IDogMDtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIExvb3AgdGhyb3VnaCBhbGwgdGhlIHNlbGVjdGVkIG9wdGlvbnNcblx0XHRcdFx0Zm9yICggOyBpIDwgbWF4OyBpKysgKSB7XG5cdFx0XHRcdFx0b3B0aW9uID0gb3B0aW9uc1sgaSBdO1xuXG5cdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgPD05IG9ubHlcblx0XHRcdFx0XHQvLyBJRTgtOSBkb2Vzbid0IHVwZGF0ZSBzZWxlY3RlZCBhZnRlciBmb3JtIHJlc2V0ICgjMjU1MSlcblx0XHRcdFx0XHRpZiAoICggb3B0aW9uLnNlbGVjdGVkIHx8IGkgPT09IGluZGV4ICkgJiZcblxuXHRcdFx0XHRcdFx0XHQvLyBEb24ndCByZXR1cm4gb3B0aW9ucyB0aGF0IGFyZSBkaXNhYmxlZCBvciBpbiBhIGRpc2FibGVkIG9wdGdyb3VwXG5cdFx0XHRcdFx0XHRcdCFvcHRpb24uZGlzYWJsZWQgJiZcblx0XHRcdFx0XHRcdFx0KCAhb3B0aW9uLnBhcmVudE5vZGUuZGlzYWJsZWQgfHxcblx0XHRcdFx0XHRcdFx0XHQhbm9kZU5hbWUoIG9wdGlvbi5wYXJlbnROb2RlLCBcIm9wdGdyb3VwXCIgKSApICkge1xuXG5cdFx0XHRcdFx0XHQvLyBHZXQgdGhlIHNwZWNpZmljIHZhbHVlIGZvciB0aGUgb3B0aW9uXG5cdFx0XHRcdFx0XHR2YWx1ZSA9IGpRdWVyeSggb3B0aW9uICkudmFsKCk7XG5cblx0XHRcdFx0XHRcdC8vIFdlIGRvbid0IG5lZWQgYW4gYXJyYXkgZm9yIG9uZSBzZWxlY3RzXG5cdFx0XHRcdFx0XHRpZiAoIG9uZSApIHtcblx0XHRcdFx0XHRcdFx0cmV0dXJuIHZhbHVlO1xuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHQvLyBNdWx0aS1TZWxlY3RzIHJldHVybiBhbiBhcnJheVxuXHRcdFx0XHRcdFx0dmFsdWVzLnB1c2goIHZhbHVlICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdFx0cmV0dXJuIHZhbHVlcztcblx0XHRcdH0sXG5cblx0XHRcdHNldDogZnVuY3Rpb24oIGVsZW0sIHZhbHVlICkge1xuXHRcdFx0XHR2YXIgb3B0aW9uU2V0LCBvcHRpb24sXG5cdFx0XHRcdFx0b3B0aW9ucyA9IGVsZW0ub3B0aW9ucyxcblx0XHRcdFx0XHR2YWx1ZXMgPSBqUXVlcnkubWFrZUFycmF5KCB2YWx1ZSApLFxuXHRcdFx0XHRcdGkgPSBvcHRpb25zLmxlbmd0aDtcblxuXHRcdFx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdFx0XHRvcHRpb24gPSBvcHRpb25zWyBpIF07XG5cblx0XHRcdFx0XHQvKiBlc2xpbnQtZGlzYWJsZSBuby1jb25kLWFzc2lnbiAqL1xuXG5cdFx0XHRcdFx0aWYgKCBvcHRpb24uc2VsZWN0ZWQgPVxuXHRcdFx0XHRcdFx0alF1ZXJ5LmluQXJyYXkoIGpRdWVyeS52YWxIb29rcy5vcHRpb24uZ2V0KCBvcHRpb24gKSwgdmFsdWVzICkgPiAtMVxuXHRcdFx0XHRcdCkge1xuXHRcdFx0XHRcdFx0b3B0aW9uU2V0ID0gdHJ1ZTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvKiBlc2xpbnQtZW5hYmxlIG5vLWNvbmQtYXNzaWduICovXG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBGb3JjZSBicm93c2VycyB0byBiZWhhdmUgY29uc2lzdGVudGx5IHdoZW4gbm9uLW1hdGNoaW5nIHZhbHVlIGlzIHNldFxuXHRcdFx0XHRpZiAoICFvcHRpb25TZXQgKSB7XG5cdFx0XHRcdFx0ZWxlbS5zZWxlY3RlZEluZGV4ID0gLTE7XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIHZhbHVlcztcblx0XHRcdH1cblx0XHR9XG5cdH1cbn0gKTtcblxuLy8gUmFkaW9zIGFuZCBjaGVja2JveGVzIGdldHRlci9zZXR0ZXJcbmpRdWVyeS5lYWNoKCBbIFwicmFkaW9cIiwgXCJjaGVja2JveFwiIF0sIGZ1bmN0aW9uKCkge1xuXHRqUXVlcnkudmFsSG9va3NbIHRoaXMgXSA9IHtcblx0XHRzZXQ6IGZ1bmN0aW9uKCBlbGVtLCB2YWx1ZSApIHtcblx0XHRcdGlmICggQXJyYXkuaXNBcnJheSggdmFsdWUgKSApIHtcblx0XHRcdFx0cmV0dXJuICggZWxlbS5jaGVja2VkID0galF1ZXJ5LmluQXJyYXkoIGpRdWVyeSggZWxlbSApLnZhbCgpLCB2YWx1ZSApID4gLTEgKTtcblx0XHRcdH1cblx0XHR9XG5cdH07XG5cdGlmICggIXN1cHBvcnQuY2hlY2tPbiApIHtcblx0XHRqUXVlcnkudmFsSG9va3NbIHRoaXMgXS5nZXQgPSBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiBlbGVtLmdldEF0dHJpYnV0ZSggXCJ2YWx1ZVwiICkgPT09IG51bGwgPyBcIm9uXCIgOiBlbGVtLnZhbHVlO1xuXHRcdH07XG5cdH1cbn0gKTtcblxuXG5cblxuLy8gUmV0dXJuIGpRdWVyeSBmb3IgYXR0cmlidXRlcy1vbmx5IGluY2x1c2lvblxuXG5cbnN1cHBvcnQuZm9jdXNpbiA9IFwib25mb2N1c2luXCIgaW4gd2luZG93O1xuXG5cbnZhciByZm9jdXNNb3JwaCA9IC9eKD86Zm9jdXNpbmZvY3VzfGZvY3Vzb3V0Ymx1cikkLyxcblx0c3RvcFByb3BhZ2F0aW9uQ2FsbGJhY2sgPSBmdW5jdGlvbiggZSApIHtcblx0XHRlLnN0b3BQcm9wYWdhdGlvbigpO1xuXHR9O1xuXG5qUXVlcnkuZXh0ZW5kKCBqUXVlcnkuZXZlbnQsIHtcblxuXHR0cmlnZ2VyOiBmdW5jdGlvbiggZXZlbnQsIGRhdGEsIGVsZW0sIG9ubHlIYW5kbGVycyApIHtcblxuXHRcdHZhciBpLCBjdXIsIHRtcCwgYnViYmxlVHlwZSwgb250eXBlLCBoYW5kbGUsIHNwZWNpYWwsIGxhc3RFbGVtZW50LFxuXHRcdFx0ZXZlbnRQYXRoID0gWyBlbGVtIHx8IGRvY3VtZW50IF0sXG5cdFx0XHR0eXBlID0gaGFzT3duLmNhbGwoIGV2ZW50LCBcInR5cGVcIiApID8gZXZlbnQudHlwZSA6IGV2ZW50LFxuXHRcdFx0bmFtZXNwYWNlcyA9IGhhc093bi5jYWxsKCBldmVudCwgXCJuYW1lc3BhY2VcIiApID8gZXZlbnQubmFtZXNwYWNlLnNwbGl0KCBcIi5cIiApIDogW107XG5cblx0XHRjdXIgPSBsYXN0RWxlbWVudCA9IHRtcCA9IGVsZW0gPSBlbGVtIHx8IGRvY3VtZW50O1xuXG5cdFx0Ly8gRG9uJ3QgZG8gZXZlbnRzIG9uIHRleHQgYW5kIGNvbW1lbnQgbm9kZXNcblx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDMgfHwgZWxlbS5ub2RlVHlwZSA9PT0gOCApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHQvLyBmb2N1cy9ibHVyIG1vcnBocyB0byBmb2N1c2luL291dDsgZW5zdXJlIHdlJ3JlIG5vdCBmaXJpbmcgdGhlbSByaWdodCBub3dcblx0XHRpZiAoIHJmb2N1c01vcnBoLnRlc3QoIHR5cGUgKyBqUXVlcnkuZXZlbnQudHJpZ2dlcmVkICkgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0aWYgKCB0eXBlLmluZGV4T2YoIFwiLlwiICkgPiAtMSApIHtcblxuXHRcdFx0Ly8gTmFtZXNwYWNlZCB0cmlnZ2VyOyBjcmVhdGUgYSByZWdleHAgdG8gbWF0Y2ggZXZlbnQgdHlwZSBpbiBoYW5kbGUoKVxuXHRcdFx0bmFtZXNwYWNlcyA9IHR5cGUuc3BsaXQoIFwiLlwiICk7XG5cdFx0XHR0eXBlID0gbmFtZXNwYWNlcy5zaGlmdCgpO1xuXHRcdFx0bmFtZXNwYWNlcy5zb3J0KCk7XG5cdFx0fVxuXHRcdG9udHlwZSA9IHR5cGUuaW5kZXhPZiggXCI6XCIgKSA8IDAgJiYgXCJvblwiICsgdHlwZTtcblxuXHRcdC8vIENhbGxlciBjYW4gcGFzcyBpbiBhIGpRdWVyeS5FdmVudCBvYmplY3QsIE9iamVjdCwgb3IganVzdCBhbiBldmVudCB0eXBlIHN0cmluZ1xuXHRcdGV2ZW50ID0gZXZlbnRbIGpRdWVyeS5leHBhbmRvIF0gP1xuXHRcdFx0ZXZlbnQgOlxuXHRcdFx0bmV3IGpRdWVyeS5FdmVudCggdHlwZSwgdHlwZW9mIGV2ZW50ID09PSBcIm9iamVjdFwiICYmIGV2ZW50ICk7XG5cblx0XHQvLyBUcmlnZ2VyIGJpdG1hc2s6ICYgMSBmb3IgbmF0aXZlIGhhbmRsZXJzOyAmIDIgZm9yIGpRdWVyeSAoYWx3YXlzIHRydWUpXG5cdFx0ZXZlbnQuaXNUcmlnZ2VyID0gb25seUhhbmRsZXJzID8gMiA6IDM7XG5cdFx0ZXZlbnQubmFtZXNwYWNlID0gbmFtZXNwYWNlcy5qb2luKCBcIi5cIiApO1xuXHRcdGV2ZW50LnJuYW1lc3BhY2UgPSBldmVudC5uYW1lc3BhY2UgP1xuXHRcdFx0bmV3IFJlZ0V4cCggXCIoXnxcXFxcLilcIiArIG5hbWVzcGFjZXMuam9pbiggXCJcXFxcLig/Oi4qXFxcXC58KVwiICkgKyBcIihcXFxcLnwkKVwiICkgOlxuXHRcdFx0bnVsbDtcblxuXHRcdC8vIENsZWFuIHVwIHRoZSBldmVudCBpbiBjYXNlIGl0IGlzIGJlaW5nIHJldXNlZFxuXHRcdGV2ZW50LnJlc3VsdCA9IHVuZGVmaW5lZDtcblx0XHRpZiAoICFldmVudC50YXJnZXQgKSB7XG5cdFx0XHRldmVudC50YXJnZXQgPSBlbGVtO1xuXHRcdH1cblxuXHRcdC8vIENsb25lIGFueSBpbmNvbWluZyBkYXRhIGFuZCBwcmVwZW5kIHRoZSBldmVudCwgY3JlYXRpbmcgdGhlIGhhbmRsZXIgYXJnIGxpc3Rcblx0XHRkYXRhID0gZGF0YSA9PSBudWxsID9cblx0XHRcdFsgZXZlbnQgXSA6XG5cdFx0XHRqUXVlcnkubWFrZUFycmF5KCBkYXRhLCBbIGV2ZW50IF0gKTtcblxuXHRcdC8vIEFsbG93IHNwZWNpYWwgZXZlbnRzIHRvIGRyYXcgb3V0c2lkZSB0aGUgbGluZXNcblx0XHRzcGVjaWFsID0galF1ZXJ5LmV2ZW50LnNwZWNpYWxbIHR5cGUgXSB8fCB7fTtcblx0XHRpZiAoICFvbmx5SGFuZGxlcnMgJiYgc3BlY2lhbC50cmlnZ2VyICYmIHNwZWNpYWwudHJpZ2dlci5hcHBseSggZWxlbSwgZGF0YSApID09PSBmYWxzZSApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHQvLyBEZXRlcm1pbmUgZXZlbnQgcHJvcGFnYXRpb24gcGF0aCBpbiBhZHZhbmNlLCBwZXIgVzNDIGV2ZW50cyBzcGVjICgjOTk1MSlcblx0XHQvLyBCdWJibGUgdXAgdG8gZG9jdW1lbnQsIHRoZW4gdG8gd2luZG93OyB3YXRjaCBmb3IgYSBnbG9iYWwgb3duZXJEb2N1bWVudCB2YXIgKCM5NzI0KVxuXHRcdGlmICggIW9ubHlIYW5kbGVycyAmJiAhc3BlY2lhbC5ub0J1YmJsZSAmJiAhaXNXaW5kb3coIGVsZW0gKSApIHtcblxuXHRcdFx0YnViYmxlVHlwZSA9IHNwZWNpYWwuZGVsZWdhdGVUeXBlIHx8IHR5cGU7XG5cdFx0XHRpZiAoICFyZm9jdXNNb3JwaC50ZXN0KCBidWJibGVUeXBlICsgdHlwZSApICkge1xuXHRcdFx0XHRjdXIgPSBjdXIucGFyZW50Tm9kZTtcblx0XHRcdH1cblx0XHRcdGZvciAoIDsgY3VyOyBjdXIgPSBjdXIucGFyZW50Tm9kZSApIHtcblx0XHRcdFx0ZXZlbnRQYXRoLnB1c2goIGN1ciApO1xuXHRcdFx0XHR0bXAgPSBjdXI7XG5cdFx0XHR9XG5cblx0XHRcdC8vIE9ubHkgYWRkIHdpbmRvdyBpZiB3ZSBnb3QgdG8gZG9jdW1lbnQgKGUuZy4sIG5vdCBwbGFpbiBvYmogb3IgZGV0YWNoZWQgRE9NKVxuXHRcdFx0aWYgKCB0bXAgPT09ICggZWxlbS5vd25lckRvY3VtZW50IHx8IGRvY3VtZW50ICkgKSB7XG5cdFx0XHRcdGV2ZW50UGF0aC5wdXNoKCB0bXAuZGVmYXVsdFZpZXcgfHwgdG1wLnBhcmVudFdpbmRvdyB8fCB3aW5kb3cgKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBGaXJlIGhhbmRsZXJzIG9uIHRoZSBldmVudCBwYXRoXG5cdFx0aSA9IDA7XG5cdFx0d2hpbGUgKCAoIGN1ciA9IGV2ZW50UGF0aFsgaSsrIF0gKSAmJiAhZXZlbnQuaXNQcm9wYWdhdGlvblN0b3BwZWQoKSApIHtcblx0XHRcdGxhc3RFbGVtZW50ID0gY3VyO1xuXHRcdFx0ZXZlbnQudHlwZSA9IGkgPiAxID9cblx0XHRcdFx0YnViYmxlVHlwZSA6XG5cdFx0XHRcdHNwZWNpYWwuYmluZFR5cGUgfHwgdHlwZTtcblxuXHRcdFx0Ly8galF1ZXJ5IGhhbmRsZXJcblx0XHRcdGhhbmRsZSA9IChcblx0XHRcdFx0XHRkYXRhUHJpdi5nZXQoIGN1ciwgXCJldmVudHNcIiApIHx8IE9iamVjdC5jcmVhdGUoIG51bGwgKVxuXHRcdFx0XHQpWyBldmVudC50eXBlIF0gJiZcblx0XHRcdFx0ZGF0YVByaXYuZ2V0KCBjdXIsIFwiaGFuZGxlXCIgKTtcblx0XHRcdGlmICggaGFuZGxlICkge1xuXHRcdFx0XHRoYW5kbGUuYXBwbHkoIGN1ciwgZGF0YSApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBOYXRpdmUgaGFuZGxlclxuXHRcdFx0aGFuZGxlID0gb250eXBlICYmIGN1clsgb250eXBlIF07XG5cdFx0XHRpZiAoIGhhbmRsZSAmJiBoYW5kbGUuYXBwbHkgJiYgYWNjZXB0RGF0YSggY3VyICkgKSB7XG5cdFx0XHRcdGV2ZW50LnJlc3VsdCA9IGhhbmRsZS5hcHBseSggY3VyLCBkYXRhICk7XG5cdFx0XHRcdGlmICggZXZlbnQucmVzdWx0ID09PSBmYWxzZSApIHtcblx0XHRcdFx0XHRldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHRcdGV2ZW50LnR5cGUgPSB0eXBlO1xuXG5cdFx0Ly8gSWYgbm9ib2R5IHByZXZlbnRlZCB0aGUgZGVmYXVsdCBhY3Rpb24sIGRvIGl0IG5vd1xuXHRcdGlmICggIW9ubHlIYW5kbGVycyAmJiAhZXZlbnQuaXNEZWZhdWx0UHJldmVudGVkKCkgKSB7XG5cblx0XHRcdGlmICggKCAhc3BlY2lhbC5fZGVmYXVsdCB8fFxuXHRcdFx0XHRzcGVjaWFsLl9kZWZhdWx0LmFwcGx5KCBldmVudFBhdGgucG9wKCksIGRhdGEgKSA9PT0gZmFsc2UgKSAmJlxuXHRcdFx0XHRhY2NlcHREYXRhKCBlbGVtICkgKSB7XG5cblx0XHRcdFx0Ly8gQ2FsbCBhIG5hdGl2ZSBET00gbWV0aG9kIG9uIHRoZSB0YXJnZXQgd2l0aCB0aGUgc2FtZSBuYW1lIGFzIHRoZSBldmVudC5cblx0XHRcdFx0Ly8gRG9uJ3QgZG8gZGVmYXVsdCBhY3Rpb25zIG9uIHdpbmRvdywgdGhhdCdzIHdoZXJlIGdsb2JhbCB2YXJpYWJsZXMgYmUgKCM2MTcwKVxuXHRcdFx0XHRpZiAoIG9udHlwZSAmJiBpc0Z1bmN0aW9uKCBlbGVtWyB0eXBlIF0gKSAmJiAhaXNXaW5kb3coIGVsZW0gKSApIHtcblxuXHRcdFx0XHRcdC8vIERvbid0IHJlLXRyaWdnZXIgYW4gb25GT08gZXZlbnQgd2hlbiB3ZSBjYWxsIGl0cyBGT08oKSBtZXRob2Rcblx0XHRcdFx0XHR0bXAgPSBlbGVtWyBvbnR5cGUgXTtcblxuXHRcdFx0XHRcdGlmICggdG1wICkge1xuXHRcdFx0XHRcdFx0ZWxlbVsgb250eXBlIF0gPSBudWxsO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8vIFByZXZlbnQgcmUtdHJpZ2dlcmluZyBvZiB0aGUgc2FtZSBldmVudCwgc2luY2Ugd2UgYWxyZWFkeSBidWJibGVkIGl0IGFib3ZlXG5cdFx0XHRcdFx0alF1ZXJ5LmV2ZW50LnRyaWdnZXJlZCA9IHR5cGU7XG5cblx0XHRcdFx0XHRpZiAoIGV2ZW50LmlzUHJvcGFnYXRpb25TdG9wcGVkKCkgKSB7XG5cdFx0XHRcdFx0XHRsYXN0RWxlbWVudC5hZGRFdmVudExpc3RlbmVyKCB0eXBlLCBzdG9wUHJvcGFnYXRpb25DYWxsYmFjayApO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdGVsZW1bIHR5cGUgXSgpO1xuXG5cdFx0XHRcdFx0aWYgKCBldmVudC5pc1Byb3BhZ2F0aW9uU3RvcHBlZCgpICkge1xuXHRcdFx0XHRcdFx0bGFzdEVsZW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lciggdHlwZSwgc3RvcFByb3BhZ2F0aW9uQ2FsbGJhY2sgKTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRqUXVlcnkuZXZlbnQudHJpZ2dlcmVkID0gdW5kZWZpbmVkO1xuXG5cdFx0XHRcdFx0aWYgKCB0bXAgKSB7XG5cdFx0XHRcdFx0XHRlbGVtWyBvbnR5cGUgXSA9IHRtcDtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gZXZlbnQucmVzdWx0O1xuXHR9LFxuXG5cdC8vIFBpZ2d5YmFjayBvbiBhIGRvbm9yIGV2ZW50IHRvIHNpbXVsYXRlIGEgZGlmZmVyZW50IG9uZVxuXHQvLyBVc2VkIG9ubHkgZm9yIGBmb2N1cyhpbiB8IG91dClgIGV2ZW50c1xuXHRzaW11bGF0ZTogZnVuY3Rpb24oIHR5cGUsIGVsZW0sIGV2ZW50ICkge1xuXHRcdHZhciBlID0galF1ZXJ5LmV4dGVuZChcblx0XHRcdG5ldyBqUXVlcnkuRXZlbnQoKSxcblx0XHRcdGV2ZW50LFxuXHRcdFx0e1xuXHRcdFx0XHR0eXBlOiB0eXBlLFxuXHRcdFx0XHRpc1NpbXVsYXRlZDogdHJ1ZVxuXHRcdFx0fVxuXHRcdCk7XG5cblx0XHRqUXVlcnkuZXZlbnQudHJpZ2dlciggZSwgbnVsbCwgZWxlbSApO1xuXHR9XG5cbn0gKTtcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXG5cdHRyaWdnZXI6IGZ1bmN0aW9uKCB0eXBlLCBkYXRhICkge1xuXHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0alF1ZXJ5LmV2ZW50LnRyaWdnZXIoIHR5cGUsIGRhdGEsIHRoaXMgKTtcblx0XHR9ICk7XG5cdH0sXG5cdHRyaWdnZXJIYW5kbGVyOiBmdW5jdGlvbiggdHlwZSwgZGF0YSApIHtcblx0XHR2YXIgZWxlbSA9IHRoaXNbIDAgXTtcblx0XHRpZiAoIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4galF1ZXJ5LmV2ZW50LnRyaWdnZXIoIHR5cGUsIGRhdGEsIGVsZW0sIHRydWUgKTtcblx0XHR9XG5cdH1cbn0gKTtcblxuXG4vLyBTdXBwb3J0OiBGaXJlZm94IDw9NDRcbi8vIEZpcmVmb3ggZG9lc24ndCBoYXZlIGZvY3VzKGluIHwgb3V0KSBldmVudHNcbi8vIFJlbGF0ZWQgdGlja2V0IC0gaHR0cHM6Ly9idWd6aWxsYS5tb3ppbGxhLm9yZy9zaG93X2J1Zy5jZ2k/aWQ9Njg3Nzg3XG4vL1xuLy8gU3VwcG9ydDogQ2hyb21lIDw9NDggLSA0OSwgU2FmYXJpIDw9OS4wIC0gOS4xXG4vLyBmb2N1cyhpbiB8IG91dCkgZXZlbnRzIGZpcmUgYWZ0ZXIgZm9jdXMgJiBibHVyIGV2ZW50cyxcbi8vIHdoaWNoIGlzIHNwZWMgdmlvbGF0aW9uIC0gaHR0cDovL3d3dy53My5vcmcvVFIvRE9NLUxldmVsLTMtRXZlbnRzLyNldmVudHMtZm9jdXNldmVudC1ldmVudC1vcmRlclxuLy8gUmVsYXRlZCB0aWNrZXQgLSBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvY2hyb21pdW0vaXNzdWVzL2RldGFpbD9pZD00NDk4NTdcbmlmICggIXN1cHBvcnQuZm9jdXNpbiApIHtcblx0alF1ZXJ5LmVhY2goIHsgZm9jdXM6IFwiZm9jdXNpblwiLCBibHVyOiBcImZvY3Vzb3V0XCIgfSwgZnVuY3Rpb24oIG9yaWcsIGZpeCApIHtcblxuXHRcdC8vIEF0dGFjaCBhIHNpbmdsZSBjYXB0dXJpbmcgaGFuZGxlciBvbiB0aGUgZG9jdW1lbnQgd2hpbGUgc29tZW9uZSB3YW50cyBmb2N1c2luL2ZvY3Vzb3V0XG5cdFx0dmFyIGhhbmRsZXIgPSBmdW5jdGlvbiggZXZlbnQgKSB7XG5cdFx0XHRqUXVlcnkuZXZlbnQuc2ltdWxhdGUoIGZpeCwgZXZlbnQudGFyZ2V0LCBqUXVlcnkuZXZlbnQuZml4KCBldmVudCApICk7XG5cdFx0fTtcblxuXHRcdGpRdWVyeS5ldmVudC5zcGVjaWFsWyBmaXggXSA9IHtcblx0XHRcdHNldHVwOiBmdW5jdGlvbigpIHtcblxuXHRcdFx0XHQvLyBIYW5kbGU6IHJlZ3VsYXIgbm9kZXMgKHZpYSBgdGhpcy5vd25lckRvY3VtZW50YCksIHdpbmRvd1xuXHRcdFx0XHQvLyAodmlhIGB0aGlzLmRvY3VtZW50YCkgJiBkb2N1bWVudCAodmlhIGB0aGlzYCkuXG5cdFx0XHRcdHZhciBkb2MgPSB0aGlzLm93bmVyRG9jdW1lbnQgfHwgdGhpcy5kb2N1bWVudCB8fCB0aGlzLFxuXHRcdFx0XHRcdGF0dGFjaGVzID0gZGF0YVByaXYuYWNjZXNzKCBkb2MsIGZpeCApO1xuXG5cdFx0XHRcdGlmICggIWF0dGFjaGVzICkge1xuXHRcdFx0XHRcdGRvYy5hZGRFdmVudExpc3RlbmVyKCBvcmlnLCBoYW5kbGVyLCB0cnVlICk7XG5cdFx0XHRcdH1cblx0XHRcdFx0ZGF0YVByaXYuYWNjZXNzKCBkb2MsIGZpeCwgKCBhdHRhY2hlcyB8fCAwICkgKyAxICk7XG5cdFx0XHR9LFxuXHRcdFx0dGVhcmRvd246IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHR2YXIgZG9jID0gdGhpcy5vd25lckRvY3VtZW50IHx8IHRoaXMuZG9jdW1lbnQgfHwgdGhpcyxcblx0XHRcdFx0XHRhdHRhY2hlcyA9IGRhdGFQcml2LmFjY2VzcyggZG9jLCBmaXggKSAtIDE7XG5cblx0XHRcdFx0aWYgKCAhYXR0YWNoZXMgKSB7XG5cdFx0XHRcdFx0ZG9jLnJlbW92ZUV2ZW50TGlzdGVuZXIoIG9yaWcsIGhhbmRsZXIsIHRydWUgKTtcblx0XHRcdFx0XHRkYXRhUHJpdi5yZW1vdmUoIGRvYywgZml4ICk7XG5cblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRkYXRhUHJpdi5hY2Nlc3MoIGRvYywgZml4LCBhdHRhY2hlcyApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fTtcblx0fSApO1xufVxudmFyIGxvY2F0aW9uID0gd2luZG93LmxvY2F0aW9uO1xuXG52YXIgbm9uY2UgPSB7IGd1aWQ6IERhdGUubm93KCkgfTtcblxudmFyIHJxdWVyeSA9ICggL1xcPy8gKTtcblxuXG5cbi8vIENyb3NzLWJyb3dzZXIgeG1sIHBhcnNpbmdcbmpRdWVyeS5wYXJzZVhNTCA9IGZ1bmN0aW9uKCBkYXRhICkge1xuXHR2YXIgeG1sO1xuXHRpZiAoICFkYXRhIHx8IHR5cGVvZiBkYXRhICE9PSBcInN0cmluZ1wiICkge1xuXHRcdHJldHVybiBudWxsO1xuXHR9XG5cblx0Ly8gU3VwcG9ydDogSUUgOSAtIDExIG9ubHlcblx0Ly8gSUUgdGhyb3dzIG9uIHBhcnNlRnJvbVN0cmluZyB3aXRoIGludmFsaWQgaW5wdXQuXG5cdHRyeSB7XG5cdFx0eG1sID0gKCBuZXcgd2luZG93LkRPTVBhcnNlcigpICkucGFyc2VGcm9tU3RyaW5nKCBkYXRhLCBcInRleHQveG1sXCIgKTtcblx0fSBjYXRjaCAoIGUgKSB7XG5cdFx0eG1sID0gdW5kZWZpbmVkO1xuXHR9XG5cblx0aWYgKCAheG1sIHx8IHhtbC5nZXRFbGVtZW50c0J5VGFnTmFtZSggXCJwYXJzZXJlcnJvclwiICkubGVuZ3RoICkge1xuXHRcdGpRdWVyeS5lcnJvciggXCJJbnZhbGlkIFhNTDogXCIgKyBkYXRhICk7XG5cdH1cblx0cmV0dXJuIHhtbDtcbn07XG5cblxudmFyXG5cdHJicmFja2V0ID0gL1xcW1xcXSQvLFxuXHRyQ1JMRiA9IC9cXHI/XFxuL2csXG5cdHJzdWJtaXR0ZXJUeXBlcyA9IC9eKD86c3VibWl0fGJ1dHRvbnxpbWFnZXxyZXNldHxmaWxlKSQvaSxcblx0cnN1Ym1pdHRhYmxlID0gL14oPzppbnB1dHxzZWxlY3R8dGV4dGFyZWF8a2V5Z2VuKS9pO1xuXG5mdW5jdGlvbiBidWlsZFBhcmFtcyggcHJlZml4LCBvYmosIHRyYWRpdGlvbmFsLCBhZGQgKSB7XG5cdHZhciBuYW1lO1xuXG5cdGlmICggQXJyYXkuaXNBcnJheSggb2JqICkgKSB7XG5cblx0XHQvLyBTZXJpYWxpemUgYXJyYXkgaXRlbS5cblx0XHRqUXVlcnkuZWFjaCggb2JqLCBmdW5jdGlvbiggaSwgdiApIHtcblx0XHRcdGlmICggdHJhZGl0aW9uYWwgfHwgcmJyYWNrZXQudGVzdCggcHJlZml4ICkgKSB7XG5cblx0XHRcdFx0Ly8gVHJlYXQgZWFjaCBhcnJheSBpdGVtIGFzIGEgc2NhbGFyLlxuXHRcdFx0XHRhZGQoIHByZWZpeCwgdiApO1xuXG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdC8vIEl0ZW0gaXMgbm9uLXNjYWxhciAoYXJyYXkgb3Igb2JqZWN0KSwgZW5jb2RlIGl0cyBudW1lcmljIGluZGV4LlxuXHRcdFx0XHRidWlsZFBhcmFtcyhcblx0XHRcdFx0XHRwcmVmaXggKyBcIltcIiArICggdHlwZW9mIHYgPT09IFwib2JqZWN0XCIgJiYgdiAhPSBudWxsID8gaSA6IFwiXCIgKSArIFwiXVwiLFxuXHRcdFx0XHRcdHYsXG5cdFx0XHRcdFx0dHJhZGl0aW9uYWwsXG5cdFx0XHRcdFx0YWRkXG5cdFx0XHRcdCk7XG5cdFx0XHR9XG5cdFx0fSApO1xuXG5cdH0gZWxzZSBpZiAoICF0cmFkaXRpb25hbCAmJiB0b1R5cGUoIG9iaiApID09PSBcIm9iamVjdFwiICkge1xuXG5cdFx0Ly8gU2VyaWFsaXplIG9iamVjdCBpdGVtLlxuXHRcdGZvciAoIG5hbWUgaW4gb2JqICkge1xuXHRcdFx0YnVpbGRQYXJhbXMoIHByZWZpeCArIFwiW1wiICsgbmFtZSArIFwiXVwiLCBvYmpbIG5hbWUgXSwgdHJhZGl0aW9uYWwsIGFkZCApO1xuXHRcdH1cblxuXHR9IGVsc2Uge1xuXG5cdFx0Ly8gU2VyaWFsaXplIHNjYWxhciBpdGVtLlxuXHRcdGFkZCggcHJlZml4LCBvYmogKTtcblx0fVxufVxuXG4vLyBTZXJpYWxpemUgYW4gYXJyYXkgb2YgZm9ybSBlbGVtZW50cyBvciBhIHNldCBvZlxuLy8ga2V5L3ZhbHVlcyBpbnRvIGEgcXVlcnkgc3RyaW5nXG5qUXVlcnkucGFyYW0gPSBmdW5jdGlvbiggYSwgdHJhZGl0aW9uYWwgKSB7XG5cdHZhciBwcmVmaXgsXG5cdFx0cyA9IFtdLFxuXHRcdGFkZCA9IGZ1bmN0aW9uKCBrZXksIHZhbHVlT3JGdW5jdGlvbiApIHtcblxuXHRcdFx0Ly8gSWYgdmFsdWUgaXMgYSBmdW5jdGlvbiwgaW52b2tlIGl0IGFuZCB1c2UgaXRzIHJldHVybiB2YWx1ZVxuXHRcdFx0dmFyIHZhbHVlID0gaXNGdW5jdGlvbiggdmFsdWVPckZ1bmN0aW9uICkgP1xuXHRcdFx0XHR2YWx1ZU9yRnVuY3Rpb24oKSA6XG5cdFx0XHRcdHZhbHVlT3JGdW5jdGlvbjtcblxuXHRcdFx0c1sgcy5sZW5ndGggXSA9IGVuY29kZVVSSUNvbXBvbmVudCgga2V5ICkgKyBcIj1cIiArXG5cdFx0XHRcdGVuY29kZVVSSUNvbXBvbmVudCggdmFsdWUgPT0gbnVsbCA/IFwiXCIgOiB2YWx1ZSApO1xuXHRcdH07XG5cblx0aWYgKCBhID09IG51bGwgKSB7XG5cdFx0cmV0dXJuIFwiXCI7XG5cdH1cblxuXHQvLyBJZiBhbiBhcnJheSB3YXMgcGFzc2VkIGluLCBhc3N1bWUgdGhhdCBpdCBpcyBhbiBhcnJheSBvZiBmb3JtIGVsZW1lbnRzLlxuXHRpZiAoIEFycmF5LmlzQXJyYXkoIGEgKSB8fCAoIGEuanF1ZXJ5ICYmICFqUXVlcnkuaXNQbGFpbk9iamVjdCggYSApICkgKSB7XG5cblx0XHQvLyBTZXJpYWxpemUgdGhlIGZvcm0gZWxlbWVudHNcblx0XHRqUXVlcnkuZWFjaCggYSwgZnVuY3Rpb24oKSB7XG5cdFx0XHRhZGQoIHRoaXMubmFtZSwgdGhpcy52YWx1ZSApO1xuXHRcdH0gKTtcblxuXHR9IGVsc2Uge1xuXG5cdFx0Ly8gSWYgdHJhZGl0aW9uYWwsIGVuY29kZSB0aGUgXCJvbGRcIiB3YXkgKHRoZSB3YXkgMS4zLjIgb3Igb2xkZXJcblx0XHQvLyBkaWQgaXQpLCBvdGhlcndpc2UgZW5jb2RlIHBhcmFtcyByZWN1cnNpdmVseS5cblx0XHRmb3IgKCBwcmVmaXggaW4gYSApIHtcblx0XHRcdGJ1aWxkUGFyYW1zKCBwcmVmaXgsIGFbIHByZWZpeCBdLCB0cmFkaXRpb25hbCwgYWRkICk7XG5cdFx0fVxuXHR9XG5cblx0Ly8gUmV0dXJuIHRoZSByZXN1bHRpbmcgc2VyaWFsaXphdGlvblxuXHRyZXR1cm4gcy5qb2luKCBcIiZcIiApO1xufTtcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHRzZXJpYWxpemU6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiBqUXVlcnkucGFyYW0oIHRoaXMuc2VyaWFsaXplQXJyYXkoKSApO1xuXHR9LFxuXHRzZXJpYWxpemVBcnJheTogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHRoaXMubWFwKCBmdW5jdGlvbigpIHtcblxuXHRcdFx0Ly8gQ2FuIGFkZCBwcm9wSG9vayBmb3IgXCJlbGVtZW50c1wiIHRvIGZpbHRlciBvciBhZGQgZm9ybSBlbGVtZW50c1xuXHRcdFx0dmFyIGVsZW1lbnRzID0galF1ZXJ5LnByb3AoIHRoaXMsIFwiZWxlbWVudHNcIiApO1xuXHRcdFx0cmV0dXJuIGVsZW1lbnRzID8galF1ZXJ5Lm1ha2VBcnJheSggZWxlbWVudHMgKSA6IHRoaXM7XG5cdFx0fSApXG5cdFx0LmZpbHRlciggZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgdHlwZSA9IHRoaXMudHlwZTtcblxuXHRcdFx0Ly8gVXNlIC5pcyggXCI6ZGlzYWJsZWRcIiApIHNvIHRoYXQgZmllbGRzZXRbZGlzYWJsZWRdIHdvcmtzXG5cdFx0XHRyZXR1cm4gdGhpcy5uYW1lICYmICFqUXVlcnkoIHRoaXMgKS5pcyggXCI6ZGlzYWJsZWRcIiApICYmXG5cdFx0XHRcdHJzdWJtaXR0YWJsZS50ZXN0KCB0aGlzLm5vZGVOYW1lICkgJiYgIXJzdWJtaXR0ZXJUeXBlcy50ZXN0KCB0eXBlICkgJiZcblx0XHRcdFx0KCB0aGlzLmNoZWNrZWQgfHwgIXJjaGVja2FibGVUeXBlLnRlc3QoIHR5cGUgKSApO1xuXHRcdH0gKVxuXHRcdC5tYXAoIGZ1bmN0aW9uKCBfaSwgZWxlbSApIHtcblx0XHRcdHZhciB2YWwgPSBqUXVlcnkoIHRoaXMgKS52YWwoKTtcblxuXHRcdFx0aWYgKCB2YWwgPT0gbnVsbCApIHtcblx0XHRcdFx0cmV0dXJuIG51bGw7XG5cdFx0XHR9XG5cblx0XHRcdGlmICggQXJyYXkuaXNBcnJheSggdmFsICkgKSB7XG5cdFx0XHRcdHJldHVybiBqUXVlcnkubWFwKCB2YWwsIGZ1bmN0aW9uKCB2YWwgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHsgbmFtZTogZWxlbS5uYW1lLCB2YWx1ZTogdmFsLnJlcGxhY2UoIHJDUkxGLCBcIlxcclxcblwiICkgfTtcblx0XHRcdFx0fSApO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4geyBuYW1lOiBlbGVtLm5hbWUsIHZhbHVlOiB2YWwucmVwbGFjZSggckNSTEYsIFwiXFxyXFxuXCIgKSB9O1xuXHRcdH0gKS5nZXQoKTtcblx0fVxufSApO1xuXG5cbnZhclxuXHRyMjAgPSAvJTIwL2csXG5cdHJoYXNoID0gLyMuKiQvLFxuXHRyYW50aUNhY2hlID0gLyhbPyZdKV89W14mXSovLFxuXHRyaGVhZGVycyA9IC9eKC4qPyk6WyBcXHRdKihbXlxcclxcbl0qKSQvbWcsXG5cblx0Ly8gIzc2NTMsICM4MTI1LCAjODE1MjogbG9jYWwgcHJvdG9jb2wgZGV0ZWN0aW9uXG5cdHJsb2NhbFByb3RvY29sID0gL14oPzphYm91dHxhcHB8YXBwLXN0b3JhZ2V8ListZXh0ZW5zaW9ufGZpbGV8cmVzfHdpZGdldCk6JC8sXG5cdHJub0NvbnRlbnQgPSAvXig/OkdFVHxIRUFEKSQvLFxuXHRycHJvdG9jb2wgPSAvXlxcL1xcLy8sXG5cblx0LyogUHJlZmlsdGVyc1xuXHQgKiAxKSBUaGV5IGFyZSB1c2VmdWwgdG8gaW50cm9kdWNlIGN1c3RvbSBkYXRhVHlwZXMgKHNlZSBhamF4L2pzb25wLmpzIGZvciBhbiBleGFtcGxlKVxuXHQgKiAyKSBUaGVzZSBhcmUgY2FsbGVkOlxuXHQgKiAgICAtIEJFRk9SRSBhc2tpbmcgZm9yIGEgdHJhbnNwb3J0XG5cdCAqICAgIC0gQUZURVIgcGFyYW0gc2VyaWFsaXphdGlvbiAocy5kYXRhIGlzIGEgc3RyaW5nIGlmIHMucHJvY2Vzc0RhdGEgaXMgdHJ1ZSlcblx0ICogMykga2V5IGlzIHRoZSBkYXRhVHlwZVxuXHQgKiA0KSB0aGUgY2F0Y2hhbGwgc3ltYm9sIFwiKlwiIGNhbiBiZSB1c2VkXG5cdCAqIDUpIGV4ZWN1dGlvbiB3aWxsIHN0YXJ0IHdpdGggdHJhbnNwb3J0IGRhdGFUeXBlIGFuZCBUSEVOIGNvbnRpbnVlIGRvd24gdG8gXCIqXCIgaWYgbmVlZGVkXG5cdCAqL1xuXHRwcmVmaWx0ZXJzID0ge30sXG5cblx0LyogVHJhbnNwb3J0cyBiaW5kaW5nc1xuXHQgKiAxKSBrZXkgaXMgdGhlIGRhdGFUeXBlXG5cdCAqIDIpIHRoZSBjYXRjaGFsbCBzeW1ib2wgXCIqXCIgY2FuIGJlIHVzZWRcblx0ICogMykgc2VsZWN0aW9uIHdpbGwgc3RhcnQgd2l0aCB0cmFuc3BvcnQgZGF0YVR5cGUgYW5kIFRIRU4gZ28gdG8gXCIqXCIgaWYgbmVlZGVkXG5cdCAqL1xuXHR0cmFuc3BvcnRzID0ge30sXG5cblx0Ly8gQXZvaWQgY29tbWVudC1wcm9sb2cgY2hhciBzZXF1ZW5jZSAoIzEwMDk4KTsgbXVzdCBhcHBlYXNlIGxpbnQgYW5kIGV2YWRlIGNvbXByZXNzaW9uXG5cdGFsbFR5cGVzID0gXCIqL1wiLmNvbmNhdCggXCIqXCIgKSxcblxuXHQvLyBBbmNob3IgdGFnIGZvciBwYXJzaW5nIHRoZSBkb2N1bWVudCBvcmlnaW5cblx0b3JpZ2luQW5jaG9yID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJhXCIgKTtcblx0b3JpZ2luQW5jaG9yLmhyZWYgPSBsb2NhdGlvbi5ocmVmO1xuXG4vLyBCYXNlIFwiY29uc3RydWN0b3JcIiBmb3IgalF1ZXJ5LmFqYXhQcmVmaWx0ZXIgYW5kIGpRdWVyeS5hamF4VHJhbnNwb3J0XG5mdW5jdGlvbiBhZGRUb1ByZWZpbHRlcnNPclRyYW5zcG9ydHMoIHN0cnVjdHVyZSApIHtcblxuXHQvLyBkYXRhVHlwZUV4cHJlc3Npb24gaXMgb3B0aW9uYWwgYW5kIGRlZmF1bHRzIHRvIFwiKlwiXG5cdHJldHVybiBmdW5jdGlvbiggZGF0YVR5cGVFeHByZXNzaW9uLCBmdW5jICkge1xuXG5cdFx0aWYgKCB0eXBlb2YgZGF0YVR5cGVFeHByZXNzaW9uICE9PSBcInN0cmluZ1wiICkge1xuXHRcdFx0ZnVuYyA9IGRhdGFUeXBlRXhwcmVzc2lvbjtcblx0XHRcdGRhdGFUeXBlRXhwcmVzc2lvbiA9IFwiKlwiO1xuXHRcdH1cblxuXHRcdHZhciBkYXRhVHlwZSxcblx0XHRcdGkgPSAwLFxuXHRcdFx0ZGF0YVR5cGVzID0gZGF0YVR5cGVFeHByZXNzaW9uLnRvTG93ZXJDYXNlKCkubWF0Y2goIHJub3RodG1sd2hpdGUgKSB8fCBbXTtcblxuXHRcdGlmICggaXNGdW5jdGlvbiggZnVuYyApICkge1xuXG5cdFx0XHQvLyBGb3IgZWFjaCBkYXRhVHlwZSBpbiB0aGUgZGF0YVR5cGVFeHByZXNzaW9uXG5cdFx0XHR3aGlsZSAoICggZGF0YVR5cGUgPSBkYXRhVHlwZXNbIGkrKyBdICkgKSB7XG5cblx0XHRcdFx0Ly8gUHJlcGVuZCBpZiByZXF1ZXN0ZWRcblx0XHRcdFx0aWYgKCBkYXRhVHlwZVsgMCBdID09PSBcIitcIiApIHtcblx0XHRcdFx0XHRkYXRhVHlwZSA9IGRhdGFUeXBlLnNsaWNlKCAxICkgfHwgXCIqXCI7XG5cdFx0XHRcdFx0KCBzdHJ1Y3R1cmVbIGRhdGFUeXBlIF0gPSBzdHJ1Y3R1cmVbIGRhdGFUeXBlIF0gfHwgW10gKS51bnNoaWZ0KCBmdW5jICk7XG5cblx0XHRcdFx0Ly8gT3RoZXJ3aXNlIGFwcGVuZFxuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdCggc3RydWN0dXJlWyBkYXRhVHlwZSBdID0gc3RydWN0dXJlWyBkYXRhVHlwZSBdIHx8IFtdICkucHVzaCggZnVuYyApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9O1xufVxuXG4vLyBCYXNlIGluc3BlY3Rpb24gZnVuY3Rpb24gZm9yIHByZWZpbHRlcnMgYW5kIHRyYW5zcG9ydHNcbmZ1bmN0aW9uIGluc3BlY3RQcmVmaWx0ZXJzT3JUcmFuc3BvcnRzKCBzdHJ1Y3R1cmUsIG9wdGlvbnMsIG9yaWdpbmFsT3B0aW9ucywganFYSFIgKSB7XG5cblx0dmFyIGluc3BlY3RlZCA9IHt9LFxuXHRcdHNlZWtpbmdUcmFuc3BvcnQgPSAoIHN0cnVjdHVyZSA9PT0gdHJhbnNwb3J0cyApO1xuXG5cdGZ1bmN0aW9uIGluc3BlY3QoIGRhdGFUeXBlICkge1xuXHRcdHZhciBzZWxlY3RlZDtcblx0XHRpbnNwZWN0ZWRbIGRhdGFUeXBlIF0gPSB0cnVlO1xuXHRcdGpRdWVyeS5lYWNoKCBzdHJ1Y3R1cmVbIGRhdGFUeXBlIF0gfHwgW10sIGZ1bmN0aW9uKCBfLCBwcmVmaWx0ZXJPckZhY3RvcnkgKSB7XG5cdFx0XHR2YXIgZGF0YVR5cGVPclRyYW5zcG9ydCA9IHByZWZpbHRlck9yRmFjdG9yeSggb3B0aW9ucywgb3JpZ2luYWxPcHRpb25zLCBqcVhIUiApO1xuXHRcdFx0aWYgKCB0eXBlb2YgZGF0YVR5cGVPclRyYW5zcG9ydCA9PT0gXCJzdHJpbmdcIiAmJlxuXHRcdFx0XHQhc2Vla2luZ1RyYW5zcG9ydCAmJiAhaW5zcGVjdGVkWyBkYXRhVHlwZU9yVHJhbnNwb3J0IF0gKSB7XG5cblx0XHRcdFx0b3B0aW9ucy5kYXRhVHlwZXMudW5zaGlmdCggZGF0YVR5cGVPclRyYW5zcG9ydCApO1xuXHRcdFx0XHRpbnNwZWN0KCBkYXRhVHlwZU9yVHJhbnNwb3J0ICk7XG5cdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdH0gZWxzZSBpZiAoIHNlZWtpbmdUcmFuc3BvcnQgKSB7XG5cdFx0XHRcdHJldHVybiAhKCBzZWxlY3RlZCA9IGRhdGFUeXBlT3JUcmFuc3BvcnQgKTtcblx0XHRcdH1cblx0XHR9ICk7XG5cdFx0cmV0dXJuIHNlbGVjdGVkO1xuXHR9XG5cblx0cmV0dXJuIGluc3BlY3QoIG9wdGlvbnMuZGF0YVR5cGVzWyAwIF0gKSB8fCAhaW5zcGVjdGVkWyBcIipcIiBdICYmIGluc3BlY3QoIFwiKlwiICk7XG59XG5cbi8vIEEgc3BlY2lhbCBleHRlbmQgZm9yIGFqYXggb3B0aW9uc1xuLy8gdGhhdCB0YWtlcyBcImZsYXRcIiBvcHRpb25zIChub3QgdG8gYmUgZGVlcCBleHRlbmRlZClcbi8vIEZpeGVzICM5ODg3XG5mdW5jdGlvbiBhamF4RXh0ZW5kKCB0YXJnZXQsIHNyYyApIHtcblx0dmFyIGtleSwgZGVlcCxcblx0XHRmbGF0T3B0aW9ucyA9IGpRdWVyeS5hamF4U2V0dGluZ3MuZmxhdE9wdGlvbnMgfHwge307XG5cblx0Zm9yICgga2V5IGluIHNyYyApIHtcblx0XHRpZiAoIHNyY1sga2V5IF0gIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdCggZmxhdE9wdGlvbnNbIGtleSBdID8gdGFyZ2V0IDogKCBkZWVwIHx8ICggZGVlcCA9IHt9ICkgKSApWyBrZXkgXSA9IHNyY1sga2V5IF07XG5cdFx0fVxuXHR9XG5cdGlmICggZGVlcCApIHtcblx0XHRqUXVlcnkuZXh0ZW5kKCB0cnVlLCB0YXJnZXQsIGRlZXAgKTtcblx0fVxuXG5cdHJldHVybiB0YXJnZXQ7XG59XG5cbi8qIEhhbmRsZXMgcmVzcG9uc2VzIHRvIGFuIGFqYXggcmVxdWVzdDpcbiAqIC0gZmluZHMgdGhlIHJpZ2h0IGRhdGFUeXBlIChtZWRpYXRlcyBiZXR3ZWVuIGNvbnRlbnQtdHlwZSBhbmQgZXhwZWN0ZWQgZGF0YVR5cGUpXG4gKiAtIHJldHVybnMgdGhlIGNvcnJlc3BvbmRpbmcgcmVzcG9uc2VcbiAqL1xuZnVuY3Rpb24gYWpheEhhbmRsZVJlc3BvbnNlcyggcywganFYSFIsIHJlc3BvbnNlcyApIHtcblxuXHR2YXIgY3QsIHR5cGUsIGZpbmFsRGF0YVR5cGUsIGZpcnN0RGF0YVR5cGUsXG5cdFx0Y29udGVudHMgPSBzLmNvbnRlbnRzLFxuXHRcdGRhdGFUeXBlcyA9IHMuZGF0YVR5cGVzO1xuXG5cdC8vIFJlbW92ZSBhdXRvIGRhdGFUeXBlIGFuZCBnZXQgY29udGVudC10eXBlIGluIHRoZSBwcm9jZXNzXG5cdHdoaWxlICggZGF0YVR5cGVzWyAwIF0gPT09IFwiKlwiICkge1xuXHRcdGRhdGFUeXBlcy5zaGlmdCgpO1xuXHRcdGlmICggY3QgPT09IHVuZGVmaW5lZCApIHtcblx0XHRcdGN0ID0gcy5taW1lVHlwZSB8fCBqcVhIUi5nZXRSZXNwb25zZUhlYWRlciggXCJDb250ZW50LVR5cGVcIiApO1xuXHRcdH1cblx0fVxuXG5cdC8vIENoZWNrIGlmIHdlJ3JlIGRlYWxpbmcgd2l0aCBhIGtub3duIGNvbnRlbnQtdHlwZVxuXHRpZiAoIGN0ICkge1xuXHRcdGZvciAoIHR5cGUgaW4gY29udGVudHMgKSB7XG5cdFx0XHRpZiAoIGNvbnRlbnRzWyB0eXBlIF0gJiYgY29udGVudHNbIHR5cGUgXS50ZXN0KCBjdCApICkge1xuXHRcdFx0XHRkYXRhVHlwZXMudW5zaGlmdCggdHlwZSApO1xuXHRcdFx0XHRicmVhaztcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHQvLyBDaGVjayB0byBzZWUgaWYgd2UgaGF2ZSBhIHJlc3BvbnNlIGZvciB0aGUgZXhwZWN0ZWQgZGF0YVR5cGVcblx0aWYgKCBkYXRhVHlwZXNbIDAgXSBpbiByZXNwb25zZXMgKSB7XG5cdFx0ZmluYWxEYXRhVHlwZSA9IGRhdGFUeXBlc1sgMCBdO1xuXHR9IGVsc2Uge1xuXG5cdFx0Ly8gVHJ5IGNvbnZlcnRpYmxlIGRhdGFUeXBlc1xuXHRcdGZvciAoIHR5cGUgaW4gcmVzcG9uc2VzICkge1xuXHRcdFx0aWYgKCAhZGF0YVR5cGVzWyAwIF0gfHwgcy5jb252ZXJ0ZXJzWyB0eXBlICsgXCIgXCIgKyBkYXRhVHlwZXNbIDAgXSBdICkge1xuXHRcdFx0XHRmaW5hbERhdGFUeXBlID0gdHlwZTtcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHR9XG5cdFx0XHRpZiAoICFmaXJzdERhdGFUeXBlICkge1xuXHRcdFx0XHRmaXJzdERhdGFUeXBlID0gdHlwZTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBPciBqdXN0IHVzZSBmaXJzdCBvbmVcblx0XHRmaW5hbERhdGFUeXBlID0gZmluYWxEYXRhVHlwZSB8fCBmaXJzdERhdGFUeXBlO1xuXHR9XG5cblx0Ly8gSWYgd2UgZm91bmQgYSBkYXRhVHlwZVxuXHQvLyBXZSBhZGQgdGhlIGRhdGFUeXBlIHRvIHRoZSBsaXN0IGlmIG5lZWRlZFxuXHQvLyBhbmQgcmV0dXJuIHRoZSBjb3JyZXNwb25kaW5nIHJlc3BvbnNlXG5cdGlmICggZmluYWxEYXRhVHlwZSApIHtcblx0XHRpZiAoIGZpbmFsRGF0YVR5cGUgIT09IGRhdGFUeXBlc1sgMCBdICkge1xuXHRcdFx0ZGF0YVR5cGVzLnVuc2hpZnQoIGZpbmFsRGF0YVR5cGUgKTtcblx0XHR9XG5cdFx0cmV0dXJuIHJlc3BvbnNlc1sgZmluYWxEYXRhVHlwZSBdO1xuXHR9XG59XG5cbi8qIENoYWluIGNvbnZlcnNpb25zIGdpdmVuIHRoZSByZXF1ZXN0IGFuZCB0aGUgb3JpZ2luYWwgcmVzcG9uc2VcbiAqIEFsc28gc2V0cyB0aGUgcmVzcG9uc2VYWFggZmllbGRzIG9uIHRoZSBqcVhIUiBpbnN0YW5jZVxuICovXG5mdW5jdGlvbiBhamF4Q29udmVydCggcywgcmVzcG9uc2UsIGpxWEhSLCBpc1N1Y2Nlc3MgKSB7XG5cdHZhciBjb252MiwgY3VycmVudCwgY29udiwgdG1wLCBwcmV2LFxuXHRcdGNvbnZlcnRlcnMgPSB7fSxcblxuXHRcdC8vIFdvcmsgd2l0aCBhIGNvcHkgb2YgZGF0YVR5cGVzIGluIGNhc2Ugd2UgbmVlZCB0byBtb2RpZnkgaXQgZm9yIGNvbnZlcnNpb25cblx0XHRkYXRhVHlwZXMgPSBzLmRhdGFUeXBlcy5zbGljZSgpO1xuXG5cdC8vIENyZWF0ZSBjb252ZXJ0ZXJzIG1hcCB3aXRoIGxvd2VyY2FzZWQga2V5c1xuXHRpZiAoIGRhdGFUeXBlc1sgMSBdICkge1xuXHRcdGZvciAoIGNvbnYgaW4gcy5jb252ZXJ0ZXJzICkge1xuXHRcdFx0Y29udmVydGVyc1sgY29udi50b0xvd2VyQ2FzZSgpIF0gPSBzLmNvbnZlcnRlcnNbIGNvbnYgXTtcblx0XHR9XG5cdH1cblxuXHRjdXJyZW50ID0gZGF0YVR5cGVzLnNoaWZ0KCk7XG5cblx0Ly8gQ29udmVydCB0byBlYWNoIHNlcXVlbnRpYWwgZGF0YVR5cGVcblx0d2hpbGUgKCBjdXJyZW50ICkge1xuXG5cdFx0aWYgKCBzLnJlc3BvbnNlRmllbGRzWyBjdXJyZW50IF0gKSB7XG5cdFx0XHRqcVhIUlsgcy5yZXNwb25zZUZpZWxkc1sgY3VycmVudCBdIF0gPSByZXNwb25zZTtcblx0XHR9XG5cblx0XHQvLyBBcHBseSB0aGUgZGF0YUZpbHRlciBpZiBwcm92aWRlZFxuXHRcdGlmICggIXByZXYgJiYgaXNTdWNjZXNzICYmIHMuZGF0YUZpbHRlciApIHtcblx0XHRcdHJlc3BvbnNlID0gcy5kYXRhRmlsdGVyKCByZXNwb25zZSwgcy5kYXRhVHlwZSApO1xuXHRcdH1cblxuXHRcdHByZXYgPSBjdXJyZW50O1xuXHRcdGN1cnJlbnQgPSBkYXRhVHlwZXMuc2hpZnQoKTtcblxuXHRcdGlmICggY3VycmVudCApIHtcblxuXHRcdFx0Ly8gVGhlcmUncyBvbmx5IHdvcmsgdG8gZG8gaWYgY3VycmVudCBkYXRhVHlwZSBpcyBub24tYXV0b1xuXHRcdFx0aWYgKCBjdXJyZW50ID09PSBcIipcIiApIHtcblxuXHRcdFx0XHRjdXJyZW50ID0gcHJldjtcblxuXHRcdFx0Ly8gQ29udmVydCByZXNwb25zZSBpZiBwcmV2IGRhdGFUeXBlIGlzIG5vbi1hdXRvIGFuZCBkaWZmZXJzIGZyb20gY3VycmVudFxuXHRcdFx0fSBlbHNlIGlmICggcHJldiAhPT0gXCIqXCIgJiYgcHJldiAhPT0gY3VycmVudCApIHtcblxuXHRcdFx0XHQvLyBTZWVrIGEgZGlyZWN0IGNvbnZlcnRlclxuXHRcdFx0XHRjb252ID0gY29udmVydGVyc1sgcHJldiArIFwiIFwiICsgY3VycmVudCBdIHx8IGNvbnZlcnRlcnNbIFwiKiBcIiArIGN1cnJlbnQgXTtcblxuXHRcdFx0XHQvLyBJZiBub25lIGZvdW5kLCBzZWVrIGEgcGFpclxuXHRcdFx0XHRpZiAoICFjb252ICkge1xuXHRcdFx0XHRcdGZvciAoIGNvbnYyIGluIGNvbnZlcnRlcnMgKSB7XG5cblx0XHRcdFx0XHRcdC8vIElmIGNvbnYyIG91dHB1dHMgY3VycmVudFxuXHRcdFx0XHRcdFx0dG1wID0gY29udjIuc3BsaXQoIFwiIFwiICk7XG5cdFx0XHRcdFx0XHRpZiAoIHRtcFsgMSBdID09PSBjdXJyZW50ICkge1xuXG5cdFx0XHRcdFx0XHRcdC8vIElmIHByZXYgY2FuIGJlIGNvbnZlcnRlZCB0byBhY2NlcHRlZCBpbnB1dFxuXHRcdFx0XHRcdFx0XHRjb252ID0gY29udmVydGVyc1sgcHJldiArIFwiIFwiICsgdG1wWyAwIF0gXSB8fFxuXHRcdFx0XHRcdFx0XHRcdGNvbnZlcnRlcnNbIFwiKiBcIiArIHRtcFsgMCBdIF07XG5cdFx0XHRcdFx0XHRcdGlmICggY29udiApIHtcblxuXHRcdFx0XHRcdFx0XHRcdC8vIENvbmRlbnNlIGVxdWl2YWxlbmNlIGNvbnZlcnRlcnNcblx0XHRcdFx0XHRcdFx0XHRpZiAoIGNvbnYgPT09IHRydWUgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRjb252ID0gY29udmVydGVyc1sgY29udjIgXTtcblxuXHRcdFx0XHRcdFx0XHRcdC8vIE90aGVyd2lzZSwgaW5zZXJ0IHRoZSBpbnRlcm1lZGlhdGUgZGF0YVR5cGVcblx0XHRcdFx0XHRcdFx0XHR9IGVsc2UgaWYgKCBjb252ZXJ0ZXJzWyBjb252MiBdICE9PSB0cnVlICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0Y3VycmVudCA9IHRtcFsgMCBdO1xuXHRcdFx0XHRcdFx0XHRcdFx0ZGF0YVR5cGVzLnVuc2hpZnQoIHRtcFsgMSBdICk7XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gQXBwbHkgY29udmVydGVyIChpZiBub3QgYW4gZXF1aXZhbGVuY2UpXG5cdFx0XHRcdGlmICggY29udiAhPT0gdHJ1ZSApIHtcblxuXHRcdFx0XHRcdC8vIFVubGVzcyBlcnJvcnMgYXJlIGFsbG93ZWQgdG8gYnViYmxlLCBjYXRjaCBhbmQgcmV0dXJuIHRoZW1cblx0XHRcdFx0XHRpZiAoIGNvbnYgJiYgcy50aHJvd3MgKSB7XG5cdFx0XHRcdFx0XHRyZXNwb25zZSA9IGNvbnYoIHJlc3BvbnNlICk7XG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdHRyeSB7XG5cdFx0XHRcdFx0XHRcdHJlc3BvbnNlID0gY29udiggcmVzcG9uc2UgKTtcblx0XHRcdFx0XHRcdH0gY2F0Y2ggKCBlICkge1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4ge1xuXHRcdFx0XHRcdFx0XHRcdHN0YXRlOiBcInBhcnNlcmVycm9yXCIsXG5cdFx0XHRcdFx0XHRcdFx0ZXJyb3I6IGNvbnYgPyBlIDogXCJObyBjb252ZXJzaW9uIGZyb20gXCIgKyBwcmV2ICsgXCIgdG8gXCIgKyBjdXJyZW50XG5cdFx0XHRcdFx0XHRcdH07XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIHsgc3RhdGU6IFwic3VjY2Vzc1wiLCBkYXRhOiByZXNwb25zZSB9O1xufVxuXG5qUXVlcnkuZXh0ZW5kKCB7XG5cblx0Ly8gQ291bnRlciBmb3IgaG9sZGluZyB0aGUgbnVtYmVyIG9mIGFjdGl2ZSBxdWVyaWVzXG5cdGFjdGl2ZTogMCxcblxuXHQvLyBMYXN0LU1vZGlmaWVkIGhlYWRlciBjYWNoZSBmb3IgbmV4dCByZXF1ZXN0XG5cdGxhc3RNb2RpZmllZDoge30sXG5cdGV0YWc6IHt9LFxuXG5cdGFqYXhTZXR0aW5nczoge1xuXHRcdHVybDogbG9jYXRpb24uaHJlZixcblx0XHR0eXBlOiBcIkdFVFwiLFxuXHRcdGlzTG9jYWw6IHJsb2NhbFByb3RvY29sLnRlc3QoIGxvY2F0aW9uLnByb3RvY29sICksXG5cdFx0Z2xvYmFsOiB0cnVlLFxuXHRcdHByb2Nlc3NEYXRhOiB0cnVlLFxuXHRcdGFzeW5jOiB0cnVlLFxuXHRcdGNvbnRlbnRUeXBlOiBcImFwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZDsgY2hhcnNldD1VVEYtOFwiLFxuXG5cdFx0Lypcblx0XHR0aW1lb3V0OiAwLFxuXHRcdGRhdGE6IG51bGwsXG5cdFx0ZGF0YVR5cGU6IG51bGwsXG5cdFx0dXNlcm5hbWU6IG51bGwsXG5cdFx0cGFzc3dvcmQ6IG51bGwsXG5cdFx0Y2FjaGU6IG51bGwsXG5cdFx0dGhyb3dzOiBmYWxzZSxcblx0XHR0cmFkaXRpb25hbDogZmFsc2UsXG5cdFx0aGVhZGVyczoge30sXG5cdFx0Ki9cblxuXHRcdGFjY2VwdHM6IHtcblx0XHRcdFwiKlwiOiBhbGxUeXBlcyxcblx0XHRcdHRleHQ6IFwidGV4dC9wbGFpblwiLFxuXHRcdFx0aHRtbDogXCJ0ZXh0L2h0bWxcIixcblx0XHRcdHhtbDogXCJhcHBsaWNhdGlvbi94bWwsIHRleHQveG1sXCIsXG5cdFx0XHRqc29uOiBcImFwcGxpY2F0aW9uL2pzb24sIHRleHQvamF2YXNjcmlwdFwiXG5cdFx0fSxcblxuXHRcdGNvbnRlbnRzOiB7XG5cdFx0XHR4bWw6IC9cXGJ4bWxcXGIvLFxuXHRcdFx0aHRtbDogL1xcYmh0bWwvLFxuXHRcdFx0anNvbjogL1xcYmpzb25cXGIvXG5cdFx0fSxcblxuXHRcdHJlc3BvbnNlRmllbGRzOiB7XG5cdFx0XHR4bWw6IFwicmVzcG9uc2VYTUxcIixcblx0XHRcdHRleHQ6IFwicmVzcG9uc2VUZXh0XCIsXG5cdFx0XHRqc29uOiBcInJlc3BvbnNlSlNPTlwiXG5cdFx0fSxcblxuXHRcdC8vIERhdGEgY29udmVydGVyc1xuXHRcdC8vIEtleXMgc2VwYXJhdGUgc291cmNlIChvciBjYXRjaGFsbCBcIipcIikgYW5kIGRlc3RpbmF0aW9uIHR5cGVzIHdpdGggYSBzaW5nbGUgc3BhY2Vcblx0XHRjb252ZXJ0ZXJzOiB7XG5cblx0XHRcdC8vIENvbnZlcnQgYW55dGhpbmcgdG8gdGV4dFxuXHRcdFx0XCIqIHRleHRcIjogU3RyaW5nLFxuXG5cdFx0XHQvLyBUZXh0IHRvIGh0bWwgKHRydWUgPSBubyB0cmFuc2Zvcm1hdGlvbilcblx0XHRcdFwidGV4dCBodG1sXCI6IHRydWUsXG5cblx0XHRcdC8vIEV2YWx1YXRlIHRleHQgYXMgYSBqc29uIGV4cHJlc3Npb25cblx0XHRcdFwidGV4dCBqc29uXCI6IEpTT04ucGFyc2UsXG5cblx0XHRcdC8vIFBhcnNlIHRleHQgYXMgeG1sXG5cdFx0XHRcInRleHQgeG1sXCI6IGpRdWVyeS5wYXJzZVhNTFxuXHRcdH0sXG5cblx0XHQvLyBGb3Igb3B0aW9ucyB0aGF0IHNob3VsZG4ndCBiZSBkZWVwIGV4dGVuZGVkOlxuXHRcdC8vIHlvdSBjYW4gYWRkIHlvdXIgb3duIGN1c3RvbSBvcHRpb25zIGhlcmUgaWZcblx0XHQvLyBhbmQgd2hlbiB5b3UgY3JlYXRlIG9uZSB0aGF0IHNob3VsZG4ndCBiZVxuXHRcdC8vIGRlZXAgZXh0ZW5kZWQgKHNlZSBhamF4RXh0ZW5kKVxuXHRcdGZsYXRPcHRpb25zOiB7XG5cdFx0XHR1cmw6IHRydWUsXG5cdFx0XHRjb250ZXh0OiB0cnVlXG5cdFx0fVxuXHR9LFxuXG5cdC8vIENyZWF0ZXMgYSBmdWxsIGZsZWRnZWQgc2V0dGluZ3Mgb2JqZWN0IGludG8gdGFyZ2V0XG5cdC8vIHdpdGggYm90aCBhamF4U2V0dGluZ3MgYW5kIHNldHRpbmdzIGZpZWxkcy5cblx0Ly8gSWYgdGFyZ2V0IGlzIG9taXR0ZWQsIHdyaXRlcyBpbnRvIGFqYXhTZXR0aW5ncy5cblx0YWpheFNldHVwOiBmdW5jdGlvbiggdGFyZ2V0LCBzZXR0aW5ncyApIHtcblx0XHRyZXR1cm4gc2V0dGluZ3MgP1xuXG5cdFx0XHQvLyBCdWlsZGluZyBhIHNldHRpbmdzIG9iamVjdFxuXHRcdFx0YWpheEV4dGVuZCggYWpheEV4dGVuZCggdGFyZ2V0LCBqUXVlcnkuYWpheFNldHRpbmdzICksIHNldHRpbmdzICkgOlxuXG5cdFx0XHQvLyBFeHRlbmRpbmcgYWpheFNldHRpbmdzXG5cdFx0XHRhamF4RXh0ZW5kKCBqUXVlcnkuYWpheFNldHRpbmdzLCB0YXJnZXQgKTtcblx0fSxcblxuXHRhamF4UHJlZmlsdGVyOiBhZGRUb1ByZWZpbHRlcnNPclRyYW5zcG9ydHMoIHByZWZpbHRlcnMgKSxcblx0YWpheFRyYW5zcG9ydDogYWRkVG9QcmVmaWx0ZXJzT3JUcmFuc3BvcnRzKCB0cmFuc3BvcnRzICksXG5cblx0Ly8gTWFpbiBtZXRob2Rcblx0YWpheDogZnVuY3Rpb24oIHVybCwgb3B0aW9ucyApIHtcblxuXHRcdC8vIElmIHVybCBpcyBhbiBvYmplY3QsIHNpbXVsYXRlIHByZS0xLjUgc2lnbmF0dXJlXG5cdFx0aWYgKCB0eXBlb2YgdXJsID09PSBcIm9iamVjdFwiICkge1xuXHRcdFx0b3B0aW9ucyA9IHVybDtcblx0XHRcdHVybCA9IHVuZGVmaW5lZDtcblx0XHR9XG5cblx0XHQvLyBGb3JjZSBvcHRpb25zIHRvIGJlIGFuIG9iamVjdFxuXHRcdG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuXG5cdFx0dmFyIHRyYW5zcG9ydCxcblxuXHRcdFx0Ly8gVVJMIHdpdGhvdXQgYW50aS1jYWNoZSBwYXJhbVxuXHRcdFx0Y2FjaGVVUkwsXG5cblx0XHRcdC8vIFJlc3BvbnNlIGhlYWRlcnNcblx0XHRcdHJlc3BvbnNlSGVhZGVyc1N0cmluZyxcblx0XHRcdHJlc3BvbnNlSGVhZGVycyxcblxuXHRcdFx0Ly8gdGltZW91dCBoYW5kbGVcblx0XHRcdHRpbWVvdXRUaW1lcixcblxuXHRcdFx0Ly8gVXJsIGNsZWFudXAgdmFyXG5cdFx0XHR1cmxBbmNob3IsXG5cblx0XHRcdC8vIFJlcXVlc3Qgc3RhdGUgKGJlY29tZXMgZmFsc2UgdXBvbiBzZW5kIGFuZCB0cnVlIHVwb24gY29tcGxldGlvbilcblx0XHRcdGNvbXBsZXRlZCxcblxuXHRcdFx0Ly8gVG8ga25vdyBpZiBnbG9iYWwgZXZlbnRzIGFyZSB0byBiZSBkaXNwYXRjaGVkXG5cdFx0XHRmaXJlR2xvYmFscyxcblxuXHRcdFx0Ly8gTG9vcCB2YXJpYWJsZVxuXHRcdFx0aSxcblxuXHRcdFx0Ly8gdW5jYWNoZWQgcGFydCBvZiB0aGUgdXJsXG5cdFx0XHR1bmNhY2hlZCxcblxuXHRcdFx0Ly8gQ3JlYXRlIHRoZSBmaW5hbCBvcHRpb25zIG9iamVjdFxuXHRcdFx0cyA9IGpRdWVyeS5hamF4U2V0dXAoIHt9LCBvcHRpb25zICksXG5cblx0XHRcdC8vIENhbGxiYWNrcyBjb250ZXh0XG5cdFx0XHRjYWxsYmFja0NvbnRleHQgPSBzLmNvbnRleHQgfHwgcyxcblxuXHRcdFx0Ly8gQ29udGV4dCBmb3IgZ2xvYmFsIGV2ZW50cyBpcyBjYWxsYmFja0NvbnRleHQgaWYgaXQgaXMgYSBET00gbm9kZSBvciBqUXVlcnkgY29sbGVjdGlvblxuXHRcdFx0Z2xvYmFsRXZlbnRDb250ZXh0ID0gcy5jb250ZXh0ICYmXG5cdFx0XHRcdCggY2FsbGJhY2tDb250ZXh0Lm5vZGVUeXBlIHx8IGNhbGxiYWNrQ29udGV4dC5qcXVlcnkgKSA/XG5cdFx0XHRcdFx0alF1ZXJ5KCBjYWxsYmFja0NvbnRleHQgKSA6XG5cdFx0XHRcdFx0alF1ZXJ5LmV2ZW50LFxuXG5cdFx0XHQvLyBEZWZlcnJlZHNcblx0XHRcdGRlZmVycmVkID0galF1ZXJ5LkRlZmVycmVkKCksXG5cdFx0XHRjb21wbGV0ZURlZmVycmVkID0galF1ZXJ5LkNhbGxiYWNrcyggXCJvbmNlIG1lbW9yeVwiICksXG5cblx0XHRcdC8vIFN0YXR1cy1kZXBlbmRlbnQgY2FsbGJhY2tzXG5cdFx0XHRzdGF0dXNDb2RlID0gcy5zdGF0dXNDb2RlIHx8IHt9LFxuXG5cdFx0XHQvLyBIZWFkZXJzICh0aGV5IGFyZSBzZW50IGFsbCBhdCBvbmNlKVxuXHRcdFx0cmVxdWVzdEhlYWRlcnMgPSB7fSxcblx0XHRcdHJlcXVlc3RIZWFkZXJzTmFtZXMgPSB7fSxcblxuXHRcdFx0Ly8gRGVmYXVsdCBhYm9ydCBtZXNzYWdlXG5cdFx0XHRzdHJBYm9ydCA9IFwiY2FuY2VsZWRcIixcblxuXHRcdFx0Ly8gRmFrZSB4aHJcblx0XHRcdGpxWEhSID0ge1xuXHRcdFx0XHRyZWFkeVN0YXRlOiAwLFxuXG5cdFx0XHRcdC8vIEJ1aWxkcyBoZWFkZXJzIGhhc2h0YWJsZSBpZiBuZWVkZWRcblx0XHRcdFx0Z2V0UmVzcG9uc2VIZWFkZXI6IGZ1bmN0aW9uKCBrZXkgKSB7XG5cdFx0XHRcdFx0dmFyIG1hdGNoO1xuXHRcdFx0XHRcdGlmICggY29tcGxldGVkICkge1xuXHRcdFx0XHRcdFx0aWYgKCAhcmVzcG9uc2VIZWFkZXJzICkge1xuXHRcdFx0XHRcdFx0XHRyZXNwb25zZUhlYWRlcnMgPSB7fTtcblx0XHRcdFx0XHRcdFx0d2hpbGUgKCAoIG1hdGNoID0gcmhlYWRlcnMuZXhlYyggcmVzcG9uc2VIZWFkZXJzU3RyaW5nICkgKSApIHtcblx0XHRcdFx0XHRcdFx0XHRyZXNwb25zZUhlYWRlcnNbIG1hdGNoWyAxIF0udG9Mb3dlckNhc2UoKSArIFwiIFwiIF0gPVxuXHRcdFx0XHRcdFx0XHRcdFx0KCByZXNwb25zZUhlYWRlcnNbIG1hdGNoWyAxIF0udG9Mb3dlckNhc2UoKSArIFwiIFwiIF0gfHwgW10gKVxuXHRcdFx0XHRcdFx0XHRcdFx0XHQuY29uY2F0KCBtYXRjaFsgMiBdICk7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdG1hdGNoID0gcmVzcG9uc2VIZWFkZXJzWyBrZXkudG9Mb3dlckNhc2UoKSArIFwiIFwiIF07XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHJldHVybiBtYXRjaCA9PSBudWxsID8gbnVsbCA6IG1hdGNoLmpvaW4oIFwiLCBcIiApO1xuXHRcdFx0XHR9LFxuXG5cdFx0XHRcdC8vIFJhdyBzdHJpbmdcblx0XHRcdFx0Z2V0QWxsUmVzcG9uc2VIZWFkZXJzOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRyZXR1cm4gY29tcGxldGVkID8gcmVzcG9uc2VIZWFkZXJzU3RyaW5nIDogbnVsbDtcblx0XHRcdFx0fSxcblxuXHRcdFx0XHQvLyBDYWNoZXMgdGhlIGhlYWRlclxuXHRcdFx0XHRzZXRSZXF1ZXN0SGVhZGVyOiBmdW5jdGlvbiggbmFtZSwgdmFsdWUgKSB7XG5cdFx0XHRcdFx0aWYgKCBjb21wbGV0ZWQgPT0gbnVsbCApIHtcblx0XHRcdFx0XHRcdG5hbWUgPSByZXF1ZXN0SGVhZGVyc05hbWVzWyBuYW1lLnRvTG93ZXJDYXNlKCkgXSA9XG5cdFx0XHRcdFx0XHRcdHJlcXVlc3RIZWFkZXJzTmFtZXNbIG5hbWUudG9Mb3dlckNhc2UoKSBdIHx8IG5hbWU7XG5cdFx0XHRcdFx0XHRyZXF1ZXN0SGVhZGVyc1sgbmFtZSBdID0gdmFsdWU7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0XHR9LFxuXG5cdFx0XHRcdC8vIE92ZXJyaWRlcyByZXNwb25zZSBjb250ZW50LXR5cGUgaGVhZGVyXG5cdFx0XHRcdG92ZXJyaWRlTWltZVR5cGU6IGZ1bmN0aW9uKCB0eXBlICkge1xuXHRcdFx0XHRcdGlmICggY29tcGxldGVkID09IG51bGwgKSB7XG5cdFx0XHRcdFx0XHRzLm1pbWVUeXBlID0gdHlwZTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHRcdH0sXG5cblx0XHRcdFx0Ly8gU3RhdHVzLWRlcGVuZGVudCBjYWxsYmFja3Ncblx0XHRcdFx0c3RhdHVzQ29kZTogZnVuY3Rpb24oIG1hcCApIHtcblx0XHRcdFx0XHR2YXIgY29kZTtcblx0XHRcdFx0XHRpZiAoIG1hcCApIHtcblx0XHRcdFx0XHRcdGlmICggY29tcGxldGVkICkge1xuXG5cdFx0XHRcdFx0XHRcdC8vIEV4ZWN1dGUgdGhlIGFwcHJvcHJpYXRlIGNhbGxiYWNrc1xuXHRcdFx0XHRcdFx0XHRqcVhIUi5hbHdheXMoIG1hcFsganFYSFIuc3RhdHVzIF0gKTtcblx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRcdFx0Ly8gTGF6eS1hZGQgdGhlIG5ldyBjYWxsYmFja3MgaW4gYSB3YXkgdGhhdCBwcmVzZXJ2ZXMgb2xkIG9uZXNcblx0XHRcdFx0XHRcdFx0Zm9yICggY29kZSBpbiBtYXAgKSB7XG5cdFx0XHRcdFx0XHRcdFx0c3RhdHVzQ29kZVsgY29kZSBdID0gWyBzdGF0dXNDb2RlWyBjb2RlIF0sIG1hcFsgY29kZSBdIF07XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHRcdH0sXG5cblx0XHRcdFx0Ly8gQ2FuY2VsIHRoZSByZXF1ZXN0XG5cdFx0XHRcdGFib3J0OiBmdW5jdGlvbiggc3RhdHVzVGV4dCApIHtcblx0XHRcdFx0XHR2YXIgZmluYWxUZXh0ID0gc3RhdHVzVGV4dCB8fCBzdHJBYm9ydDtcblx0XHRcdFx0XHRpZiAoIHRyYW5zcG9ydCApIHtcblx0XHRcdFx0XHRcdHRyYW5zcG9ydC5hYm9ydCggZmluYWxUZXh0ICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGRvbmUoIDAsIGZpbmFsVGV4dCApO1xuXHRcdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0XHR9XG5cdFx0XHR9O1xuXG5cdFx0Ly8gQXR0YWNoIGRlZmVycmVkc1xuXHRcdGRlZmVycmVkLnByb21pc2UoIGpxWEhSICk7XG5cblx0XHQvLyBBZGQgcHJvdG9jb2wgaWYgbm90IHByb3ZpZGVkIChwcmVmaWx0ZXJzIG1pZ2h0IGV4cGVjdCBpdClcblx0XHQvLyBIYW5kbGUgZmFsc3kgdXJsIGluIHRoZSBzZXR0aW5ncyBvYmplY3QgKCMxMDA5MzogY29uc2lzdGVuY3kgd2l0aCBvbGQgc2lnbmF0dXJlKVxuXHRcdC8vIFdlIGFsc28gdXNlIHRoZSB1cmwgcGFyYW1ldGVyIGlmIGF2YWlsYWJsZVxuXHRcdHMudXJsID0gKCAoIHVybCB8fCBzLnVybCB8fCBsb2NhdGlvbi5ocmVmICkgKyBcIlwiIClcblx0XHRcdC5yZXBsYWNlKCBycHJvdG9jb2wsIGxvY2F0aW9uLnByb3RvY29sICsgXCIvL1wiICk7XG5cblx0XHQvLyBBbGlhcyBtZXRob2Qgb3B0aW9uIHRvIHR5cGUgYXMgcGVyIHRpY2tldCAjMTIwMDRcblx0XHRzLnR5cGUgPSBvcHRpb25zLm1ldGhvZCB8fCBvcHRpb25zLnR5cGUgfHwgcy5tZXRob2QgfHwgcy50eXBlO1xuXG5cdFx0Ly8gRXh0cmFjdCBkYXRhVHlwZXMgbGlzdFxuXHRcdHMuZGF0YVR5cGVzID0gKCBzLmRhdGFUeXBlIHx8IFwiKlwiICkudG9Mb3dlckNhc2UoKS5tYXRjaCggcm5vdGh0bWx3aGl0ZSApIHx8IFsgXCJcIiBdO1xuXG5cdFx0Ly8gQSBjcm9zcy1kb21haW4gcmVxdWVzdCBpcyBpbiBvcmRlciB3aGVuIHRoZSBvcmlnaW4gZG9lc24ndCBtYXRjaCB0aGUgY3VycmVudCBvcmlnaW4uXG5cdFx0aWYgKCBzLmNyb3NzRG9tYWluID09IG51bGwgKSB7XG5cdFx0XHR1cmxBbmNob3IgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImFcIiApO1xuXG5cdFx0XHQvLyBTdXBwb3J0OiBJRSA8PTggLSAxMSwgRWRnZSAxMiAtIDE1XG5cdFx0XHQvLyBJRSB0aHJvd3MgZXhjZXB0aW9uIG9uIGFjY2Vzc2luZyB0aGUgaHJlZiBwcm9wZXJ0eSBpZiB1cmwgaXMgbWFsZm9ybWVkLFxuXHRcdFx0Ly8gZS5nLiBodHRwOi8vZXhhbXBsZS5jb206ODB4L1xuXHRcdFx0dHJ5IHtcblx0XHRcdFx0dXJsQW5jaG9yLmhyZWYgPSBzLnVybDtcblxuXHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA8PTggLSAxMSBvbmx5XG5cdFx0XHRcdC8vIEFuY2hvcidzIGhvc3QgcHJvcGVydHkgaXNuJ3QgY29ycmVjdGx5IHNldCB3aGVuIHMudXJsIGlzIHJlbGF0aXZlXG5cdFx0XHRcdHVybEFuY2hvci5ocmVmID0gdXJsQW5jaG9yLmhyZWY7XG5cdFx0XHRcdHMuY3Jvc3NEb21haW4gPSBvcmlnaW5BbmNob3IucHJvdG9jb2wgKyBcIi8vXCIgKyBvcmlnaW5BbmNob3IuaG9zdCAhPT1cblx0XHRcdFx0XHR1cmxBbmNob3IucHJvdG9jb2wgKyBcIi8vXCIgKyB1cmxBbmNob3IuaG9zdDtcblx0XHRcdH0gY2F0Y2ggKCBlICkge1xuXG5cdFx0XHRcdC8vIElmIHRoZXJlIGlzIGFuIGVycm9yIHBhcnNpbmcgdGhlIFVSTCwgYXNzdW1lIGl0IGlzIGNyb3NzRG9tYWluLFxuXHRcdFx0XHQvLyBpdCBjYW4gYmUgcmVqZWN0ZWQgYnkgdGhlIHRyYW5zcG9ydCBpZiBpdCBpcyBpbnZhbGlkXG5cdFx0XHRcdHMuY3Jvc3NEb21haW4gPSB0cnVlO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIENvbnZlcnQgZGF0YSBpZiBub3QgYWxyZWFkeSBhIHN0cmluZ1xuXHRcdGlmICggcy5kYXRhICYmIHMucHJvY2Vzc0RhdGEgJiYgdHlwZW9mIHMuZGF0YSAhPT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdHMuZGF0YSA9IGpRdWVyeS5wYXJhbSggcy5kYXRhLCBzLnRyYWRpdGlvbmFsICk7XG5cdFx0fVxuXG5cdFx0Ly8gQXBwbHkgcHJlZmlsdGVyc1xuXHRcdGluc3BlY3RQcmVmaWx0ZXJzT3JUcmFuc3BvcnRzKCBwcmVmaWx0ZXJzLCBzLCBvcHRpb25zLCBqcVhIUiApO1xuXG5cdFx0Ly8gSWYgcmVxdWVzdCB3YXMgYWJvcnRlZCBpbnNpZGUgYSBwcmVmaWx0ZXIsIHN0b3AgdGhlcmVcblx0XHRpZiAoIGNvbXBsZXRlZCApIHtcblx0XHRcdHJldHVybiBqcVhIUjtcblx0XHR9XG5cblx0XHQvLyBXZSBjYW4gZmlyZSBnbG9iYWwgZXZlbnRzIGFzIG9mIG5vdyBpZiBhc2tlZCB0b1xuXHRcdC8vIERvbid0IGZpcmUgZXZlbnRzIGlmIGpRdWVyeS5ldmVudCBpcyB1bmRlZmluZWQgaW4gYW4gQU1ELXVzYWdlIHNjZW5hcmlvICgjMTUxMTgpXG5cdFx0ZmlyZUdsb2JhbHMgPSBqUXVlcnkuZXZlbnQgJiYgcy5nbG9iYWw7XG5cblx0XHQvLyBXYXRjaCBmb3IgYSBuZXcgc2V0IG9mIHJlcXVlc3RzXG5cdFx0aWYgKCBmaXJlR2xvYmFscyAmJiBqUXVlcnkuYWN0aXZlKysgPT09IDAgKSB7XG5cdFx0XHRqUXVlcnkuZXZlbnQudHJpZ2dlciggXCJhamF4U3RhcnRcIiApO1xuXHRcdH1cblxuXHRcdC8vIFVwcGVyY2FzZSB0aGUgdHlwZVxuXHRcdHMudHlwZSA9IHMudHlwZS50b1VwcGVyQ2FzZSgpO1xuXG5cdFx0Ly8gRGV0ZXJtaW5lIGlmIHJlcXVlc3QgaGFzIGNvbnRlbnRcblx0XHRzLmhhc0NvbnRlbnQgPSAhcm5vQ29udGVudC50ZXN0KCBzLnR5cGUgKTtcblxuXHRcdC8vIFNhdmUgdGhlIFVSTCBpbiBjYXNlIHdlJ3JlIHRveWluZyB3aXRoIHRoZSBJZi1Nb2RpZmllZC1TaW5jZVxuXHRcdC8vIGFuZC9vciBJZi1Ob25lLU1hdGNoIGhlYWRlciBsYXRlciBvblxuXHRcdC8vIFJlbW92ZSBoYXNoIHRvIHNpbXBsaWZ5IHVybCBtYW5pcHVsYXRpb25cblx0XHRjYWNoZVVSTCA9IHMudXJsLnJlcGxhY2UoIHJoYXNoLCBcIlwiICk7XG5cblx0XHQvLyBNb3JlIG9wdGlvbnMgaGFuZGxpbmcgZm9yIHJlcXVlc3RzIHdpdGggbm8gY29udGVudFxuXHRcdGlmICggIXMuaGFzQ29udGVudCApIHtcblxuXHRcdFx0Ly8gUmVtZW1iZXIgdGhlIGhhc2ggc28gd2UgY2FuIHB1dCBpdCBiYWNrXG5cdFx0XHR1bmNhY2hlZCA9IHMudXJsLnNsaWNlKCBjYWNoZVVSTC5sZW5ndGggKTtcblxuXHRcdFx0Ly8gSWYgZGF0YSBpcyBhdmFpbGFibGUgYW5kIHNob3VsZCBiZSBwcm9jZXNzZWQsIGFwcGVuZCBkYXRhIHRvIHVybFxuXHRcdFx0aWYgKCBzLmRhdGEgJiYgKCBzLnByb2Nlc3NEYXRhIHx8IHR5cGVvZiBzLmRhdGEgPT09IFwic3RyaW5nXCIgKSApIHtcblx0XHRcdFx0Y2FjaGVVUkwgKz0gKCBycXVlcnkudGVzdCggY2FjaGVVUkwgKSA/IFwiJlwiIDogXCI/XCIgKSArIHMuZGF0YTtcblxuXHRcdFx0XHQvLyAjOTY4MjogcmVtb3ZlIGRhdGEgc28gdGhhdCBpdCdzIG5vdCB1c2VkIGluIGFuIGV2ZW50dWFsIHJldHJ5XG5cdFx0XHRcdGRlbGV0ZSBzLmRhdGE7XG5cdFx0XHR9XG5cblx0XHRcdC8vIEFkZCBvciB1cGRhdGUgYW50aS1jYWNoZSBwYXJhbSBpZiBuZWVkZWRcblx0XHRcdGlmICggcy5jYWNoZSA9PT0gZmFsc2UgKSB7XG5cdFx0XHRcdGNhY2hlVVJMID0gY2FjaGVVUkwucmVwbGFjZSggcmFudGlDYWNoZSwgXCIkMVwiICk7XG5cdFx0XHRcdHVuY2FjaGVkID0gKCBycXVlcnkudGVzdCggY2FjaGVVUkwgKSA/IFwiJlwiIDogXCI/XCIgKSArIFwiXz1cIiArICggbm9uY2UuZ3VpZCsrICkgK1xuXHRcdFx0XHRcdHVuY2FjaGVkO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBQdXQgaGFzaCBhbmQgYW50aS1jYWNoZSBvbiB0aGUgVVJMIHRoYXQgd2lsbCBiZSByZXF1ZXN0ZWQgKGdoLTE3MzIpXG5cdFx0XHRzLnVybCA9IGNhY2hlVVJMICsgdW5jYWNoZWQ7XG5cblx0XHQvLyBDaGFuZ2UgJyUyMCcgdG8gJysnIGlmIHRoaXMgaXMgZW5jb2RlZCBmb3JtIGJvZHkgY29udGVudCAoZ2gtMjY1OClcblx0XHR9IGVsc2UgaWYgKCBzLmRhdGEgJiYgcy5wcm9jZXNzRGF0YSAmJlxuXHRcdFx0KCBzLmNvbnRlbnRUeXBlIHx8IFwiXCIgKS5pbmRleE9mKCBcImFwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZFwiICkgPT09IDAgKSB7XG5cdFx0XHRzLmRhdGEgPSBzLmRhdGEucmVwbGFjZSggcjIwLCBcIitcIiApO1xuXHRcdH1cblxuXHRcdC8vIFNldCB0aGUgSWYtTW9kaWZpZWQtU2luY2UgYW5kL29yIElmLU5vbmUtTWF0Y2ggaGVhZGVyLCBpZiBpbiBpZk1vZGlmaWVkIG1vZGUuXG5cdFx0aWYgKCBzLmlmTW9kaWZpZWQgKSB7XG5cdFx0XHRpZiAoIGpRdWVyeS5sYXN0TW9kaWZpZWRbIGNhY2hlVVJMIF0gKSB7XG5cdFx0XHRcdGpxWEhSLnNldFJlcXVlc3RIZWFkZXIoIFwiSWYtTW9kaWZpZWQtU2luY2VcIiwgalF1ZXJ5Lmxhc3RNb2RpZmllZFsgY2FjaGVVUkwgXSApO1xuXHRcdFx0fVxuXHRcdFx0aWYgKCBqUXVlcnkuZXRhZ1sgY2FjaGVVUkwgXSApIHtcblx0XHRcdFx0anFYSFIuc2V0UmVxdWVzdEhlYWRlciggXCJJZi1Ob25lLU1hdGNoXCIsIGpRdWVyeS5ldGFnWyBjYWNoZVVSTCBdICk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gU2V0IHRoZSBjb3JyZWN0IGhlYWRlciwgaWYgZGF0YSBpcyBiZWluZyBzZW50XG5cdFx0aWYgKCBzLmRhdGEgJiYgcy5oYXNDb250ZW50ICYmIHMuY29udGVudFR5cGUgIT09IGZhbHNlIHx8IG9wdGlvbnMuY29udGVudFR5cGUgKSB7XG5cdFx0XHRqcVhIUi5zZXRSZXF1ZXN0SGVhZGVyKCBcIkNvbnRlbnQtVHlwZVwiLCBzLmNvbnRlbnRUeXBlICk7XG5cdFx0fVxuXG5cdFx0Ly8gU2V0IHRoZSBBY2NlcHRzIGhlYWRlciBmb3IgdGhlIHNlcnZlciwgZGVwZW5kaW5nIG9uIHRoZSBkYXRhVHlwZVxuXHRcdGpxWEhSLnNldFJlcXVlc3RIZWFkZXIoXG5cdFx0XHRcIkFjY2VwdFwiLFxuXHRcdFx0cy5kYXRhVHlwZXNbIDAgXSAmJiBzLmFjY2VwdHNbIHMuZGF0YVR5cGVzWyAwIF0gXSA/XG5cdFx0XHRcdHMuYWNjZXB0c1sgcy5kYXRhVHlwZXNbIDAgXSBdICtcblx0XHRcdFx0XHQoIHMuZGF0YVR5cGVzWyAwIF0gIT09IFwiKlwiID8gXCIsIFwiICsgYWxsVHlwZXMgKyBcIjsgcT0wLjAxXCIgOiBcIlwiICkgOlxuXHRcdFx0XHRzLmFjY2VwdHNbIFwiKlwiIF1cblx0XHQpO1xuXG5cdFx0Ly8gQ2hlY2sgZm9yIGhlYWRlcnMgb3B0aW9uXG5cdFx0Zm9yICggaSBpbiBzLmhlYWRlcnMgKSB7XG5cdFx0XHRqcVhIUi5zZXRSZXF1ZXN0SGVhZGVyKCBpLCBzLmhlYWRlcnNbIGkgXSApO1xuXHRcdH1cblxuXHRcdC8vIEFsbG93IGN1c3RvbSBoZWFkZXJzL21pbWV0eXBlcyBhbmQgZWFybHkgYWJvcnRcblx0XHRpZiAoIHMuYmVmb3JlU2VuZCAmJlxuXHRcdFx0KCBzLmJlZm9yZVNlbmQuY2FsbCggY2FsbGJhY2tDb250ZXh0LCBqcVhIUiwgcyApID09PSBmYWxzZSB8fCBjb21wbGV0ZWQgKSApIHtcblxuXHRcdFx0Ly8gQWJvcnQgaWYgbm90IGRvbmUgYWxyZWFkeSBhbmQgcmV0dXJuXG5cdFx0XHRyZXR1cm4ganFYSFIuYWJvcnQoKTtcblx0XHR9XG5cblx0XHQvLyBBYm9ydGluZyBpcyBubyBsb25nZXIgYSBjYW5jZWxsYXRpb25cblx0XHRzdHJBYm9ydCA9IFwiYWJvcnRcIjtcblxuXHRcdC8vIEluc3RhbGwgY2FsbGJhY2tzIG9uIGRlZmVycmVkc1xuXHRcdGNvbXBsZXRlRGVmZXJyZWQuYWRkKCBzLmNvbXBsZXRlICk7XG5cdFx0anFYSFIuZG9uZSggcy5zdWNjZXNzICk7XG5cdFx0anFYSFIuZmFpbCggcy5lcnJvciApO1xuXG5cdFx0Ly8gR2V0IHRyYW5zcG9ydFxuXHRcdHRyYW5zcG9ydCA9IGluc3BlY3RQcmVmaWx0ZXJzT3JUcmFuc3BvcnRzKCB0cmFuc3BvcnRzLCBzLCBvcHRpb25zLCBqcVhIUiApO1xuXG5cdFx0Ly8gSWYgbm8gdHJhbnNwb3J0LCB3ZSBhdXRvLWFib3J0XG5cdFx0aWYgKCAhdHJhbnNwb3J0ICkge1xuXHRcdFx0ZG9uZSggLTEsIFwiTm8gVHJhbnNwb3J0XCIgKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0anFYSFIucmVhZHlTdGF0ZSA9IDE7XG5cblx0XHRcdC8vIFNlbmQgZ2xvYmFsIGV2ZW50XG5cdFx0XHRpZiAoIGZpcmVHbG9iYWxzICkge1xuXHRcdFx0XHRnbG9iYWxFdmVudENvbnRleHQudHJpZ2dlciggXCJhamF4U2VuZFwiLCBbIGpxWEhSLCBzIF0gKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gSWYgcmVxdWVzdCB3YXMgYWJvcnRlZCBpbnNpZGUgYWpheFNlbmQsIHN0b3AgdGhlcmVcblx0XHRcdGlmICggY29tcGxldGVkICkge1xuXHRcdFx0XHRyZXR1cm4ganFYSFI7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFRpbWVvdXRcblx0XHRcdGlmICggcy5hc3luYyAmJiBzLnRpbWVvdXQgPiAwICkge1xuXHRcdFx0XHR0aW1lb3V0VGltZXIgPSB3aW5kb3cuc2V0VGltZW91dCggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0anFYSFIuYWJvcnQoIFwidGltZW91dFwiICk7XG5cdFx0XHRcdH0sIHMudGltZW91dCApO1xuXHRcdFx0fVxuXG5cdFx0XHR0cnkge1xuXHRcdFx0XHRjb21wbGV0ZWQgPSBmYWxzZTtcblx0XHRcdFx0dHJhbnNwb3J0LnNlbmQoIHJlcXVlc3RIZWFkZXJzLCBkb25lICk7XG5cdFx0XHR9IGNhdGNoICggZSApIHtcblxuXHRcdFx0XHQvLyBSZXRocm93IHBvc3QtY29tcGxldGlvbiBleGNlcHRpb25zXG5cdFx0XHRcdGlmICggY29tcGxldGVkICkge1xuXHRcdFx0XHRcdHRocm93IGU7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBQcm9wYWdhdGUgb3RoZXJzIGFzIHJlc3VsdHNcblx0XHRcdFx0ZG9uZSggLTEsIGUgKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBDYWxsYmFjayBmb3Igd2hlbiBldmVyeXRoaW5nIGlzIGRvbmVcblx0XHRmdW5jdGlvbiBkb25lKCBzdGF0dXMsIG5hdGl2ZVN0YXR1c1RleHQsIHJlc3BvbnNlcywgaGVhZGVycyApIHtcblx0XHRcdHZhciBpc1N1Y2Nlc3MsIHN1Y2Nlc3MsIGVycm9yLCByZXNwb25zZSwgbW9kaWZpZWQsXG5cdFx0XHRcdHN0YXR1c1RleHQgPSBuYXRpdmVTdGF0dXNUZXh0O1xuXG5cdFx0XHQvLyBJZ25vcmUgcmVwZWF0IGludm9jYXRpb25zXG5cdFx0XHRpZiAoIGNvbXBsZXRlZCApIHtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXG5cdFx0XHRjb21wbGV0ZWQgPSB0cnVlO1xuXG5cdFx0XHQvLyBDbGVhciB0aW1lb3V0IGlmIGl0IGV4aXN0c1xuXHRcdFx0aWYgKCB0aW1lb3V0VGltZXIgKSB7XG5cdFx0XHRcdHdpbmRvdy5jbGVhclRpbWVvdXQoIHRpbWVvdXRUaW1lciApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBEZXJlZmVyZW5jZSB0cmFuc3BvcnQgZm9yIGVhcmx5IGdhcmJhZ2UgY29sbGVjdGlvblxuXHRcdFx0Ly8gKG5vIG1hdHRlciBob3cgbG9uZyB0aGUganFYSFIgb2JqZWN0IHdpbGwgYmUgdXNlZClcblx0XHRcdHRyYW5zcG9ydCA9IHVuZGVmaW5lZDtcblxuXHRcdFx0Ly8gQ2FjaGUgcmVzcG9uc2UgaGVhZGVyc1xuXHRcdFx0cmVzcG9uc2VIZWFkZXJzU3RyaW5nID0gaGVhZGVycyB8fCBcIlwiO1xuXG5cdFx0XHQvLyBTZXQgcmVhZHlTdGF0ZVxuXHRcdFx0anFYSFIucmVhZHlTdGF0ZSA9IHN0YXR1cyA+IDAgPyA0IDogMDtcblxuXHRcdFx0Ly8gRGV0ZXJtaW5lIGlmIHN1Y2Nlc3NmdWxcblx0XHRcdGlzU3VjY2VzcyA9IHN0YXR1cyA+PSAyMDAgJiYgc3RhdHVzIDwgMzAwIHx8IHN0YXR1cyA9PT0gMzA0O1xuXG5cdFx0XHQvLyBHZXQgcmVzcG9uc2UgZGF0YVxuXHRcdFx0aWYgKCByZXNwb25zZXMgKSB7XG5cdFx0XHRcdHJlc3BvbnNlID0gYWpheEhhbmRsZVJlc3BvbnNlcyggcywganFYSFIsIHJlc3BvbnNlcyApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBVc2UgYSBub29wIGNvbnZlcnRlciBmb3IgbWlzc2luZyBzY3JpcHRcblx0XHRcdGlmICggIWlzU3VjY2VzcyAmJiBqUXVlcnkuaW5BcnJheSggXCJzY3JpcHRcIiwgcy5kYXRhVHlwZXMgKSA+IC0xICkge1xuXHRcdFx0XHRzLmNvbnZlcnRlcnNbIFwidGV4dCBzY3JpcHRcIiBdID0gZnVuY3Rpb24oKSB7fTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gQ29udmVydCBubyBtYXR0ZXIgd2hhdCAodGhhdCB3YXkgcmVzcG9uc2VYWFggZmllbGRzIGFyZSBhbHdheXMgc2V0KVxuXHRcdFx0cmVzcG9uc2UgPSBhamF4Q29udmVydCggcywgcmVzcG9uc2UsIGpxWEhSLCBpc1N1Y2Nlc3MgKTtcblxuXHRcdFx0Ly8gSWYgc3VjY2Vzc2Z1bCwgaGFuZGxlIHR5cGUgY2hhaW5pbmdcblx0XHRcdGlmICggaXNTdWNjZXNzICkge1xuXG5cdFx0XHRcdC8vIFNldCB0aGUgSWYtTW9kaWZpZWQtU2luY2UgYW5kL29yIElmLU5vbmUtTWF0Y2ggaGVhZGVyLCBpZiBpbiBpZk1vZGlmaWVkIG1vZGUuXG5cdFx0XHRcdGlmICggcy5pZk1vZGlmaWVkICkge1xuXHRcdFx0XHRcdG1vZGlmaWVkID0ganFYSFIuZ2V0UmVzcG9uc2VIZWFkZXIoIFwiTGFzdC1Nb2RpZmllZFwiICk7XG5cdFx0XHRcdFx0aWYgKCBtb2RpZmllZCApIHtcblx0XHRcdFx0XHRcdGpRdWVyeS5sYXN0TW9kaWZpZWRbIGNhY2hlVVJMIF0gPSBtb2RpZmllZDtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0bW9kaWZpZWQgPSBqcVhIUi5nZXRSZXNwb25zZUhlYWRlciggXCJldGFnXCIgKTtcblx0XHRcdFx0XHRpZiAoIG1vZGlmaWVkICkge1xuXHRcdFx0XHRcdFx0alF1ZXJ5LmV0YWdbIGNhY2hlVVJMIF0gPSBtb2RpZmllZDtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBpZiBubyBjb250ZW50XG5cdFx0XHRcdGlmICggc3RhdHVzID09PSAyMDQgfHwgcy50eXBlID09PSBcIkhFQURcIiApIHtcblx0XHRcdFx0XHRzdGF0dXNUZXh0ID0gXCJub2NvbnRlbnRcIjtcblxuXHRcdFx0XHQvLyBpZiBub3QgbW9kaWZpZWRcblx0XHRcdFx0fSBlbHNlIGlmICggc3RhdHVzID09PSAzMDQgKSB7XG5cdFx0XHRcdFx0c3RhdHVzVGV4dCA9IFwibm90bW9kaWZpZWRcIjtcblxuXHRcdFx0XHQvLyBJZiB3ZSBoYXZlIGRhdGEsIGxldCdzIGNvbnZlcnQgaXRcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRzdGF0dXNUZXh0ID0gcmVzcG9uc2Uuc3RhdGU7XG5cdFx0XHRcdFx0c3VjY2VzcyA9IHJlc3BvbnNlLmRhdGE7XG5cdFx0XHRcdFx0ZXJyb3IgPSByZXNwb25zZS5lcnJvcjtcblx0XHRcdFx0XHRpc1N1Y2Nlc3MgPSAhZXJyb3I7XG5cdFx0XHRcdH1cblx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0Ly8gRXh0cmFjdCBlcnJvciBmcm9tIHN0YXR1c1RleHQgYW5kIG5vcm1hbGl6ZSBmb3Igbm9uLWFib3J0c1xuXHRcdFx0XHRlcnJvciA9IHN0YXR1c1RleHQ7XG5cdFx0XHRcdGlmICggc3RhdHVzIHx8ICFzdGF0dXNUZXh0ICkge1xuXHRcdFx0XHRcdHN0YXR1c1RleHQgPSBcImVycm9yXCI7XG5cdFx0XHRcdFx0aWYgKCBzdGF0dXMgPCAwICkge1xuXHRcdFx0XHRcdFx0c3RhdHVzID0gMDtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gU2V0IGRhdGEgZm9yIHRoZSBmYWtlIHhociBvYmplY3Rcblx0XHRcdGpxWEhSLnN0YXR1cyA9IHN0YXR1cztcblx0XHRcdGpxWEhSLnN0YXR1c1RleHQgPSAoIG5hdGl2ZVN0YXR1c1RleHQgfHwgc3RhdHVzVGV4dCApICsgXCJcIjtcblxuXHRcdFx0Ly8gU3VjY2Vzcy9FcnJvclxuXHRcdFx0aWYgKCBpc1N1Y2Nlc3MgKSB7XG5cdFx0XHRcdGRlZmVycmVkLnJlc29sdmVXaXRoKCBjYWxsYmFja0NvbnRleHQsIFsgc3VjY2Vzcywgc3RhdHVzVGV4dCwganFYSFIgXSApO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0ZGVmZXJyZWQucmVqZWN0V2l0aCggY2FsbGJhY2tDb250ZXh0LCBbIGpxWEhSLCBzdGF0dXNUZXh0LCBlcnJvciBdICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFN0YXR1cy1kZXBlbmRlbnQgY2FsbGJhY2tzXG5cdFx0XHRqcVhIUi5zdGF0dXNDb2RlKCBzdGF0dXNDb2RlICk7XG5cdFx0XHRzdGF0dXNDb2RlID0gdW5kZWZpbmVkO1xuXG5cdFx0XHRpZiAoIGZpcmVHbG9iYWxzICkge1xuXHRcdFx0XHRnbG9iYWxFdmVudENvbnRleHQudHJpZ2dlciggaXNTdWNjZXNzID8gXCJhamF4U3VjY2Vzc1wiIDogXCJhamF4RXJyb3JcIixcblx0XHRcdFx0XHRbIGpxWEhSLCBzLCBpc1N1Y2Nlc3MgPyBzdWNjZXNzIDogZXJyb3IgXSApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBDb21wbGV0ZVxuXHRcdFx0Y29tcGxldGVEZWZlcnJlZC5maXJlV2l0aCggY2FsbGJhY2tDb250ZXh0LCBbIGpxWEhSLCBzdGF0dXNUZXh0IF0gKTtcblxuXHRcdFx0aWYgKCBmaXJlR2xvYmFscyApIHtcblx0XHRcdFx0Z2xvYmFsRXZlbnRDb250ZXh0LnRyaWdnZXIoIFwiYWpheENvbXBsZXRlXCIsIFsganFYSFIsIHMgXSApO1xuXG5cdFx0XHRcdC8vIEhhbmRsZSB0aGUgZ2xvYmFsIEFKQVggY291bnRlclxuXHRcdFx0XHRpZiAoICEoIC0talF1ZXJ5LmFjdGl2ZSApICkge1xuXHRcdFx0XHRcdGpRdWVyeS5ldmVudC50cmlnZ2VyKCBcImFqYXhTdG9wXCIgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiBqcVhIUjtcblx0fSxcblxuXHRnZXRKU09OOiBmdW5jdGlvbiggdXJsLCBkYXRhLCBjYWxsYmFjayApIHtcblx0XHRyZXR1cm4galF1ZXJ5LmdldCggdXJsLCBkYXRhLCBjYWxsYmFjaywgXCJqc29uXCIgKTtcblx0fSxcblxuXHRnZXRTY3JpcHQ6IGZ1bmN0aW9uKCB1cmwsIGNhbGxiYWNrICkge1xuXHRcdHJldHVybiBqUXVlcnkuZ2V0KCB1cmwsIHVuZGVmaW5lZCwgY2FsbGJhY2ssIFwic2NyaXB0XCIgKTtcblx0fVxufSApO1xuXG5qUXVlcnkuZWFjaCggWyBcImdldFwiLCBcInBvc3RcIiBdLCBmdW5jdGlvbiggX2ksIG1ldGhvZCApIHtcblx0alF1ZXJ5WyBtZXRob2QgXSA9IGZ1bmN0aW9uKCB1cmwsIGRhdGEsIGNhbGxiYWNrLCB0eXBlICkge1xuXG5cdFx0Ly8gU2hpZnQgYXJndW1lbnRzIGlmIGRhdGEgYXJndW1lbnQgd2FzIG9taXR0ZWRcblx0XHRpZiAoIGlzRnVuY3Rpb24oIGRhdGEgKSApIHtcblx0XHRcdHR5cGUgPSB0eXBlIHx8IGNhbGxiYWNrO1xuXHRcdFx0Y2FsbGJhY2sgPSBkYXRhO1xuXHRcdFx0ZGF0YSA9IHVuZGVmaW5lZDtcblx0XHR9XG5cblx0XHQvLyBUaGUgdXJsIGNhbiBiZSBhbiBvcHRpb25zIG9iamVjdCAod2hpY2ggdGhlbiBtdXN0IGhhdmUgLnVybClcblx0XHRyZXR1cm4galF1ZXJ5LmFqYXgoIGpRdWVyeS5leHRlbmQoIHtcblx0XHRcdHVybDogdXJsLFxuXHRcdFx0dHlwZTogbWV0aG9kLFxuXHRcdFx0ZGF0YVR5cGU6IHR5cGUsXG5cdFx0XHRkYXRhOiBkYXRhLFxuXHRcdFx0c3VjY2VzczogY2FsbGJhY2tcblx0XHR9LCBqUXVlcnkuaXNQbGFpbk9iamVjdCggdXJsICkgJiYgdXJsICkgKTtcblx0fTtcbn0gKTtcblxualF1ZXJ5LmFqYXhQcmVmaWx0ZXIoIGZ1bmN0aW9uKCBzICkge1xuXHR2YXIgaTtcblx0Zm9yICggaSBpbiBzLmhlYWRlcnMgKSB7XG5cdFx0aWYgKCBpLnRvTG93ZXJDYXNlKCkgPT09IFwiY29udGVudC10eXBlXCIgKSB7XG5cdFx0XHRzLmNvbnRlbnRUeXBlID0gcy5oZWFkZXJzWyBpIF0gfHwgXCJcIjtcblx0XHR9XG5cdH1cbn0gKTtcblxuXG5qUXVlcnkuX2V2YWxVcmwgPSBmdW5jdGlvbiggdXJsLCBvcHRpb25zLCBkb2MgKSB7XG5cdHJldHVybiBqUXVlcnkuYWpheCgge1xuXHRcdHVybDogdXJsLFxuXG5cdFx0Ly8gTWFrZSB0aGlzIGV4cGxpY2l0LCBzaW5jZSB1c2VyIGNhbiBvdmVycmlkZSB0aGlzIHRocm91Z2ggYWpheFNldHVwICgjMTEyNjQpXG5cdFx0dHlwZTogXCJHRVRcIixcblx0XHRkYXRhVHlwZTogXCJzY3JpcHRcIixcblx0XHRjYWNoZTogdHJ1ZSxcblx0XHRhc3luYzogZmFsc2UsXG5cdFx0Z2xvYmFsOiBmYWxzZSxcblxuXHRcdC8vIE9ubHkgZXZhbHVhdGUgdGhlIHJlc3BvbnNlIGlmIGl0IGlzIHN1Y2Nlc3NmdWwgKGdoLTQxMjYpXG5cdFx0Ly8gZGF0YUZpbHRlciBpcyBub3QgaW52b2tlZCBmb3IgZmFpbHVyZSByZXNwb25zZXMsIHNvIHVzaW5nIGl0IGluc3RlYWRcblx0XHQvLyBvZiB0aGUgZGVmYXVsdCBjb252ZXJ0ZXIgaXMga2x1ZGd5IGJ1dCBpdCB3b3Jrcy5cblx0XHRjb252ZXJ0ZXJzOiB7XG5cdFx0XHRcInRleHQgc2NyaXB0XCI6IGZ1bmN0aW9uKCkge31cblx0XHR9LFxuXHRcdGRhdGFGaWx0ZXI6IGZ1bmN0aW9uKCByZXNwb25zZSApIHtcblx0XHRcdGpRdWVyeS5nbG9iYWxFdmFsKCByZXNwb25zZSwgb3B0aW9ucywgZG9jICk7XG5cdFx0fVxuXHR9ICk7XG59O1xuXG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0d3JhcEFsbDogZnVuY3Rpb24oIGh0bWwgKSB7XG5cdFx0dmFyIHdyYXA7XG5cblx0XHRpZiAoIHRoaXNbIDAgXSApIHtcblx0XHRcdGlmICggaXNGdW5jdGlvbiggaHRtbCApICkge1xuXHRcdFx0XHRodG1sID0gaHRtbC5jYWxsKCB0aGlzWyAwIF0gKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gVGhlIGVsZW1lbnRzIHRvIHdyYXAgdGhlIHRhcmdldCBhcm91bmRcblx0XHRcdHdyYXAgPSBqUXVlcnkoIGh0bWwsIHRoaXNbIDAgXS5vd25lckRvY3VtZW50ICkuZXEoIDAgKS5jbG9uZSggdHJ1ZSApO1xuXG5cdFx0XHRpZiAoIHRoaXNbIDAgXS5wYXJlbnROb2RlICkge1xuXHRcdFx0XHR3cmFwLmluc2VydEJlZm9yZSggdGhpc1sgMCBdICk7XG5cdFx0XHR9XG5cblx0XHRcdHdyYXAubWFwKCBmdW5jdGlvbigpIHtcblx0XHRcdFx0dmFyIGVsZW0gPSB0aGlzO1xuXG5cdFx0XHRcdHdoaWxlICggZWxlbS5maXJzdEVsZW1lbnRDaGlsZCApIHtcblx0XHRcdFx0XHRlbGVtID0gZWxlbS5maXJzdEVsZW1lbnRDaGlsZDtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdHJldHVybiBlbGVtO1xuXHRcdFx0fSApLmFwcGVuZCggdGhpcyApO1xuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzO1xuXHR9LFxuXG5cdHdyYXBJbm5lcjogZnVuY3Rpb24oIGh0bWwgKSB7XG5cdFx0aWYgKCBpc0Z1bmN0aW9uKCBodG1sICkgKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbiggaSApIHtcblx0XHRcdFx0alF1ZXJ5KCB0aGlzICkud3JhcElubmVyKCBodG1sLmNhbGwoIHRoaXMsIGkgKSApO1xuXHRcdFx0fSApO1xuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIHNlbGYgPSBqUXVlcnkoIHRoaXMgKSxcblx0XHRcdFx0Y29udGVudHMgPSBzZWxmLmNvbnRlbnRzKCk7XG5cblx0XHRcdGlmICggY29udGVudHMubGVuZ3RoICkge1xuXHRcdFx0XHRjb250ZW50cy53cmFwQWxsKCBodG1sICk7XG5cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHNlbGYuYXBwZW5kKCBodG1sICk7XG5cdFx0XHR9XG5cdFx0fSApO1xuXHR9LFxuXG5cdHdyYXA6IGZ1bmN0aW9uKCBodG1sICkge1xuXHRcdHZhciBodG1sSXNGdW5jdGlvbiA9IGlzRnVuY3Rpb24oIGh0bWwgKTtcblxuXHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCBpICkge1xuXHRcdFx0alF1ZXJ5KCB0aGlzICkud3JhcEFsbCggaHRtbElzRnVuY3Rpb24gPyBodG1sLmNhbGwoIHRoaXMsIGkgKSA6IGh0bWwgKTtcblx0XHR9ICk7XG5cdH0sXG5cblx0dW53cmFwOiBmdW5jdGlvbiggc2VsZWN0b3IgKSB7XG5cdFx0dGhpcy5wYXJlbnQoIHNlbGVjdG9yICkubm90KCBcImJvZHlcIiApLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0alF1ZXJ5KCB0aGlzICkucmVwbGFjZVdpdGgoIHRoaXMuY2hpbGROb2RlcyApO1xuXHRcdH0gKTtcblx0XHRyZXR1cm4gdGhpcztcblx0fVxufSApO1xuXG5cbmpRdWVyeS5leHByLnBzZXVkb3MuaGlkZGVuID0gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdHJldHVybiAhalF1ZXJ5LmV4cHIucHNldWRvcy52aXNpYmxlKCBlbGVtICk7XG59O1xualF1ZXJ5LmV4cHIucHNldWRvcy52aXNpYmxlID0gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdHJldHVybiAhISggZWxlbS5vZmZzZXRXaWR0aCB8fCBlbGVtLm9mZnNldEhlaWdodCB8fCBlbGVtLmdldENsaWVudFJlY3RzKCkubGVuZ3RoICk7XG59O1xuXG5cblxuXG5qUXVlcnkuYWpheFNldHRpbmdzLnhociA9IGZ1bmN0aW9uKCkge1xuXHR0cnkge1xuXHRcdHJldHVybiBuZXcgd2luZG93LlhNTEh0dHBSZXF1ZXN0KCk7XG5cdH0gY2F0Y2ggKCBlICkge31cbn07XG5cbnZhciB4aHJTdWNjZXNzU3RhdHVzID0ge1xuXG5cdFx0Ly8gRmlsZSBwcm90b2NvbCBhbHdheXMgeWllbGRzIHN0YXR1cyBjb2RlIDAsIGFzc3VtZSAyMDBcblx0XHQwOiAyMDAsXG5cblx0XHQvLyBTdXBwb3J0OiBJRSA8PTkgb25seVxuXHRcdC8vICMxNDUwOiBzb21ldGltZXMgSUUgcmV0dXJucyAxMjIzIHdoZW4gaXQgc2hvdWxkIGJlIDIwNFxuXHRcdDEyMjM6IDIwNFxuXHR9LFxuXHR4aHJTdXBwb3J0ZWQgPSBqUXVlcnkuYWpheFNldHRpbmdzLnhocigpO1xuXG5zdXBwb3J0LmNvcnMgPSAhIXhoclN1cHBvcnRlZCAmJiAoIFwid2l0aENyZWRlbnRpYWxzXCIgaW4geGhyU3VwcG9ydGVkICk7XG5zdXBwb3J0LmFqYXggPSB4aHJTdXBwb3J0ZWQgPSAhIXhoclN1cHBvcnRlZDtcblxualF1ZXJ5LmFqYXhUcmFuc3BvcnQoIGZ1bmN0aW9uKCBvcHRpb25zICkge1xuXHR2YXIgY2FsbGJhY2ssIGVycm9yQ2FsbGJhY2s7XG5cblx0Ly8gQ3Jvc3MgZG9tYWluIG9ubHkgYWxsb3dlZCBpZiBzdXBwb3J0ZWQgdGhyb3VnaCBYTUxIdHRwUmVxdWVzdFxuXHRpZiAoIHN1cHBvcnQuY29ycyB8fCB4aHJTdXBwb3J0ZWQgJiYgIW9wdGlvbnMuY3Jvc3NEb21haW4gKSB7XG5cdFx0cmV0dXJuIHtcblx0XHRcdHNlbmQ6IGZ1bmN0aW9uKCBoZWFkZXJzLCBjb21wbGV0ZSApIHtcblx0XHRcdFx0dmFyIGksXG5cdFx0XHRcdFx0eGhyID0gb3B0aW9ucy54aHIoKTtcblxuXHRcdFx0XHR4aHIub3Blbihcblx0XHRcdFx0XHRvcHRpb25zLnR5cGUsXG5cdFx0XHRcdFx0b3B0aW9ucy51cmwsXG5cdFx0XHRcdFx0b3B0aW9ucy5hc3luYyxcblx0XHRcdFx0XHRvcHRpb25zLnVzZXJuYW1lLFxuXHRcdFx0XHRcdG9wdGlvbnMucGFzc3dvcmRcblx0XHRcdFx0KTtcblxuXHRcdFx0XHQvLyBBcHBseSBjdXN0b20gZmllbGRzIGlmIHByb3ZpZGVkXG5cdFx0XHRcdGlmICggb3B0aW9ucy54aHJGaWVsZHMgKSB7XG5cdFx0XHRcdFx0Zm9yICggaSBpbiBvcHRpb25zLnhockZpZWxkcyApIHtcblx0XHRcdFx0XHRcdHhoclsgaSBdID0gb3B0aW9ucy54aHJGaWVsZHNbIGkgXTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBPdmVycmlkZSBtaW1lIHR5cGUgaWYgbmVlZGVkXG5cdFx0XHRcdGlmICggb3B0aW9ucy5taW1lVHlwZSAmJiB4aHIub3ZlcnJpZGVNaW1lVHlwZSApIHtcblx0XHRcdFx0XHR4aHIub3ZlcnJpZGVNaW1lVHlwZSggb3B0aW9ucy5taW1lVHlwZSApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gWC1SZXF1ZXN0ZWQtV2l0aCBoZWFkZXJcblx0XHRcdFx0Ly8gRm9yIGNyb3NzLWRvbWFpbiByZXF1ZXN0cywgc2VlaW5nIGFzIGNvbmRpdGlvbnMgZm9yIGEgcHJlZmxpZ2h0IGFyZVxuXHRcdFx0XHQvLyBha2luIHRvIGEgamlnc2F3IHB1enpsZSwgd2Ugc2ltcGx5IG5ldmVyIHNldCBpdCB0byBiZSBzdXJlLlxuXHRcdFx0XHQvLyAoaXQgY2FuIGFsd2F5cyBiZSBzZXQgb24gYSBwZXItcmVxdWVzdCBiYXNpcyBvciBldmVuIHVzaW5nIGFqYXhTZXR1cClcblx0XHRcdFx0Ly8gRm9yIHNhbWUtZG9tYWluIHJlcXVlc3RzLCB3b24ndCBjaGFuZ2UgaGVhZGVyIGlmIGFscmVhZHkgcHJvdmlkZWQuXG5cdFx0XHRcdGlmICggIW9wdGlvbnMuY3Jvc3NEb21haW4gJiYgIWhlYWRlcnNbIFwiWC1SZXF1ZXN0ZWQtV2l0aFwiIF0gKSB7XG5cdFx0XHRcdFx0aGVhZGVyc1sgXCJYLVJlcXVlc3RlZC1XaXRoXCIgXSA9IFwiWE1MSHR0cFJlcXVlc3RcIjtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIFNldCBoZWFkZXJzXG5cdFx0XHRcdGZvciAoIGkgaW4gaGVhZGVycyApIHtcblx0XHRcdFx0XHR4aHIuc2V0UmVxdWVzdEhlYWRlciggaSwgaGVhZGVyc1sgaSBdICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBDYWxsYmFja1xuXHRcdFx0XHRjYWxsYmFjayA9IGZ1bmN0aW9uKCB0eXBlICkge1xuXHRcdFx0XHRcdHJldHVybiBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRcdGlmICggY2FsbGJhY2sgKSB7XG5cdFx0XHRcdFx0XHRcdGNhbGxiYWNrID0gZXJyb3JDYWxsYmFjayA9IHhoci5vbmxvYWQgPVxuXHRcdFx0XHRcdFx0XHRcdHhoci5vbmVycm9yID0geGhyLm9uYWJvcnQgPSB4aHIub250aW1lb3V0ID1cblx0XHRcdFx0XHRcdFx0XHRcdHhoci5vbnJlYWR5c3RhdGVjaGFuZ2UgPSBudWxsO1xuXG5cdFx0XHRcdFx0XHRcdGlmICggdHlwZSA9PT0gXCJhYm9ydFwiICkge1xuXHRcdFx0XHRcdFx0XHRcdHhoci5hYm9ydCgpO1xuXHRcdFx0XHRcdFx0XHR9IGVsc2UgaWYgKCB0eXBlID09PSBcImVycm9yXCIgKSB7XG5cblx0XHRcdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA8PTkgb25seVxuXHRcdFx0XHRcdFx0XHRcdC8vIE9uIGEgbWFudWFsIG5hdGl2ZSBhYm9ydCwgSUU5IHRocm93c1xuXHRcdFx0XHRcdFx0XHRcdC8vIGVycm9ycyBvbiBhbnkgcHJvcGVydHkgYWNjZXNzIHRoYXQgaXMgbm90IHJlYWR5U3RhdGVcblx0XHRcdFx0XHRcdFx0XHRpZiAoIHR5cGVvZiB4aHIuc3RhdHVzICE9PSBcIm51bWJlclwiICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0Y29tcGxldGUoIDAsIFwiZXJyb3JcIiApO1xuXHRcdFx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRjb21wbGV0ZShcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBGaWxlOiBwcm90b2NvbCBhbHdheXMgeWllbGRzIHN0YXR1cyAwOyBzZWUgIzg2MDUsICMxNDIwN1xuXHRcdFx0XHRcdFx0XHRcdFx0XHR4aHIuc3RhdHVzLFxuXHRcdFx0XHRcdFx0XHRcdFx0XHR4aHIuc3RhdHVzVGV4dFxuXHRcdFx0XHRcdFx0XHRcdFx0KTtcblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdFx0Y29tcGxldGUoXG5cdFx0XHRcdFx0XHRcdFx0XHR4aHJTdWNjZXNzU3RhdHVzWyB4aHIuc3RhdHVzIF0gfHwgeGhyLnN0YXR1cyxcblx0XHRcdFx0XHRcdFx0XHRcdHhoci5zdGF0dXNUZXh0LFxuXG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA8PTkgb25seVxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gSUU5IGhhcyBubyBYSFIyIGJ1dCB0aHJvd3Mgb24gYmluYXJ5ICh0cmFjLTExNDI2KVxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gRm9yIFhIUjIgbm9uLXRleHQsIGxldCB0aGUgY2FsbGVyIGhhbmRsZSBpdCAoZ2gtMjQ5OClcblx0XHRcdFx0XHRcdFx0XHRcdCggeGhyLnJlc3BvbnNlVHlwZSB8fCBcInRleHRcIiApICE9PSBcInRleHRcIiAgfHxcblx0XHRcdFx0XHRcdFx0XHRcdHR5cGVvZiB4aHIucmVzcG9uc2VUZXh0ICE9PSBcInN0cmluZ1wiID9cblx0XHRcdFx0XHRcdFx0XHRcdFx0eyBiaW5hcnk6IHhoci5yZXNwb25zZSB9IDpcblx0XHRcdFx0XHRcdFx0XHRcdFx0eyB0ZXh0OiB4aHIucmVzcG9uc2VUZXh0IH0sXG5cdFx0XHRcdFx0XHRcdFx0XHR4aHIuZ2V0QWxsUmVzcG9uc2VIZWFkZXJzKClcblx0XHRcdFx0XHRcdFx0XHQpO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fTtcblx0XHRcdFx0fTtcblxuXHRcdFx0XHQvLyBMaXN0ZW4gdG8gZXZlbnRzXG5cdFx0XHRcdHhoci5vbmxvYWQgPSBjYWxsYmFjaygpO1xuXHRcdFx0XHRlcnJvckNhbGxiYWNrID0geGhyLm9uZXJyb3IgPSB4aHIub250aW1lb3V0ID0gY2FsbGJhY2soIFwiZXJyb3JcIiApO1xuXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDkgb25seVxuXHRcdFx0XHQvLyBVc2Ugb25yZWFkeXN0YXRlY2hhbmdlIHRvIHJlcGxhY2Ugb25hYm9ydFxuXHRcdFx0XHQvLyB0byBoYW5kbGUgdW5jYXVnaHQgYWJvcnRzXG5cdFx0XHRcdGlmICggeGhyLm9uYWJvcnQgIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0XHR4aHIub25hYm9ydCA9IGVycm9yQ2FsbGJhY2s7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0eGhyLm9ucmVhZHlzdGF0ZWNoYW5nZSA9IGZ1bmN0aW9uKCkge1xuXG5cdFx0XHRcdFx0XHQvLyBDaGVjayByZWFkeVN0YXRlIGJlZm9yZSB0aW1lb3V0IGFzIGl0IGNoYW5nZXNcblx0XHRcdFx0XHRcdGlmICggeGhyLnJlYWR5U3RhdGUgPT09IDQgKSB7XG5cblx0XHRcdFx0XHRcdFx0Ly8gQWxsb3cgb25lcnJvciB0byBiZSBjYWxsZWQgZmlyc3QsXG5cdFx0XHRcdFx0XHRcdC8vIGJ1dCB0aGF0IHdpbGwgbm90IGhhbmRsZSBhIG5hdGl2ZSBhYm9ydFxuXHRcdFx0XHRcdFx0XHQvLyBBbHNvLCBzYXZlIGVycm9yQ2FsbGJhY2sgdG8gYSB2YXJpYWJsZVxuXHRcdFx0XHRcdFx0XHQvLyBhcyB4aHIub25lcnJvciBjYW5ub3QgYmUgYWNjZXNzZWRcblx0XHRcdFx0XHRcdFx0d2luZG93LnNldFRpbWVvdXQoIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdFx0XHRcdGlmICggY2FsbGJhY2sgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRlcnJvckNhbGxiYWNrKCk7XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHR9ICk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIENyZWF0ZSB0aGUgYWJvcnQgY2FsbGJhY2tcblx0XHRcdFx0Y2FsbGJhY2sgPSBjYWxsYmFjayggXCJhYm9ydFwiICk7XG5cblx0XHRcdFx0dHJ5IHtcblxuXHRcdFx0XHRcdC8vIERvIHNlbmQgdGhlIHJlcXVlc3QgKHRoaXMgbWF5IHJhaXNlIGFuIGV4Y2VwdGlvbilcblx0XHRcdFx0XHR4aHIuc2VuZCggb3B0aW9ucy5oYXNDb250ZW50ICYmIG9wdGlvbnMuZGF0YSB8fCBudWxsICk7XG5cdFx0XHRcdH0gY2F0Y2ggKCBlICkge1xuXG5cdFx0XHRcdFx0Ly8gIzE0NjgzOiBPbmx5IHJldGhyb3cgaWYgdGhpcyBoYXNuJ3QgYmVlbiBub3RpZmllZCBhcyBhbiBlcnJvciB5ZXRcblx0XHRcdFx0XHRpZiAoIGNhbGxiYWNrICkge1xuXHRcdFx0XHRcdFx0dGhyb3cgZTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH0sXG5cblx0XHRcdGFib3J0OiBmdW5jdGlvbigpIHtcblx0XHRcdFx0aWYgKCBjYWxsYmFjayApIHtcblx0XHRcdFx0XHRjYWxsYmFjaygpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fTtcblx0fVxufSApO1xuXG5cblxuXG4vLyBQcmV2ZW50IGF1dG8tZXhlY3V0aW9uIG9mIHNjcmlwdHMgd2hlbiBubyBleHBsaWNpdCBkYXRhVHlwZSB3YXMgcHJvdmlkZWQgKFNlZSBnaC0yNDMyKVxualF1ZXJ5LmFqYXhQcmVmaWx0ZXIoIGZ1bmN0aW9uKCBzICkge1xuXHRpZiAoIHMuY3Jvc3NEb21haW4gKSB7XG5cdFx0cy5jb250ZW50cy5zY3JpcHQgPSBmYWxzZTtcblx0fVxufSApO1xuXG4vLyBJbnN0YWxsIHNjcmlwdCBkYXRhVHlwZVxualF1ZXJ5LmFqYXhTZXR1cCgge1xuXHRhY2NlcHRzOiB7XG5cdFx0c2NyaXB0OiBcInRleHQvamF2YXNjcmlwdCwgYXBwbGljYXRpb24vamF2YXNjcmlwdCwgXCIgK1xuXHRcdFx0XCJhcHBsaWNhdGlvbi9lY21hc2NyaXB0LCBhcHBsaWNhdGlvbi94LWVjbWFzY3JpcHRcIlxuXHR9LFxuXHRjb250ZW50czoge1xuXHRcdHNjcmlwdDogL1xcYig/OmphdmF8ZWNtYSlzY3JpcHRcXGIvXG5cdH0sXG5cdGNvbnZlcnRlcnM6IHtcblx0XHRcInRleHQgc2NyaXB0XCI6IGZ1bmN0aW9uKCB0ZXh0ICkge1xuXHRcdFx0alF1ZXJ5Lmdsb2JhbEV2YWwoIHRleHQgKTtcblx0XHRcdHJldHVybiB0ZXh0O1xuXHRcdH1cblx0fVxufSApO1xuXG4vLyBIYW5kbGUgY2FjaGUncyBzcGVjaWFsIGNhc2UgYW5kIGNyb3NzRG9tYWluXG5qUXVlcnkuYWpheFByZWZpbHRlciggXCJzY3JpcHRcIiwgZnVuY3Rpb24oIHMgKSB7XG5cdGlmICggcy5jYWNoZSA9PT0gdW5kZWZpbmVkICkge1xuXHRcdHMuY2FjaGUgPSBmYWxzZTtcblx0fVxuXHRpZiAoIHMuY3Jvc3NEb21haW4gKSB7XG5cdFx0cy50eXBlID0gXCJHRVRcIjtcblx0fVxufSApO1xuXG4vLyBCaW5kIHNjcmlwdCB0YWcgaGFjayB0cmFuc3BvcnRcbmpRdWVyeS5hamF4VHJhbnNwb3J0KCBcInNjcmlwdFwiLCBmdW5jdGlvbiggcyApIHtcblxuXHQvLyBUaGlzIHRyYW5zcG9ydCBvbmx5IGRlYWxzIHdpdGggY3Jvc3MgZG9tYWluIG9yIGZvcmNlZC1ieS1hdHRycyByZXF1ZXN0c1xuXHRpZiAoIHMuY3Jvc3NEb21haW4gfHwgcy5zY3JpcHRBdHRycyApIHtcblx0XHR2YXIgc2NyaXB0LCBjYWxsYmFjaztcblx0XHRyZXR1cm4ge1xuXHRcdFx0c2VuZDogZnVuY3Rpb24oIF8sIGNvbXBsZXRlICkge1xuXHRcdFx0XHRzY3JpcHQgPSBqUXVlcnkoIFwiPHNjcmlwdD5cIiApXG5cdFx0XHRcdFx0LmF0dHIoIHMuc2NyaXB0QXR0cnMgfHwge30gKVxuXHRcdFx0XHRcdC5wcm9wKCB7IGNoYXJzZXQ6IHMuc2NyaXB0Q2hhcnNldCwgc3JjOiBzLnVybCB9IClcblx0XHRcdFx0XHQub24oIFwibG9hZCBlcnJvclwiLCBjYWxsYmFjayA9IGZ1bmN0aW9uKCBldnQgKSB7XG5cdFx0XHRcdFx0XHRzY3JpcHQucmVtb3ZlKCk7XG5cdFx0XHRcdFx0XHRjYWxsYmFjayA9IG51bGw7XG5cdFx0XHRcdFx0XHRpZiAoIGV2dCApIHtcblx0XHRcdFx0XHRcdFx0Y29tcGxldGUoIGV2dC50eXBlID09PSBcImVycm9yXCIgPyA0MDQgOiAyMDAsIGV2dC50eXBlICk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fSApO1xuXG5cdFx0XHRcdC8vIFVzZSBuYXRpdmUgRE9NIG1hbmlwdWxhdGlvbiB0byBhdm9pZCBvdXIgZG9tTWFuaXAgQUpBWCB0cmlja2VyeVxuXHRcdFx0XHRkb2N1bWVudC5oZWFkLmFwcGVuZENoaWxkKCBzY3JpcHRbIDAgXSApO1xuXHRcdFx0fSxcblx0XHRcdGFib3J0OiBmdW5jdGlvbigpIHtcblx0XHRcdFx0aWYgKCBjYWxsYmFjayApIHtcblx0XHRcdFx0XHRjYWxsYmFjaygpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fTtcblx0fVxufSApO1xuXG5cblxuXG52YXIgb2xkQ2FsbGJhY2tzID0gW10sXG5cdHJqc29ucCA9IC8oPSlcXD8oPz0mfCQpfFxcP1xcPy87XG5cbi8vIERlZmF1bHQganNvbnAgc2V0dGluZ3NcbmpRdWVyeS5hamF4U2V0dXAoIHtcblx0anNvbnA6IFwiY2FsbGJhY2tcIixcblx0anNvbnBDYWxsYmFjazogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIGNhbGxiYWNrID0gb2xkQ2FsbGJhY2tzLnBvcCgpIHx8ICggalF1ZXJ5LmV4cGFuZG8gKyBcIl9cIiArICggbm9uY2UuZ3VpZCsrICkgKTtcblx0XHR0aGlzWyBjYWxsYmFjayBdID0gdHJ1ZTtcblx0XHRyZXR1cm4gY2FsbGJhY2s7XG5cdH1cbn0gKTtcblxuLy8gRGV0ZWN0LCBub3JtYWxpemUgb3B0aW9ucyBhbmQgaW5zdGFsbCBjYWxsYmFja3MgZm9yIGpzb25wIHJlcXVlc3RzXG5qUXVlcnkuYWpheFByZWZpbHRlciggXCJqc29uIGpzb25wXCIsIGZ1bmN0aW9uKCBzLCBvcmlnaW5hbFNldHRpbmdzLCBqcVhIUiApIHtcblxuXHR2YXIgY2FsbGJhY2tOYW1lLCBvdmVyd3JpdHRlbiwgcmVzcG9uc2VDb250YWluZXIsXG5cdFx0anNvblByb3AgPSBzLmpzb25wICE9PSBmYWxzZSAmJiAoIHJqc29ucC50ZXN0KCBzLnVybCApID9cblx0XHRcdFwidXJsXCIgOlxuXHRcdFx0dHlwZW9mIHMuZGF0YSA9PT0gXCJzdHJpbmdcIiAmJlxuXHRcdFx0XHQoIHMuY29udGVudFR5cGUgfHwgXCJcIiApXG5cdFx0XHRcdFx0LmluZGV4T2YoIFwiYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkXCIgKSA9PT0gMCAmJlxuXHRcdFx0XHRyanNvbnAudGVzdCggcy5kYXRhICkgJiYgXCJkYXRhXCJcblx0XHQpO1xuXG5cdC8vIEhhbmRsZSBpZmYgdGhlIGV4cGVjdGVkIGRhdGEgdHlwZSBpcyBcImpzb25wXCIgb3Igd2UgaGF2ZSBhIHBhcmFtZXRlciB0byBzZXRcblx0aWYgKCBqc29uUHJvcCB8fCBzLmRhdGFUeXBlc1sgMCBdID09PSBcImpzb25wXCIgKSB7XG5cblx0XHQvLyBHZXQgY2FsbGJhY2sgbmFtZSwgcmVtZW1iZXJpbmcgcHJlZXhpc3RpbmcgdmFsdWUgYXNzb2NpYXRlZCB3aXRoIGl0XG5cdFx0Y2FsbGJhY2tOYW1lID0gcy5qc29ucENhbGxiYWNrID0gaXNGdW5jdGlvbiggcy5qc29ucENhbGxiYWNrICkgP1xuXHRcdFx0cy5qc29ucENhbGxiYWNrKCkgOlxuXHRcdFx0cy5qc29ucENhbGxiYWNrO1xuXG5cdFx0Ly8gSW5zZXJ0IGNhbGxiYWNrIGludG8gdXJsIG9yIGZvcm0gZGF0YVxuXHRcdGlmICgganNvblByb3AgKSB7XG5cdFx0XHRzWyBqc29uUHJvcCBdID0gc1sganNvblByb3AgXS5yZXBsYWNlKCByanNvbnAsIFwiJDFcIiArIGNhbGxiYWNrTmFtZSApO1xuXHRcdH0gZWxzZSBpZiAoIHMuanNvbnAgIT09IGZhbHNlICkge1xuXHRcdFx0cy51cmwgKz0gKCBycXVlcnkudGVzdCggcy51cmwgKSA/IFwiJlwiIDogXCI/XCIgKSArIHMuanNvbnAgKyBcIj1cIiArIGNhbGxiYWNrTmFtZTtcblx0XHR9XG5cblx0XHQvLyBVc2UgZGF0YSBjb252ZXJ0ZXIgdG8gcmV0cmlldmUganNvbiBhZnRlciBzY3JpcHQgZXhlY3V0aW9uXG5cdFx0cy5jb252ZXJ0ZXJzWyBcInNjcmlwdCBqc29uXCIgXSA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0aWYgKCAhcmVzcG9uc2VDb250YWluZXIgKSB7XG5cdFx0XHRcdGpRdWVyeS5lcnJvciggY2FsbGJhY2tOYW1lICsgXCIgd2FzIG5vdCBjYWxsZWRcIiApO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHJlc3BvbnNlQ29udGFpbmVyWyAwIF07XG5cdFx0fTtcblxuXHRcdC8vIEZvcmNlIGpzb24gZGF0YVR5cGVcblx0XHRzLmRhdGFUeXBlc1sgMCBdID0gXCJqc29uXCI7XG5cblx0XHQvLyBJbnN0YWxsIGNhbGxiYWNrXG5cdFx0b3ZlcndyaXR0ZW4gPSB3aW5kb3dbIGNhbGxiYWNrTmFtZSBdO1xuXHRcdHdpbmRvd1sgY2FsbGJhY2tOYW1lIF0gPSBmdW5jdGlvbigpIHtcblx0XHRcdHJlc3BvbnNlQ29udGFpbmVyID0gYXJndW1lbnRzO1xuXHRcdH07XG5cblx0XHQvLyBDbGVhbi11cCBmdW5jdGlvbiAoZmlyZXMgYWZ0ZXIgY29udmVydGVycylcblx0XHRqcVhIUi5hbHdheXMoIGZ1bmN0aW9uKCkge1xuXG5cdFx0XHQvLyBJZiBwcmV2aW91cyB2YWx1ZSBkaWRuJ3QgZXhpc3QgLSByZW1vdmUgaXRcblx0XHRcdGlmICggb3ZlcndyaXR0ZW4gPT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0alF1ZXJ5KCB3aW5kb3cgKS5yZW1vdmVQcm9wKCBjYWxsYmFja05hbWUgKTtcblxuXHRcdFx0Ly8gT3RoZXJ3aXNlIHJlc3RvcmUgcHJlZXhpc3RpbmcgdmFsdWVcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHdpbmRvd1sgY2FsbGJhY2tOYW1lIF0gPSBvdmVyd3JpdHRlbjtcblx0XHRcdH1cblxuXHRcdFx0Ly8gU2F2ZSBiYWNrIGFzIGZyZWVcblx0XHRcdGlmICggc1sgY2FsbGJhY2tOYW1lIF0gKSB7XG5cblx0XHRcdFx0Ly8gTWFrZSBzdXJlIHRoYXQgcmUtdXNpbmcgdGhlIG9wdGlvbnMgZG9lc24ndCBzY3JldyB0aGluZ3MgYXJvdW5kXG5cdFx0XHRcdHMuanNvbnBDYWxsYmFjayA9IG9yaWdpbmFsU2V0dGluZ3MuanNvbnBDYWxsYmFjaztcblxuXHRcdFx0XHQvLyBTYXZlIHRoZSBjYWxsYmFjayBuYW1lIGZvciBmdXR1cmUgdXNlXG5cdFx0XHRcdG9sZENhbGxiYWNrcy5wdXNoKCBjYWxsYmFja05hbWUgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gQ2FsbCBpZiBpdCB3YXMgYSBmdW5jdGlvbiBhbmQgd2UgaGF2ZSBhIHJlc3BvbnNlXG5cdFx0XHRpZiAoIHJlc3BvbnNlQ29udGFpbmVyICYmIGlzRnVuY3Rpb24oIG92ZXJ3cml0dGVuICkgKSB7XG5cdFx0XHRcdG92ZXJ3cml0dGVuKCByZXNwb25zZUNvbnRhaW5lclsgMCBdICk7XG5cdFx0XHR9XG5cblx0XHRcdHJlc3BvbnNlQ29udGFpbmVyID0gb3ZlcndyaXR0ZW4gPSB1bmRlZmluZWQ7XG5cdFx0fSApO1xuXG5cdFx0Ly8gRGVsZWdhdGUgdG8gc2NyaXB0XG5cdFx0cmV0dXJuIFwic2NyaXB0XCI7XG5cdH1cbn0gKTtcblxuXG5cblxuLy8gU3VwcG9ydDogU2FmYXJpIDggb25seVxuLy8gSW4gU2FmYXJpIDggZG9jdW1lbnRzIGNyZWF0ZWQgdmlhIGRvY3VtZW50LmltcGxlbWVudGF0aW9uLmNyZWF0ZUhUTUxEb2N1bWVudFxuLy8gY29sbGFwc2Ugc2libGluZyBmb3JtczogdGhlIHNlY29uZCBvbmUgYmVjb21lcyBhIGNoaWxkIG9mIHRoZSBmaXJzdCBvbmUuXG4vLyBCZWNhdXNlIG9mIHRoYXQsIHRoaXMgc2VjdXJpdHkgbWVhc3VyZSBoYXMgdG8gYmUgZGlzYWJsZWQgaW4gU2FmYXJpIDguXG4vLyBodHRwczovL2J1Z3Mud2Via2l0Lm9yZy9zaG93X2J1Zy5jZ2k/aWQ9MTM3MzM3XG5zdXBwb3J0LmNyZWF0ZUhUTUxEb2N1bWVudCA9ICggZnVuY3Rpb24oKSB7XG5cdHZhciBib2R5ID0gZG9jdW1lbnQuaW1wbGVtZW50YXRpb24uY3JlYXRlSFRNTERvY3VtZW50KCBcIlwiICkuYm9keTtcblx0Ym9keS5pbm5lckhUTUwgPSBcIjxmb3JtPjwvZm9ybT48Zm9ybT48L2Zvcm0+XCI7XG5cdHJldHVybiBib2R5LmNoaWxkTm9kZXMubGVuZ3RoID09PSAyO1xufSApKCk7XG5cblxuLy8gQXJndW1lbnQgXCJkYXRhXCIgc2hvdWxkIGJlIHN0cmluZyBvZiBodG1sXG4vLyBjb250ZXh0IChvcHRpb25hbCk6IElmIHNwZWNpZmllZCwgdGhlIGZyYWdtZW50IHdpbGwgYmUgY3JlYXRlZCBpbiB0aGlzIGNvbnRleHQsXG4vLyBkZWZhdWx0cyB0byBkb2N1bWVudFxuLy8ga2VlcFNjcmlwdHMgKG9wdGlvbmFsKTogSWYgdHJ1ZSwgd2lsbCBpbmNsdWRlIHNjcmlwdHMgcGFzc2VkIGluIHRoZSBodG1sIHN0cmluZ1xualF1ZXJ5LnBhcnNlSFRNTCA9IGZ1bmN0aW9uKCBkYXRhLCBjb250ZXh0LCBrZWVwU2NyaXB0cyApIHtcblx0aWYgKCB0eXBlb2YgZGF0YSAhPT0gXCJzdHJpbmdcIiApIHtcblx0XHRyZXR1cm4gW107XG5cdH1cblx0aWYgKCB0eXBlb2YgY29udGV4dCA9PT0gXCJib29sZWFuXCIgKSB7XG5cdFx0a2VlcFNjcmlwdHMgPSBjb250ZXh0O1xuXHRcdGNvbnRleHQgPSBmYWxzZTtcblx0fVxuXG5cdHZhciBiYXNlLCBwYXJzZWQsIHNjcmlwdHM7XG5cblx0aWYgKCAhY29udGV4dCApIHtcblxuXHRcdC8vIFN0b3Agc2NyaXB0cyBvciBpbmxpbmUgZXZlbnQgaGFuZGxlcnMgZnJvbSBiZWluZyBleGVjdXRlZCBpbW1lZGlhdGVseVxuXHRcdC8vIGJ5IHVzaW5nIGRvY3VtZW50LmltcGxlbWVudGF0aW9uXG5cdFx0aWYgKCBzdXBwb3J0LmNyZWF0ZUhUTUxEb2N1bWVudCApIHtcblx0XHRcdGNvbnRleHQgPSBkb2N1bWVudC5pbXBsZW1lbnRhdGlvbi5jcmVhdGVIVE1MRG9jdW1lbnQoIFwiXCIgKTtcblxuXHRcdFx0Ly8gU2V0IHRoZSBiYXNlIGhyZWYgZm9yIHRoZSBjcmVhdGVkIGRvY3VtZW50XG5cdFx0XHQvLyBzbyBhbnkgcGFyc2VkIGVsZW1lbnRzIHdpdGggVVJMc1xuXHRcdFx0Ly8gYXJlIGJhc2VkIG9uIHRoZSBkb2N1bWVudCdzIFVSTCAoZ2gtMjk2NSlcblx0XHRcdGJhc2UgPSBjb250ZXh0LmNyZWF0ZUVsZW1lbnQoIFwiYmFzZVwiICk7XG5cdFx0XHRiYXNlLmhyZWYgPSBkb2N1bWVudC5sb2NhdGlvbi5ocmVmO1xuXHRcdFx0Y29udGV4dC5oZWFkLmFwcGVuZENoaWxkKCBiYXNlICk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdGNvbnRleHQgPSBkb2N1bWVudDtcblx0XHR9XG5cdH1cblxuXHRwYXJzZWQgPSByc2luZ2xlVGFnLmV4ZWMoIGRhdGEgKTtcblx0c2NyaXB0cyA9ICFrZWVwU2NyaXB0cyAmJiBbXTtcblxuXHQvLyBTaW5nbGUgdGFnXG5cdGlmICggcGFyc2VkICkge1xuXHRcdHJldHVybiBbIGNvbnRleHQuY3JlYXRlRWxlbWVudCggcGFyc2VkWyAxIF0gKSBdO1xuXHR9XG5cblx0cGFyc2VkID0gYnVpbGRGcmFnbWVudCggWyBkYXRhIF0sIGNvbnRleHQsIHNjcmlwdHMgKTtcblxuXHRpZiAoIHNjcmlwdHMgJiYgc2NyaXB0cy5sZW5ndGggKSB7XG5cdFx0alF1ZXJ5KCBzY3JpcHRzICkucmVtb3ZlKCk7XG5cdH1cblxuXHRyZXR1cm4galF1ZXJ5Lm1lcmdlKCBbXSwgcGFyc2VkLmNoaWxkTm9kZXMgKTtcbn07XG5cblxuLyoqXG4gKiBMb2FkIGEgdXJsIGludG8gYSBwYWdlXG4gKi9cbmpRdWVyeS5mbi5sb2FkID0gZnVuY3Rpb24oIHVybCwgcGFyYW1zLCBjYWxsYmFjayApIHtcblx0dmFyIHNlbGVjdG9yLCB0eXBlLCByZXNwb25zZSxcblx0XHRzZWxmID0gdGhpcyxcblx0XHRvZmYgPSB1cmwuaW5kZXhPZiggXCIgXCIgKTtcblxuXHRpZiAoIG9mZiA+IC0xICkge1xuXHRcdHNlbGVjdG9yID0gc3RyaXBBbmRDb2xsYXBzZSggdXJsLnNsaWNlKCBvZmYgKSApO1xuXHRcdHVybCA9IHVybC5zbGljZSggMCwgb2ZmICk7XG5cdH1cblxuXHQvLyBJZiBpdCdzIGEgZnVuY3Rpb25cblx0aWYgKCBpc0Z1bmN0aW9uKCBwYXJhbXMgKSApIHtcblxuXHRcdC8vIFdlIGFzc3VtZSB0aGF0IGl0J3MgdGhlIGNhbGxiYWNrXG5cdFx0Y2FsbGJhY2sgPSBwYXJhbXM7XG5cdFx0cGFyYW1zID0gdW5kZWZpbmVkO1xuXG5cdC8vIE90aGVyd2lzZSwgYnVpbGQgYSBwYXJhbSBzdHJpbmdcblx0fSBlbHNlIGlmICggcGFyYW1zICYmIHR5cGVvZiBwYXJhbXMgPT09IFwib2JqZWN0XCIgKSB7XG5cdFx0dHlwZSA9IFwiUE9TVFwiO1xuXHR9XG5cblx0Ly8gSWYgd2UgaGF2ZSBlbGVtZW50cyB0byBtb2RpZnksIG1ha2UgdGhlIHJlcXVlc3Rcblx0aWYgKCBzZWxmLmxlbmd0aCA+IDAgKSB7XG5cdFx0alF1ZXJ5LmFqYXgoIHtcblx0XHRcdHVybDogdXJsLFxuXG5cdFx0XHQvLyBJZiBcInR5cGVcIiB2YXJpYWJsZSBpcyB1bmRlZmluZWQsIHRoZW4gXCJHRVRcIiBtZXRob2Qgd2lsbCBiZSB1c2VkLlxuXHRcdFx0Ly8gTWFrZSB2YWx1ZSBvZiB0aGlzIGZpZWxkIGV4cGxpY2l0IHNpbmNlXG5cdFx0XHQvLyB1c2VyIGNhbiBvdmVycmlkZSBpdCB0aHJvdWdoIGFqYXhTZXR1cCBtZXRob2Rcblx0XHRcdHR5cGU6IHR5cGUgfHwgXCJHRVRcIixcblx0XHRcdGRhdGFUeXBlOiBcImh0bWxcIixcblx0XHRcdGRhdGE6IHBhcmFtc1xuXHRcdH0gKS5kb25lKCBmdW5jdGlvbiggcmVzcG9uc2VUZXh0ICkge1xuXG5cdFx0XHQvLyBTYXZlIHJlc3BvbnNlIGZvciB1c2UgaW4gY29tcGxldGUgY2FsbGJhY2tcblx0XHRcdHJlc3BvbnNlID0gYXJndW1lbnRzO1xuXG5cdFx0XHRzZWxmLmh0bWwoIHNlbGVjdG9yID9cblxuXHRcdFx0XHQvLyBJZiBhIHNlbGVjdG9yIHdhcyBzcGVjaWZpZWQsIGxvY2F0ZSB0aGUgcmlnaHQgZWxlbWVudHMgaW4gYSBkdW1teSBkaXZcblx0XHRcdFx0Ly8gRXhjbHVkZSBzY3JpcHRzIHRvIGF2b2lkIElFICdQZXJtaXNzaW9uIERlbmllZCcgZXJyb3JzXG5cdFx0XHRcdGpRdWVyeSggXCI8ZGl2PlwiICkuYXBwZW5kKCBqUXVlcnkucGFyc2VIVE1MKCByZXNwb25zZVRleHQgKSApLmZpbmQoIHNlbGVjdG9yICkgOlxuXG5cdFx0XHRcdC8vIE90aGVyd2lzZSB1c2UgdGhlIGZ1bGwgcmVzdWx0XG5cdFx0XHRcdHJlc3BvbnNlVGV4dCApO1xuXG5cdFx0Ly8gSWYgdGhlIHJlcXVlc3Qgc3VjY2VlZHMsIHRoaXMgZnVuY3Rpb24gZ2V0cyBcImRhdGFcIiwgXCJzdGF0dXNcIiwgXCJqcVhIUlwiXG5cdFx0Ly8gYnV0IHRoZXkgYXJlIGlnbm9yZWQgYmVjYXVzZSByZXNwb25zZSB3YXMgc2V0IGFib3ZlLlxuXHRcdC8vIElmIGl0IGZhaWxzLCB0aGlzIGZ1bmN0aW9uIGdldHMgXCJqcVhIUlwiLCBcInN0YXR1c1wiLCBcImVycm9yXCJcblx0XHR9ICkuYWx3YXlzKCBjYWxsYmFjayAmJiBmdW5jdGlvbigganFYSFIsIHN0YXR1cyApIHtcblx0XHRcdHNlbGYuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGNhbGxiYWNrLmFwcGx5KCB0aGlzLCByZXNwb25zZSB8fCBbIGpxWEhSLnJlc3BvbnNlVGV4dCwgc3RhdHVzLCBqcVhIUiBdICk7XG5cdFx0XHR9ICk7XG5cdFx0fSApO1xuXHR9XG5cblx0cmV0dXJuIHRoaXM7XG59O1xuXG5cblxuXG5qUXVlcnkuZXhwci5wc2V1ZG9zLmFuaW1hdGVkID0gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdHJldHVybiBqUXVlcnkuZ3JlcCggalF1ZXJ5LnRpbWVycywgZnVuY3Rpb24oIGZuICkge1xuXHRcdHJldHVybiBlbGVtID09PSBmbi5lbGVtO1xuXHR9ICkubGVuZ3RoO1xufTtcblxuXG5cblxualF1ZXJ5Lm9mZnNldCA9IHtcblx0c2V0T2Zmc2V0OiBmdW5jdGlvbiggZWxlbSwgb3B0aW9ucywgaSApIHtcblx0XHR2YXIgY3VyUG9zaXRpb24sIGN1ckxlZnQsIGN1ckNTU1RvcCwgY3VyVG9wLCBjdXJPZmZzZXQsIGN1ckNTU0xlZnQsIGNhbGN1bGF0ZVBvc2l0aW9uLFxuXHRcdFx0cG9zaXRpb24gPSBqUXVlcnkuY3NzKCBlbGVtLCBcInBvc2l0aW9uXCIgKSxcblx0XHRcdGN1ckVsZW0gPSBqUXVlcnkoIGVsZW0gKSxcblx0XHRcdHByb3BzID0ge307XG5cblx0XHQvLyBTZXQgcG9zaXRpb24gZmlyc3QsIGluLWNhc2UgdG9wL2xlZnQgYXJlIHNldCBldmVuIG9uIHN0YXRpYyBlbGVtXG5cdFx0aWYgKCBwb3NpdGlvbiA9PT0gXCJzdGF0aWNcIiApIHtcblx0XHRcdGVsZW0uc3R5bGUucG9zaXRpb24gPSBcInJlbGF0aXZlXCI7XG5cdFx0fVxuXG5cdFx0Y3VyT2Zmc2V0ID0gY3VyRWxlbS5vZmZzZXQoKTtcblx0XHRjdXJDU1NUb3AgPSBqUXVlcnkuY3NzKCBlbGVtLCBcInRvcFwiICk7XG5cdFx0Y3VyQ1NTTGVmdCA9IGpRdWVyeS5jc3MoIGVsZW0sIFwibGVmdFwiICk7XG5cdFx0Y2FsY3VsYXRlUG9zaXRpb24gPSAoIHBvc2l0aW9uID09PSBcImFic29sdXRlXCIgfHwgcG9zaXRpb24gPT09IFwiZml4ZWRcIiApICYmXG5cdFx0XHQoIGN1ckNTU1RvcCArIGN1ckNTU0xlZnQgKS5pbmRleE9mKCBcImF1dG9cIiApID4gLTE7XG5cblx0XHQvLyBOZWVkIHRvIGJlIGFibGUgdG8gY2FsY3VsYXRlIHBvc2l0aW9uIGlmIGVpdGhlclxuXHRcdC8vIHRvcCBvciBsZWZ0IGlzIGF1dG8gYW5kIHBvc2l0aW9uIGlzIGVpdGhlciBhYnNvbHV0ZSBvciBmaXhlZFxuXHRcdGlmICggY2FsY3VsYXRlUG9zaXRpb24gKSB7XG5cdFx0XHRjdXJQb3NpdGlvbiA9IGN1ckVsZW0ucG9zaXRpb24oKTtcblx0XHRcdGN1clRvcCA9IGN1clBvc2l0aW9uLnRvcDtcblx0XHRcdGN1ckxlZnQgPSBjdXJQb3NpdGlvbi5sZWZ0O1xuXG5cdFx0fSBlbHNlIHtcblx0XHRcdGN1clRvcCA9IHBhcnNlRmxvYXQoIGN1ckNTU1RvcCApIHx8IDA7XG5cdFx0XHRjdXJMZWZ0ID0gcGFyc2VGbG9hdCggY3VyQ1NTTGVmdCApIHx8IDA7XG5cdFx0fVxuXG5cdFx0aWYgKCBpc0Z1bmN0aW9uKCBvcHRpb25zICkgKSB7XG5cblx0XHRcdC8vIFVzZSBqUXVlcnkuZXh0ZW5kIGhlcmUgdG8gYWxsb3cgbW9kaWZpY2F0aW9uIG9mIGNvb3JkaW5hdGVzIGFyZ3VtZW50IChnaC0xODQ4KVxuXHRcdFx0b3B0aW9ucyA9IG9wdGlvbnMuY2FsbCggZWxlbSwgaSwgalF1ZXJ5LmV4dGVuZCgge30sIGN1ck9mZnNldCApICk7XG5cdFx0fVxuXG5cdFx0aWYgKCBvcHRpb25zLnRvcCAhPSBudWxsICkge1xuXHRcdFx0cHJvcHMudG9wID0gKCBvcHRpb25zLnRvcCAtIGN1ck9mZnNldC50b3AgKSArIGN1clRvcDtcblx0XHR9XG5cdFx0aWYgKCBvcHRpb25zLmxlZnQgIT0gbnVsbCApIHtcblx0XHRcdHByb3BzLmxlZnQgPSAoIG9wdGlvbnMubGVmdCAtIGN1ck9mZnNldC5sZWZ0ICkgKyBjdXJMZWZ0O1xuXHRcdH1cblxuXHRcdGlmICggXCJ1c2luZ1wiIGluIG9wdGlvbnMgKSB7XG5cdFx0XHRvcHRpb25zLnVzaW5nLmNhbGwoIGVsZW0sIHByb3BzICk7XG5cblx0XHR9IGVsc2Uge1xuXHRcdFx0aWYgKCB0eXBlb2YgcHJvcHMudG9wID09PSBcIm51bWJlclwiICkge1xuXHRcdFx0XHRwcm9wcy50b3AgKz0gXCJweFwiO1xuXHRcdFx0fVxuXHRcdFx0aWYgKCB0eXBlb2YgcHJvcHMubGVmdCA9PT0gXCJudW1iZXJcIiApIHtcblx0XHRcdFx0cHJvcHMubGVmdCArPSBcInB4XCI7XG5cdFx0XHR9XG5cdFx0XHRjdXJFbGVtLmNzcyggcHJvcHMgKTtcblx0XHR9XG5cdH1cbn07XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblxuXHQvLyBvZmZzZXQoKSByZWxhdGVzIGFuIGVsZW1lbnQncyBib3JkZXIgYm94IHRvIHRoZSBkb2N1bWVudCBvcmlnaW5cblx0b2Zmc2V0OiBmdW5jdGlvbiggb3B0aW9ucyApIHtcblxuXHRcdC8vIFByZXNlcnZlIGNoYWluaW5nIGZvciBzZXR0ZXJcblx0XHRpZiAoIGFyZ3VtZW50cy5sZW5ndGggKSB7XG5cdFx0XHRyZXR1cm4gb3B0aW9ucyA9PT0gdW5kZWZpbmVkID9cblx0XHRcdFx0dGhpcyA6XG5cdFx0XHRcdHRoaXMuZWFjaCggZnVuY3Rpb24oIGkgKSB7XG5cdFx0XHRcdFx0alF1ZXJ5Lm9mZnNldC5zZXRPZmZzZXQoIHRoaXMsIG9wdGlvbnMsIGkgKTtcblx0XHRcdFx0fSApO1xuXHRcdH1cblxuXHRcdHZhciByZWN0LCB3aW4sXG5cdFx0XHRlbGVtID0gdGhpc1sgMCBdO1xuXG5cdFx0aWYgKCAhZWxlbSApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHQvLyBSZXR1cm4gemVyb3MgZm9yIGRpc2Nvbm5lY3RlZCBhbmQgaGlkZGVuIChkaXNwbGF5OiBub25lKSBlbGVtZW50cyAoZ2gtMjMxMClcblx0XHQvLyBTdXBwb3J0OiBJRSA8PTExIG9ubHlcblx0XHQvLyBSdW5uaW5nIGdldEJvdW5kaW5nQ2xpZW50UmVjdCBvbiBhXG5cdFx0Ly8gZGlzY29ubmVjdGVkIG5vZGUgaW4gSUUgdGhyb3dzIGFuIGVycm9yXG5cdFx0aWYgKCAhZWxlbS5nZXRDbGllbnRSZWN0cygpLmxlbmd0aCApIHtcblx0XHRcdHJldHVybiB7IHRvcDogMCwgbGVmdDogMCB9O1xuXHRcdH1cblxuXHRcdC8vIEdldCBkb2N1bWVudC1yZWxhdGl2ZSBwb3NpdGlvbiBieSBhZGRpbmcgdmlld3BvcnQgc2Nyb2xsIHRvIHZpZXdwb3J0LXJlbGF0aXZlIGdCQ1Jcblx0XHRyZWN0ID0gZWxlbS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcblx0XHR3aW4gPSBlbGVtLm93bmVyRG9jdW1lbnQuZGVmYXVsdFZpZXc7XG5cdFx0cmV0dXJuIHtcblx0XHRcdHRvcDogcmVjdC50b3AgKyB3aW4ucGFnZVlPZmZzZXQsXG5cdFx0XHRsZWZ0OiByZWN0LmxlZnQgKyB3aW4ucGFnZVhPZmZzZXRcblx0XHR9O1xuXHR9LFxuXG5cdC8vIHBvc2l0aW9uKCkgcmVsYXRlcyBhbiBlbGVtZW50J3MgbWFyZ2luIGJveCB0byBpdHMgb2Zmc2V0IHBhcmVudCdzIHBhZGRpbmcgYm94XG5cdC8vIFRoaXMgY29ycmVzcG9uZHMgdG8gdGhlIGJlaGF2aW9yIG9mIENTUyBhYnNvbHV0ZSBwb3NpdGlvbmluZ1xuXHRwb3NpdGlvbjogZnVuY3Rpb24oKSB7XG5cdFx0aWYgKCAhdGhpc1sgMCBdICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdHZhciBvZmZzZXRQYXJlbnQsIG9mZnNldCwgZG9jLFxuXHRcdFx0ZWxlbSA9IHRoaXNbIDAgXSxcblx0XHRcdHBhcmVudE9mZnNldCA9IHsgdG9wOiAwLCBsZWZ0OiAwIH07XG5cblx0XHQvLyBwb3NpdGlvbjpmaXhlZCBlbGVtZW50cyBhcmUgb2Zmc2V0IGZyb20gdGhlIHZpZXdwb3J0LCB3aGljaCBpdHNlbGYgYWx3YXlzIGhhcyB6ZXJvIG9mZnNldFxuXHRcdGlmICggalF1ZXJ5LmNzcyggZWxlbSwgXCJwb3NpdGlvblwiICkgPT09IFwiZml4ZWRcIiApIHtcblxuXHRcdFx0Ly8gQXNzdW1lIHBvc2l0aW9uOmZpeGVkIGltcGxpZXMgYXZhaWxhYmlsaXR5IG9mIGdldEJvdW5kaW5nQ2xpZW50UmVjdFxuXHRcdFx0b2Zmc2V0ID0gZWxlbS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcblxuXHRcdH0gZWxzZSB7XG5cdFx0XHRvZmZzZXQgPSB0aGlzLm9mZnNldCgpO1xuXG5cdFx0XHQvLyBBY2NvdW50IGZvciB0aGUgKnJlYWwqIG9mZnNldCBwYXJlbnQsIHdoaWNoIGNhbiBiZSB0aGUgZG9jdW1lbnQgb3IgaXRzIHJvb3QgZWxlbWVudFxuXHRcdFx0Ly8gd2hlbiBhIHN0YXRpY2FsbHkgcG9zaXRpb25lZCBlbGVtZW50IGlzIGlkZW50aWZpZWRcblx0XHRcdGRvYyA9IGVsZW0ub3duZXJEb2N1bWVudDtcblx0XHRcdG9mZnNldFBhcmVudCA9IGVsZW0ub2Zmc2V0UGFyZW50IHx8IGRvYy5kb2N1bWVudEVsZW1lbnQ7XG5cdFx0XHR3aGlsZSAoIG9mZnNldFBhcmVudCAmJlxuXHRcdFx0XHQoIG9mZnNldFBhcmVudCA9PT0gZG9jLmJvZHkgfHwgb2Zmc2V0UGFyZW50ID09PSBkb2MuZG9jdW1lbnRFbGVtZW50ICkgJiZcblx0XHRcdFx0alF1ZXJ5LmNzcyggb2Zmc2V0UGFyZW50LCBcInBvc2l0aW9uXCIgKSA9PT0gXCJzdGF0aWNcIiApIHtcblxuXHRcdFx0XHRvZmZzZXRQYXJlbnQgPSBvZmZzZXRQYXJlbnQucGFyZW50Tm9kZTtcblx0XHRcdH1cblx0XHRcdGlmICggb2Zmc2V0UGFyZW50ICYmIG9mZnNldFBhcmVudCAhPT0gZWxlbSAmJiBvZmZzZXRQYXJlbnQubm9kZVR5cGUgPT09IDEgKSB7XG5cblx0XHRcdFx0Ly8gSW5jb3Jwb3JhdGUgYm9yZGVycyBpbnRvIGl0cyBvZmZzZXQsIHNpbmNlIHRoZXkgYXJlIG91dHNpZGUgaXRzIGNvbnRlbnQgb3JpZ2luXG5cdFx0XHRcdHBhcmVudE9mZnNldCA9IGpRdWVyeSggb2Zmc2V0UGFyZW50ICkub2Zmc2V0KCk7XG5cdFx0XHRcdHBhcmVudE9mZnNldC50b3AgKz0galF1ZXJ5LmNzcyggb2Zmc2V0UGFyZW50LCBcImJvcmRlclRvcFdpZHRoXCIsIHRydWUgKTtcblx0XHRcdFx0cGFyZW50T2Zmc2V0LmxlZnQgKz0galF1ZXJ5LmNzcyggb2Zmc2V0UGFyZW50LCBcImJvcmRlckxlZnRXaWR0aFwiLCB0cnVlICk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gU3VidHJhY3QgcGFyZW50IG9mZnNldHMgYW5kIGVsZW1lbnQgbWFyZ2luc1xuXHRcdHJldHVybiB7XG5cdFx0XHR0b3A6IG9mZnNldC50b3AgLSBwYXJlbnRPZmZzZXQudG9wIC0galF1ZXJ5LmNzcyggZWxlbSwgXCJtYXJnaW5Ub3BcIiwgdHJ1ZSApLFxuXHRcdFx0bGVmdDogb2Zmc2V0LmxlZnQgLSBwYXJlbnRPZmZzZXQubGVmdCAtIGpRdWVyeS5jc3MoIGVsZW0sIFwibWFyZ2luTGVmdFwiLCB0cnVlIClcblx0XHR9O1xuXHR9LFxuXG5cdC8vIFRoaXMgbWV0aG9kIHdpbGwgcmV0dXJuIGRvY3VtZW50RWxlbWVudCBpbiB0aGUgZm9sbG93aW5nIGNhc2VzOlxuXHQvLyAxKSBGb3IgdGhlIGVsZW1lbnQgaW5zaWRlIHRoZSBpZnJhbWUgd2l0aG91dCBvZmZzZXRQYXJlbnQsIHRoaXMgbWV0aG9kIHdpbGwgcmV0dXJuXG5cdC8vICAgIGRvY3VtZW50RWxlbWVudCBvZiB0aGUgcGFyZW50IHdpbmRvd1xuXHQvLyAyKSBGb3IgdGhlIGhpZGRlbiBvciBkZXRhY2hlZCBlbGVtZW50XG5cdC8vIDMpIEZvciBib2R5IG9yIGh0bWwgZWxlbWVudCwgaS5lLiBpbiBjYXNlIG9mIHRoZSBodG1sIG5vZGUgLSBpdCB3aWxsIHJldHVybiBpdHNlbGZcblx0Ly9cblx0Ly8gYnV0IHRob3NlIGV4Y2VwdGlvbnMgd2VyZSBuZXZlciBwcmVzZW50ZWQgYXMgYSByZWFsIGxpZmUgdXNlLWNhc2VzXG5cdC8vIGFuZCBtaWdodCBiZSBjb25zaWRlcmVkIGFzIG1vcmUgcHJlZmVyYWJsZSByZXN1bHRzLlxuXHQvL1xuXHQvLyBUaGlzIGxvZ2ljLCBob3dldmVyLCBpcyBub3QgZ3VhcmFudGVlZCBhbmQgY2FuIGNoYW5nZSBhdCBhbnkgcG9pbnQgaW4gdGhlIGZ1dHVyZVxuXHRvZmZzZXRQYXJlbnQ6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiB0aGlzLm1hcCggZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgb2Zmc2V0UGFyZW50ID0gdGhpcy5vZmZzZXRQYXJlbnQ7XG5cblx0XHRcdHdoaWxlICggb2Zmc2V0UGFyZW50ICYmIGpRdWVyeS5jc3MoIG9mZnNldFBhcmVudCwgXCJwb3NpdGlvblwiICkgPT09IFwic3RhdGljXCIgKSB7XG5cdFx0XHRcdG9mZnNldFBhcmVudCA9IG9mZnNldFBhcmVudC5vZmZzZXRQYXJlbnQ7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBvZmZzZXRQYXJlbnQgfHwgZG9jdW1lbnRFbGVtZW50O1xuXHRcdH0gKTtcblx0fVxufSApO1xuXG4vLyBDcmVhdGUgc2Nyb2xsTGVmdCBhbmQgc2Nyb2xsVG9wIG1ldGhvZHNcbmpRdWVyeS5lYWNoKCB7IHNjcm9sbExlZnQ6IFwicGFnZVhPZmZzZXRcIiwgc2Nyb2xsVG9wOiBcInBhZ2VZT2Zmc2V0XCIgfSwgZnVuY3Rpb24oIG1ldGhvZCwgcHJvcCApIHtcblx0dmFyIHRvcCA9IFwicGFnZVlPZmZzZXRcIiA9PT0gcHJvcDtcblxuXHRqUXVlcnkuZm5bIG1ldGhvZCBdID0gZnVuY3Rpb24oIHZhbCApIHtcblx0XHRyZXR1cm4gYWNjZXNzKCB0aGlzLCBmdW5jdGlvbiggZWxlbSwgbWV0aG9kLCB2YWwgKSB7XG5cblx0XHRcdC8vIENvYWxlc2NlIGRvY3VtZW50cyBhbmQgd2luZG93c1xuXHRcdFx0dmFyIHdpbjtcblx0XHRcdGlmICggaXNXaW5kb3coIGVsZW0gKSApIHtcblx0XHRcdFx0d2luID0gZWxlbTtcblx0XHRcdH0gZWxzZSBpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDkgKSB7XG5cdFx0XHRcdHdpbiA9IGVsZW0uZGVmYXVsdFZpZXc7XG5cdFx0XHR9XG5cblx0XHRcdGlmICggdmFsID09PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdHJldHVybiB3aW4gPyB3aW5bIHByb3AgXSA6IGVsZW1bIG1ldGhvZCBdO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIHdpbiApIHtcblx0XHRcdFx0d2luLnNjcm9sbFRvKFxuXHRcdFx0XHRcdCF0b3AgPyB2YWwgOiB3aW4ucGFnZVhPZmZzZXQsXG5cdFx0XHRcdFx0dG9wID8gdmFsIDogd2luLnBhZ2VZT2Zmc2V0XG5cdFx0XHRcdCk7XG5cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGVsZW1bIG1ldGhvZCBdID0gdmFsO1xuXHRcdFx0fVxuXHRcdH0sIG1ldGhvZCwgdmFsLCBhcmd1bWVudHMubGVuZ3RoICk7XG5cdH07XG59ICk7XG5cbi8vIFN1cHBvcnQ6IFNhZmFyaSA8PTcgLSA5LjEsIENocm9tZSA8PTM3IC0gNDlcbi8vIEFkZCB0aGUgdG9wL2xlZnQgY3NzSG9va3MgdXNpbmcgalF1ZXJ5LmZuLnBvc2l0aW9uXG4vLyBXZWJraXQgYnVnOiBodHRwczovL2J1Z3Mud2Via2l0Lm9yZy9zaG93X2J1Zy5jZ2k/aWQ9MjkwODRcbi8vIEJsaW5rIGJ1ZzogaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL2Nocm9taXVtL2lzc3Vlcy9kZXRhaWw/aWQ9NTg5MzQ3XG4vLyBnZXRDb21wdXRlZFN0eWxlIHJldHVybnMgcGVyY2VudCB3aGVuIHNwZWNpZmllZCBmb3IgdG9wL2xlZnQvYm90dG9tL3JpZ2h0O1xuLy8gcmF0aGVyIHRoYW4gbWFrZSB0aGUgY3NzIG1vZHVsZSBkZXBlbmQgb24gdGhlIG9mZnNldCBtb2R1bGUsIGp1c3QgY2hlY2sgZm9yIGl0IGhlcmVcbmpRdWVyeS5lYWNoKCBbIFwidG9wXCIsIFwibGVmdFwiIF0sIGZ1bmN0aW9uKCBfaSwgcHJvcCApIHtcblx0alF1ZXJ5LmNzc0hvb2tzWyBwcm9wIF0gPSBhZGRHZXRIb29rSWYoIHN1cHBvcnQucGl4ZWxQb3NpdGlvbixcblx0XHRmdW5jdGlvbiggZWxlbSwgY29tcHV0ZWQgKSB7XG5cdFx0XHRpZiAoIGNvbXB1dGVkICkge1xuXHRcdFx0XHRjb21wdXRlZCA9IGN1ckNTUyggZWxlbSwgcHJvcCApO1xuXG5cdFx0XHRcdC8vIElmIGN1ckNTUyByZXR1cm5zIHBlcmNlbnRhZ2UsIGZhbGxiYWNrIHRvIG9mZnNldFxuXHRcdFx0XHRyZXR1cm4gcm51bW5vbnB4LnRlc3QoIGNvbXB1dGVkICkgP1xuXHRcdFx0XHRcdGpRdWVyeSggZWxlbSApLnBvc2l0aW9uKClbIHByb3AgXSArIFwicHhcIiA6XG5cdFx0XHRcdFx0Y29tcHV0ZWQ7XG5cdFx0XHR9XG5cdFx0fVxuXHQpO1xufSApO1xuXG5cbi8vIENyZWF0ZSBpbm5lckhlaWdodCwgaW5uZXJXaWR0aCwgaGVpZ2h0LCB3aWR0aCwgb3V0ZXJIZWlnaHQgYW5kIG91dGVyV2lkdGggbWV0aG9kc1xualF1ZXJ5LmVhY2goIHsgSGVpZ2h0OiBcImhlaWdodFwiLCBXaWR0aDogXCJ3aWR0aFwiIH0sIGZ1bmN0aW9uKCBuYW1lLCB0eXBlICkge1xuXHRqUXVlcnkuZWFjaCggeyBwYWRkaW5nOiBcImlubmVyXCIgKyBuYW1lLCBjb250ZW50OiB0eXBlLCBcIlwiOiBcIm91dGVyXCIgKyBuYW1lIH0sXG5cdFx0ZnVuY3Rpb24oIGRlZmF1bHRFeHRyYSwgZnVuY05hbWUgKSB7XG5cblx0XHQvLyBNYXJnaW4gaXMgb25seSBmb3Igb3V0ZXJIZWlnaHQsIG91dGVyV2lkdGhcblx0XHRqUXVlcnkuZm5bIGZ1bmNOYW1lIF0gPSBmdW5jdGlvbiggbWFyZ2luLCB2YWx1ZSApIHtcblx0XHRcdHZhciBjaGFpbmFibGUgPSBhcmd1bWVudHMubGVuZ3RoICYmICggZGVmYXVsdEV4dHJhIHx8IHR5cGVvZiBtYXJnaW4gIT09IFwiYm9vbGVhblwiICksXG5cdFx0XHRcdGV4dHJhID0gZGVmYXVsdEV4dHJhIHx8ICggbWFyZ2luID09PSB0cnVlIHx8IHZhbHVlID09PSB0cnVlID8gXCJtYXJnaW5cIiA6IFwiYm9yZGVyXCIgKTtcblxuXHRcdFx0cmV0dXJuIGFjY2VzcyggdGhpcywgZnVuY3Rpb24oIGVsZW0sIHR5cGUsIHZhbHVlICkge1xuXHRcdFx0XHR2YXIgZG9jO1xuXG5cdFx0XHRcdGlmICggaXNXaW5kb3coIGVsZW0gKSApIHtcblxuXHRcdFx0XHRcdC8vICQoIHdpbmRvdyApLm91dGVyV2lkdGgvSGVpZ2h0IHJldHVybiB3L2ggaW5jbHVkaW5nIHNjcm9sbGJhcnMgKGdoLTE3MjkpXG5cdFx0XHRcdFx0cmV0dXJuIGZ1bmNOYW1lLmluZGV4T2YoIFwib3V0ZXJcIiApID09PSAwID9cblx0XHRcdFx0XHRcdGVsZW1bIFwiaW5uZXJcIiArIG5hbWUgXSA6XG5cdFx0XHRcdFx0XHRlbGVtLmRvY3VtZW50LmRvY3VtZW50RWxlbWVudFsgXCJjbGllbnRcIiArIG5hbWUgXTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIEdldCBkb2N1bWVudCB3aWR0aCBvciBoZWlnaHRcblx0XHRcdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSA5ICkge1xuXHRcdFx0XHRcdGRvYyA9IGVsZW0uZG9jdW1lbnRFbGVtZW50O1xuXG5cdFx0XHRcdFx0Ly8gRWl0aGVyIHNjcm9sbFtXaWR0aC9IZWlnaHRdIG9yIG9mZnNldFtXaWR0aC9IZWlnaHRdIG9yIGNsaWVudFtXaWR0aC9IZWlnaHRdLFxuXHRcdFx0XHRcdC8vIHdoaWNoZXZlciBpcyBncmVhdGVzdFxuXHRcdFx0XHRcdHJldHVybiBNYXRoLm1heChcblx0XHRcdFx0XHRcdGVsZW0uYm9keVsgXCJzY3JvbGxcIiArIG5hbWUgXSwgZG9jWyBcInNjcm9sbFwiICsgbmFtZSBdLFxuXHRcdFx0XHRcdFx0ZWxlbS5ib2R5WyBcIm9mZnNldFwiICsgbmFtZSBdLCBkb2NbIFwib2Zmc2V0XCIgKyBuYW1lIF0sXG5cdFx0XHRcdFx0XHRkb2NbIFwiY2xpZW50XCIgKyBuYW1lIF1cblx0XHRcdFx0XHQpO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0cmV0dXJuIHZhbHVlID09PSB1bmRlZmluZWQgP1xuXG5cdFx0XHRcdFx0Ly8gR2V0IHdpZHRoIG9yIGhlaWdodCBvbiB0aGUgZWxlbWVudCwgcmVxdWVzdGluZyBidXQgbm90IGZvcmNpbmcgcGFyc2VGbG9hdFxuXHRcdFx0XHRcdGpRdWVyeS5jc3MoIGVsZW0sIHR5cGUsIGV4dHJhICkgOlxuXG5cdFx0XHRcdFx0Ly8gU2V0IHdpZHRoIG9yIGhlaWdodCBvbiB0aGUgZWxlbWVudFxuXHRcdFx0XHRcdGpRdWVyeS5zdHlsZSggZWxlbSwgdHlwZSwgdmFsdWUsIGV4dHJhICk7XG5cdFx0XHR9LCB0eXBlLCBjaGFpbmFibGUgPyBtYXJnaW4gOiB1bmRlZmluZWQsIGNoYWluYWJsZSApO1xuXHRcdH07XG5cdH0gKTtcbn0gKTtcblxuXG5qUXVlcnkuZWFjaCggW1xuXHRcImFqYXhTdGFydFwiLFxuXHRcImFqYXhTdG9wXCIsXG5cdFwiYWpheENvbXBsZXRlXCIsXG5cdFwiYWpheEVycm9yXCIsXG5cdFwiYWpheFN1Y2Nlc3NcIixcblx0XCJhamF4U2VuZFwiXG5dLCBmdW5jdGlvbiggX2ksIHR5cGUgKSB7XG5cdGpRdWVyeS5mblsgdHlwZSBdID0gZnVuY3Rpb24oIGZuICkge1xuXHRcdHJldHVybiB0aGlzLm9uKCB0eXBlLCBmbiApO1xuXHR9O1xufSApO1xuXG5cblxuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cblx0YmluZDogZnVuY3Rpb24oIHR5cGVzLCBkYXRhLCBmbiApIHtcblx0XHRyZXR1cm4gdGhpcy5vbiggdHlwZXMsIG51bGwsIGRhdGEsIGZuICk7XG5cdH0sXG5cdHVuYmluZDogZnVuY3Rpb24oIHR5cGVzLCBmbiApIHtcblx0XHRyZXR1cm4gdGhpcy5vZmYoIHR5cGVzLCBudWxsLCBmbiApO1xuXHR9LFxuXG5cdGRlbGVnYXRlOiBmdW5jdGlvbiggc2VsZWN0b3IsIHR5cGVzLCBkYXRhLCBmbiApIHtcblx0XHRyZXR1cm4gdGhpcy5vbiggdHlwZXMsIHNlbGVjdG9yLCBkYXRhLCBmbiApO1xuXHR9LFxuXHR1bmRlbGVnYXRlOiBmdW5jdGlvbiggc2VsZWN0b3IsIHR5cGVzLCBmbiApIHtcblxuXHRcdC8vICggbmFtZXNwYWNlICkgb3IgKCBzZWxlY3RvciwgdHlwZXMgWywgZm5dIClcblx0XHRyZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA9PT0gMSA/XG5cdFx0XHR0aGlzLm9mZiggc2VsZWN0b3IsIFwiKipcIiApIDpcblx0XHRcdHRoaXMub2ZmKCB0eXBlcywgc2VsZWN0b3IgfHwgXCIqKlwiLCBmbiApO1xuXHR9LFxuXG5cdGhvdmVyOiBmdW5jdGlvbiggZm5PdmVyLCBmbk91dCApIHtcblx0XHRyZXR1cm4gdGhpcy5tb3VzZWVudGVyKCBmbk92ZXIgKS5tb3VzZWxlYXZlKCBmbk91dCB8fCBmbk92ZXIgKTtcblx0fVxufSApO1xuXG5qUXVlcnkuZWFjaCggKCBcImJsdXIgZm9jdXMgZm9jdXNpbiBmb2N1c291dCByZXNpemUgc2Nyb2xsIGNsaWNrIGRibGNsaWNrIFwiICtcblx0XCJtb3VzZWRvd24gbW91c2V1cCBtb3VzZW1vdmUgbW91c2VvdmVyIG1vdXNlb3V0IG1vdXNlZW50ZXIgbW91c2VsZWF2ZSBcIiArXG5cdFwiY2hhbmdlIHNlbGVjdCBzdWJtaXQga2V5ZG93biBrZXlwcmVzcyBrZXl1cCBjb250ZXh0bWVudVwiICkuc3BsaXQoIFwiIFwiICksXG5cdGZ1bmN0aW9uKCBfaSwgbmFtZSApIHtcblxuXHRcdC8vIEhhbmRsZSBldmVudCBiaW5kaW5nXG5cdFx0alF1ZXJ5LmZuWyBuYW1lIF0gPSBmdW5jdGlvbiggZGF0YSwgZm4gKSB7XG5cdFx0XHRyZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA+IDAgP1xuXHRcdFx0XHR0aGlzLm9uKCBuYW1lLCBudWxsLCBkYXRhLCBmbiApIDpcblx0XHRcdFx0dGhpcy50cmlnZ2VyKCBuYW1lICk7XG5cdFx0fTtcblx0fSApO1xuXG5cblxuXG4vLyBTdXBwb3J0OiBBbmRyb2lkIDw9NC4wIG9ubHlcbi8vIE1ha2Ugc3VyZSB3ZSB0cmltIEJPTSBhbmQgTkJTUFxudmFyIHJ0cmltID0gL15bXFxzXFx1RkVGRlxceEEwXSt8W1xcc1xcdUZFRkZcXHhBMF0rJC9nO1xuXG4vLyBCaW5kIGEgZnVuY3Rpb24gdG8gYSBjb250ZXh0LCBvcHRpb25hbGx5IHBhcnRpYWxseSBhcHBseWluZyBhbnlcbi8vIGFyZ3VtZW50cy5cbi8vIGpRdWVyeS5wcm94eSBpcyBkZXByZWNhdGVkIHRvIHByb21vdGUgc3RhbmRhcmRzIChzcGVjaWZpY2FsbHkgRnVuY3Rpb24jYmluZClcbi8vIEhvd2V2ZXIsIGl0IGlzIG5vdCBzbGF0ZWQgZm9yIHJlbW92YWwgYW55IHRpbWUgc29vblxualF1ZXJ5LnByb3h5ID0gZnVuY3Rpb24oIGZuLCBjb250ZXh0ICkge1xuXHR2YXIgdG1wLCBhcmdzLCBwcm94eTtcblxuXHRpZiAoIHR5cGVvZiBjb250ZXh0ID09PSBcInN0cmluZ1wiICkge1xuXHRcdHRtcCA9IGZuWyBjb250ZXh0IF07XG5cdFx0Y29udGV4dCA9IGZuO1xuXHRcdGZuID0gdG1wO1xuXHR9XG5cblx0Ly8gUXVpY2sgY2hlY2sgdG8gZGV0ZXJtaW5lIGlmIHRhcmdldCBpcyBjYWxsYWJsZSwgaW4gdGhlIHNwZWNcblx0Ly8gdGhpcyB0aHJvd3MgYSBUeXBlRXJyb3IsIGJ1dCB3ZSB3aWxsIGp1c3QgcmV0dXJuIHVuZGVmaW5lZC5cblx0aWYgKCAhaXNGdW5jdGlvbiggZm4gKSApIHtcblx0XHRyZXR1cm4gdW5kZWZpbmVkO1xuXHR9XG5cblx0Ly8gU2ltdWxhdGVkIGJpbmRcblx0YXJncyA9IHNsaWNlLmNhbGwoIGFyZ3VtZW50cywgMiApO1xuXHRwcm94eSA9IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiBmbi5hcHBseSggY29udGV4dCB8fCB0aGlzLCBhcmdzLmNvbmNhdCggc2xpY2UuY2FsbCggYXJndW1lbnRzICkgKSApO1xuXHR9O1xuXG5cdC8vIFNldCB0aGUgZ3VpZCBvZiB1bmlxdWUgaGFuZGxlciB0byB0aGUgc2FtZSBvZiBvcmlnaW5hbCBoYW5kbGVyLCBzbyBpdCBjYW4gYmUgcmVtb3ZlZFxuXHRwcm94eS5ndWlkID0gZm4uZ3VpZCA9IGZuLmd1aWQgfHwgalF1ZXJ5Lmd1aWQrKztcblxuXHRyZXR1cm4gcHJveHk7XG59O1xuXG5qUXVlcnkuaG9sZFJlYWR5ID0gZnVuY3Rpb24oIGhvbGQgKSB7XG5cdGlmICggaG9sZCApIHtcblx0XHRqUXVlcnkucmVhZHlXYWl0Kys7XG5cdH0gZWxzZSB7XG5cdFx0alF1ZXJ5LnJlYWR5KCB0cnVlICk7XG5cdH1cbn07XG5qUXVlcnkuaXNBcnJheSA9IEFycmF5LmlzQXJyYXk7XG5qUXVlcnkucGFyc2VKU09OID0gSlNPTi5wYXJzZTtcbmpRdWVyeS5ub2RlTmFtZSA9IG5vZGVOYW1lO1xualF1ZXJ5LmlzRnVuY3Rpb24gPSBpc0Z1bmN0aW9uO1xualF1ZXJ5LmlzV2luZG93ID0gaXNXaW5kb3c7XG5qUXVlcnkuY2FtZWxDYXNlID0gY2FtZWxDYXNlO1xualF1ZXJ5LnR5cGUgPSB0b1R5cGU7XG5cbmpRdWVyeS5ub3cgPSBEYXRlLm5vdztcblxualF1ZXJ5LmlzTnVtZXJpYyA9IGZ1bmN0aW9uKCBvYmogKSB7XG5cblx0Ly8gQXMgb2YgalF1ZXJ5IDMuMCwgaXNOdW1lcmljIGlzIGxpbWl0ZWQgdG9cblx0Ly8gc3RyaW5ncyBhbmQgbnVtYmVycyAocHJpbWl0aXZlcyBvciBvYmplY3RzKVxuXHQvLyB0aGF0IGNhbiBiZSBjb2VyY2VkIHRvIGZpbml0ZSBudW1iZXJzIChnaC0yNjYyKVxuXHR2YXIgdHlwZSA9IGpRdWVyeS50eXBlKCBvYmogKTtcblx0cmV0dXJuICggdHlwZSA9PT0gXCJudW1iZXJcIiB8fCB0eXBlID09PSBcInN0cmluZ1wiICkgJiZcblxuXHRcdC8vIHBhcnNlRmxvYXQgTmFOcyBudW1lcmljLWNhc3QgZmFsc2UgcG9zaXRpdmVzIChcIlwiKVxuXHRcdC8vIC4uLmJ1dCBtaXNpbnRlcnByZXRzIGxlYWRpbmctbnVtYmVyIHN0cmluZ3MsIHBhcnRpY3VsYXJseSBoZXggbGl0ZXJhbHMgKFwiMHguLi5cIilcblx0XHQvLyBzdWJ0cmFjdGlvbiBmb3JjZXMgaW5maW5pdGllcyB0byBOYU5cblx0XHQhaXNOYU4oIG9iaiAtIHBhcnNlRmxvYXQoIG9iaiApICk7XG59O1xuXG5qUXVlcnkudHJpbSA9IGZ1bmN0aW9uKCB0ZXh0ICkge1xuXHRyZXR1cm4gdGV4dCA9PSBudWxsID9cblx0XHRcIlwiIDpcblx0XHQoIHRleHQgKyBcIlwiICkucmVwbGFjZSggcnRyaW0sIFwiXCIgKTtcbn07XG5cblxuXG4vLyBSZWdpc3RlciBhcyBhIG5hbWVkIEFNRCBtb2R1bGUsIHNpbmNlIGpRdWVyeSBjYW4gYmUgY29uY2F0ZW5hdGVkIHdpdGggb3RoZXJcbi8vIGZpbGVzIHRoYXQgbWF5IHVzZSBkZWZpbmUsIGJ1dCBub3QgdmlhIGEgcHJvcGVyIGNvbmNhdGVuYXRpb24gc2NyaXB0IHRoYXRcbi8vIHVuZGVyc3RhbmRzIGFub255bW91cyBBTUQgbW9kdWxlcy4gQSBuYW1lZCBBTUQgaXMgc2FmZXN0IGFuZCBtb3N0IHJvYnVzdFxuLy8gd2F5IHRvIHJlZ2lzdGVyLiBMb3dlcmNhc2UganF1ZXJ5IGlzIHVzZWQgYmVjYXVzZSBBTUQgbW9kdWxlIG5hbWVzIGFyZVxuLy8gZGVyaXZlZCBmcm9tIGZpbGUgbmFtZXMsIGFuZCBqUXVlcnkgaXMgbm9ybWFsbHkgZGVsaXZlcmVkIGluIGEgbG93ZXJjYXNlXG4vLyBmaWxlIG5hbWUuIERvIHRoaXMgYWZ0ZXIgY3JlYXRpbmcgdGhlIGdsb2JhbCBzbyB0aGF0IGlmIGFuIEFNRCBtb2R1bGUgd2FudHNcbi8vIHRvIGNhbGwgbm9Db25mbGljdCB0byBoaWRlIHRoaXMgdmVyc2lvbiBvZiBqUXVlcnksIGl0IHdpbGwgd29yay5cblxuLy8gTm90ZSB0aGF0IGZvciBtYXhpbXVtIHBvcnRhYmlsaXR5LCBsaWJyYXJpZXMgdGhhdCBhcmUgbm90IGpRdWVyeSBzaG91bGRcbi8vIGRlY2xhcmUgdGhlbXNlbHZlcyBhcyBhbm9ueW1vdXMgbW9kdWxlcywgYW5kIGF2b2lkIHNldHRpbmcgYSBnbG9iYWwgaWYgYW5cbi8vIEFNRCBsb2FkZXIgaXMgcHJlc2VudC4galF1ZXJ5IGlzIGEgc3BlY2lhbCBjYXNlLiBGb3IgbW9yZSBpbmZvcm1hdGlvbiwgc2VlXG4vLyBodHRwczovL2dpdGh1Yi5jb20vanJidXJrZS9yZXF1aXJlanMvd2lraS9VcGRhdGluZy1leGlzdGluZy1saWJyYXJpZXMjd2lraS1hbm9uXG5cbmlmICggdHlwZW9mIGRlZmluZSA9PT0gXCJmdW5jdGlvblwiICYmIGRlZmluZS5hbWQgKSB7XG5cdGRlZmluZSggXCJqcXVlcnlcIiwgW10sIGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiBqUXVlcnk7XG5cdH0gKTtcbn1cblxuXG5cblxudmFyXG5cblx0Ly8gTWFwIG92ZXIgalF1ZXJ5IGluIGNhc2Ugb2Ygb3ZlcndyaXRlXG5cdF9qUXVlcnkgPSB3aW5kb3cualF1ZXJ5LFxuXG5cdC8vIE1hcCBvdmVyIHRoZSAkIGluIGNhc2Ugb2Ygb3ZlcndyaXRlXG5cdF8kID0gd2luZG93LiQ7XG5cbmpRdWVyeS5ub0NvbmZsaWN0ID0gZnVuY3Rpb24oIGRlZXAgKSB7XG5cdGlmICggd2luZG93LiQgPT09IGpRdWVyeSApIHtcblx0XHR3aW5kb3cuJCA9IF8kO1xuXHR9XG5cblx0aWYgKCBkZWVwICYmIHdpbmRvdy5qUXVlcnkgPT09IGpRdWVyeSApIHtcblx0XHR3aW5kb3cualF1ZXJ5ID0gX2pRdWVyeTtcblx0fVxuXG5cdHJldHVybiBqUXVlcnk7XG59O1xuXG4vLyBFeHBvc2UgalF1ZXJ5IGFuZCAkIGlkZW50aWZpZXJzLCBldmVuIGluIEFNRFxuLy8gKCM3MTAyI2NvbW1lbnQ6MTAsIGh0dHBzOi8vZ2l0aHViLmNvbS9qcXVlcnkvanF1ZXJ5L3B1bGwvNTU3KVxuLy8gYW5kIENvbW1vbkpTIGZvciBicm93c2VyIGVtdWxhdG9ycyAoIzEzNTY2KVxuaWYgKCB0eXBlb2Ygbm9HbG9iYWwgPT09IFwidW5kZWZpbmVkXCIgKSB7XG5cdHdpbmRvdy5qUXVlcnkgPSB3aW5kb3cuJCA9IGpRdWVyeTtcbn1cblxuXG5cblxucmV0dXJuIGpRdWVyeTtcbn0gKTtcbiIsIi8qKlxuICogYnhTbGlkZXIgdjQuMi4xZFxuICogQ29weXJpZ2h0IDIwMTMtMjAxNyBTdGV2ZW4gV2FuZGVyc2tpXG4gKiBXcml0dGVuIHdoaWxlIGRyaW5raW5nIEJlbGdpYW4gYWxlcyBhbmQgbGlzdGVuaW5nIHRvIGphenpcbiAqIExpY2Vuc2VkIHVuZGVyIE1JVCAoaHR0cDovL29wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL01JVClcbiAqL1xuXG47KGZ1bmN0aW9uKCQpIHtcblxuICB2YXIgZGVmYXVsdHMgPSB7XG5cbiAgICAvLyBHRU5FUkFMXG4gICAgbW9kZTogJ2hvcml6b250YWwnLFxuICAgIHNsaWRlU2VsZWN0b3I6ICcnLFxuICAgIGluZmluaXRlTG9vcDogdHJ1ZSxcbiAgICBoaWRlQ29udHJvbE9uRW5kOiBmYWxzZSxcbiAgICBzcGVlZDogNTAwLFxuICAgIGVhc2luZzogbnVsbCxcbiAgICBzbGlkZU1hcmdpbjogMCxcbiAgICBzdGFydFNsaWRlOiAwLFxuICAgIHJhbmRvbVN0YXJ0OiBmYWxzZSxcbiAgICBjYXB0aW9uczogZmFsc2UsXG4gICAgdGlja2VyOiBmYWxzZSxcbiAgICB0aWNrZXJIb3ZlcjogZmFsc2UsXG4gICAgYWRhcHRpdmVIZWlnaHQ6IGZhbHNlLFxuICAgIGFkYXB0aXZlSGVpZ2h0U3BlZWQ6IDUwMCxcbiAgICB2aWRlbzogZmFsc2UsXG4gICAgdXNlQ1NTOiB0cnVlLFxuICAgIHByZWxvYWRJbWFnZXM6ICd2aXNpYmxlJyxcbiAgICByZXNwb25zaXZlOiB0cnVlLFxuICAgIHNsaWRlWkluZGV4OiA1MCxcbiAgICB3cmFwcGVyQ2xhc3M6ICdieC13cmFwcGVyJyxcblxuICAgIC8vIFRPVUNIXG4gICAgdG91Y2hFbmFibGVkOiB0cnVlLFxuICAgIHN3aXBlVGhyZXNob2xkOiA1MCxcbiAgICBvbmVUb09uZVRvdWNoOiB0cnVlLFxuICAgIHByZXZlbnREZWZhdWx0U3dpcGVYOiB0cnVlLFxuICAgIHByZXZlbnREZWZhdWx0U3dpcGVZOiBmYWxzZSxcblxuICAgIC8vIEFDQ0VTU0lCSUxJVFlcbiAgICBhcmlhTGl2ZTogdHJ1ZSxcbiAgICBhcmlhSGlkZGVuOiB0cnVlLFxuXG4gICAgLy8gS0VZQk9BUkRcbiAgICBrZXlib2FyZEVuYWJsZWQ6IGZhbHNlLFxuXG4gICAgLy8gUEFHRVJcbiAgICBwYWdlcjogdHJ1ZSxcbiAgICBwYWdlclR5cGU6ICdmdWxsJyxcbiAgICBwYWdlclNob3J0U2VwYXJhdG9yOiAnIC8gJyxcbiAgICBwYWdlclNlbGVjdG9yOiBudWxsLFxuICAgIGJ1aWxkUGFnZXI6IG51bGwsXG4gICAgcGFnZXJDdXN0b206IG51bGwsXG5cbiAgICAvLyBDT05UUk9MU1xuICAgIGNvbnRyb2xzOiB0cnVlLFxuICAgIG5leHRUZXh0OiAnTmV4dCcsXG4gICAgcHJldlRleHQ6ICdQcmV2JyxcbiAgICBuZXh0U2VsZWN0b3I6IG51bGwsXG4gICAgcHJldlNlbGVjdG9yOiBudWxsLFxuICAgIGF1dG9Db250cm9sczogZmFsc2UsXG4gICAgc3RhcnRUZXh0OiAnU3RhcnQnLFxuICAgIHN0b3BUZXh0OiAnU3RvcCcsXG4gICAgYXV0b0NvbnRyb2xzQ29tYmluZTogZmFsc2UsXG4gICAgYXV0b0NvbnRyb2xzU2VsZWN0b3I6IG51bGwsXG5cbiAgICAvLyBBVVRPXG4gICAgYXV0bzogZmFsc2UsXG4gICAgcGF1c2U6IDQwMDAsXG4gICAgYXV0b1N0YXJ0OiB0cnVlLFxuICAgIGF1dG9EaXJlY3Rpb246ICduZXh0JyxcbiAgICBzdG9wQXV0b09uQ2xpY2s6IGZhbHNlLFxuICAgIGF1dG9Ib3ZlcjogZmFsc2UsXG4gICAgYXV0b0RlbGF5OiAwLFxuICAgIGF1dG9TbGlkZUZvck9uZVBhZ2U6IGZhbHNlLFxuXG4gICAgLy8gQ0FST1VTRUxcbiAgICBtaW5TbGlkZXM6IDEsXG4gICAgbWF4U2xpZGVzOiAxLFxuICAgIG1vdmVTbGlkZXM6IDAsXG4gICAgc2xpZGVXaWR0aDogMCxcbiAgICBzaHJpbmtJdGVtczogZmFsc2UsXG5cbiAgICAvLyBDQUxMQkFDS1NcbiAgICBvblNsaWRlckxvYWQ6IGZ1bmN0aW9uKCkgeyByZXR1cm4gdHJ1ZTsgfSxcbiAgICBvblNsaWRlQmVmb3JlOiBmdW5jdGlvbigpIHsgcmV0dXJuIHRydWU7IH0sXG4gICAgb25TbGlkZUFmdGVyOiBmdW5jdGlvbigpIHsgcmV0dXJuIHRydWU7IH0sXG4gICAgb25TbGlkZU5leHQ6IGZ1bmN0aW9uKCkgeyByZXR1cm4gdHJ1ZTsgfSxcbiAgICBvblNsaWRlUHJldjogZnVuY3Rpb24oKSB7IHJldHVybiB0cnVlOyB9LFxuICAgIG9uU2xpZGVyUmVzaXplOiBmdW5jdGlvbigpIHsgcmV0dXJuIHRydWU7IH0sXG5cdG9uQXV0b0NoYW5nZTogZnVuY3Rpb24oKSB7IHJldHVybiB0cnVlOyB9IC8vY2FsbHMgd2hlbiBhdXRvIHNsaWRlcyBzdGFydHMgYW5kIHN0b3BzXG4gIH07XG5cbiAgJC5mbi5ieFNsaWRlciA9IGZ1bmN0aW9uKG9wdGlvbnMpIHtcblxuICAgIGlmICh0aGlzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgLy8gc3VwcG9ydCBtdWx0aXBsZSBlbGVtZW50c1xuICAgIGlmICh0aGlzLmxlbmd0aCA+IDEpIHtcbiAgICAgIHRoaXMuZWFjaChmdW5jdGlvbigpIHtcbiAgICAgICAgJCh0aGlzKS5ieFNsaWRlcihvcHRpb25zKTtcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgLy8gY3JlYXRlIGEgbmFtZXNwYWNlIHRvIGJlIHVzZWQgdGhyb3VnaG91dCB0aGUgcGx1Z2luXG4gICAgdmFyIHNsaWRlciA9IHt9LFxuICAgIC8vIHNldCBhIHJlZmVyZW5jZSB0byBvdXIgc2xpZGVyIGVsZW1lbnRcbiAgICBlbCA9IHRoaXMsXG4gICAgLy8gZ2V0IHRoZSBvcmlnaW5hbCB3aW5kb3cgZGltZW5zICh0aGFua3MgYSBsb3QgSUUpXG4gICAgd2luZG93V2lkdGggPSAkKHdpbmRvdykud2lkdGgoKSxcbiAgICB3aW5kb3dIZWlnaHQgPSAkKHdpbmRvdykuaGVpZ2h0KCk7XG5cbiAgICAvLyBSZXR1cm4gaWYgc2xpZGVyIGlzIGFscmVhZHkgaW5pdGlhbGl6ZWRcbiAgICBpZiAoJChlbCkuZGF0YSgnYnhTbGlkZXInKSkgeyByZXR1cm47IH1cblxuICAgIC8qKlxuICAgICAqID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gICAgICogPSBQUklWQVRFIEZVTkNUSU9OU1xuICAgICAqID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gICAgICovXG5cbiAgICAvKipcbiAgICAgKiBJbml0aWFsaXplcyBuYW1lc3BhY2Ugc2V0dGluZ3MgdG8gYmUgdXNlZCB0aHJvdWdob3V0IHBsdWdpblxuICAgICAqL1xuICAgIHZhciBpbml0ID0gZnVuY3Rpb24oKSB7XG4gICAgICAvLyBSZXR1cm4gaWYgc2xpZGVyIGlzIGFscmVhZHkgaW5pdGlhbGl6ZWRcbiAgICAgIGlmICgkKGVsKS5kYXRhKCdieFNsaWRlcicpKSB7IHJldHVybjsgfVxuICAgICAgLy8gbWVyZ2UgdXNlci1zdXBwbGllZCBvcHRpb25zIHdpdGggdGhlIGRlZmF1bHRzXG4gICAgICBzbGlkZXIuc2V0dGluZ3MgPSAkLmV4dGVuZCh7fSwgZGVmYXVsdHMsIG9wdGlvbnMpO1xuICAgICAgLy8gcGFyc2Ugc2xpZGVXaWR0aCBzZXR0aW5nXG4gICAgICBzbGlkZXIuc2V0dGluZ3Muc2xpZGVXaWR0aCA9IHBhcnNlSW50KHNsaWRlci5zZXR0aW5ncy5zbGlkZVdpZHRoKTtcbiAgICAgIC8vIHN0b3JlIHRoZSBvcmlnaW5hbCBjaGlsZHJlblxuICAgICAgc2xpZGVyLmNoaWxkcmVuID0gZWwuY2hpbGRyZW4oc2xpZGVyLnNldHRpbmdzLnNsaWRlU2VsZWN0b3IpO1xuICAgICAgLy8gY2hlY2sgaWYgYWN0dWFsIG51bWJlciBvZiBzbGlkZXMgaXMgbGVzcyB0aGFuIG1pblNsaWRlcyAvIG1heFNsaWRlc1xuICAgICAgaWYgKHNsaWRlci5jaGlsZHJlbi5sZW5ndGggPCBzbGlkZXIuc2V0dGluZ3MubWluU2xpZGVzKSB7IHNsaWRlci5zZXR0aW5ncy5taW5TbGlkZXMgPSBzbGlkZXIuY2hpbGRyZW4ubGVuZ3RoOyB9XG4gICAgICBpZiAoc2xpZGVyLmNoaWxkcmVuLmxlbmd0aCA8IHNsaWRlci5zZXR0aW5ncy5tYXhTbGlkZXMpIHsgc2xpZGVyLnNldHRpbmdzLm1heFNsaWRlcyA9IHNsaWRlci5jaGlsZHJlbi5sZW5ndGg7IH1cbiAgICAgIC8vIGlmIHJhbmRvbSBzdGFydCwgc2V0IHRoZSBzdGFydFNsaWRlIHNldHRpbmcgdG8gcmFuZG9tIG51bWJlclxuICAgICAgaWYgKHNsaWRlci5zZXR0aW5ncy5yYW5kb21TdGFydCkgeyBzbGlkZXIuc2V0dGluZ3Muc3RhcnRTbGlkZSA9IE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIHNsaWRlci5jaGlsZHJlbi5sZW5ndGgpOyB9XG4gICAgICAvLyBzdG9yZSBhY3RpdmUgc2xpZGUgaW5mb3JtYXRpb25cbiAgICAgIHNsaWRlci5hY3RpdmUgPSB7IGluZGV4OiBzbGlkZXIuc2V0dGluZ3Muc3RhcnRTbGlkZSB9O1xuICAgICAgLy8gc3RvcmUgaWYgdGhlIHNsaWRlciBpcyBpbiBjYXJvdXNlbCBtb2RlIChkaXNwbGF5aW5nIC8gbW92aW5nIG11bHRpcGxlIHNsaWRlcylcbiAgICAgIHNsaWRlci5jYXJvdXNlbCA9IHNsaWRlci5zZXR0aW5ncy5taW5TbGlkZXMgPiAxIHx8IHNsaWRlci5zZXR0aW5ncy5tYXhTbGlkZXMgPiAxO1xuICAgICAgLy8gaWYgY2Fyb3VzZWwsIGZvcmNlIHByZWxvYWRJbWFnZXMgPSAnYWxsJ1xuICAgICAgaWYgKHNsaWRlci5jYXJvdXNlbCkgeyBzbGlkZXIuc2V0dGluZ3MucHJlbG9hZEltYWdlcyA9ICdhbGwnOyB9XG4gICAgICAvLyBjYWxjdWxhdGUgdGhlIG1pbiAvIG1heCB3aWR0aCB0aHJlc2hvbGRzIGJhc2VkIG9uIG1pbiAvIG1heCBudW1iZXIgb2Ygc2xpZGVzXG4gICAgICAvLyB1c2VkIHRvIHNldHVwIGFuZCB1cGRhdGUgY2Fyb3VzZWwgc2xpZGVzIGRpbWVuc2lvbnNcbiAgICAgIHNsaWRlci5taW5UaHJlc2hvbGQgPSAoc2xpZGVyLnNldHRpbmdzLm1pblNsaWRlcyAqIHNsaWRlci5zZXR0aW5ncy5zbGlkZVdpZHRoKSArICgoc2xpZGVyLnNldHRpbmdzLm1pblNsaWRlcyAtIDEpICogc2xpZGVyLnNldHRpbmdzLnNsaWRlTWFyZ2luKTtcbiAgICAgIHNsaWRlci5tYXhUaHJlc2hvbGQgPSAoc2xpZGVyLnNldHRpbmdzLm1heFNsaWRlcyAqIHNsaWRlci5zZXR0aW5ncy5zbGlkZVdpZHRoKSArICgoc2xpZGVyLnNldHRpbmdzLm1heFNsaWRlcyAtIDEpICogc2xpZGVyLnNldHRpbmdzLnNsaWRlTWFyZ2luKTtcbiAgICAgIC8vIHN0b3JlIHRoZSBjdXJyZW50IHN0YXRlIG9mIHRoZSBzbGlkZXIgKGlmIGN1cnJlbnRseSBhbmltYXRpbmcsIHdvcmtpbmcgaXMgdHJ1ZSlcbiAgICAgIHNsaWRlci53b3JraW5nID0gZmFsc2U7XG4gICAgICAvLyBpbml0aWFsaXplIHRoZSBjb250cm9scyBvYmplY3RcbiAgICAgIHNsaWRlci5jb250cm9scyA9IHt9O1xuICAgICAgLy8gaW5pdGlhbGl6ZSBhbiBhdXRvIGludGVydmFsXG4gICAgICBzbGlkZXIuaW50ZXJ2YWwgPSBudWxsO1xuICAgICAgLy8gZGV0ZXJtaW5lIHdoaWNoIHByb3BlcnR5IHRvIHVzZSBmb3IgdHJhbnNpdGlvbnNcbiAgICAgIHNsaWRlci5hbmltUHJvcCA9IHNsaWRlci5zZXR0aW5ncy5tb2RlID09PSAndmVydGljYWwnID8gJ3RvcCcgOiAnbGVmdCc7XG4gICAgICAvLyBkZXRlcm1pbmUgaWYgaGFyZHdhcmUgYWNjZWxlcmF0aW9uIGNhbiBiZSB1c2VkXG4gICAgICBzbGlkZXIudXNpbmdDU1MgPSBzbGlkZXIuc2V0dGluZ3MudXNlQ1NTICYmIHNsaWRlci5zZXR0aW5ncy5tb2RlICE9PSAnZmFkZScgJiYgKGZ1bmN0aW9uKCkge1xuICAgICAgICAvLyBjcmVhdGUgb3VyIHRlc3QgZGl2IGVsZW1lbnRcbiAgICAgICAgdmFyIGRpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpLFxuICAgICAgICAvLyBjc3MgdHJhbnNpdGlvbiBwcm9wZXJ0aWVzXG4gICAgICAgIHByb3BzID0gWydXZWJraXRQZXJzcGVjdGl2ZScsICdNb3pQZXJzcGVjdGl2ZScsICdPUGVyc3BlY3RpdmUnLCAnbXNQZXJzcGVjdGl2ZSddO1xuICAgICAgICAvLyB0ZXN0IGZvciBlYWNoIHByb3BlcnR5XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICBpZiAoZGl2LnN0eWxlW3Byb3BzW2ldXSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBzbGlkZXIuY3NzUHJlZml4ID0gcHJvcHNbaV0ucmVwbGFjZSgnUGVyc3BlY3RpdmUnLCAnJykudG9Mb3dlckNhc2UoKTtcbiAgICAgICAgICAgIHNsaWRlci5hbmltUHJvcCA9ICctJyArIHNsaWRlci5jc3NQcmVmaXggKyAnLXRyYW5zZm9ybSc7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfSgpKTtcbiAgICAgIC8vIGlmIHZlcnRpY2FsIG1vZGUgYWx3YXlzIG1ha2UgbWF4U2xpZGVzIGFuZCBtaW5TbGlkZXMgZXF1YWxcbiAgICAgIGlmIChzbGlkZXIuc2V0dGluZ3MubW9kZSA9PT0gJ3ZlcnRpY2FsJykgeyBzbGlkZXIuc2V0dGluZ3MubWF4U2xpZGVzID0gc2xpZGVyLnNldHRpbmdzLm1pblNsaWRlczsgfVxuICAgICAgLy8gc2F2ZSBvcmlnaW5hbCBzdHlsZSBkYXRhXG4gICAgICBlbC5kYXRhKCdvcmlnU3R5bGUnLCBlbC5hdHRyKCdzdHlsZScpKTtcbiAgICAgIGVsLmNoaWxkcmVuKHNsaWRlci5zZXR0aW5ncy5zbGlkZVNlbGVjdG9yKS5lYWNoKGZ1bmN0aW9uKCkge1xuICAgICAgICAkKHRoaXMpLmRhdGEoJ29yaWdTdHlsZScsICQodGhpcykuYXR0cignc3R5bGUnKSk7XG4gICAgICB9KTtcblxuICAgICAgLy8gcGVyZm9ybSBhbGwgRE9NIC8gQ1NTIG1vZGlmaWNhdGlvbnNcbiAgICAgIHNldHVwKCk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFBlcmZvcm1zIGFsbCBET00gYW5kIENTUyBtb2RpZmljYXRpb25zXG4gICAgICovXG4gICAgdmFyIHNldHVwID0gZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgcHJlbG9hZFNlbGVjdG9yID0gc2xpZGVyLmNoaWxkcmVuLmVxKHNsaWRlci5zZXR0aW5ncy5zdGFydFNsaWRlKTsgLy8gc2V0IHRoZSBkZWZhdWx0IHByZWxvYWQgc2VsZWN0b3IgKHZpc2libGUpXG5cbiAgICAgIC8vIHdyYXAgZWwgaW4gYSB3cmFwcGVyXG4gICAgICBlbC53cmFwKCc8ZGl2IGNsYXNzPVwiJyArIHNsaWRlci5zZXR0aW5ncy53cmFwcGVyQ2xhc3MgKyAnXCI+PGRpdiBjbGFzcz1cImJ4LXZpZXdwb3J0XCI+PC9kaXY+PC9kaXY+Jyk7XG4gICAgICAvLyBzdG9yZSBhIG5hbWVzcGFjZSByZWZlcmVuY2UgdG8gLmJ4LXZpZXdwb3J0XG4gICAgICBzbGlkZXIudmlld3BvcnQgPSBlbC5wYXJlbnQoKTtcblxuICAgICAgLy8gYWRkIGFyaWEtbGl2ZSBpZiB0aGUgc2V0dGluZyBpcyBlbmFibGVkIGFuZCB0aWNrZXIgbW9kZSBpcyBkaXNhYmxlZFxuICAgICAgaWYgKHNsaWRlci5zZXR0aW5ncy5hcmlhTGl2ZSAmJiAhc2xpZGVyLnNldHRpbmdzLnRpY2tlcikge1xuICAgICAgICBzbGlkZXIudmlld3BvcnQuYXR0cignYXJpYS1saXZlJywgJ3BvbGl0ZScpO1xuICAgICAgfVxuICAgICAgLy8gYWRkIGEgbG9hZGluZyBkaXYgdG8gZGlzcGxheSB3aGlsZSBpbWFnZXMgYXJlIGxvYWRpbmdcbiAgICAgIHNsaWRlci5sb2FkZXIgPSAkKCc8ZGl2IGNsYXNzPVwiYngtbG9hZGluZ1wiIC8+Jyk7XG4gICAgICBzbGlkZXIudmlld3BvcnQucHJlcGVuZChzbGlkZXIubG9hZGVyKTtcbiAgICAgIC8vIHNldCBlbCB0byBhIG1hc3NpdmUgd2lkdGgsIHRvIGhvbGQgYW55IG5lZWRlZCBzbGlkZXNcbiAgICAgIC8vIGFsc28gc3RyaXAgYW55IG1hcmdpbiBhbmQgcGFkZGluZyBmcm9tIGVsXG4gICAgICBlbC5jc3Moe1xuICAgICAgICB3aWR0aDogc2xpZGVyLnNldHRpbmdzLm1vZGUgPT09ICdob3Jpem9udGFsJyA/IChzbGlkZXIuY2hpbGRyZW4ubGVuZ3RoICogMTAwMCArIDIxNSkgKyAnJScgOiAnYXV0bycsXG4gICAgICAgIHBvc2l0aW9uOiAncmVsYXRpdmUnXG4gICAgICB9KTtcbiAgICAgIC8vIGlmIHVzaW5nIENTUywgYWRkIHRoZSBlYXNpbmcgcHJvcGVydHlcbiAgICAgIGlmIChzbGlkZXIudXNpbmdDU1MgJiYgc2xpZGVyLnNldHRpbmdzLmVhc2luZykge1xuICAgICAgICBlbC5jc3MoJy0nICsgc2xpZGVyLmNzc1ByZWZpeCArICctdHJhbnNpdGlvbi10aW1pbmctZnVuY3Rpb24nLCBzbGlkZXIuc2V0dGluZ3MuZWFzaW5nKTtcbiAgICAgIC8vIGlmIG5vdCB1c2luZyBDU1MgYW5kIG5vIGVhc2luZyB2YWx1ZSB3YXMgc3VwcGxpZWQsIHVzZSB0aGUgZGVmYXVsdCBKUyBhbmltYXRpb24gZWFzaW5nIChzd2luZylcbiAgICAgIH0gZWxzZSBpZiAoIXNsaWRlci5zZXR0aW5ncy5lYXNpbmcpIHtcbiAgICAgICAgc2xpZGVyLnNldHRpbmdzLmVhc2luZyA9ICdzd2luZyc7XG4gICAgICB9XG4gICAgICAvLyBtYWtlIG1vZGlmaWNhdGlvbnMgdG8gdGhlIHZpZXdwb3J0ICguYngtdmlld3BvcnQpXG4gICAgICBzbGlkZXIudmlld3BvcnQuY3NzKHtcbiAgICAgICAgd2lkdGg6ICcxMDAlJyxcbiAgICAgICAgb3ZlcmZsb3c6ICdoaWRkZW4nLFxuICAgICAgICBwb3NpdGlvbjogJ3JlbGF0aXZlJ1xuICAgICAgfSk7XG4gICAgICBzbGlkZXIudmlld3BvcnQucGFyZW50KCkuY3NzKHtcbiAgICAgICAgbWF4V2lkdGg6IGdldFZpZXdwb3J0TWF4V2lkdGgoKVxuICAgICAgfSk7XG4gICAgICAvLyBhcHBseSBjc3MgdG8gYWxsIHNsaWRlciBjaGlsZHJlblxuICAgICAgc2xpZGVyLmNoaWxkcmVuLmNzcyh7XG4gICAgICAgIC8vIHRoZSBmbG9hdCBhdHRyaWJ1dGUgaXMgYSByZXNlcnZlZCB3b3JkIGluIGNvbXByZXNzb3JzIGxpa2UgWVVJIGNvbXByZXNzb3IgYW5kIG5lZWQgdG8gYmUgcXVvdGVkICM0OFxuICAgICAgICAnZmxvYXQnOiBzbGlkZXIuc2V0dGluZ3MubW9kZSA9PT0gJ2hvcml6b250YWwnID8gJ2xlZnQnIDogJ25vbmUnLFxuICAgICAgICBsaXN0U3R5bGU6ICdub25lJyxcbiAgICAgICAgcG9zaXRpb246ICdyZWxhdGl2ZSdcbiAgICAgIH0pO1xuICAgICAgLy8gYXBwbHkgdGhlIGNhbGN1bGF0ZWQgd2lkdGggYWZ0ZXIgdGhlIGZsb2F0IGlzIGFwcGxpZWQgdG8gcHJldmVudCBzY3JvbGxiYXIgaW50ZXJmZXJlbmNlXG4gICAgICBzbGlkZXIuY2hpbGRyZW4uY3NzKCd3aWR0aCcsIGdldFNsaWRlV2lkdGgoKSk7XG4gICAgICAvLyBpZiBzbGlkZU1hcmdpbiBpcyBzdXBwbGllZCwgYWRkIHRoZSBjc3NcbiAgICAgIGlmIChzbGlkZXIuc2V0dGluZ3MubW9kZSA9PT0gJ2hvcml6b250YWwnICYmIHNsaWRlci5zZXR0aW5ncy5zbGlkZU1hcmdpbiA+IDApIHsgc2xpZGVyLmNoaWxkcmVuLmNzcygnbWFyZ2luUmlnaHQnLCBzbGlkZXIuc2V0dGluZ3Muc2xpZGVNYXJnaW4pOyB9XG4gICAgICBpZiAoc2xpZGVyLnNldHRpbmdzLm1vZGUgPT09ICd2ZXJ0aWNhbCcgJiYgc2xpZGVyLnNldHRpbmdzLnNsaWRlTWFyZ2luID4gMCkgeyBzbGlkZXIuY2hpbGRyZW4uY3NzKCdtYXJnaW5Cb3R0b20nLCBzbGlkZXIuc2V0dGluZ3Muc2xpZGVNYXJnaW4pOyB9XG4gICAgICAvLyBpZiBcImZhZGVcIiBtb2RlLCBhZGQgcG9zaXRpb25pbmcgYW5kIHotaW5kZXggQ1NTXG4gICAgICBpZiAoc2xpZGVyLnNldHRpbmdzLm1vZGUgPT09ICdmYWRlJykge1xuICAgICAgICBzbGlkZXIuY2hpbGRyZW4uY3NzKHtcbiAgICAgICAgICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgICAgICAgICB6SW5kZXg6IDAsXG4gICAgICAgICAgZGlzcGxheTogJ25vbmUnXG4gICAgICAgIH0pO1xuICAgICAgICAvLyBwcmVwYXJlIHRoZSB6LWluZGV4IG9uIHRoZSBzaG93aW5nIGVsZW1lbnRcbiAgICAgICAgc2xpZGVyLmNoaWxkcmVuLmVxKHNsaWRlci5zZXR0aW5ncy5zdGFydFNsaWRlKS5jc3Moe3pJbmRleDogc2xpZGVyLnNldHRpbmdzLnNsaWRlWkluZGV4LCBkaXNwbGF5OiAnYmxvY2snfSk7XG4gICAgICB9XG4gICAgICAvLyBjcmVhdGUgYW4gZWxlbWVudCB0byBjb250YWluIGFsbCBzbGlkZXIgY29udHJvbHMgKHBhZ2VyLCBzdGFydCAvIHN0b3AsIGV0YylcbiAgICAgIHNsaWRlci5jb250cm9scy5lbCA9ICQoJzxkaXYgY2xhc3M9XCJieC1jb250cm9sc1wiIC8+Jyk7XG4gICAgICAvLyBpZiBjYXB0aW9ucyBhcmUgcmVxdWVzdGVkLCBhZGQgdGhlbVxuICAgICAgaWYgKHNsaWRlci5zZXR0aW5ncy5jYXB0aW9ucykgeyBhcHBlbmRDYXB0aW9ucygpOyB9XG4gICAgICAvLyBjaGVjayBpZiBzdGFydFNsaWRlIGlzIGxhc3Qgc2xpZGVcbiAgICAgIHNsaWRlci5hY3RpdmUubGFzdCA9IHNsaWRlci5zZXR0aW5ncy5zdGFydFNsaWRlID09PSBnZXRQYWdlclF0eSgpIC0gMTtcbiAgICAgIC8vIGlmIHZpZGVvIGlzIHRydWUsIHNldCB1cCB0aGUgZml0VmlkcyBwbHVnaW5cbiAgICAgIGlmIChzbGlkZXIuc2V0dGluZ3MudmlkZW8pIHsgZWwuZml0VmlkcygpOyB9XG5cdCAgLy9wcmVsb2FkSW1hZ2VzXG5cdCAgaWYgKHNsaWRlci5zZXR0aW5ncy5wcmVsb2FkSW1hZ2VzID09PSAnbm9uZScpIHsgXG5cdFx0ICBwcmVsb2FkU2VsZWN0b3IgPSBudWxsOyBcblx0ICB9XG4gICAgICBlbHNlIGlmIChzbGlkZXIuc2V0dGluZ3MucHJlbG9hZEltYWdlcyA9PT0gJ2FsbCcgfHwgc2xpZGVyLnNldHRpbmdzLnRpY2tlcikgeyBcblx0XHQgIHByZWxvYWRTZWxlY3RvciA9IHNsaWRlci5jaGlsZHJlbjsgXG5cdCAgfVxuICAgICAgLy8gb25seSBjaGVjayBmb3IgY29udHJvbCBhZGRpdGlvbiBpZiBub3QgaW4gXCJ0aWNrZXJcIiBtb2RlXG4gICAgICBpZiAoIXNsaWRlci5zZXR0aW5ncy50aWNrZXIpIHtcbiAgICAgICAgLy8gaWYgY29udHJvbHMgYXJlIHJlcXVlc3RlZCwgYWRkIHRoZW1cbiAgICAgICAgaWYgKHNsaWRlci5zZXR0aW5ncy5jb250cm9scykgeyBhcHBlbmRDb250cm9scygpOyB9XG4gICAgICAgIC8vIGlmIGF1dG8gaXMgdHJ1ZSwgYW5kIGF1dG8gY29udHJvbHMgYXJlIHJlcXVlc3RlZCwgYWRkIHRoZW1cbiAgICAgICAgaWYgKHNsaWRlci5zZXR0aW5ncy5hdXRvICYmIHNsaWRlci5zZXR0aW5ncy5hdXRvQ29udHJvbHMpIHsgYXBwZW5kQ29udHJvbHNBdXRvKCk7IH1cbiAgICAgICAgLy8gaWYgcGFnZXIgaXMgcmVxdWVzdGVkLCBhZGQgaXRcbiAgICAgICAgaWYgKHNsaWRlci5zZXR0aW5ncy5wYWdlcikgeyBhcHBlbmRQYWdlcigpOyB9XG4gICAgICAgIC8vIGlmIGFueSBjb250cm9sIG9wdGlvbiBpcyByZXF1ZXN0ZWQsIGFkZCB0aGUgY29udHJvbHMgd3JhcHBlclxuICAgICAgICBpZiAoc2xpZGVyLnNldHRpbmdzLmNvbnRyb2xzIHx8IHNsaWRlci5zZXR0aW5ncy5hdXRvQ29udHJvbHMgfHwgc2xpZGVyLnNldHRpbmdzLnBhZ2VyKSB7IHNsaWRlci52aWV3cG9ydC5hZnRlcihzbGlkZXIuY29udHJvbHMuZWwpOyB9XG4gICAgICAvLyBpZiB0aWNrZXIgbW9kZSwgZG8gbm90IGFsbG93IGEgcGFnZXJcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHNsaWRlci5zZXR0aW5ncy5wYWdlciA9IGZhbHNlO1xuICAgICAgfVxuXHQgIGlmIChwcmVsb2FkU2VsZWN0b3IgPT09IG51bGwpIHtcbiAgICAgICAgc3RhcnQoKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGxvYWRFbGVtZW50cyhwcmVsb2FkU2VsZWN0b3IsIHN0YXJ0KTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgdmFyIGxvYWRFbGVtZW50cyA9IGZ1bmN0aW9uKHNlbGVjdG9yLCBjYWxsYmFjaykge1xuICAgICAgdmFyIHRvdGFsID0gc2VsZWN0b3IuZmluZCgnaW1nOm5vdChbc3JjPVwiXCJdKSwgaWZyYW1lJykubGVuZ3RoLFxuICAgICAgY291bnQgPSAwO1xuICAgICAgaWYgKHRvdGFsID09PSAwKSB7XG4gICAgICAgIGNhbGxiYWNrKCk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIHNlbGVjdG9yLmZpbmQoJ2ltZzpub3QoW3NyYz1cIlwiXSksIGlmcmFtZScpLmVhY2goZnVuY3Rpb24oKSB7XG4gICAgICAgICQodGhpcykub25lKCdsb2FkIGVycm9yJywgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgaWYgKCsrY291bnQgPT09IHRvdGFsKSB7IGNhbGxiYWNrKCk7IH1cbiAgICAgICAgfSkuZWFjaChmdW5jdGlvbigpIHtcbiAgICAgICAgICBpZiAodGhpcy5jb21wbGV0ZSB8fCB0aGlzLnNyYyA9PSAnJykgeyAkKHRoaXMpLnRyaWdnZXIoJ2xvYWQnKTsgfVxuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBTdGFydCB0aGUgc2xpZGVyXG4gICAgICovXG4gICAgdmFyIHN0YXJ0ID0gZnVuY3Rpb24oKSB7XG4gICAgICAvLyBpZiBpbmZpbml0ZSBsb29wLCBwcmVwYXJlIGFkZGl0aW9uYWwgc2xpZGVzXG4gICAgICBpZiAoc2xpZGVyLnNldHRpbmdzLmluZmluaXRlTG9vcCAmJiBzbGlkZXIuc2V0dGluZ3MubW9kZSAhPT0gJ2ZhZGUnICYmICFzbGlkZXIuc2V0dGluZ3MudGlja2VyKSB7XG4gICAgICAgIHZhciBzbGljZSAgICA9IHNsaWRlci5zZXR0aW5ncy5tb2RlID09PSAndmVydGljYWwnID8gc2xpZGVyLnNldHRpbmdzLm1pblNsaWRlcyA6IHNsaWRlci5zZXR0aW5ncy5tYXhTbGlkZXMsXG4gICAgICAgIHNsaWNlQXBwZW5kICA9IHNsaWRlci5jaGlsZHJlbi5zbGljZSgwLCBzbGljZSkuY2xvbmUodHJ1ZSkuYWRkQ2xhc3MoJ2J4LWNsb25lJyksXG4gICAgICAgIHNsaWNlUHJlcGVuZCA9IHNsaWRlci5jaGlsZHJlbi5zbGljZSgtc2xpY2UpLmNsb25lKHRydWUpLmFkZENsYXNzKCdieC1jbG9uZScpO1xuICAgICAgICBpZiAoc2xpZGVyLnNldHRpbmdzLmFyaWFIaWRkZW4pIHtcbiAgICAgICAgICBzbGljZUFwcGVuZC5hdHRyKCdhcmlhLWhpZGRlbicsIHRydWUpO1xuICAgICAgICAgIHNsaWNlUHJlcGVuZC5hdHRyKCdhcmlhLWhpZGRlbicsIHRydWUpO1xuICAgICAgICB9XG4gICAgICAgIGVsLmFwcGVuZChzbGljZUFwcGVuZCkucHJlcGVuZChzbGljZVByZXBlbmQpO1xuICAgICAgfVxuICAgICAgLy8gcmVtb3ZlIHRoZSBsb2FkaW5nIERPTSBlbGVtZW50XG4gICAgICBzbGlkZXIubG9hZGVyLnJlbW92ZSgpO1xuICAgICAgLy8gc2V0IHRoZSBsZWZ0IC8gdG9wIHBvc2l0aW9uIG9mIFwiZWxcIlxuICAgICAgc2V0U2xpZGVQb3NpdGlvbigpO1xuICAgICAgLy8gaWYgXCJ2ZXJ0aWNhbFwiIG1vZGUsIGFsd2F5cyB1c2UgYWRhcHRpdmVIZWlnaHQgdG8gcHJldmVudCBvZGQgYmVoYXZpb3JcbiAgICAgIGlmIChzbGlkZXIuc2V0dGluZ3MubW9kZSA9PT0gJ3ZlcnRpY2FsJykgeyBzbGlkZXIuc2V0dGluZ3MuYWRhcHRpdmVIZWlnaHQgPSB0cnVlOyB9XG4gICAgICAvLyBzZXQgdGhlIHZpZXdwb3J0IGhlaWdodFxuICAgICAgc2xpZGVyLnZpZXdwb3J0LmhlaWdodChnZXRWaWV3cG9ydEhlaWdodCgpKTtcbiAgICAgIC8vIG1ha2Ugc3VyZSBldmVyeXRoaW5nIGlzIHBvc2l0aW9uZWQganVzdCByaWdodCAoc2FtZSBhcyBhIHdpbmRvdyByZXNpemUpXG4gICAgICBlbC5yZWRyYXdTbGlkZXIoKTtcbiAgICAgIC8vIG9uU2xpZGVyTG9hZCBjYWxsYmFja1xuICAgICAgc2xpZGVyLnNldHRpbmdzLm9uU2xpZGVyTG9hZC5jYWxsKGVsLCBzbGlkZXIuYWN0aXZlLmluZGV4KTtcbiAgICAgIC8vIHNsaWRlciBoYXMgYmVlbiBmdWxseSBpbml0aWFsaXplZFxuICAgICAgc2xpZGVyLmluaXRpYWxpemVkID0gdHJ1ZTtcbiAgICAgIC8vIGFkZCB0aGUgcmVzaXplIGNhbGwgdG8gdGhlIHdpbmRvd1xuICAgICAgaWYgKHNsaWRlci5zZXR0aW5ncy5yZXNwb25zaXZlKSB7ICQod2luZG93KS5vbigncmVzaXplJywgcmVzaXplV2luZG93KTsgfVxuICAgICAgLy8gaWYgYXV0byBpcyB0cnVlIGFuZCBoYXMgbW9yZSB0aGFuIDEgcGFnZSwgc3RhcnQgdGhlIHNob3dcbiAgICAgIGlmIChzbGlkZXIuc2V0dGluZ3MuYXV0byAmJiBzbGlkZXIuc2V0dGluZ3MuYXV0b1N0YXJ0ICYmIChnZXRQYWdlclF0eSgpID4gMSB8fCBzbGlkZXIuc2V0dGluZ3MuYXV0b1NsaWRlRm9yT25lUGFnZSkpIHsgaW5pdEF1dG8oKTsgfVxuICAgICAgLy8gaWYgdGlja2VyIGlzIHRydWUsIHN0YXJ0IHRoZSB0aWNrZXJcbiAgICAgIGlmIChzbGlkZXIuc2V0dGluZ3MudGlja2VyKSB7IGluaXRUaWNrZXIoKTsgfVxuICAgICAgLy8gaWYgcGFnZXIgaXMgcmVxdWVzdGVkLCBtYWtlIHRoZSBhcHByb3ByaWF0ZSBwYWdlciBsaW5rIGFjdGl2ZVxuICAgICAgaWYgKHNsaWRlci5zZXR0aW5ncy5wYWdlcikgeyB1cGRhdGVQYWdlckFjdGl2ZShzbGlkZXIuc2V0dGluZ3Muc3RhcnRTbGlkZSk7IH1cbiAgICAgIC8vIGNoZWNrIGZvciBhbnkgdXBkYXRlcyB0byB0aGUgY29udHJvbHMgKGxpa2UgaGlkZUNvbnRyb2xPbkVuZCB1cGRhdGVzKVxuICAgICAgaWYgKHNsaWRlci5zZXR0aW5ncy5jb250cm9scykgeyB1cGRhdGVEaXJlY3Rpb25Db250cm9scygpOyB9XG4gICAgICAvLyBpZiB0b3VjaEVuYWJsZWQgaXMgdHJ1ZSwgc2V0dXAgdGhlIHRvdWNoIGV2ZW50c1xuICAgICAgaWYgKHNsaWRlci5zZXR0aW5ncy50b3VjaEVuYWJsZWQgJiYgIXNsaWRlci5zZXR0aW5ncy50aWNrZXIpIHsgaW5pdFRvdWNoKCk7IH1cbiAgICAgIC8vIGlmIGtleWJvYXJkRW5hYmxlZCBpcyB0cnVlLCBzZXR1cCB0aGUga2V5Ym9hcmQgZXZlbnRzXG4gICAgICBpZiAoc2xpZGVyLnNldHRpbmdzLmtleWJvYXJkRW5hYmxlZCAmJiAhc2xpZGVyLnNldHRpbmdzLnRpY2tlcikge1xuICAgICAgICAkKGRvY3VtZW50KS5rZXlkb3duKGtleVByZXNzKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0aGUgY2FsY3VsYXRlZCBoZWlnaHQgb2YgdGhlIHZpZXdwb3J0LCB1c2VkIHRvIGRldGVybWluZSBlaXRoZXIgYWRhcHRpdmVIZWlnaHQgb3IgdGhlIG1heEhlaWdodCB2YWx1ZVxuICAgICAqL1xuICAgIHZhciBnZXRWaWV3cG9ydEhlaWdodCA9IGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIGhlaWdodCA9IDA7XG4gICAgICAvLyBmaXJzdCBkZXRlcm1pbmUgd2hpY2ggY2hpbGRyZW4gKHNsaWRlcykgc2hvdWxkIGJlIHVzZWQgaW4gb3VyIGhlaWdodCBjYWxjdWxhdGlvblxuICAgICAgdmFyIGNoaWxkcmVuID0gJCgpO1xuICAgICAgLy8gaWYgbW9kZSBpcyBub3QgXCJ2ZXJ0aWNhbFwiIGFuZCBhZGFwdGl2ZUhlaWdodCBpcyBmYWxzZSwgaW5jbHVkZSBhbGwgY2hpbGRyZW5cbiAgICAgIGlmIChzbGlkZXIuc2V0dGluZ3MubW9kZSAhPT0gJ3ZlcnRpY2FsJyAmJiAhc2xpZGVyLnNldHRpbmdzLmFkYXB0aXZlSGVpZ2h0KSB7XG4gICAgICAgIGNoaWxkcmVuID0gc2xpZGVyLmNoaWxkcmVuO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gaWYgbm90IGNhcm91c2VsLCByZXR1cm4gdGhlIHNpbmdsZSBhY3RpdmUgY2hpbGRcbiAgICAgICAgaWYgKCFzbGlkZXIuY2Fyb3VzZWwpIHtcbiAgICAgICAgICBjaGlsZHJlbiA9IHNsaWRlci5jaGlsZHJlbi5lcShzbGlkZXIuYWN0aXZlLmluZGV4KTtcbiAgICAgICAgLy8gaWYgY2Fyb3VzZWwsIHJldHVybiBhIHNsaWNlIG9mIGNoaWxkcmVuXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgLy8gZ2V0IHRoZSBpbmRpdmlkdWFsIHNsaWRlIGluZGV4XG4gICAgICAgICAgdmFyIGN1cnJlbnRJbmRleCA9IHNsaWRlci5zZXR0aW5ncy5tb3ZlU2xpZGVzID09PSAxID8gc2xpZGVyLmFjdGl2ZS5pbmRleCA6IHNsaWRlci5hY3RpdmUuaW5kZXggKiBnZXRNb3ZlQnkoKTtcbiAgICAgICAgICAvLyBhZGQgdGhlIGN1cnJlbnQgc2xpZGUgdG8gdGhlIGNoaWxkcmVuXG4gICAgICAgICAgY2hpbGRyZW4gPSBzbGlkZXIuY2hpbGRyZW4uZXEoY3VycmVudEluZGV4KTtcbiAgICAgICAgICAvLyBjeWNsZSB0aHJvdWdoIHRoZSByZW1haW5pbmcgXCJzaG93aW5nXCIgc2xpZGVzXG4gICAgICAgICAgZm9yIChpID0gMTsgaSA8PSBzbGlkZXIuc2V0dGluZ3MubWF4U2xpZGVzIC0gMTsgaSsrKSB7XG4gICAgICAgICAgICAvLyBpZiBsb29wZWQgYmFjayB0byB0aGUgc3RhcnRcbiAgICAgICAgICAgIGlmIChjdXJyZW50SW5kZXggKyBpID49IHNsaWRlci5jaGlsZHJlbi5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgY2hpbGRyZW4gPSBjaGlsZHJlbi5hZGQoc2xpZGVyLmNoaWxkcmVuLmVxKGkgLSAxKSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBjaGlsZHJlbiA9IGNoaWxkcmVuLmFkZChzbGlkZXIuY2hpbGRyZW4uZXEoY3VycmVudEluZGV4ICsgaSkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgLy8gaWYgXCJ2ZXJ0aWNhbFwiIG1vZGUsIGNhbGN1bGF0ZSB0aGUgc3VtIG9mIHRoZSBoZWlnaHRzIG9mIHRoZSBjaGlsZHJlblxuICAgICAgaWYgKHNsaWRlci5zZXR0aW5ncy5tb2RlID09PSAndmVydGljYWwnKSB7XG4gICAgICAgIGNoaWxkcmVuLmVhY2goZnVuY3Rpb24oaW5kZXgpIHtcbiAgICAgICAgICBoZWlnaHQgKz0gJCh0aGlzKS5vdXRlckhlaWdodCgpO1xuICAgICAgICB9KTtcbiAgICAgICAgLy8gYWRkIHVzZXItc3VwcGxpZWQgbWFyZ2luc1xuICAgICAgICBpZiAoc2xpZGVyLnNldHRpbmdzLnNsaWRlTWFyZ2luID4gMCkge1xuICAgICAgICAgIGhlaWdodCArPSBzbGlkZXIuc2V0dGluZ3Muc2xpZGVNYXJnaW4gKiAoc2xpZGVyLnNldHRpbmdzLm1pblNsaWRlcyAtIDEpO1xuICAgICAgICB9XG4gICAgICAvLyBpZiBub3QgXCJ2ZXJ0aWNhbFwiIG1vZGUsIGNhbGN1bGF0ZSB0aGUgbWF4IGhlaWdodCBvZiB0aGUgY2hpbGRyZW5cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGhlaWdodCA9IE1hdGgubWF4LmFwcGx5KE1hdGgsIGNoaWxkcmVuLm1hcChmdW5jdGlvbigpIHtcbiAgICAgICAgICByZXR1cm4gJCh0aGlzKS5vdXRlckhlaWdodChmYWxzZSk7XG4gICAgICAgIH0pLmdldCgpKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHNsaWRlci52aWV3cG9ydC5jc3MoJ2JveC1zaXppbmcnKSA9PT0gJ2JvcmRlci1ib3gnKSB7XG4gICAgICAgIGhlaWdodCArPSBwYXJzZUZsb2F0KHNsaWRlci52aWV3cG9ydC5jc3MoJ3BhZGRpbmctdG9wJykpICsgcGFyc2VGbG9hdChzbGlkZXIudmlld3BvcnQuY3NzKCdwYWRkaW5nLWJvdHRvbScpKSArXG4gICAgICAgICAgICAgIHBhcnNlRmxvYXQoc2xpZGVyLnZpZXdwb3J0LmNzcygnYm9yZGVyLXRvcC13aWR0aCcpKSArIHBhcnNlRmxvYXQoc2xpZGVyLnZpZXdwb3J0LmNzcygnYm9yZGVyLWJvdHRvbS13aWR0aCcpKTtcbiAgICAgIH0gZWxzZSBpZiAoc2xpZGVyLnZpZXdwb3J0LmNzcygnYm94LXNpemluZycpID09PSAncGFkZGluZy1ib3gnKSB7XG4gICAgICAgIGhlaWdodCArPSBwYXJzZUZsb2F0KHNsaWRlci52aWV3cG9ydC5jc3MoJ3BhZGRpbmctdG9wJykpICsgcGFyc2VGbG9hdChzbGlkZXIudmlld3BvcnQuY3NzKCdwYWRkaW5nLWJvdHRvbScpKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGhlaWdodDtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0aGUgY2FsY3VsYXRlZCB3aWR0aCB0byBiZSB1c2VkIGZvciB0aGUgb3V0ZXIgd3JhcHBlciAvIHZpZXdwb3J0XG4gICAgICovXG4gICAgdmFyIGdldFZpZXdwb3J0TWF4V2lkdGggPSBmdW5jdGlvbigpIHtcbiAgICAgIHZhciB3aWR0aCA9ICcxMDAlJztcbiAgICAgIGlmIChzbGlkZXIuc2V0dGluZ3Muc2xpZGVXaWR0aCA+IDApIHtcbiAgICAgICAgaWYgKHNsaWRlci5zZXR0aW5ncy5tb2RlID09PSAnaG9yaXpvbnRhbCcpIHtcbiAgICAgICAgICB3aWR0aCA9IChzbGlkZXIuc2V0dGluZ3MubWF4U2xpZGVzICogc2xpZGVyLnNldHRpbmdzLnNsaWRlV2lkdGgpICsgKChzbGlkZXIuc2V0dGluZ3MubWF4U2xpZGVzIC0gMSkgKiBzbGlkZXIuc2V0dGluZ3Muc2xpZGVNYXJnaW4pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHdpZHRoID0gc2xpZGVyLnNldHRpbmdzLnNsaWRlV2lkdGg7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiB3aWR0aDtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0aGUgY2FsY3VsYXRlZCB3aWR0aCB0byBiZSBhcHBsaWVkIHRvIGVhY2ggc2xpZGVcbiAgICAgKi9cbiAgICB2YXIgZ2V0U2xpZGVXaWR0aCA9IGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIG5ld0VsV2lkdGggPSBzbGlkZXIuc2V0dGluZ3Muc2xpZGVXaWR0aCwgLy8gc3RhcnQgd2l0aCBhbnkgdXNlci1zdXBwbGllZCBzbGlkZSB3aWR0aFxuICAgICAgd3JhcFdpZHRoICAgICAgPSBzbGlkZXIudmlld3BvcnQud2lkdGgoKTsgICAgLy8gZ2V0IHRoZSBjdXJyZW50IHZpZXdwb3J0IHdpZHRoXG4gICAgICAvLyBpZiBzbGlkZSB3aWR0aCB3YXMgbm90IHN1cHBsaWVkLCBvciBpcyBsYXJnZXIgdGhhbiB0aGUgdmlld3BvcnQgdXNlIHRoZSB2aWV3cG9ydCB3aWR0aFxuICAgICAgaWYgKHNsaWRlci5zZXR0aW5ncy5zbGlkZVdpZHRoID09PSAwIHx8XG4gICAgICAgIChzbGlkZXIuc2V0dGluZ3Muc2xpZGVXaWR0aCA+IHdyYXBXaWR0aCAmJiAhc2xpZGVyLmNhcm91c2VsKSB8fFxuICAgICAgICBzbGlkZXIuc2V0dGluZ3MubW9kZSA9PT0gJ3ZlcnRpY2FsJykge1xuICAgICAgICBuZXdFbFdpZHRoID0gd3JhcFdpZHRoO1xuICAgICAgLy8gaWYgY2Fyb3VzZWwsIHVzZSB0aGUgdGhyZXNob2xkcyB0byBkZXRlcm1pbmUgdGhlIHdpZHRoXG4gICAgICB9IGVsc2UgaWYgKHNsaWRlci5zZXR0aW5ncy5tYXhTbGlkZXMgPiAxICYmIHNsaWRlci5zZXR0aW5ncy5tb2RlID09PSAnaG9yaXpvbnRhbCcpIHtcbiAgICAgICAgaWYgKHdyYXBXaWR0aCA+IHNsaWRlci5tYXhUaHJlc2hvbGQpIHtcbiAgICAgICAgICByZXR1cm4gbmV3RWxXaWR0aDtcbiAgICAgICAgfSBlbHNlIGlmICh3cmFwV2lkdGggPCBzbGlkZXIubWluVGhyZXNob2xkKSB7XG4gICAgICAgICAgbmV3RWxXaWR0aCA9ICh3cmFwV2lkdGggLSAoc2xpZGVyLnNldHRpbmdzLnNsaWRlTWFyZ2luICogKHNsaWRlci5zZXR0aW5ncy5taW5TbGlkZXMgLSAxKSkpIC8gc2xpZGVyLnNldHRpbmdzLm1pblNsaWRlcztcbiAgICAgICAgfSBlbHNlIGlmIChzbGlkZXIuc2V0dGluZ3Muc2hyaW5rSXRlbXMpIHtcbiAgICAgICAgICBuZXdFbFdpZHRoID0gTWF0aC5mbG9vcigod3JhcFdpZHRoICsgc2xpZGVyLnNldHRpbmdzLnNsaWRlTWFyZ2luKSAvIChNYXRoLmNlaWwoKHdyYXBXaWR0aCArIHNsaWRlci5zZXR0aW5ncy5zbGlkZU1hcmdpbikgLyAobmV3RWxXaWR0aCArIHNsaWRlci5zZXR0aW5ncy5zbGlkZU1hcmdpbikpKSAtIHNsaWRlci5zZXR0aW5ncy5zbGlkZU1hcmdpbik7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBuZXdFbFdpZHRoO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSBudW1iZXIgb2Ygc2xpZGVzIGN1cnJlbnRseSB2aXNpYmxlIGluIHRoZSB2aWV3cG9ydCAoaW5jbHVkZXMgcGFydGlhbGx5IHZpc2libGUgc2xpZGVzKVxuICAgICAqL1xuICAgIHZhciBnZXROdW1iZXJTbGlkZXNTaG93aW5nID0gZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgc2xpZGVzU2hvd2luZyA9IDEsXG4gICAgICBjaGlsZFdpZHRoID0gbnVsbDtcbiAgICAgIGlmIChzbGlkZXIuc2V0dGluZ3MubW9kZSA9PT0gJ2hvcml6b250YWwnICYmIHNsaWRlci5zZXR0aW5ncy5zbGlkZVdpZHRoID4gMCkge1xuICAgICAgICAvLyBpZiB2aWV3cG9ydCBpcyBzbWFsbGVyIHRoYW4gbWluVGhyZXNob2xkLCByZXR1cm4gbWluU2xpZGVzXG4gICAgICAgIGlmIChzbGlkZXIudmlld3BvcnQud2lkdGgoKSA8IHNsaWRlci5taW5UaHJlc2hvbGQpIHtcbiAgICAgICAgICBzbGlkZXNTaG93aW5nID0gc2xpZGVyLnNldHRpbmdzLm1pblNsaWRlcztcbiAgICAgICAgLy8gaWYgdmlld3BvcnQgaXMgbGFyZ2VyIHRoYW4gbWF4VGhyZXNob2xkLCByZXR1cm4gbWF4U2xpZGVzXG4gICAgICAgIH0gZWxzZSBpZiAoc2xpZGVyLnZpZXdwb3J0LndpZHRoKCkgPiBzbGlkZXIubWF4VGhyZXNob2xkKSB7XG4gICAgICAgICAgc2xpZGVzU2hvd2luZyA9IHNsaWRlci5zZXR0aW5ncy5tYXhTbGlkZXM7XG4gICAgICAgIC8vIGlmIHZpZXdwb3J0IGlzIGJldHdlZW4gbWluIC8gbWF4IHRocmVzaG9sZHMsIGRpdmlkZSB2aWV3cG9ydCB3aWR0aCBieSBmaXJzdCBjaGlsZCB3aWR0aFxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGNoaWxkV2lkdGggPSBzbGlkZXIuY2hpbGRyZW4uZmlyc3QoKS53aWR0aCgpICsgc2xpZGVyLnNldHRpbmdzLnNsaWRlTWFyZ2luO1xuICAgICAgICAgIHNsaWRlc1Nob3dpbmcgPSBNYXRoLmZsb29yKChzbGlkZXIudmlld3BvcnQud2lkdGgoKSArXG4gICAgICAgICAgICBzbGlkZXIuc2V0dGluZ3Muc2xpZGVNYXJnaW4pIC8gY2hpbGRXaWR0aCkgfHwgMTtcbiAgICAgICAgfVxuICAgICAgLy8gaWYgXCJ2ZXJ0aWNhbFwiIG1vZGUsIHNsaWRlcyBzaG93aW5nIHdpbGwgYWx3YXlzIGJlIG1pblNsaWRlc1xuICAgICAgfSBlbHNlIGlmIChzbGlkZXIuc2V0dGluZ3MubW9kZSA9PT0gJ3ZlcnRpY2FsJykge1xuICAgICAgICBzbGlkZXNTaG93aW5nID0gc2xpZGVyLnNldHRpbmdzLm1pblNsaWRlcztcbiAgICAgIH1cbiAgICAgIHJldHVybiBzbGlkZXNTaG93aW5nO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSBudW1iZXIgb2YgcGFnZXMgKG9uZSBmdWxsIHZpZXdwb3J0IG9mIHNsaWRlcyBpcyBvbmUgXCJwYWdlXCIpXG4gICAgICovXG4gICAgdmFyIGdldFBhZ2VyUXR5ID0gZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgcGFnZXJRdHkgPSAwLFxuICAgICAgYnJlYWtQb2ludCA9IDAsXG4gICAgICBjb3VudGVyID0gMDtcbiAgICAgIC8vIGlmIG1vdmVTbGlkZXMgaXMgc3BlY2lmaWVkIGJ5IHRoZSB1c2VyXG4gICAgICBpZiAoc2xpZGVyLnNldHRpbmdzLm1vdmVTbGlkZXMgPiAwKSB7XG4gICAgICAgIGlmIChzbGlkZXIuc2V0dGluZ3MuaW5maW5pdGVMb29wKSB7XG4gICAgICAgICAgcGFnZXJRdHkgPSBNYXRoLmNlaWwoc2xpZGVyLmNoaWxkcmVuLmxlbmd0aCAvIGdldE1vdmVCeSgpKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAvLyB3aGVuIGJyZWFrcG9pbnQgZ29lcyBhYm92ZSBjaGlsZHJlbiBsZW5ndGgsIGNvdW50ZXIgaXMgdGhlIG51bWJlciBvZiBwYWdlc1xuICAgICAgICAgIHdoaWxlIChicmVha1BvaW50IDwgc2xpZGVyLmNoaWxkcmVuLmxlbmd0aCkge1xuICAgICAgICAgICAgKytwYWdlclF0eTtcbiAgICAgICAgICAgIGJyZWFrUG9pbnQgPSBjb3VudGVyICsgZ2V0TnVtYmVyU2xpZGVzU2hvd2luZygpO1xuICAgICAgICAgICAgY291bnRlciArPSBzbGlkZXIuc2V0dGluZ3MubW92ZVNsaWRlcyA8PSBnZXROdW1iZXJTbGlkZXNTaG93aW5nKCkgPyBzbGlkZXIuc2V0dGluZ3MubW92ZVNsaWRlcyA6IGdldE51bWJlclNsaWRlc1Nob3dpbmcoKTtcbiAgICAgICAgICB9XG5cdFx0ICByZXR1cm4gY291bnRlcjtcbiAgICAgICAgfVxuICAgICAgLy8gaWYgbW92ZVNsaWRlcyBpcyAwIChhdXRvKSBkaXZpZGUgY2hpbGRyZW4gbGVuZ3RoIGJ5IHNpZGVzIHNob3dpbmcsIHRoZW4gcm91bmQgdXBcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHBhZ2VyUXR5ID0gTWF0aC5jZWlsKHNsaWRlci5jaGlsZHJlbi5sZW5ndGggLyBnZXROdW1iZXJTbGlkZXNTaG93aW5nKCkpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHBhZ2VyUXR5O1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSBudW1iZXIgb2YgaW5kaXZpZHVhbCBzbGlkZXMgYnkgd2hpY2ggdG8gc2hpZnQgdGhlIHNsaWRlclxuICAgICAqL1xuICAgIHZhciBnZXRNb3ZlQnkgPSBmdW5jdGlvbigpIHtcbiAgICAgIC8vIGlmIG1vdmVTbGlkZXMgd2FzIHNldCBieSB0aGUgdXNlciBhbmQgbW92ZVNsaWRlcyBpcyBsZXNzIHRoYW4gbnVtYmVyIG9mIHNsaWRlcyBzaG93aW5nXG4gICAgICBpZiAoc2xpZGVyLnNldHRpbmdzLm1vdmVTbGlkZXMgPiAwICYmIHNsaWRlci5zZXR0aW5ncy5tb3ZlU2xpZGVzIDw9IGdldE51bWJlclNsaWRlc1Nob3dpbmcoKSkge1xuICAgICAgICByZXR1cm4gc2xpZGVyLnNldHRpbmdzLm1vdmVTbGlkZXM7XG4gICAgICB9XG4gICAgICAvLyBpZiBtb3ZlU2xpZGVzIGlzIDAgKGF1dG8pXG4gICAgICByZXR1cm4gZ2V0TnVtYmVyU2xpZGVzU2hvd2luZygpO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBTZXRzIHRoZSBzbGlkZXIncyAoZWwpIGxlZnQgb3IgdG9wIHBvc2l0aW9uXG4gICAgICovXG4gICAgdmFyIHNldFNsaWRlUG9zaXRpb24gPSBmdW5jdGlvbigpIHtcbiAgICAgIHZhciBwb3NpdGlvbiwgbGFzdENoaWxkLCBsYXN0U2hvd2luZ0luZGV4O1xuICAgICAgLy8gaWYgbGFzdCBzbGlkZSwgbm90IGluZmluaXRlIGxvb3AsIGFuZCBudW1iZXIgb2YgY2hpbGRyZW4gaXMgbGFyZ2VyIHRoYW4gc3BlY2lmaWVkIG1heFNsaWRlc1xuICAgICAgaWYgKHNsaWRlci5jaGlsZHJlbi5sZW5ndGggPiBzbGlkZXIuc2V0dGluZ3MubWF4U2xpZGVzICYmIHNsaWRlci5hY3RpdmUubGFzdCAmJiAhc2xpZGVyLnNldHRpbmdzLmluZmluaXRlTG9vcCkge1xuICAgICAgICBpZiAoc2xpZGVyLnNldHRpbmdzLm1vZGUgPT09ICdob3Jpem9udGFsJykge1xuICAgICAgICAgIC8vIGdldCB0aGUgbGFzdCBjaGlsZCdzIHBvc2l0aW9uXG4gICAgICAgICAgbGFzdENoaWxkID0gc2xpZGVyLmNoaWxkcmVuLmxhc3QoKTtcbiAgICAgICAgICBwb3NpdGlvbiA9IGxhc3RDaGlsZC5wb3NpdGlvbigpO1xuICAgICAgICAgIC8vIHNldCB0aGUgbGVmdCBwb3NpdGlvblxuICAgICAgICAgIHNldFBvc2l0aW9uUHJvcGVydHkoLShwb3NpdGlvbi5sZWZ0IC0gKHNsaWRlci52aWV3cG9ydC53aWR0aCgpIC0gbGFzdENoaWxkLm91dGVyV2lkdGgoKSkpLCAncmVzZXQnLCAwKTtcbiAgICAgICAgfSBlbHNlIGlmIChzbGlkZXIuc2V0dGluZ3MubW9kZSA9PT0gJ3ZlcnRpY2FsJykge1xuICAgICAgICAgIC8vIGdldCB0aGUgbGFzdCBzaG93aW5nIGluZGV4J3MgcG9zaXRpb25cbiAgICAgICAgICBsYXN0U2hvd2luZ0luZGV4ID0gc2xpZGVyLmNoaWxkcmVuLmxlbmd0aCAtIHNsaWRlci5zZXR0aW5ncy5taW5TbGlkZXM7XG4gICAgICAgICAgcG9zaXRpb24gPSBzbGlkZXIuY2hpbGRyZW4uZXEobGFzdFNob3dpbmdJbmRleCkucG9zaXRpb24oKTtcbiAgICAgICAgICAvLyBzZXQgdGhlIHRvcCBwb3NpdGlvblxuICAgICAgICAgIHNldFBvc2l0aW9uUHJvcGVydHkoLXBvc2l0aW9uLnRvcCwgJ3Jlc2V0JywgMCk7XG4gICAgICAgIH1cbiAgICAgIC8vIGlmIG5vdCBsYXN0IHNsaWRlXG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBnZXQgdGhlIHBvc2l0aW9uIG9mIHRoZSBmaXJzdCBzaG93aW5nIHNsaWRlXG4gICAgICAgIHBvc2l0aW9uID0gc2xpZGVyLmNoaWxkcmVuLmVxKHNsaWRlci5hY3RpdmUuaW5kZXggKiBnZXRNb3ZlQnkoKSkucG9zaXRpb24oKTtcbiAgICAgICAgLy8gY2hlY2sgZm9yIGxhc3Qgc2xpZGVcbiAgICAgICAgaWYgKHNsaWRlci5hY3RpdmUuaW5kZXggPT09IGdldFBhZ2VyUXR5KCkgLSAxKSB7IHNsaWRlci5hY3RpdmUubGFzdCA9IHRydWU7IH1cbiAgICAgICAgLy8gc2V0IHRoZSByZXNwZWN0aXZlIHBvc2l0aW9uXG4gICAgICAgIGlmIChwb3NpdGlvbiAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgaWYgKHNsaWRlci5zZXR0aW5ncy5tb2RlID09PSAnaG9yaXpvbnRhbCcpIHsgc2V0UG9zaXRpb25Qcm9wZXJ0eSgtcG9zaXRpb24ubGVmdCwgJ3Jlc2V0JywgMCk7IH1cbiAgICAgICAgICBlbHNlIGlmIChzbGlkZXIuc2V0dGluZ3MubW9kZSA9PT0gJ3ZlcnRpY2FsJykgeyBzZXRQb3NpdGlvblByb3BlcnR5KC1wb3NpdGlvbi50b3AsICdyZXNldCcsIDApOyB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogU2V0cyB0aGUgZWwncyBhbmltYXRpbmcgcHJvcGVydHkgcG9zaXRpb24gKHdoaWNoIGluIHR1cm4gd2lsbCBzb21ldGltZXMgYW5pbWF0ZSBlbCkuXG4gICAgICogSWYgdXNpbmcgQ1NTLCBzZXRzIHRoZSB0cmFuc2Zvcm0gcHJvcGVydHkuIElmIG5vdCB1c2luZyBDU1MsIHNldHMgdGhlIHRvcCAvIGxlZnQgcHJvcGVydHkuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gdmFsdWUgKGludClcbiAgICAgKiAgLSB0aGUgYW5pbWF0aW5nIHByb3BlcnR5J3MgdmFsdWVcbiAgICAgKlxuICAgICAqIEBwYXJhbSB0eXBlIChzdHJpbmcpICdzbGlkZScsICdyZXNldCcsICd0aWNrZXInXG4gICAgICogIC0gdGhlIHR5cGUgb2YgaW5zdGFuY2UgZm9yIHdoaWNoIHRoZSBmdW5jdGlvbiBpcyBiZWluZ1xuICAgICAqXG4gICAgICogQHBhcmFtIGR1cmF0aW9uIChpbnQpXG4gICAgICogIC0gdGhlIGFtb3VudCBvZiB0aW1lIChpbiBtcykgdGhlIHRyYW5zaXRpb24gc2hvdWxkIG9jY3VweVxuICAgICAqXG4gICAgICogQHBhcmFtIHBhcmFtcyAoYXJyYXkpIG9wdGlvbmFsXG4gICAgICogIC0gYW4gb3B0aW9uYWwgcGFyYW1ldGVyIGNvbnRhaW5pbmcgYW55IHZhcmlhYmxlcyB0aGF0IG5lZWQgdG8gYmUgcGFzc2VkIGluXG4gICAgICovXG4gICAgdmFyIHNldFBvc2l0aW9uUHJvcGVydHkgPSBmdW5jdGlvbih2YWx1ZSwgdHlwZSwgZHVyYXRpb24sIHBhcmFtcykge1xuICAgICAgdmFyIGFuaW1hdGVPYmosIHByb3BWYWx1ZTtcbiAgICAgIC8vIHVzZSBDU1MgdHJhbnNmb3JtXG4gICAgICBpZiAoc2xpZGVyLnVzaW5nQ1NTKSB7XG4gICAgICAgIC8vIGRldGVybWluZSB0aGUgdHJhbnNsYXRlM2QgdmFsdWVcbiAgICAgICAgcHJvcFZhbHVlID0gc2xpZGVyLnNldHRpbmdzLm1vZGUgPT09ICd2ZXJ0aWNhbCcgPyAndHJhbnNsYXRlM2QoMCwgJyArIHZhbHVlICsgJ3B4LCAwKScgOiAndHJhbnNsYXRlM2QoJyArIHZhbHVlICsgJ3B4LCAwLCAwKSc7XG4gICAgICAgIC8vIGFkZCB0aGUgQ1NTIHRyYW5zaXRpb24tZHVyYXRpb25cbiAgICAgICAgZWwuY3NzKCctJyArIHNsaWRlci5jc3NQcmVmaXggKyAnLXRyYW5zaXRpb24tZHVyYXRpb24nLCBkdXJhdGlvbiAvIDEwMDAgKyAncycpO1xuICAgICAgICBpZiAodHlwZSA9PT0gJ3NsaWRlJykge1xuICAgICAgICAgIC8vIHNldCB0aGUgcHJvcGVydHkgdmFsdWVcbiAgICAgICAgICBlbC5jc3Moc2xpZGVyLmFuaW1Qcm9wLCBwcm9wVmFsdWUpO1xuICAgICAgICAgIGlmIChkdXJhdGlvbiAhPT0gMCkge1xuICAgICAgICAgICAgLy8gYWRkIGEgY2FsbGJhY2sgbWV0aG9kIC0gZXhlY3V0ZXMgd2hlbiBDU1MgdHJhbnNpdGlvbiBjb21wbGV0ZXNcbiAgICAgICAgICAgIGVsLm9uKCd0cmFuc2l0aW9uZW5kIHdlYmtpdFRyYW5zaXRpb25FbmQgb1RyYW5zaXRpb25FbmQgTVNUcmFuc2l0aW9uRW5kJywgZnVuY3Rpb24oZSkge1xuICAgICAgICAgICAgICAvL21ha2Ugc3VyZSBpdCdzIHRoZSBjb3JyZWN0IG9uZVxuICAgICAgICAgICAgICBpZiAoISQoZS50YXJnZXQpLmlzKGVsKSkgeyByZXR1cm47IH1cbiAgICAgICAgICAgICAgLy8gcmVtb3ZlIHRoZSBjYWxsYmFja1xuICAgICAgICAgICAgICBlbC5vZmYoJ3RyYW5zaXRpb25lbmQgd2Via2l0VHJhbnNpdGlvbkVuZCBvVHJhbnNpdGlvbkVuZCBNU1RyYW5zaXRpb25FbmQnKTtcbiAgICAgICAgICAgICAgdXBkYXRlQWZ0ZXJTbGlkZVRyYW5zaXRpb24oKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH0gZWxzZSB7IC8vZHVyYXRpb24gPSAwXG4gICAgICAgICAgICB1cGRhdGVBZnRlclNsaWRlVHJhbnNpdGlvbigpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmICh0eXBlID09PSAncmVzZXQnKSB7XG4gICAgICAgICAgZWwuY3NzKHNsaWRlci5hbmltUHJvcCwgcHJvcFZhbHVlKTtcbiAgICAgICAgfSBlbHNlIGlmICh0eXBlID09PSAndGlja2VyJykge1xuICAgICAgICAgIC8vIG1ha2UgdGhlIHRyYW5zaXRpb24gdXNlICdsaW5lYXInXG4gICAgICAgICAgZWwuY3NzKCctJyArIHNsaWRlci5jc3NQcmVmaXggKyAnLXRyYW5zaXRpb24tdGltaW5nLWZ1bmN0aW9uJywgJ2xpbmVhcicpO1xuICAgICAgICAgIGVsLmNzcyhzbGlkZXIuYW5pbVByb3AsIHByb3BWYWx1ZSk7XG4gICAgICAgICAgaWYgKGR1cmF0aW9uICE9PSAwKSB7XG4gICAgICAgICAgICBlbC5vbigndHJhbnNpdGlvbmVuZCB3ZWJraXRUcmFuc2l0aW9uRW5kIG9UcmFuc2l0aW9uRW5kIE1TVHJhbnNpdGlvbkVuZCcsIGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgICAgICAgLy9tYWtlIHN1cmUgaXQncyB0aGUgY29ycmVjdCBvbmVcbiAgICAgICAgICAgICAgaWYgKCEkKGUudGFyZ2V0KS5pcyhlbCkpIHsgcmV0dXJuOyB9XG4gICAgICAgICAgICAgIC8vIHJlbW92ZSB0aGUgY2FsbGJhY2tcbiAgICAgICAgICAgICAgZWwub2ZmKCd0cmFuc2l0aW9uZW5kIHdlYmtpdFRyYW5zaXRpb25FbmQgb1RyYW5zaXRpb25FbmQgTVNUcmFuc2l0aW9uRW5kJyk7XG4gICAgICAgICAgICAgIC8vIHJlc2V0IHRoZSBwb3NpdGlvblxuICAgICAgICAgICAgICBzZXRQb3NpdGlvblByb3BlcnR5KHBhcmFtcy5yZXNldFZhbHVlLCAncmVzZXQnLCAwKTtcbiAgICAgICAgICAgICAgLy8gc3RhcnQgdGhlIGxvb3AgYWdhaW5cbiAgICAgICAgICAgICAgdGlja2VyTG9vcCgpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfSBlbHNlIHsgLy9kdXJhdGlvbiA9IDBcbiAgICAgICAgICAgIHNldFBvc2l0aW9uUHJvcGVydHkocGFyYW1zLnJlc2V0VmFsdWUsICdyZXNldCcsIDApO1xuICAgICAgICAgICAgdGlja2VyTG9vcCgpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgLy8gdXNlIEpTIGFuaW1hdGVcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGFuaW1hdGVPYmogPSB7fTtcbiAgICAgICAgYW5pbWF0ZU9ialtzbGlkZXIuYW5pbVByb3BdID0gdmFsdWU7XG4gICAgICAgIGlmICh0eXBlID09PSAnc2xpZGUnKSB7XG4gICAgICAgICAgZWwuYW5pbWF0ZShhbmltYXRlT2JqLCBkdXJhdGlvbiwgc2xpZGVyLnNldHRpbmdzLmVhc2luZywgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB1cGRhdGVBZnRlclNsaWRlVHJhbnNpdGlvbigpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9IGVsc2UgaWYgKHR5cGUgPT09ICdyZXNldCcpIHtcbiAgICAgICAgICBlbC5jc3Moc2xpZGVyLmFuaW1Qcm9wLCB2YWx1ZSk7XG4gICAgICAgIH0gZWxzZSBpZiAodHlwZSA9PT0gJ3RpY2tlcicpIHtcbiAgICAgICAgICBlbC5hbmltYXRlKGFuaW1hdGVPYmosIGR1cmF0aW9uLCAnbGluZWFyJywgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBzZXRQb3NpdGlvblByb3BlcnR5KHBhcmFtcy5yZXNldFZhbHVlLCAncmVzZXQnLCAwKTtcbiAgICAgICAgICAgIC8vIHJ1biB0aGUgcmVjdXJzaXZlIGxvb3AgYWZ0ZXIgYW5pbWF0aW9uXG4gICAgICAgICAgICB0aWNrZXJMb29wKCk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogUG9wdWxhdGVzIHRoZSBwYWdlciB3aXRoIHByb3BlciBhbW91bnQgb2YgcGFnZXNcbiAgICAgKi9cbiAgICB2YXIgcG9wdWxhdGVQYWdlciA9IGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIHBhZ2VySHRtbCA9ICcnLFxuICAgICAgbGlua0NvbnRlbnQgPSAnJyxcbiAgICAgIHBhZ2VyUXR5ID0gZ2V0UGFnZXJRdHkoKTtcbiAgICAgIC8vIGxvb3AgdGhyb3VnaCBlYWNoIHBhZ2VyIGl0ZW1cbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcGFnZXJRdHk7IGkrKykge1xuICAgICAgICBsaW5rQ29udGVudCA9ICcnO1xuICAgICAgICAvLyBpZiBhIGJ1aWxkUGFnZXIgZnVuY3Rpb24gaXMgc3VwcGxpZWQsIHVzZSBpdCB0byBnZXQgcGFnZXIgbGluayB2YWx1ZSwgZWxzZSB1c2UgaW5kZXggKyAxXG4gICAgICAgIGlmIChzbGlkZXIuc2V0dGluZ3MuYnVpbGRQYWdlciAmJiAkLmlzRnVuY3Rpb24oc2xpZGVyLnNldHRpbmdzLmJ1aWxkUGFnZXIpIHx8IHNsaWRlci5zZXR0aW5ncy5wYWdlckN1c3RvbSkge1xuICAgICAgICAgIGxpbmtDb250ZW50ID0gc2xpZGVyLnNldHRpbmdzLmJ1aWxkUGFnZXIoaSk7XG4gICAgICAgICAgc2xpZGVyLnBhZ2VyRWwuYWRkQ2xhc3MoJ2J4LWN1c3RvbS1wYWdlcicpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGxpbmtDb250ZW50ID0gaSArIDE7XG4gICAgICAgICAgc2xpZGVyLnBhZ2VyRWwuYWRkQ2xhc3MoJ2J4LWRlZmF1bHQtcGFnZXInKTtcbiAgICAgICAgfVxuICAgICAgICAvLyB2YXIgbGlua0NvbnRlbnQgPSBzbGlkZXIuc2V0dGluZ3MuYnVpbGRQYWdlciAmJiAkLmlzRnVuY3Rpb24oc2xpZGVyLnNldHRpbmdzLmJ1aWxkUGFnZXIpID8gc2xpZGVyLnNldHRpbmdzLmJ1aWxkUGFnZXIoaSkgOiBpICsgMTtcbiAgICAgICAgLy8gYWRkIHRoZSBtYXJrdXAgdG8gdGhlIHN0cmluZ1xuICAgICAgICBwYWdlckh0bWwgKz0gJzxkaXYgY2xhc3M9XCJieC1wYWdlci1pdGVtXCI+PGEgaHJlZj1cIlwiIGRhdGEtc2xpZGUtaW5kZXg9XCInICsgaSArICdcIiBjbGFzcz1cImJ4LXBhZ2VyLWxpbmtcIj4nICsgbGlua0NvbnRlbnQgKyAnPC9hPjwvZGl2Pic7XG4gICAgICB9XG4gICAgICAvLyBwb3B1bGF0ZSB0aGUgcGFnZXIgZWxlbWVudCB3aXRoIHBhZ2VyIGxpbmtzXG4gICAgICBzbGlkZXIucGFnZXJFbC5odG1sKHBhZ2VySHRtbCk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIEFwcGVuZHMgdGhlIHBhZ2VyIHRvIHRoZSBjb250cm9scyBlbGVtZW50XG4gICAgICovXG4gICAgdmFyIGFwcGVuZFBhZ2VyID0gZnVuY3Rpb24oKSB7XG4gICAgICBpZiAoIXNsaWRlci5zZXR0aW5ncy5wYWdlckN1c3RvbSkge1xuICAgICAgICAvLyBjcmVhdGUgdGhlIHBhZ2VyIERPTSBlbGVtZW50XG4gICAgICAgIHNsaWRlci5wYWdlckVsID0gJCgnPGRpdiBjbGFzcz1cImJ4LXBhZ2VyXCIgLz4nKTtcbiAgICAgICAgLy8gaWYgYSBwYWdlciBzZWxlY3RvciB3YXMgc3VwcGxpZWQsIHBvcHVsYXRlIGl0IHdpdGggdGhlIHBhZ2VyXG4gICAgICAgIGlmIChzbGlkZXIuc2V0dGluZ3MucGFnZXJTZWxlY3Rvcikge1xuICAgICAgICAgICQoc2xpZGVyLnNldHRpbmdzLnBhZ2VyU2VsZWN0b3IpLmh0bWwoc2xpZGVyLnBhZ2VyRWwpO1xuICAgICAgICAvLyBpZiBubyBwYWdlciBzZWxlY3RvciB3YXMgc3VwcGxpZWQsIGFkZCBpdCBhZnRlciB0aGUgd3JhcHBlclxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHNsaWRlci5jb250cm9scy5lbC5hZGRDbGFzcygnYngtaGFzLXBhZ2VyJykuYXBwZW5kKHNsaWRlci5wYWdlckVsKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBwb3B1bGF0ZSB0aGUgcGFnZXJcbiAgICAgICAgcG9wdWxhdGVQYWdlcigpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc2xpZGVyLnBhZ2VyRWwgPSAkKHNsaWRlci5zZXR0aW5ncy5wYWdlckN1c3RvbSk7XG4gICAgICB9XG4gICAgICAvLyBhc3NpZ24gdGhlIHBhZ2VyIGNsaWNrIGJpbmRpbmdcbiAgICAgIHNsaWRlci5wYWdlckVsLm9uKCdjbGljayB0b3VjaGVuZCcsICdhJywgY2xpY2tQYWdlckJpbmQpO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBBcHBlbmRzIHByZXYgLyBuZXh0IGNvbnRyb2xzIHRvIHRoZSBjb250cm9scyBlbGVtZW50XG4gICAgICovXG4gICAgdmFyIGFwcGVuZENvbnRyb2xzID0gZnVuY3Rpb24oKSB7XG4gICAgICBzbGlkZXIuY29udHJvbHMubmV4dCA9ICQoJzxhIGNsYXNzPVwiYngtbmV4dFwiIGhyZWY9XCJcIj4nICsgc2xpZGVyLnNldHRpbmdzLm5leHRUZXh0ICsgJzwvYT4nKTtcbiAgICAgIHNsaWRlci5jb250cm9scy5wcmV2ID0gJCgnPGEgY2xhc3M9XCJieC1wcmV2XCIgaHJlZj1cIlwiPicgKyBzbGlkZXIuc2V0dGluZ3MucHJldlRleHQgKyAnPC9hPicpO1xuICAgICAgLy8gYWRkIGNsaWNrIGFjdGlvbnMgdG8gdGhlIGNvbnRyb2xzXG4gICAgICBzbGlkZXIuY29udHJvbHMubmV4dC5vbignY2xpY2sgdG91Y2hlbmQnLCBjbGlja05leHRCaW5kKTtcbiAgICAgIHNsaWRlci5jb250cm9scy5wcmV2Lm9uKCdjbGljayB0b3VjaGVuZCcsIGNsaWNrUHJldkJpbmQpO1xuICAgICAgLy8gaWYgbmV4dFNlbGVjdG9yIHdhcyBzdXBwbGllZCwgcG9wdWxhdGUgaXRcbiAgICAgIGlmIChzbGlkZXIuc2V0dGluZ3MubmV4dFNlbGVjdG9yKSB7XG4gICAgICAgICQoc2xpZGVyLnNldHRpbmdzLm5leHRTZWxlY3RvcikuYXBwZW5kKHNsaWRlci5jb250cm9scy5uZXh0KTtcbiAgICAgIH1cbiAgICAgIC8vIGlmIHByZXZTZWxlY3RvciB3YXMgc3VwcGxpZWQsIHBvcHVsYXRlIGl0XG4gICAgICBpZiAoc2xpZGVyLnNldHRpbmdzLnByZXZTZWxlY3Rvcikge1xuICAgICAgICAkKHNsaWRlci5zZXR0aW5ncy5wcmV2U2VsZWN0b3IpLmFwcGVuZChzbGlkZXIuY29udHJvbHMucHJldik7XG4gICAgICB9XG4gICAgICAvLyBpZiBubyBjdXN0b20gc2VsZWN0b3JzIHdlcmUgc3VwcGxpZWRcbiAgICAgIGlmICghc2xpZGVyLnNldHRpbmdzLm5leHRTZWxlY3RvciAmJiAhc2xpZGVyLnNldHRpbmdzLnByZXZTZWxlY3Rvcikge1xuICAgICAgICAvLyBhZGQgdGhlIGNvbnRyb2xzIHRvIHRoZSBET01cbiAgICAgICAgc2xpZGVyLmNvbnRyb2xzLmRpcmVjdGlvbkVsID0gJCgnPGRpdiBjbGFzcz1cImJ4LWNvbnRyb2xzLWRpcmVjdGlvblwiIC8+Jyk7XG4gICAgICAgIC8vIGFkZCB0aGUgY29udHJvbCBlbGVtZW50cyB0byB0aGUgZGlyZWN0aW9uRWxcbiAgICAgICAgc2xpZGVyLmNvbnRyb2xzLmRpcmVjdGlvbkVsLmFwcGVuZChzbGlkZXIuY29udHJvbHMucHJldikuYXBwZW5kKHNsaWRlci5jb250cm9scy5uZXh0KTtcbiAgICAgICAgLy8gc2xpZGVyLnZpZXdwb3J0LmFwcGVuZChzbGlkZXIuY29udHJvbHMuZGlyZWN0aW9uRWwpO1xuICAgICAgICBzbGlkZXIuY29udHJvbHMuZWwuYWRkQ2xhc3MoJ2J4LWhhcy1jb250cm9scy1kaXJlY3Rpb24nKS5hcHBlbmQoc2xpZGVyLmNvbnRyb2xzLmRpcmVjdGlvbkVsKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogQXBwZW5kcyBzdGFydCAvIHN0b3AgYXV0byBjb250cm9scyB0byB0aGUgY29udHJvbHMgZWxlbWVudFxuICAgICAqL1xuICAgIHZhciBhcHBlbmRDb250cm9sc0F1dG8gPSBmdW5jdGlvbigpIHtcbiAgICAgIHNsaWRlci5jb250cm9scy5zdGFydCA9ICQoJzxkaXYgY2xhc3M9XCJieC1jb250cm9scy1hdXRvLWl0ZW1cIj48YSBjbGFzcz1cImJ4LXN0YXJ0XCIgaHJlZj1cIlwiPicgKyBzbGlkZXIuc2V0dGluZ3Muc3RhcnRUZXh0ICsgJzwvYT48L2Rpdj4nKTtcbiAgICAgIHNsaWRlci5jb250cm9scy5zdG9wID0gJCgnPGRpdiBjbGFzcz1cImJ4LWNvbnRyb2xzLWF1dG8taXRlbVwiPjxhIGNsYXNzPVwiYngtc3RvcFwiIGhyZWY9XCJcIj4nICsgc2xpZGVyLnNldHRpbmdzLnN0b3BUZXh0ICsgJzwvYT48L2Rpdj4nKTtcbiAgICAgIC8vIGFkZCB0aGUgY29udHJvbHMgdG8gdGhlIERPTVxuICAgICAgc2xpZGVyLmNvbnRyb2xzLmF1dG9FbCA9ICQoJzxkaXYgY2xhc3M9XCJieC1jb250cm9scy1hdXRvXCIgLz4nKTtcbiAgICAgIC8vIG9uIGNsaWNrIGFjdGlvbnMgdG8gdGhlIGNvbnRyb2xzXG4gICAgICBzbGlkZXIuY29udHJvbHMuYXV0b0VsLm9uKCdjbGljaycsICcuYngtc3RhcnQnLCBjbGlja1N0YXJ0QmluZCk7XG4gICAgICBzbGlkZXIuY29udHJvbHMuYXV0b0VsLm9uKCdjbGljaycsICcuYngtc3RvcCcsIGNsaWNrU3RvcEJpbmQpO1xuICAgICAgLy8gaWYgYXV0b0NvbnRyb2xzQ29tYmluZSwgaW5zZXJ0IG9ubHkgdGhlIFwic3RhcnRcIiBjb250cm9sXG4gICAgICBpZiAoc2xpZGVyLnNldHRpbmdzLmF1dG9Db250cm9sc0NvbWJpbmUpIHtcbiAgICAgICAgc2xpZGVyLmNvbnRyb2xzLmF1dG9FbC5hcHBlbmQoc2xpZGVyLmNvbnRyb2xzLnN0YXJ0KTtcbiAgICAgIC8vIGlmIGF1dG9Db250cm9sc0NvbWJpbmUgaXMgZmFsc2UsIGluc2VydCBib3RoIGNvbnRyb2xzXG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzbGlkZXIuY29udHJvbHMuYXV0b0VsLmFwcGVuZChzbGlkZXIuY29udHJvbHMuc3RhcnQpLmFwcGVuZChzbGlkZXIuY29udHJvbHMuc3RvcCk7XG4gICAgICB9XG4gICAgICAvLyBpZiBhdXRvIGNvbnRyb2xzIHNlbGVjdG9yIHdhcyBzdXBwbGllZCwgcG9wdWxhdGUgaXQgd2l0aCB0aGUgY29udHJvbHNcbiAgICAgIGlmIChzbGlkZXIuc2V0dGluZ3MuYXV0b0NvbnRyb2xzU2VsZWN0b3IpIHtcbiAgICAgICAgJChzbGlkZXIuc2V0dGluZ3MuYXV0b0NvbnRyb2xzU2VsZWN0b3IpLmh0bWwoc2xpZGVyLmNvbnRyb2xzLmF1dG9FbCk7XG4gICAgICAvLyBpZiBhdXRvIGNvbnRyb2xzIHNlbGVjdG9yIHdhcyBub3Qgc3VwcGxpZWQsIGFkZCBpdCBhZnRlciB0aGUgd3JhcHBlclxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc2xpZGVyLmNvbnRyb2xzLmVsLmFkZENsYXNzKCdieC1oYXMtY29udHJvbHMtYXV0bycpLmFwcGVuZChzbGlkZXIuY29udHJvbHMuYXV0b0VsKTtcbiAgICAgIH1cbiAgICAgIC8vIHVwZGF0ZSB0aGUgYXV0byBjb250cm9sc1xuICAgICAgdXBkYXRlQXV0b0NvbnRyb2xzKHNsaWRlci5zZXR0aW5ncy5hdXRvU3RhcnQgPyAnc3RvcCcgOiAnc3RhcnQnKTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogQXBwZW5kcyBpbWFnZSBjYXB0aW9ucyB0byB0aGUgRE9NXG4gICAgICovXG4gICAgdmFyIGFwcGVuZENhcHRpb25zID0gZnVuY3Rpb24oKSB7XG4gICAgICAvLyBjeWNsZSB0aHJvdWdoIGVhY2ggY2hpbGRcbiAgICAgIHNsaWRlci5jaGlsZHJlbi5lYWNoKGZ1bmN0aW9uKGluZGV4KSB7XG4gICAgICAgIC8vIGdldCB0aGUgaW1hZ2UgdGl0bGUgYXR0cmlidXRlXG4gICAgICAgIHZhciB0aXRsZSA9ICQodGhpcykuZmluZCgnaW1nOmZpcnN0JykuYXR0cigndGl0bGUnKTtcbiAgICAgICAgLy8gYXBwZW5kIHRoZSBjYXB0aW9uXG4gICAgICAgIGlmICh0aXRsZSAhPT0gdW5kZWZpbmVkICYmICgnJyArIHRpdGxlKS5sZW5ndGgpIHtcbiAgICAgICAgICAkKHRoaXMpLmFwcGVuZCgnPGRpdiBjbGFzcz1cImJ4LWNhcHRpb25cIj48c3Bhbj4nICsgdGl0bGUgKyAnPC9zcGFuPjwvZGl2PicpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogQ2xpY2sgbmV4dCBiaW5kaW5nXG4gICAgICpcbiAgICAgKiBAcGFyYW0gZSAoZXZlbnQpXG4gICAgICogIC0gRE9NIGV2ZW50IG9iamVjdFxuICAgICAqL1xuICAgIHZhciBjbGlja05leHRCaW5kID0gZnVuY3Rpb24oZSkge1xuICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgaWYgKHNsaWRlci5jb250cm9scy5lbC5oYXNDbGFzcygnZGlzYWJsZWQnKSkgeyByZXR1cm47IH1cbiAgICAgIC8vIGlmIGF1dG8gc2hvdyBpcyBydW5uaW5nLCBzdG9wIGl0XG4gICAgICBpZiAoc2xpZGVyLnNldHRpbmdzLmF1dG8gJiYgc2xpZGVyLnNldHRpbmdzLnN0b3BBdXRvT25DbGljaykgeyBlbC5zdG9wQXV0bygpOyB9XG4gICAgICBlbC5nb1RvTmV4dFNsaWRlKCk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIENsaWNrIHByZXYgYmluZGluZ1xuICAgICAqXG4gICAgICogQHBhcmFtIGUgKGV2ZW50KVxuICAgICAqICAtIERPTSBldmVudCBvYmplY3RcbiAgICAgKi9cbiAgICB2YXIgY2xpY2tQcmV2QmluZCA9IGZ1bmN0aW9uKGUpIHtcbiAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgIGlmIChzbGlkZXIuY29udHJvbHMuZWwuaGFzQ2xhc3MoJ2Rpc2FibGVkJykpIHsgcmV0dXJuOyB9XG4gICAgICAvLyBpZiBhdXRvIHNob3cgaXMgcnVubmluZywgc3RvcCBpdFxuICAgICAgaWYgKHNsaWRlci5zZXR0aW5ncy5hdXRvICYmIHNsaWRlci5zZXR0aW5ncy5zdG9wQXV0b09uQ2xpY2spIHsgZWwuc3RvcEF1dG8oKTsgfVxuICAgICAgZWwuZ29Ub1ByZXZTbGlkZSgpO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBDbGljayBzdGFydCBiaW5kaW5nXG4gICAgICpcbiAgICAgKiBAcGFyYW0gZSAoZXZlbnQpXG4gICAgICogIC0gRE9NIGV2ZW50IG9iamVjdFxuICAgICAqL1xuICAgIHZhciBjbGlja1N0YXJ0QmluZCA9IGZ1bmN0aW9uKGUpIHtcbiAgICAgIGVsLnN0YXJ0QXV0bygpO1xuICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBDbGljayBzdG9wIGJpbmRpbmdcbiAgICAgKlxuICAgICAqIEBwYXJhbSBlIChldmVudClcbiAgICAgKiAgLSBET00gZXZlbnQgb2JqZWN0XG4gICAgICovXG4gICAgdmFyIGNsaWNrU3RvcEJpbmQgPSBmdW5jdGlvbihlKSB7XG4gICAgICBlbC5zdG9wQXV0bygpO1xuICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBDbGljayBwYWdlciBiaW5kaW5nXG4gICAgICpcbiAgICAgKiBAcGFyYW0gZSAoZXZlbnQpXG4gICAgICogIC0gRE9NIGV2ZW50IG9iamVjdFxuICAgICAqL1xuICAgIHZhciBjbGlja1BhZ2VyQmluZCA9IGZ1bmN0aW9uKGUpIHtcbiAgICAgIHZhciBwYWdlckxpbmssIHBhZ2VySW5kZXg7XG4gICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICBpZiAoc2xpZGVyLmNvbnRyb2xzLmVsLmhhc0NsYXNzKCdkaXNhYmxlZCcpKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIC8vIGlmIGF1dG8gc2hvdyBpcyBydW5uaW5nLCBzdG9wIGl0XG4gICAgICBpZiAoc2xpZGVyLnNldHRpbmdzLmF1dG8gICYmIHNsaWRlci5zZXR0aW5ncy5zdG9wQXV0b09uQ2xpY2spIHsgZWwuc3RvcEF1dG8oKTsgfVxuICAgICAgcGFnZXJMaW5rID0gJChlLmN1cnJlbnRUYXJnZXQpO1xuICAgICAgaWYgKHBhZ2VyTGluay5hdHRyKCdkYXRhLXNsaWRlLWluZGV4JykgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICBwYWdlckluZGV4ID0gcGFyc2VJbnQocGFnZXJMaW5rLmF0dHIoJ2RhdGEtc2xpZGUtaW5kZXgnKSk7XG4gICAgICAgIC8vIGlmIGNsaWNrZWQgcGFnZXIgbGluayBpcyBub3QgYWN0aXZlLCBjb250aW51ZSB3aXRoIHRoZSBnb1RvU2xpZGUgY2FsbFxuICAgICAgICBpZiAocGFnZXJJbmRleCAhPT0gc2xpZGVyLmFjdGl2ZS5pbmRleCkgeyBlbC5nb1RvU2xpZGUocGFnZXJJbmRleCk7IH1cbiAgICAgIH1cbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogVXBkYXRlcyB0aGUgcGFnZXIgbGlua3Mgd2l0aCBhbiBhY3RpdmUgY2xhc3NcbiAgICAgKlxuICAgICAqIEBwYXJhbSBzbGlkZUluZGV4IChpbnQpXG4gICAgICogIC0gaW5kZXggb2Ygc2xpZGUgdG8gbWFrZSBhY3RpdmVcbiAgICAgKi9cbiAgICB2YXIgdXBkYXRlUGFnZXJBY3RpdmUgPSBmdW5jdGlvbihzbGlkZUluZGV4KSB7XG4gICAgICAvLyBpZiBcInNob3J0XCIgcGFnZXIgdHlwZVxuICAgICAgdmFyIGxlbiA9IHNsaWRlci5jaGlsZHJlbi5sZW5ndGg7IC8vIG5iIG9mIGNoaWxkcmVuXG4gICAgICBpZiAoc2xpZGVyLnNldHRpbmdzLnBhZ2VyVHlwZSA9PT0gJ3Nob3J0Jykge1xuICAgICAgICBpZiAoc2xpZGVyLnNldHRpbmdzLm1heFNsaWRlcyA+IDEpIHtcbiAgICAgICAgICBsZW4gPSBNYXRoLmNlaWwoc2xpZGVyLmNoaWxkcmVuLmxlbmd0aCAvIHNsaWRlci5zZXR0aW5ncy5tYXhTbGlkZXMpO1xuICAgICAgICB9XG4gICAgICAgIHNsaWRlci5wYWdlckVsLmh0bWwoKHNsaWRlSW5kZXggKyAxKSArIHNsaWRlci5zZXR0aW5ncy5wYWdlclNob3J0U2VwYXJhdG9yICsgbGVuKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgLy8gcmVtb3ZlIGFsbCBwYWdlciBhY3RpdmUgY2xhc3Nlc1xuICAgICAgc2xpZGVyLnBhZ2VyRWwuZmluZCgnYScpLnJlbW92ZUNsYXNzKCdhY3RpdmUnKTtcbiAgICAgIC8vIGFwcGx5IHRoZSBhY3RpdmUgY2xhc3MgZm9yIGFsbCBwYWdlcnNcbiAgICAgIHNsaWRlci5wYWdlckVsLmVhY2goZnVuY3Rpb24oaSwgZWwpIHsgJChlbCkuZmluZCgnYScpLmVxKHNsaWRlSW5kZXgpLmFkZENsYXNzKCdhY3RpdmUnKTsgfSk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFBlcmZvcm1zIG5lZWRlZCBhY3Rpb25zIGFmdGVyIGEgc2xpZGUgdHJhbnNpdGlvblxuICAgICAqL1xuICAgIHZhciB1cGRhdGVBZnRlclNsaWRlVHJhbnNpdGlvbiA9IGZ1bmN0aW9uKCkge1xuICAgICAgLy8gaWYgaW5maW5pdGUgbG9vcCBpcyB0cnVlXG4gICAgICBpZiAoc2xpZGVyLnNldHRpbmdzLmluZmluaXRlTG9vcCkge1xuICAgICAgICB2YXIgcG9zaXRpb24gPSAnJztcbiAgICAgICAgLy8gZmlyc3Qgc2xpZGVcbiAgICAgICAgaWYgKHNsaWRlci5hY3RpdmUuaW5kZXggPT09IDApIHtcbiAgICAgICAgICAvLyBzZXQgdGhlIG5ldyBwb3NpdGlvblxuICAgICAgICAgIHBvc2l0aW9uID0gc2xpZGVyLmNoaWxkcmVuLmVxKDApLnBvc2l0aW9uKCk7XG4gICAgICAgIC8vIGNhcm91c2VsLCBsYXN0IHNsaWRlXG4gICAgICAgIH0gZWxzZSBpZiAoc2xpZGVyLmFjdGl2ZS5pbmRleCA9PT0gZ2V0UGFnZXJRdHkoKSAtIDEgJiYgc2xpZGVyLmNhcm91c2VsKSB7XG4gICAgICAgICAgcG9zaXRpb24gPSBzbGlkZXIuY2hpbGRyZW4uZXEoKGdldFBhZ2VyUXR5KCkgLSAxKSAqIGdldE1vdmVCeSgpKS5wb3NpdGlvbigpO1xuICAgICAgICAvLyBsYXN0IHNsaWRlXG4gICAgICAgIH0gZWxzZSBpZiAoc2xpZGVyLmFjdGl2ZS5pbmRleCA9PT0gc2xpZGVyLmNoaWxkcmVuLmxlbmd0aCAtIDEpIHtcbiAgICAgICAgICBwb3NpdGlvbiA9IHNsaWRlci5jaGlsZHJlbi5lcShzbGlkZXIuY2hpbGRyZW4ubGVuZ3RoIC0gMSkucG9zaXRpb24oKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAocG9zaXRpb24pIHtcbiAgICAgICAgICBpZiAoc2xpZGVyLnNldHRpbmdzLm1vZGUgPT09ICdob3Jpem9udGFsJykgeyBzZXRQb3NpdGlvblByb3BlcnR5KC1wb3NpdGlvbi5sZWZ0LCAncmVzZXQnLCAwKTsgfVxuICAgICAgICAgIGVsc2UgaWYgKHNsaWRlci5zZXR0aW5ncy5tb2RlID09PSAndmVydGljYWwnKSB7IHNldFBvc2l0aW9uUHJvcGVydHkoLXBvc2l0aW9uLnRvcCwgJ3Jlc2V0JywgMCk7IH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgLy8gZGVjbGFyZSB0aGF0IHRoZSB0cmFuc2l0aW9uIGlzIGNvbXBsZXRlXG4gICAgICBzbGlkZXIud29ya2luZyA9IGZhbHNlO1xuICAgICAgLy8gb25TbGlkZUFmdGVyIGNhbGxiYWNrXG4gICAgICBzbGlkZXIuc2V0dGluZ3Mub25TbGlkZUFmdGVyLmNhbGwoZWwsIHNsaWRlci5jaGlsZHJlbi5lcShzbGlkZXIuYWN0aXZlLmluZGV4KSwgc2xpZGVyLm9sZEluZGV4LCBzbGlkZXIuYWN0aXZlLmluZGV4KTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogVXBkYXRlcyB0aGUgYXV0byBjb250cm9scyBzdGF0ZSAoZWl0aGVyIGFjdGl2ZSwgb3IgY29tYmluZWQgc3dpdGNoKVxuICAgICAqXG4gICAgICogQHBhcmFtIHN0YXRlIChzdHJpbmcpIFwic3RhcnRcIiwgXCJzdG9wXCJcbiAgICAgKiAgLSB0aGUgbmV3IHN0YXRlIG9mIHRoZSBhdXRvIHNob3dcbiAgICAgKi9cbiAgICB2YXIgdXBkYXRlQXV0b0NvbnRyb2xzID0gZnVuY3Rpb24oc3RhdGUpIHtcbiAgICAgIC8vIGlmIGF1dG9Db250cm9sc0NvbWJpbmUgaXMgdHJ1ZSwgcmVwbGFjZSB0aGUgY3VycmVudCBjb250cm9sIHdpdGggdGhlIG5ldyBzdGF0ZVxuICAgICAgaWYgKHNsaWRlci5zZXR0aW5ncy5hdXRvQ29udHJvbHNDb21iaW5lKSB7XG4gICAgICAgIHNsaWRlci5jb250cm9scy5hdXRvRWwuaHRtbChzbGlkZXIuY29udHJvbHNbc3RhdGVdKTtcbiAgICAgIC8vIGlmIGF1dG9Db250cm9sc0NvbWJpbmUgaXMgZmFsc2UsIGFwcGx5IHRoZSBcImFjdGl2ZVwiIGNsYXNzIHRvIHRoZSBhcHByb3ByaWF0ZSBjb250cm9sXG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzbGlkZXIuY29udHJvbHMuYXV0b0VsLmZpbmQoJ2EnKS5yZW1vdmVDbGFzcygnYWN0aXZlJyk7XG4gICAgICAgIHNsaWRlci5jb250cm9scy5hdXRvRWwuZmluZCgnYTpub3QoLmJ4LScgKyBzdGF0ZSArICcpJykuYWRkQ2xhc3MoJ2FjdGl2ZScpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBVcGRhdGVzIHRoZSBkaXJlY3Rpb24gY29udHJvbHMgKGNoZWNrcyBpZiBlaXRoZXIgc2hvdWxkIGJlIGhpZGRlbilcbiAgICAgKi9cbiAgICB2YXIgdXBkYXRlRGlyZWN0aW9uQ29udHJvbHMgPSBmdW5jdGlvbigpIHtcbiAgICAgIGlmIChnZXRQYWdlclF0eSgpID09PSAxKSB7XG4gICAgICAgIHNsaWRlci5jb250cm9scy5wcmV2LmFkZENsYXNzKCdkaXNhYmxlZCcpO1xuICAgICAgICBzbGlkZXIuY29udHJvbHMubmV4dC5hZGRDbGFzcygnZGlzYWJsZWQnKTtcbiAgICAgIH0gZWxzZSBpZiAoIXNsaWRlci5zZXR0aW5ncy5pbmZpbml0ZUxvb3AgJiYgc2xpZGVyLnNldHRpbmdzLmhpZGVDb250cm9sT25FbmQpIHtcbiAgICAgICAgLy8gaWYgZmlyc3Qgc2xpZGVcbiAgICAgICAgaWYgKHNsaWRlci5hY3RpdmUuaW5kZXggPT09IDApIHtcbiAgICAgICAgICBzbGlkZXIuY29udHJvbHMucHJldi5hZGRDbGFzcygnZGlzYWJsZWQnKTtcbiAgICAgICAgICBzbGlkZXIuY29udHJvbHMubmV4dC5yZW1vdmVDbGFzcygnZGlzYWJsZWQnKTtcbiAgICAgICAgLy8gaWYgbGFzdCBzbGlkZVxuICAgICAgICB9IGVsc2UgaWYgKHNsaWRlci5hY3RpdmUuaW5kZXggPT09IGdldFBhZ2VyUXR5KCkgLSAxKSB7XG4gICAgICAgICAgc2xpZGVyLmNvbnRyb2xzLm5leHQuYWRkQ2xhc3MoJ2Rpc2FibGVkJyk7XG4gICAgICAgICAgc2xpZGVyLmNvbnRyb2xzLnByZXYucmVtb3ZlQ2xhc3MoJ2Rpc2FibGVkJyk7XG4gICAgICAgIC8vIGlmIGFueSBzbGlkZSBpbiB0aGUgbWlkZGxlXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgc2xpZGVyLmNvbnRyb2xzLnByZXYucmVtb3ZlQ2xhc3MoJ2Rpc2FibGVkJyk7XG4gICAgICAgICAgc2xpZGVyLmNvbnRyb2xzLm5leHQucmVtb3ZlQ2xhc3MoJ2Rpc2FibGVkJyk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9O1xuXHQvKiBhdXRvIHN0YXJ0IGFuZCBzdG9wIGZ1bmN0aW9ucyAqL1xuXHR2YXIgd2luZG93Rm9jdXNIYW5kbGVyID0gZnVuY3Rpb24oKSB7IGVsLnN0YXJ0QXV0bygpOyB9O1xuXHR2YXIgd2luZG93Qmx1ckhhbmRsZXIgPSBmdW5jdGlvbigpIHsgZWwuc3RvcEF1dG8oKTsgfTtcbiAgICAvKipcbiAgICAgKiBJbml0aWFsaXplcyB0aGUgYXV0byBwcm9jZXNzXG4gICAgICovXG4gICAgdmFyIGluaXRBdXRvID0gZnVuY3Rpb24oKSB7XG4gICAgICAvLyBpZiBhdXRvRGVsYXkgd2FzIHN1cHBsaWVkLCBsYXVuY2ggdGhlIGF1dG8gc2hvdyB1c2luZyBhIHNldFRpbWVvdXQoKSBjYWxsXG4gICAgICBpZiAoc2xpZGVyLnNldHRpbmdzLmF1dG9EZWxheSA+IDApIHtcbiAgICAgICAgc2V0VGltZW91dChlbC5zdGFydEF1dG8sIHNsaWRlci5zZXR0aW5ncy5hdXRvRGVsYXkpO1xuICAgICAgLy8gaWYgYXV0b0RlbGF5IHdhcyBub3Qgc3VwcGxpZWQsIHN0YXJ0IHRoZSBhdXRvIHNob3cgbm9ybWFsbHlcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGVsLnN0YXJ0QXV0bygpO1xuXG4gICAgICAgIC8vYWRkIGZvY3VzIGFuZCBibHVyIGV2ZW50cyB0byBlbnN1cmUgaXRzIHJ1bm5pbmcgaWYgdGltZW91dCBnZXRzIHBhdXNlZFxuICAgICAgICAkKHdpbmRvdykuZm9jdXMod2luZG93Rm9jdXNIYW5kbGVyKS5ibHVyKHdpbmRvd0JsdXJIYW5kbGVyKTtcbiAgICAgIH1cbiAgICAgIC8vIGlmIGF1dG9Ib3ZlciBpcyByZXF1ZXN0ZWRcbiAgICAgIGlmIChzbGlkZXIuc2V0dGluZ3MuYXV0b0hvdmVyKSB7XG4gICAgICAgIC8vIG9uIGVsIGhvdmVyXG4gICAgICAgIGVsLmhvdmVyKGZ1bmN0aW9uKCkge1xuICAgICAgICAgIC8vIGlmIHRoZSBhdXRvIHNob3cgaXMgY3VycmVudGx5IHBsYXlpbmcgKGhhcyBhbiBhY3RpdmUgaW50ZXJ2YWwpXG4gICAgICAgICAgaWYgKHNsaWRlci5pbnRlcnZhbCkge1xuICAgICAgICAgICAgLy8gc3RvcCB0aGUgYXV0byBzaG93IGFuZCBwYXNzIHRydWUgYXJndW1lbnQgd2hpY2ggd2lsbCBwcmV2ZW50IGNvbnRyb2wgdXBkYXRlXG4gICAgICAgICAgICBlbC5zdG9wQXV0byh0cnVlKTtcbiAgICAgICAgICAgIC8vIGNyZWF0ZSBhIG5ldyBhdXRvUGF1c2VkIHZhbHVlIHdoaWNoIHdpbGwgYmUgdXNlZCBieSB0aGUgcmVsYXRpdmUgXCJtb3VzZW91dFwiIGV2ZW50XG4gICAgICAgICAgICBzbGlkZXIuYXV0b1BhdXNlZCA9IHRydWU7XG4gICAgICAgICAgfVxuICAgICAgICB9LCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAvLyBpZiB0aGUgYXV0b1BhdXNlZCB2YWx1ZSB3YXMgY3JlYXRlZCBiZSB0aGUgcHJpb3IgXCJtb3VzZW92ZXJcIiBldmVudFxuICAgICAgICAgIGlmIChzbGlkZXIuYXV0b1BhdXNlZCkge1xuICAgICAgICAgICAgLy8gc3RhcnQgdGhlIGF1dG8gc2hvdyBhbmQgcGFzcyB0cnVlIGFyZ3VtZW50IHdoaWNoIHdpbGwgcHJldmVudCBjb250cm9sIHVwZGF0ZVxuICAgICAgICAgICAgZWwuc3RhcnRBdXRvKHRydWUpO1xuICAgICAgICAgICAgLy8gcmVzZXQgdGhlIGF1dG9QYXVzZWQgdmFsdWVcbiAgICAgICAgICAgIHNsaWRlci5hdXRvUGF1c2VkID0gbnVsbDtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBJbml0aWFsaXplcyB0aGUgdGlja2VyIHByb2Nlc3NcbiAgICAgKi9cbiAgICB2YXIgaW5pdFRpY2tlciA9IGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIHN0YXJ0UG9zaXRpb24gPSAwLFxuICAgICAgcG9zaXRpb24sIHRyYW5zZm9ybSwgdmFsdWUsIGlkeCwgcmF0aW8sIHByb3BlcnR5LCBuZXdTcGVlZCwgdG90YWxEaW1lbnM7XG4gICAgICAvLyBpZiBhdXRvRGlyZWN0aW9uIGlzIFwibmV4dFwiLCBhcHBlbmQgYSBjbG9uZSBvZiB0aGUgZW50aXJlIHNsaWRlclxuICAgICAgaWYgKHNsaWRlci5zZXR0aW5ncy5hdXRvRGlyZWN0aW9uID09PSAnbmV4dCcpIHtcbiAgICAgICAgZWwuYXBwZW5kKHNsaWRlci5jaGlsZHJlbi5jbG9uZSgpLmFkZENsYXNzKCdieC1jbG9uZScpKTtcbiAgICAgIC8vIGlmIGF1dG9EaXJlY3Rpb24gaXMgXCJwcmV2XCIsIHByZXBlbmQgYSBjbG9uZSBvZiB0aGUgZW50aXJlIHNsaWRlciwgYW5kIHNldCB0aGUgbGVmdCBwb3NpdGlvblxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZWwucHJlcGVuZChzbGlkZXIuY2hpbGRyZW4uY2xvbmUoKS5hZGRDbGFzcygnYngtY2xvbmUnKSk7XG4gICAgICAgIHBvc2l0aW9uID0gc2xpZGVyLmNoaWxkcmVuLmZpcnN0KCkucG9zaXRpb24oKTtcbiAgICAgICAgc3RhcnRQb3NpdGlvbiA9IHNsaWRlci5zZXR0aW5ncy5tb2RlID09PSAnaG9yaXpvbnRhbCcgPyAtcG9zaXRpb24ubGVmdCA6IC1wb3NpdGlvbi50b3A7XG4gICAgICB9XG4gICAgICBzZXRQb3NpdGlvblByb3BlcnR5KHN0YXJ0UG9zaXRpb24sICdyZXNldCcsIDApO1xuICAgICAgLy8gZG8gbm90IGFsbG93IGNvbnRyb2xzIGluIHRpY2tlciBtb2RlXG4gICAgICBzbGlkZXIuc2V0dGluZ3MucGFnZXIgPSBmYWxzZTtcbiAgICAgIHNsaWRlci5zZXR0aW5ncy5jb250cm9scyA9IGZhbHNlO1xuICAgICAgc2xpZGVyLnNldHRpbmdzLmF1dG9Db250cm9scyA9IGZhbHNlO1xuICAgICAgLy8gaWYgYXV0b0hvdmVyIGlzIHJlcXVlc3RlZFxuICAgICAgaWYgKHNsaWRlci5zZXR0aW5ncy50aWNrZXJIb3Zlcikge1xuICAgICAgICBpZiAoc2xpZGVyLnVzaW5nQ1NTKSB7XG4gICAgICAgICAgaWR4ID0gc2xpZGVyLnNldHRpbmdzLm1vZGUgPT09ICdob3Jpem9udGFsJyA/IDQgOiA1O1xuICAgICAgICAgIHNsaWRlci52aWV3cG9ydC5ob3ZlcihmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHRyYW5zZm9ybSA9IGVsLmNzcygnLScgKyBzbGlkZXIuY3NzUHJlZml4ICsgJy10cmFuc2Zvcm0nKTtcbiAgICAgICAgICAgIHZhbHVlID0gcGFyc2VGbG9hdCh0cmFuc2Zvcm0uc3BsaXQoJywnKVtpZHhdKTtcbiAgICAgICAgICAgIHNldFBvc2l0aW9uUHJvcGVydHkodmFsdWUsICdyZXNldCcsIDApO1xuICAgICAgICAgIH0sIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgdG90YWxEaW1lbnMgPSAwO1xuICAgICAgICAgICAgc2xpZGVyLmNoaWxkcmVuLmVhY2goZnVuY3Rpb24oaW5kZXgpIHtcbiAgICAgICAgICAgICAgdG90YWxEaW1lbnMgKz0gc2xpZGVyLnNldHRpbmdzLm1vZGUgPT09ICdob3Jpem9udGFsJyA/ICQodGhpcykub3V0ZXJXaWR0aCh0cnVlKSA6ICQodGhpcykub3V0ZXJIZWlnaHQodHJ1ZSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIC8vIGNhbGN1bGF0ZSB0aGUgc3BlZWQgcmF0aW8gKHVzZWQgdG8gZGV0ZXJtaW5lIHRoZSBuZXcgc3BlZWQgdG8gZmluaXNoIHRoZSBwYXVzZWQgYW5pbWF0aW9uKVxuICAgICAgICAgICAgcmF0aW8gPSBzbGlkZXIuc2V0dGluZ3Muc3BlZWQgLyB0b3RhbERpbWVucztcbiAgICAgICAgICAgIC8vIGRldGVybWluZSB3aGljaCBwcm9wZXJ0eSB0byB1c2VcbiAgICAgICAgICAgIHByb3BlcnR5ID0gc2xpZGVyLnNldHRpbmdzLm1vZGUgPT09ICdob3Jpem9udGFsJyA/ICdsZWZ0JyA6ICd0b3AnO1xuICAgICAgICAgICAgLy8gY2FsY3VsYXRlIHRoZSBuZXcgc3BlZWRcbiAgICAgICAgICAgIG5ld1NwZWVkID0gcmF0aW8gKiAodG90YWxEaW1lbnMgLSAoTWF0aC5hYnMocGFyc2VJbnQodmFsdWUpKSkpO1xuICAgICAgICAgICAgdGlja2VyTG9vcChuZXdTcGVlZCk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgLy8gb24gZWwgaG92ZXJcbiAgICAgICAgICBzbGlkZXIudmlld3BvcnQuaG92ZXIoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBlbC5zdG9wKCk7XG4gICAgICAgICAgfSwgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAvLyBjYWxjdWxhdGUgdGhlIHRvdGFsIHdpZHRoIG9mIGNoaWxkcmVuICh1c2VkIHRvIGNhbGN1bGF0ZSB0aGUgc3BlZWQgcmF0aW8pXG4gICAgICAgICAgICB0b3RhbERpbWVucyA9IDA7XG4gICAgICAgICAgICBzbGlkZXIuY2hpbGRyZW4uZWFjaChmdW5jdGlvbihpbmRleCkge1xuICAgICAgICAgICAgICB0b3RhbERpbWVucyArPSBzbGlkZXIuc2V0dGluZ3MubW9kZSA9PT0gJ2hvcml6b250YWwnID8gJCh0aGlzKS5vdXRlcldpZHRoKHRydWUpIDogJCh0aGlzKS5vdXRlckhlaWdodCh0cnVlKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgLy8gY2FsY3VsYXRlIHRoZSBzcGVlZCByYXRpbyAodXNlZCB0byBkZXRlcm1pbmUgdGhlIG5ldyBzcGVlZCB0byBmaW5pc2ggdGhlIHBhdXNlZCBhbmltYXRpb24pXG4gICAgICAgICAgICByYXRpbyA9IHNsaWRlci5zZXR0aW5ncy5zcGVlZCAvIHRvdGFsRGltZW5zO1xuICAgICAgICAgICAgLy8gZGV0ZXJtaW5lIHdoaWNoIHByb3BlcnR5IHRvIHVzZVxuICAgICAgICAgICAgcHJvcGVydHkgPSBzbGlkZXIuc2V0dGluZ3MubW9kZSA9PT0gJ2hvcml6b250YWwnID8gJ2xlZnQnIDogJ3RvcCc7XG4gICAgICAgICAgICAvLyBjYWxjdWxhdGUgdGhlIG5ldyBzcGVlZFxuICAgICAgICAgICAgbmV3U3BlZWQgPSByYXRpbyAqICh0b3RhbERpbWVucyAtIChNYXRoLmFicyhwYXJzZUludChlbC5jc3MocHJvcGVydHkpKSkpKTtcbiAgICAgICAgICAgIHRpY2tlckxvb3AobmV3U3BlZWQpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICAvLyBzdGFydCB0aGUgdGlja2VyIGxvb3BcbiAgICAgIHRpY2tlckxvb3AoKTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogUnVucyBhIGNvbnRpbnVvdXMgbG9vcCwgbmV3cyB0aWNrZXItc3R5bGVcbiAgICAgKi9cbiAgICB2YXIgdGlja2VyTG9vcCA9IGZ1bmN0aW9uKHJlc3VtZVNwZWVkKSB7XG4gICAgICB2YXIgc3BlZWQgPSByZXN1bWVTcGVlZCA/IHJlc3VtZVNwZWVkIDogc2xpZGVyLnNldHRpbmdzLnNwZWVkLFxuICAgICAgcG9zaXRpb24gPSB7bGVmdDogMCwgdG9wOiAwfSxcbiAgICAgIHJlc2V0ID0ge2xlZnQ6IDAsIHRvcDogMH0sXG4gICAgICBhbmltYXRlUHJvcGVydHksIHJlc2V0VmFsdWUsIHBhcmFtcztcblxuICAgICAgLy8gaWYgXCJuZXh0XCIgYW5pbWF0ZSBsZWZ0IHBvc2l0aW9uIHRvIGxhc3QgY2hpbGQsIHRoZW4gcmVzZXQgbGVmdCB0byAwXG4gICAgICBpZiAoc2xpZGVyLnNldHRpbmdzLmF1dG9EaXJlY3Rpb24gPT09ICduZXh0Jykge1xuICAgICAgICBwb3NpdGlvbiA9IGVsLmZpbmQoJy5ieC1jbG9uZScpLmZpcnN0KCkucG9zaXRpb24oKTtcbiAgICAgIC8vIGlmIFwicHJldlwiIGFuaW1hdGUgbGVmdCBwb3NpdGlvbiB0byAwLCB0aGVuIHJlc2V0IGxlZnQgdG8gZmlyc3Qgbm9uLWNsb25lIGNoaWxkXG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXNldCA9IHNsaWRlci5jaGlsZHJlbi5maXJzdCgpLnBvc2l0aW9uKCk7XG4gICAgICB9XG4gICAgICBhbmltYXRlUHJvcGVydHkgPSBzbGlkZXIuc2V0dGluZ3MubW9kZSA9PT0gJ2hvcml6b250YWwnID8gLXBvc2l0aW9uLmxlZnQgOiAtcG9zaXRpb24udG9wO1xuICAgICAgcmVzZXRWYWx1ZSA9IHNsaWRlci5zZXR0aW5ncy5tb2RlID09PSAnaG9yaXpvbnRhbCcgPyAtcmVzZXQubGVmdCA6IC1yZXNldC50b3A7XG4gICAgICBwYXJhbXMgPSB7cmVzZXRWYWx1ZTogcmVzZXRWYWx1ZX07XG4gICAgICBzZXRQb3NpdGlvblByb3BlcnR5KGFuaW1hdGVQcm9wZXJ0eSwgJ3RpY2tlcicsIHNwZWVkLCBwYXJhbXMpO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBDaGVjayBpZiBlbCBpcyBvbiBzY3JlZW5cbiAgICAgKi9cbiAgICB2YXIgaXNPblNjcmVlbiA9IGZ1bmN0aW9uKGVsKSB7XG4gICAgICB2YXIgd2luID0gJCh3aW5kb3cpLFxuICAgICAgdmlld3BvcnQgPSB7XG4gICAgICAgIHRvcDogd2luLnNjcm9sbFRvcCgpLFxuICAgICAgICBsZWZ0OiB3aW4uc2Nyb2xsTGVmdCgpXG4gICAgICB9LFxuICAgICAgYm91bmRzID0gZWwub2Zmc2V0KCk7XG5cbiAgICAgIHZpZXdwb3J0LnJpZ2h0ID0gdmlld3BvcnQubGVmdCArIHdpbi53aWR0aCgpO1xuICAgICAgdmlld3BvcnQuYm90dG9tID0gdmlld3BvcnQudG9wICsgd2luLmhlaWdodCgpO1xuICAgICAgYm91bmRzLnJpZ2h0ID0gYm91bmRzLmxlZnQgKyBlbC5vdXRlcldpZHRoKCk7XG4gICAgICBib3VuZHMuYm90dG9tID0gYm91bmRzLnRvcCArIGVsLm91dGVySGVpZ2h0KCk7XG5cbiAgICAgIHJldHVybiAoISh2aWV3cG9ydC5yaWdodCA8IGJvdW5kcy5sZWZ0IHx8IHZpZXdwb3J0LmxlZnQgPiBib3VuZHMucmlnaHQgfHwgdmlld3BvcnQuYm90dG9tIDwgYm91bmRzLnRvcCB8fCB2aWV3cG9ydC50b3AgPiBib3VuZHMuYm90dG9tKSk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIEluaXRpYWxpemVzIGtleWJvYXJkIGV2ZW50c1xuICAgICAqL1xuICAgIHZhciBrZXlQcmVzcyA9IGZ1bmN0aW9uKGUpIHtcbiAgICAgIHZhciBhY3RpdmVFbGVtZW50VGFnID0gZG9jdW1lbnQuYWN0aXZlRWxlbWVudC50YWdOYW1lLnRvTG93ZXJDYXNlKCksXG4gICAgICB0YWdGaWx0ZXJzID0gJ2lucHV0fHRleHRhcmVhJyxcbiAgICAgIHAgPSBuZXcgUmVnRXhwKGFjdGl2ZUVsZW1lbnRUYWcsWydpJ10pLFxuICAgICAgcmVzdWx0ID0gcC5leGVjKHRhZ0ZpbHRlcnMpO1xuXG4gICAgICBpZiAocmVzdWx0ID09IG51bGwgJiYgaXNPblNjcmVlbihlbCkpIHtcbiAgICAgICAgaWYgKGUua2V5Q29kZSA9PT0gMzkpIHtcbiAgICAgICAgICBjbGlja05leHRCaW5kKGUpO1xuICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfSBlbHNlIGlmIChlLmtleUNvZGUgPT09IDM3KSB7XG4gICAgICAgICAgY2xpY2tQcmV2QmluZChlKTtcbiAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogSW5pdGlhbGl6ZXMgdG91Y2ggZXZlbnRzXG4gICAgICovXG4gICAgdmFyIGluaXRUb3VjaCA9IGZ1bmN0aW9uKCkge1xuICAgICAgLy8gaW5pdGlhbGl6ZSBvYmplY3QgdG8gY29udGFpbiBhbGwgdG91Y2ggdmFsdWVzXG4gICAgICBzbGlkZXIudG91Y2ggPSB7XG4gICAgICAgIHN0YXJ0OiB7eDogMCwgeTogMH0sXG4gICAgICAgIGVuZDoge3g6IDAsIHk6IDB9XG4gICAgICB9O1xuICAgICAgc2xpZGVyLnZpZXdwb3J0Lm9uKCd0b3VjaHN0YXJ0IE1TUG9pbnRlckRvd24gcG9pbnRlcmRvd24nLCBvblRvdWNoU3RhcnQpO1xuXG4gICAgICAvL2ZvciBicm93c2VycyB0aGF0IGhhdmUgaW1wbGVtZW50ZWQgcG9pbnRlciBldmVudHMgYW5kIGZpcmUgYSBjbGljayBhZnRlclxuICAgICAgLy9ldmVyeSBwb2ludGVydXAgcmVnYXJkbGVzcyBvZiB3aGV0aGVyIHBvaW50ZXJ1cCBpcyBvbiBzYW1lIHNjcmVlbiBsb2NhdGlvbiBhcyBwb2ludGVyZG93biBvciBub3RcbiAgICAgIHNsaWRlci52aWV3cG9ydC5vbignY2xpY2snLCAnLmJ4c2xpZGVyIGEnLCBmdW5jdGlvbihlKSB7XG4gICAgICAgIGlmIChzbGlkZXIudmlld3BvcnQuaGFzQ2xhc3MoJ2NsaWNrLWRpc2FibGVkJykpIHtcbiAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgc2xpZGVyLnZpZXdwb3J0LnJlbW92ZUNsYXNzKCdjbGljay1kaXNhYmxlZCcpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogRXZlbnQgaGFuZGxlciBmb3IgXCJ0b3VjaHN0YXJ0XCJcbiAgICAgKlxuICAgICAqIEBwYXJhbSBlIChldmVudClcbiAgICAgKiAgLSBET00gZXZlbnQgb2JqZWN0XG4gICAgICovXG4gICAgdmFyIG9uVG91Y2hTdGFydCA9IGZ1bmN0aW9uKGUpIHtcbiAgICAgIC8vIHdhdGNoIG9ubHkgZm9yIGxlZnQgbW91c2UsIHRvdWNoIGNvbnRhY3QgYW5kIHBlbiBjb250YWN0XG4gICAgICAvLyB0b3VjaHN0YXJ0IGV2ZW50IG9iamVjdCBkb2VzbmB0IGhhdmUgYnV0dG9uIHByb3BlcnR5XG4gICAgICBpZiAoZS50eXBlICE9PSAndG91Y2hzdGFydCcgJiYgZS5idXR0b24gIT09IDApIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgLy9kaXNhYmxlIHNsaWRlciBjb250cm9scyB3aGlsZSB1c2VyIGlzIGludGVyYWN0aW5nIHdpdGggc2xpZGVzIHRvIGF2b2lkIHNsaWRlciBmcmVlemUgdGhhdCBoYXBwZW5zIG9uIHRvdWNoIGRldmljZXMgd2hlbiBhIHNsaWRlIHN3aXBlIGhhcHBlbnMgaW1tZWRpYXRlbHkgYWZ0ZXIgaW50ZXJhY3Rpbmcgd2l0aCBzbGlkZXIgY29udHJvbHNcbiAgICAgIHNsaWRlci5jb250cm9scy5lbC5hZGRDbGFzcygnZGlzYWJsZWQnKTtcblxuICAgICAgaWYgKHNsaWRlci53b3JraW5nKSB7XG4gICAgICAgIHNsaWRlci5jb250cm9scy5lbC5yZW1vdmVDbGFzcygnZGlzYWJsZWQnKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIHJlY29yZCB0aGUgb3JpZ2luYWwgcG9zaXRpb24gd2hlbiB0b3VjaCBzdGFydHNcbiAgICAgICAgc2xpZGVyLnRvdWNoLm9yaWdpbmFsUG9zID0gZWwucG9zaXRpb24oKTtcbiAgICAgICAgdmFyIG9yaWcgPSBlLm9yaWdpbmFsRXZlbnQsXG4gICAgICAgIHRvdWNoUG9pbnRzID0gKHR5cGVvZiBvcmlnLmNoYW5nZWRUb3VjaGVzICE9PSAndW5kZWZpbmVkJykgPyBvcmlnLmNoYW5nZWRUb3VjaGVzIDogW29yaWddO1xuXHRcdHZhciBjaHJvbWVQb2ludGVyRXZlbnRzID0gdHlwZW9mIFBvaW50ZXJFdmVudCA9PT0gJ2Z1bmN0aW9uJzsgXG5cdFx0aWYgKGNocm9tZVBvaW50ZXJFdmVudHMpIHsgXG5cdFx0XHRpZiAob3JpZy5wb2ludGVySWQgPT09IHVuZGVmaW5lZCkgeyBcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fSBcblx0XHR9XG4gICAgICAgIC8vIHJlY29yZCB0aGUgc3RhcnRpbmcgdG91Y2ggeCwgeSBjb29yZGluYXRlc1xuICAgICAgICBzbGlkZXIudG91Y2guc3RhcnQueCA9IHRvdWNoUG9pbnRzWzBdLnBhZ2VYO1xuICAgICAgICBzbGlkZXIudG91Y2guc3RhcnQueSA9IHRvdWNoUG9pbnRzWzBdLnBhZ2VZO1xuXG4gICAgICAgIGlmIChzbGlkZXIudmlld3BvcnQuZ2V0KDApLnNldFBvaW50ZXJDYXB0dXJlKSB7XG4gICAgICAgICAgc2xpZGVyLnBvaW50ZXJJZCA9IG9yaWcucG9pbnRlcklkO1xuICAgICAgICAgIHNsaWRlci52aWV3cG9ydC5nZXQoMCkuc2V0UG9pbnRlckNhcHR1cmUoc2xpZGVyLnBvaW50ZXJJZCk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gc3RvcmUgb3JpZ2luYWwgZXZlbnQgZGF0YSBmb3IgY2xpY2sgZml4YXRpb25cbiAgICAgICAgc2xpZGVyLm9yaWdpbmFsQ2xpY2tUYXJnZXQgPSBvcmlnLm9yaWdpbmFsVGFyZ2V0IHx8IG9yaWcudGFyZ2V0O1xuICAgICAgICBzbGlkZXIub3JpZ2luYWxDbGlja0J1dHRvbiA9IG9yaWcuYnV0dG9uO1xuICAgICAgICBzbGlkZXIub3JpZ2luYWxDbGlja0J1dHRvbnMgPSBvcmlnLmJ1dHRvbnM7XG4gICAgICAgIHNsaWRlci5vcmlnaW5hbEV2ZW50VHlwZSA9IG9yaWcudHlwZTtcbiAgICAgICAgLy8gYXQgdGhpcyBtb21lbnQgd2UgZG9uYHQga25vdyB3aGF0IGl0IGlzIGNsaWNrIG9yIHN3aXBlXG4gICAgICAgIHNsaWRlci5oYXNNb3ZlID0gZmFsc2U7XG4gICAgICAgIC8vIG9uIGEgXCJ0b3VjaG1vdmVcIiBldmVudCB0byB0aGUgdmlld3BvcnRcbiAgICAgICAgc2xpZGVyLnZpZXdwb3J0Lm9uKCd0b3VjaG1vdmUgTVNQb2ludGVyTW92ZSBwb2ludGVybW92ZScsIG9uVG91Y2hNb3ZlKTtcbiAgICAgICAgLy8gb24gYSBcInRvdWNoZW5kXCIgZXZlbnQgdG8gdGhlIHZpZXdwb3J0XG4gICAgICAgIHNsaWRlci52aWV3cG9ydC5vbigndG91Y2hlbmQgTVNQb2ludGVyVXAgcG9pbnRlcnVwJywgb25Ub3VjaEVuZCk7XG4gICAgICAgIHNsaWRlci52aWV3cG9ydC5vbignTVNQb2ludGVyQ2FuY2VsIHBvaW50ZXJjYW5jZWwnLCBvblBvaW50ZXJDYW5jZWwpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBDYW5jZWwgUG9pbnRlciBmb3IgV2luZG93cyBQaG9uZVxuICAgICAqXG4gICAgICogQHBhcmFtIGUgKGV2ZW50KVxuICAgICAqICAtIERPTSBldmVudCBvYmplY3RcbiAgICAgKi9cbiAgICB2YXIgb25Qb2ludGVyQ2FuY2VsID0gZnVuY3Rpb24oZSkge1xuICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgLyogb25Qb2ludGVyQ2FuY2VsIGhhbmRsZXIgaXMgbmVlZGVkIHRvIGRlYWwgd2l0aCBzaXR1YXRpb25zIHdoZW4gYSB0b3VjaGVuZFxuICAgICAgZG9lc24ndCBmaXJlIGFmdGVyIGEgdG91Y2hzdGFydCAodGhpcyBoYXBwZW5zIG9uIHdpbmRvd3MgcGhvbmVzIG9ubHkpICovXG4gICAgICBzZXRQb3NpdGlvblByb3BlcnR5KHNsaWRlci50b3VjaC5vcmlnaW5hbFBvcy5sZWZ0LCAncmVzZXQnLCAwKTtcblxuICAgICAgLy9yZW1vdmUgaGFuZGxlcnNcbiAgICAgIHNsaWRlci5jb250cm9scy5lbC5yZW1vdmVDbGFzcygnZGlzYWJsZWQnKTtcbiAgICAgIHNsaWRlci52aWV3cG9ydC5vZmYoJ01TUG9pbnRlckNhbmNlbCBwb2ludGVyY2FuY2VsJywgb25Qb2ludGVyQ2FuY2VsKTtcbiAgICAgIHNsaWRlci52aWV3cG9ydC5vZmYoJ3RvdWNobW92ZSBNU1BvaW50ZXJNb3ZlIHBvaW50ZXJtb3ZlJywgb25Ub3VjaE1vdmUpO1xuICAgICAgc2xpZGVyLnZpZXdwb3J0Lm9mZigndG91Y2hlbmQgTVNQb2ludGVyVXAgcG9pbnRlcnVwJywgb25Ub3VjaEVuZCk7XG4gICAgICBpZiAoc2xpZGVyLnZpZXdwb3J0LmdldCgwKS5yZWxlYXNlUG9pbnRlckNhcHR1cmUpIHtcbiAgICAgICAgc2xpZGVyLnZpZXdwb3J0LmdldCgwKS5yZWxlYXNlUG9pbnRlckNhcHR1cmUoc2xpZGVyLnBvaW50ZXJJZCk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIEV2ZW50IGhhbmRsZXIgZm9yIFwidG91Y2htb3ZlXCJcbiAgICAgKlxuICAgICAqIEBwYXJhbSBlIChldmVudClcbiAgICAgKiAgLSBET00gZXZlbnQgb2JqZWN0XG4gICAgICovXG4gICAgdmFyIG9uVG91Y2hNb3ZlID0gZnVuY3Rpb24oZSkge1xuICAgICAgdmFyIG9yaWcgPSBlLm9yaWdpbmFsRXZlbnQsXG4gICAgICB0b3VjaFBvaW50cyA9ICh0eXBlb2Ygb3JpZy5jaGFuZ2VkVG91Y2hlcyAhPT0gJ3VuZGVmaW5lZCcpID8gb3JpZy5jaGFuZ2VkVG91Y2hlcyA6IFtvcmlnXSxcbiAgICAgIC8vIGlmIHNjcm9sbGluZyBvbiB5IGF4aXMsIGRvIG5vdCBwcmV2ZW50IGRlZmF1bHRcbiAgICAgIHhNb3ZlbWVudCA9IE1hdGguYWJzKHRvdWNoUG9pbnRzWzBdLnBhZ2VYIC0gc2xpZGVyLnRvdWNoLnN0YXJ0LngpLFxuICAgICAgeU1vdmVtZW50ID0gTWF0aC5hYnModG91Y2hQb2ludHNbMF0ucGFnZVkgLSBzbGlkZXIudG91Y2guc3RhcnQueSksXG4gICAgICB2YWx1ZSA9IDAsXG4gICAgICBjaGFuZ2UgPSAwO1xuICAgICAgLy8gdGhpcyBpcyBzd2lwZVxuICAgICAgc2xpZGVyLmhhc01vdmUgPSB0cnVlO1xuXG4gICAgICAvLyB4IGF4aXMgc3dpcGVcbiAgICAgIGlmICgoeE1vdmVtZW50ICogMykgPiB5TW92ZW1lbnQgJiYgc2xpZGVyLnNldHRpbmdzLnByZXZlbnREZWZhdWx0U3dpcGVYKSB7XG4gICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgIC8vIHkgYXhpcyBzd2lwZVxuICAgICAgfSBlbHNlIGlmICgoeU1vdmVtZW50ICogMykgPiB4TW92ZW1lbnQgJiYgc2xpZGVyLnNldHRpbmdzLnByZXZlbnREZWZhdWx0U3dpcGVZKSB7XG4gICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgIH1cbiAgICAgIGlmIChlLnR5cGUgIT09ICd0b3VjaG1vdmUnKSB7XG4gICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHNsaWRlci5zZXR0aW5ncy5tb2RlICE9PSAnZmFkZScgJiYgc2xpZGVyLnNldHRpbmdzLm9uZVRvT25lVG91Y2gpIHtcbiAgICAgICAgLy8gaWYgaG9yaXpvbnRhbCwgZHJhZyBhbG9uZyB4IGF4aXNcbiAgICAgICAgaWYgKHNsaWRlci5zZXR0aW5ncy5tb2RlID09PSAnaG9yaXpvbnRhbCcpIHtcbiAgICAgICAgICBjaGFuZ2UgPSB0b3VjaFBvaW50c1swXS5wYWdlWCAtIHNsaWRlci50b3VjaC5zdGFydC54O1xuICAgICAgICAgIHZhbHVlID0gc2xpZGVyLnRvdWNoLm9yaWdpbmFsUG9zLmxlZnQgKyBjaGFuZ2U7XG4gICAgICAgIC8vIGlmIHZlcnRpY2FsLCBkcmFnIGFsb25nIHkgYXhpc1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGNoYW5nZSA9IHRvdWNoUG9pbnRzWzBdLnBhZ2VZIC0gc2xpZGVyLnRvdWNoLnN0YXJ0Lnk7XG4gICAgICAgICAgdmFsdWUgPSBzbGlkZXIudG91Y2gub3JpZ2luYWxQb3MudG9wICsgY2hhbmdlO1xuICAgICAgICB9XG4gICAgICAgIHNldFBvc2l0aW9uUHJvcGVydHkodmFsdWUsICdyZXNldCcsIDApO1xuICAgICAgfVxuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBFdmVudCBoYW5kbGVyIGZvciBcInRvdWNoZW5kXCJcbiAgICAgKlxuICAgICAqIEBwYXJhbSBlIChldmVudClcbiAgICAgKiAgLSBET00gZXZlbnQgb2JqZWN0XG4gICAgICovXG4gICAgdmFyIG9uVG91Y2hFbmQgPSBmdW5jdGlvbihlKSB7XG4gICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICBzbGlkZXIudmlld3BvcnQub2ZmKCd0b3VjaG1vdmUgTVNQb2ludGVyTW92ZSBwb2ludGVybW92ZScsIG9uVG91Y2hNb3ZlKTtcbiAgICAgIC8vZW5hYmxlIHNsaWRlciBjb250cm9scyBhcyBzb29uIGFzIHVzZXIgc3RvcHMgaW50ZXJhY2luZyB3aXRoIHNsaWRlc1xuICAgICAgc2xpZGVyLmNvbnRyb2xzLmVsLnJlbW92ZUNsYXNzKCdkaXNhYmxlZCcpO1xuICAgICAgdmFyIG9yaWcgICAgPSBlLm9yaWdpbmFsRXZlbnQsXG4gICAgICB0b3VjaFBvaW50cyA9ICh0eXBlb2Ygb3JpZy5jaGFuZ2VkVG91Y2hlcyAhPT0gJ3VuZGVmaW5lZCcpID8gb3JpZy5jaGFuZ2VkVG91Y2hlcyA6IFtvcmlnXSxcbiAgICAgIHZhbHVlICAgICAgID0gMCxcbiAgICAgIGRpc3RhbmNlICAgID0gMDtcbiAgICAgIC8vIHJlY29yZCBlbmQgeCwgeSBwb3NpdGlvbnNcbiAgICAgIHNsaWRlci50b3VjaC5lbmQueCA9IHRvdWNoUG9pbnRzWzBdLnBhZ2VYO1xuICAgICAgc2xpZGVyLnRvdWNoLmVuZC55ID0gdG91Y2hQb2ludHNbMF0ucGFnZVk7XG4gICAgICAvLyBpZiBmYWRlIG1vZGUsIGNoZWNrIGlmIGFic29sdXRlIHggZGlzdGFuY2UgY2xlYXJzIHRoZSB0aHJlc2hvbGRcbiAgICAgIGlmIChzbGlkZXIuc2V0dGluZ3MubW9kZSA9PT0gJ2ZhZGUnKSB7XG4gICAgICAgIGRpc3RhbmNlID0gTWF0aC5hYnMoc2xpZGVyLnRvdWNoLnN0YXJ0LnggLSBzbGlkZXIudG91Y2guZW5kLngpO1xuICAgICAgICBpZiAoZGlzdGFuY2UgPj0gc2xpZGVyLnNldHRpbmdzLnN3aXBlVGhyZXNob2xkKSB7XG4gICAgICAgICAgaWYgKHNsaWRlci50b3VjaC5zdGFydC54ID4gc2xpZGVyLnRvdWNoLmVuZC54KSB7XG4gICAgICAgICAgICBlbC5nb1RvTmV4dFNsaWRlKCk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGVsLmdvVG9QcmV2U2xpZGUoKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgZWwuc3RvcEF1dG8oKTtcbiAgICAgICAgfVxuICAgICAgLy8gbm90IGZhZGUgbW9kZVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gY2FsY3VsYXRlIGRpc3RhbmNlIGFuZCBlbCdzIGFuaW1hdGUgcHJvcGVydHlcbiAgICAgICAgaWYgKHNsaWRlci5zZXR0aW5ncy5tb2RlID09PSAnaG9yaXpvbnRhbCcpIHtcbiAgICAgICAgICBkaXN0YW5jZSA9IHNsaWRlci50b3VjaC5lbmQueCAtIHNsaWRlci50b3VjaC5zdGFydC54O1xuICAgICAgICAgIHZhbHVlID0gc2xpZGVyLnRvdWNoLm9yaWdpbmFsUG9zLmxlZnQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgZGlzdGFuY2UgPSBzbGlkZXIudG91Y2guZW5kLnkgLSBzbGlkZXIudG91Y2guc3RhcnQueTtcbiAgICAgICAgICB2YWx1ZSA9IHNsaWRlci50b3VjaC5vcmlnaW5hbFBvcy50b3A7XG4gICAgICAgIH1cbiAgICAgICAgLy8gaWYgbm90IGluZmluaXRlIGxvb3AgYW5kIGZpcnN0IC8gbGFzdCBzbGlkZSwgZG8gbm90IGF0dGVtcHQgYSBzbGlkZSB0cmFuc2l0aW9uXG4gICAgICAgIGlmICghc2xpZGVyLnNldHRpbmdzLmluZmluaXRlTG9vcCAmJiAoKHNsaWRlci5hY3RpdmUuaW5kZXggPT09IDAgJiYgZGlzdGFuY2UgPiAwKSB8fCAoc2xpZGVyLmFjdGl2ZS5sYXN0ICYmIGRpc3RhbmNlIDwgMCkpKSB7XG4gICAgICAgICAgc2V0UG9zaXRpb25Qcm9wZXJ0eSh2YWx1ZSwgJ3Jlc2V0JywgMjAwKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAvLyBjaGVjayBpZiBkaXN0YW5jZSBjbGVhcnMgdGhyZXNob2xkXG4gICAgICAgICAgaWYgKE1hdGguYWJzKGRpc3RhbmNlKSA+PSBzbGlkZXIuc2V0dGluZ3Muc3dpcGVUaHJlc2hvbGQpIHtcbiAgICAgICAgICAgIGlmIChkaXN0YW5jZSA8IDApIHtcbiAgICAgICAgICAgICAgZWwuZ29Ub05leHRTbGlkZSgpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgZWwuZ29Ub1ByZXZTbGlkZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWwuc3RvcEF1dG8oKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgLy8gZWwuYW5pbWF0ZShwcm9wZXJ0eSwgMjAwKTtcbiAgICAgICAgICAgIHNldFBvc2l0aW9uUHJvcGVydHkodmFsdWUsICdyZXNldCcsIDIwMCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICBzbGlkZXIudmlld3BvcnQub2ZmKCd0b3VjaGVuZCBNU1BvaW50ZXJVcCBwb2ludGVydXAnLCBvblRvdWNoRW5kKTtcblxuICAgICAgaWYgKHNsaWRlci52aWV3cG9ydC5nZXQoMCkucmVsZWFzZVBvaW50ZXJDYXB0dXJlKSB7XG4gICAgICAgIHNsaWRlci52aWV3cG9ydC5nZXQoMCkucmVsZWFzZVBvaW50ZXJDYXB0dXJlKHNsaWRlci5wb2ludGVySWQpO1xuICAgICAgfVxuICAgICAgLy8gaWYgc2xpZGVyIGhhZCBzd2lwZSB3aXRoIGxlZnQgbW91c2UsIHRvdWNoIGNvbnRhY3QgYW5kIHBlbiBjb250YWN0XG4gICAgICBpZiAoc2xpZGVyLmhhc01vdmUgPT09IGZhbHNlICYmIChzbGlkZXIub3JpZ2luYWxDbGlja0J1dHRvbiA9PT0gMCB8fCBzbGlkZXIub3JpZ2luYWxFdmVudFR5cGUgPT09ICd0b3VjaHN0YXJ0JykpIHtcbiAgICAgICAgLy8gdHJpZ2dlciBjbGljayBldmVudCAoZml4IGZvciBGaXJlZm94NTkgYW5kIFBvaW50ZXJFdmVudCBzdGFuZGFyZCBjb21wYXRpYmlsaXR5KVxuICAgICAgICAkKHNsaWRlci5vcmlnaW5hbENsaWNrVGFyZ2V0KS50cmlnZ2VyKHtcbiAgICAgICAgICB0eXBlOiAnY2xpY2snLFxuICAgICAgICAgIGJ1dHRvbjogc2xpZGVyLm9yaWdpbmFsQ2xpY2tCdXR0b24sXG4gICAgICAgICAgYnV0dG9uczogc2xpZGVyLm9yaWdpbmFsQ2xpY2tCdXR0b25zXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBXaW5kb3cgcmVzaXplIGV2ZW50IGNhbGxiYWNrXG4gICAgICovXG4gICAgdmFyIHJlc2l6ZVdpbmRvdyA9IGZ1bmN0aW9uKGUpIHtcbiAgICAgIC8vIGRvbid0IGRvIGFueXRoaW5nIGlmIHNsaWRlciBpc24ndCBpbml0aWFsaXplZC5cbiAgICAgIGlmICghc2xpZGVyLmluaXRpYWxpemVkKSB7IHJldHVybjsgfVxuICAgICAgLy8gRGVsYXkgaWYgc2xpZGVyIHdvcmtpbmcuXG4gICAgICBpZiAoc2xpZGVyLndvcmtpbmcpIHtcbiAgICAgICAgd2luZG93LnNldFRpbWVvdXQocmVzaXplV2luZG93LCAxMCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBnZXQgdGhlIG5ldyB3aW5kb3cgZGltZW5zIChhZ2FpbiwgdGhhbmsgeW91IElFKVxuICAgICAgICB2YXIgd2luZG93V2lkdGhOZXcgPSAkKHdpbmRvdykud2lkdGgoKSxcbiAgICAgICAgd2luZG93SGVpZ2h0TmV3ID0gJCh3aW5kb3cpLmhlaWdodCgpO1xuICAgICAgICAvLyBtYWtlIHN1cmUgdGhhdCBpdCBpcyBhIHRydWUgd2luZG93IHJlc2l6ZVxuICAgICAgICAvLyAqd2UgbXVzdCBjaGVjayB0aGlzIGJlY2F1c2Ugb3VyIGRpbm9zYXVyIGZyaWVuZCBJRSBmaXJlcyBhIHdpbmRvdyByZXNpemUgZXZlbnQgd2hlbiBjZXJ0YWluIERPTSBlbGVtZW50c1xuICAgICAgICAvLyBhcmUgcmVzaXplZC4gQ2FuIHlvdSBqdXN0IGRpZSBhbHJlYWR5PypcbiAgICAgICAgaWYgKHdpbmRvd1dpZHRoICE9PSB3aW5kb3dXaWR0aE5ldyB8fCB3aW5kb3dIZWlnaHQgIT09IHdpbmRvd0hlaWdodE5ldykge1xuICAgICAgICAgIC8vIHNldCB0aGUgbmV3IHdpbmRvdyBkaW1lbnNcbiAgICAgICAgICB3aW5kb3dXaWR0aCA9IHdpbmRvd1dpZHRoTmV3O1xuICAgICAgICAgIHdpbmRvd0hlaWdodCA9IHdpbmRvd0hlaWdodE5ldztcbiAgICAgICAgICAvLyB1cGRhdGUgYWxsIGR5bmFtaWMgZWxlbWVudHNcbiAgICAgICAgICBlbC5yZWRyYXdTbGlkZXIoKTtcbiAgICAgICAgICAvLyBDYWxsIHVzZXIgcmVzaXplIGhhbmRsZXJcbiAgICAgICAgICBzbGlkZXIuc2V0dGluZ3Mub25TbGlkZXJSZXNpemUuY2FsbChlbCwgc2xpZGVyLmFjdGl2ZS5pbmRleCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogQWRkcyBhbiBhcmlhLWhpZGRlbj10cnVlIGF0dHJpYnV0ZSB0byBlYWNoIGVsZW1lbnRcbiAgICAgKlxuICAgICAqIEBwYXJhbSBzdGFydFZpc2libGVJbmRleCAoaW50KVxuICAgICAqICAtIHRoZSBmaXJzdCB2aXNpYmxlIGVsZW1lbnQncyBpbmRleFxuICAgICAqL1xuICAgIHZhciBhcHBseUFyaWFIaWRkZW5BdHRyaWJ1dGVzID0gZnVuY3Rpb24oc3RhcnRWaXNpYmxlSW5kZXgpIHtcbiAgICAgIHZhciBudW1iZXJPZlNsaWRlc1Nob3dpbmcgPSBnZXROdW1iZXJTbGlkZXNTaG93aW5nKCk7XG4gICAgICAvLyBvbmx5IGFwcGx5IGF0dHJpYnV0ZXMgaWYgdGhlIHNldHRpbmcgaXMgZW5hYmxlZCBhbmQgbm90IGluIHRpY2tlciBtb2RlXG4gICAgICBpZiAoc2xpZGVyLnNldHRpbmdzLmFyaWFIaWRkZW4gJiYgIXNsaWRlci5zZXR0aW5ncy50aWNrZXIpIHtcbiAgICAgICAgLy8gYWRkIGFyaWEtaGlkZGVuPXRydWUgdG8gYWxsIGVsZW1lbnRzXG4gICAgICAgIHNsaWRlci5jaGlsZHJlbi5hdHRyKCdhcmlhLWhpZGRlbicsICd0cnVlJyk7XG4gICAgICAgIC8vIGdldCB0aGUgdmlzaWJsZSBlbGVtZW50cyBhbmQgY2hhbmdlIHRvIGFyaWEtaGlkZGVuPWZhbHNlXG4gICAgICAgIHNsaWRlci5jaGlsZHJlbi5zbGljZShzdGFydFZpc2libGVJbmRleCwgc3RhcnRWaXNpYmxlSW5kZXggKyBudW1iZXJPZlNsaWRlc1Nob3dpbmcpLmF0dHIoJ2FyaWEtaGlkZGVuJywgJ2ZhbHNlJyk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgaW5kZXggYWNjb3JkaW5nIHRvIHByZXNlbnQgcGFnZSByYW5nZVxuICAgICAqXG4gICAgICogQHBhcmFtIHNsaWRlT25kZXggKGludClcbiAgICAgKiAgLSB0aGUgZGVzaXJlZCBzbGlkZSBpbmRleFxuICAgICAqL1xuICAgIHZhciBzZXRTbGlkZUluZGV4ID0gZnVuY3Rpb24oc2xpZGVJbmRleCkge1xuICAgICAgaWYgKHNsaWRlSW5kZXggPCAwKSB7XG4gICAgICAgIGlmIChzbGlkZXIuc2V0dGluZ3MuaW5maW5pdGVMb29wKSB7XG4gICAgICAgICAgcmV0dXJuIGdldFBhZ2VyUXR5KCkgLSAxO1xuICAgICAgICB9ZWxzZSB7XG4gICAgICAgICAgLy93ZSBkb24ndCBnbyB0byB1bmRlZmluZWQgc2xpZGVzXG4gICAgICAgICAgcmV0dXJuIHNsaWRlci5hY3RpdmUuaW5kZXg7XG4gICAgICAgIH1cbiAgICAgIC8vIGlmIHNsaWRlSW5kZXggaXMgZ3JlYXRlciB0aGFuIGNoaWxkcmVuIGxlbmd0aCwgc2V0IGFjdGl2ZSBpbmRleCB0byAwICh0aGlzIGhhcHBlbnMgZHVyaW5nIGluZmluaXRlIGxvb3ApXG4gICAgICB9IGVsc2UgaWYgKHNsaWRlSW5kZXggPj0gZ2V0UGFnZXJRdHkoKSkge1xuICAgICAgICBpZiAoc2xpZGVyLnNldHRpbmdzLmluZmluaXRlTG9vcCkge1xuICAgICAgICAgIHJldHVybiAwO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIC8vd2UgZG9uJ3QgbW92ZSB0byB1bmRlZmluZWQgcGFnZXNcbiAgICAgICAgICByZXR1cm4gc2xpZGVyLmFjdGl2ZS5pbmRleDtcbiAgICAgICAgfVxuICAgICAgLy8gc2V0IGFjdGl2ZSBpbmRleCB0byByZXF1ZXN0ZWQgc2xpZGVcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBzbGlkZUluZGV4O1xuICAgICAgfVxuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICAgICAqID0gUFVCTElDIEZVTkNUSU9OU1xuICAgICAqID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gICAgICovXG5cbiAgICAvKipcbiAgICAgKiBQZXJmb3JtcyBzbGlkZSB0cmFuc2l0aW9uIHRvIHRoZSBzcGVjaWZpZWQgc2xpZGVcbiAgICAgKlxuICAgICAqIEBwYXJhbSBzbGlkZUluZGV4IChpbnQpXG4gICAgICogIC0gdGhlIGRlc3RpbmF0aW9uIHNsaWRlJ3MgaW5kZXggKHplcm8tYmFzZWQpXG4gICAgICpcbiAgICAgKiBAcGFyYW0gZGlyZWN0aW9uIChzdHJpbmcpXG4gICAgICogIC0gSU5URVJOQUwgVVNFIE9OTFkgLSB0aGUgZGlyZWN0aW9uIG9mIHRyYXZlbCAoXCJwcmV2XCIgLyBcIm5leHRcIilcbiAgICAgKi9cbiAgICBlbC5nb1RvU2xpZGUgPSBmdW5jdGlvbihzbGlkZUluZGV4LCBkaXJlY3Rpb24pIHtcbiAgICAgIC8vIG9uU2xpZGVCZWZvcmUsIG9uU2xpZGVOZXh0LCBvblNsaWRlUHJldiBjYWxsYmFja3NcbiAgICAgIC8vIEFsbG93IHRyYW5zaXRpb24gY2FuY2VsaW5nIGJhc2VkIG9uIHJldHVybmVkIHZhbHVlXG4gICAgICB2YXIgcGVyZm9ybVRyYW5zaXRpb24gPSB0cnVlLFxuICAgICAgbW92ZUJ5ID0gMCxcbiAgICAgIHBvc2l0aW9uID0ge2xlZnQ6IDAsIHRvcDogMH0sXG4gICAgICBsYXN0Q2hpbGQgPSBudWxsLFxuICAgICAgbGFzdFNob3dpbmdJbmRleCwgZXEsIHZhbHVlLCByZXF1ZXN0RWw7XG4gICAgICAvLyBzdG9yZSB0aGUgb2xkIGluZGV4XG4gICAgICBzbGlkZXIub2xkSW5kZXggPSBzbGlkZXIuYWN0aXZlLmluZGV4O1xuICAgICAgLy9zZXQgbmV3IGluZGV4XG4gICAgICBzbGlkZXIuYWN0aXZlLmluZGV4ID0gc2V0U2xpZGVJbmRleChzbGlkZUluZGV4KTtcblxuICAgICAgLy8gaWYgcGx1Z2luIGlzIGN1cnJlbnRseSBpbiBtb3Rpb24sIGlnbm9yZSByZXF1ZXN0XG4gICAgICBpZiAoc2xpZGVyLndvcmtpbmcgfHwgc2xpZGVyLmFjdGl2ZS5pbmRleCA9PT0gc2xpZGVyLm9sZEluZGV4KSB7IHJldHVybjsgfVxuICAgICAgLy8gZGVjbGFyZSB0aGF0IHBsdWdpbiBpcyBpbiBtb3Rpb25cbiAgICAgIHNsaWRlci53b3JraW5nID0gdHJ1ZTtcblxuICAgICAgcGVyZm9ybVRyYW5zaXRpb24gPSBzbGlkZXIuc2V0dGluZ3Mub25TbGlkZUJlZm9yZS5jYWxsKGVsLCBzbGlkZXIuY2hpbGRyZW4uZXEoc2xpZGVyLmFjdGl2ZS5pbmRleCksIHNsaWRlci5vbGRJbmRleCwgc2xpZGVyLmFjdGl2ZS5pbmRleCk7XG5cbiAgICAgIC8vIElmIHRyYW5zaXRpb25zIGNhbmNlbGVkLCByZXNldCBhbmQgcmV0dXJuXG4gICAgICBpZiAodHlwZW9mIChwZXJmb3JtVHJhbnNpdGlvbikgIT09ICd1bmRlZmluZWQnICYmICFwZXJmb3JtVHJhbnNpdGlvbikge1xuICAgICAgICBzbGlkZXIuYWN0aXZlLmluZGV4ID0gc2xpZGVyLm9sZEluZGV4OyAvLyByZXN0b3JlIG9sZCBpbmRleFxuICAgICAgICBzbGlkZXIud29ya2luZyA9IGZhbHNlOyAvLyBpcyBub3QgaW4gbW90aW9uXG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgaWYgKGRpcmVjdGlvbiA9PT0gJ25leHQnKSB7XG4gICAgICAgIC8vIFByZXZlbnQgY2FuY2VsaW5nIGluIGZ1dHVyZSBmdW5jdGlvbnMgb3IgbGFjayB0aGVyZS1vZiBmcm9tIG5lZ2F0aW5nIHByZXZpb3VzIGNvbW1hbmRzIHRvIGNhbmNlbFxuICAgICAgICBpZiAoIXNsaWRlci5zZXR0aW5ncy5vblNsaWRlTmV4dC5jYWxsKGVsLCBzbGlkZXIuY2hpbGRyZW4uZXEoc2xpZGVyLmFjdGl2ZS5pbmRleCksIHNsaWRlci5vbGRJbmRleCwgc2xpZGVyLmFjdGl2ZS5pbmRleCkpIHtcbiAgICAgICAgICBwZXJmb3JtVHJhbnNpdGlvbiA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKGRpcmVjdGlvbiA9PT0gJ3ByZXYnKSB7XG4gICAgICAgIC8vIFByZXZlbnQgY2FuY2VsaW5nIGluIGZ1dHVyZSBmdW5jdGlvbnMgb3IgbGFjayB0aGVyZS1vZiBmcm9tIG5lZ2F0aW5nIHByZXZpb3VzIGNvbW1hbmRzIHRvIGNhbmNlbFxuICAgICAgICBpZiAoIXNsaWRlci5zZXR0aW5ncy5vblNsaWRlUHJldi5jYWxsKGVsLCBzbGlkZXIuY2hpbGRyZW4uZXEoc2xpZGVyLmFjdGl2ZS5pbmRleCksIHNsaWRlci5vbGRJbmRleCwgc2xpZGVyLmFjdGl2ZS5pbmRleCkpIHtcbiAgICAgICAgICBwZXJmb3JtVHJhbnNpdGlvbiA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8vIGNoZWNrIGlmIGxhc3Qgc2xpZGVcbiAgICAgIHNsaWRlci5hY3RpdmUubGFzdCA9IHNsaWRlci5hY3RpdmUuaW5kZXggPj0gZ2V0UGFnZXJRdHkoKSAtIDE7XG4gICAgICAvLyB1cGRhdGUgdGhlIHBhZ2VyIHdpdGggYWN0aXZlIGNsYXNzXG4gICAgICBpZiAoc2xpZGVyLnNldHRpbmdzLnBhZ2VyIHx8IHNsaWRlci5zZXR0aW5ncy5wYWdlckN1c3RvbSkgeyB1cGRhdGVQYWdlckFjdGl2ZShzbGlkZXIuYWN0aXZlLmluZGV4KTsgfVxuICAgICAgLy8gLy8gY2hlY2sgZm9yIGRpcmVjdGlvbiBjb250cm9sIHVwZGF0ZVxuICAgICAgaWYgKHNsaWRlci5zZXR0aW5ncy5jb250cm9scykgeyB1cGRhdGVEaXJlY3Rpb25Db250cm9scygpOyB9XG4gICAgICAvLyBpZiBzbGlkZXIgaXMgc2V0IHRvIG1vZGU6IFwiZmFkZVwiXG4gICAgICBpZiAoc2xpZGVyLnNldHRpbmdzLm1vZGUgPT09ICdmYWRlJykge1xuICAgICAgICAvLyBpZiBhZGFwdGl2ZUhlaWdodCBpcyB0cnVlIGFuZCBuZXh0IGhlaWdodCBpcyBkaWZmZXJlbnQgZnJvbSBjdXJyZW50IGhlaWdodCwgYW5pbWF0ZSB0byB0aGUgbmV3IGhlaWdodFxuICAgICAgICBpZiAoc2xpZGVyLnNldHRpbmdzLmFkYXB0aXZlSGVpZ2h0ICYmIHNsaWRlci52aWV3cG9ydC5oZWlnaHQoKSAhPT0gZ2V0Vmlld3BvcnRIZWlnaHQoKSkge1xuICAgICAgICAgIHNsaWRlci52aWV3cG9ydC5hbmltYXRlKHtoZWlnaHQ6IGdldFZpZXdwb3J0SGVpZ2h0KCl9LCBzbGlkZXIuc2V0dGluZ3MuYWRhcHRpdmVIZWlnaHRTcGVlZCk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gZmFkZSBvdXQgdGhlIHZpc2libGUgY2hpbGQgYW5kIHJlc2V0IGl0cyB6LWluZGV4IHZhbHVlXG4gICAgICAgIHNsaWRlci5jaGlsZHJlbi5maWx0ZXIoJzp2aXNpYmxlJykuZmFkZU91dChzbGlkZXIuc2V0dGluZ3Muc3BlZWQpLmNzcyh7ekluZGV4OiAwfSk7XG4gICAgICAgIC8vIGZhZGUgaW4gdGhlIG5ld2x5IHJlcXVlc3RlZCBzbGlkZVxuICAgICAgICBzbGlkZXIuY2hpbGRyZW4uZXEoc2xpZGVyLmFjdGl2ZS5pbmRleCkuY3NzKCd6SW5kZXgnLCBzbGlkZXIuc2V0dGluZ3Muc2xpZGVaSW5kZXggKyAxKS5mYWRlSW4oc2xpZGVyLnNldHRpbmdzLnNwZWVkLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAkKHRoaXMpLmNzcygnekluZGV4Jywgc2xpZGVyLnNldHRpbmdzLnNsaWRlWkluZGV4KTtcbiAgICAgICAgICB1cGRhdGVBZnRlclNsaWRlVHJhbnNpdGlvbigpO1xuICAgICAgICB9KTtcbiAgICAgIC8vIHNsaWRlciBtb2RlIGlzIG5vdCBcImZhZGVcIlxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gaWYgYWRhcHRpdmVIZWlnaHQgaXMgdHJ1ZSBhbmQgbmV4dCBoZWlnaHQgaXMgZGlmZmVyZW50IGZyb20gY3VycmVudCBoZWlnaHQsIGFuaW1hdGUgdG8gdGhlIG5ldyBoZWlnaHRcbiAgICAgICAgaWYgKHNsaWRlci5zZXR0aW5ncy5hZGFwdGl2ZUhlaWdodCAmJiBzbGlkZXIudmlld3BvcnQuaGVpZ2h0KCkgIT09IGdldFZpZXdwb3J0SGVpZ2h0KCkpIHtcbiAgICAgICAgICBzbGlkZXIudmlld3BvcnQuYW5pbWF0ZSh7aGVpZ2h0OiBnZXRWaWV3cG9ydEhlaWdodCgpfSwgc2xpZGVyLnNldHRpbmdzLmFkYXB0aXZlSGVpZ2h0U3BlZWQpO1xuICAgICAgICB9XG4gICAgICAgIC8vIGlmIGNhcm91c2VsIGFuZCBub3QgaW5maW5pdGUgbG9vcFxuICAgICAgICBpZiAoIXNsaWRlci5zZXR0aW5ncy5pbmZpbml0ZUxvb3AgJiYgc2xpZGVyLmNhcm91c2VsICYmIHNsaWRlci5hY3RpdmUubGFzdCkge1xuICAgICAgICAgIGlmIChzbGlkZXIuc2V0dGluZ3MubW9kZSA9PT0gJ2hvcml6b250YWwnKSB7XG4gICAgICAgICAgICAvLyBnZXQgdGhlIGxhc3QgY2hpbGQgcG9zaXRpb25cbiAgICAgICAgICAgIGxhc3RDaGlsZCA9IHNsaWRlci5jaGlsZHJlbi5lcShzbGlkZXIuY2hpbGRyZW4ubGVuZ3RoIC0gMSk7XG4gICAgICAgICAgICBwb3NpdGlvbiA9IGxhc3RDaGlsZC5wb3NpdGlvbigpO1xuICAgICAgICAgICAgLy8gY2FsY3VsYXRlIHRoZSBwb3NpdGlvbiBvZiB0aGUgbGFzdCBzbGlkZVxuICAgICAgICAgICAgbW92ZUJ5ID0gc2xpZGVyLnZpZXdwb3J0LndpZHRoKCkgLSBsYXN0Q2hpbGQub3V0ZXJXaWR0aCgpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvLyBnZXQgbGFzdCBzaG93aW5nIGluZGV4IHBvc2l0aW9uXG4gICAgICAgICAgICBsYXN0U2hvd2luZ0luZGV4ID0gc2xpZGVyLmNoaWxkcmVuLmxlbmd0aCAtIHNsaWRlci5zZXR0aW5ncy5taW5TbGlkZXM7XG4gICAgICAgICAgICBwb3NpdGlvbiA9IHNsaWRlci5jaGlsZHJlbi5lcShsYXN0U2hvd2luZ0luZGV4KS5wb3NpdGlvbigpO1xuICAgICAgICAgIH1cbiAgICAgICAgICAvLyBob3Jpem9udGFsIGNhcm91c2VsLCBnb2luZyBwcmV2aW91cyB3aGlsZSBvbiBmaXJzdCBzbGlkZSAoaW5maW5pdGVMb29wIG1vZGUpXG4gICAgICAgIH0gZWxzZSBpZiAoc2xpZGVyLmNhcm91c2VsICYmIHNsaWRlci5hY3RpdmUubGFzdCAmJiBkaXJlY3Rpb24gPT09ICdwcmV2Jykge1xuICAgICAgICAgIC8vIGdldCB0aGUgbGFzdCBjaGlsZCBwb3NpdGlvblxuICAgICAgICAgIGVxID0gc2xpZGVyLnNldHRpbmdzLm1vdmVTbGlkZXMgPT09IDEgPyBzbGlkZXIuc2V0dGluZ3MubWF4U2xpZGVzIC0gZ2V0TW92ZUJ5KCkgOiAoKGdldFBhZ2VyUXR5KCkgLSAxKSAqIGdldE1vdmVCeSgpKSAtIChzbGlkZXIuY2hpbGRyZW4ubGVuZ3RoIC0gc2xpZGVyLnNldHRpbmdzLm1heFNsaWRlcyk7XG4gICAgICAgICAgbGFzdENoaWxkID0gZWwuY2hpbGRyZW4oJy5ieC1jbG9uZScpLmVxKGVxKTtcbiAgICAgICAgICBwb3NpdGlvbiA9IGxhc3RDaGlsZC5wb3NpdGlvbigpO1xuICAgICAgICAvLyBpZiBpbmZpbml0ZSBsb29wIGFuZCBcIk5leHRcIiBpcyBjbGlja2VkIG9uIHRoZSBsYXN0IHNsaWRlXG4gICAgICAgIH0gZWxzZSBpZiAoZGlyZWN0aW9uID09PSAnbmV4dCcgJiYgc2xpZGVyLmFjdGl2ZS5pbmRleCA9PT0gMCkge1xuICAgICAgICAgIC8vIGdldCB0aGUgbGFzdCBjbG9uZSBwb3NpdGlvblxuICAgICAgICAgIHBvc2l0aW9uID0gZWwuZmluZCgnPiAuYngtY2xvbmUnKS5lcShzbGlkZXIuc2V0dGluZ3MubWF4U2xpZGVzKS5wb3NpdGlvbigpO1xuICAgICAgICAgIHNsaWRlci5hY3RpdmUubGFzdCA9IGZhbHNlO1xuICAgICAgICAvLyBub3JtYWwgbm9uLXplcm8gcmVxdWVzdHNcbiAgICAgICAgfSBlbHNlIGlmIChzbGlkZUluZGV4ID49IDApIHtcbiAgICAgICAgICAvL3BhcnNlSW50IGlzIGFwcGxpZWQgdG8gYWxsb3cgZmxvYXRzIGZvciBzbGlkZXMvcGFnZVxuICAgICAgICAgIHJlcXVlc3RFbCA9IHNsaWRlSW5kZXggKiBwYXJzZUludChnZXRNb3ZlQnkoKSk7XG4gICAgICAgICAgcG9zaXRpb24gPSBzbGlkZXIuY2hpbGRyZW4uZXEocmVxdWVzdEVsKS5wb3NpdGlvbigpO1xuICAgICAgICB9XG5cbiAgICAgICAgLyogSWYgdGhlIHBvc2l0aW9uIGRvZXNuJ3QgZXhpc3RcbiAgICAgICAgICogKGUuZy4gaWYgeW91IGRlc3Ryb3kgdGhlIHNsaWRlciBvbiBhIG5leHQgY2xpY2spLFxuICAgICAgICAgKiBpdCBkb2Vzbid0IHRocm93IGFuIGVycm9yLlxuICAgICAgICAgKi9cbiAgICAgICAgaWYgKHR5cGVvZiAocG9zaXRpb24pICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgIHZhbHVlID0gc2xpZGVyLnNldHRpbmdzLm1vZGUgPT09ICdob3Jpem9udGFsJyA/IC0ocG9zaXRpb24ubGVmdCAtIG1vdmVCeSkgOiAtcG9zaXRpb24udG9wO1xuICAgICAgICAgIC8vIHBsdWdpbiB2YWx1ZXMgdG8gYmUgYW5pbWF0ZWRcbiAgICAgICAgICBzZXRQb3NpdGlvblByb3BlcnR5KHZhbHVlLCAnc2xpZGUnLCBzbGlkZXIuc2V0dGluZ3Muc3BlZWQpO1xuICAgICAgICB9XG4gICAgICAgIHNsaWRlci53b3JraW5nID0gZmFsc2U7XG4gICAgICB9XG4gICAgICBpZiAoc2xpZGVyLnNldHRpbmdzLmFyaWFIaWRkZW4pIHsgYXBwbHlBcmlhSGlkZGVuQXR0cmlidXRlcyhzbGlkZXIuYWN0aXZlLmluZGV4ICogZ2V0TW92ZUJ5KCkpOyB9XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFRyYW5zaXRpb25zIHRvIHRoZSBuZXh0IHNsaWRlIGluIHRoZSBzaG93XG4gICAgICovXG4gICAgZWwuZ29Ub05leHRTbGlkZSA9IGZ1bmN0aW9uKCkge1xuICAgICAgLy8gaWYgaW5maW5pdGVMb29wIGlzIGZhbHNlIGFuZCBsYXN0IHBhZ2UgaXMgc2hvd2luZywgZGlzcmVnYXJkIGNhbGxcbiAgICAgIGlmICghc2xpZGVyLnNldHRpbmdzLmluZmluaXRlTG9vcCAmJiBzbGlkZXIuYWN0aXZlLmxhc3QpIHsgcmV0dXJuOyB9XG5cdCAgaWYgKHNsaWRlci53b3JraW5nID09PSB0cnVlKXsgcmV0dXJuIDt9XG4gICAgICB2YXIgcGFnZXJJbmRleCA9IHBhcnNlSW50KHNsaWRlci5hY3RpdmUuaW5kZXgpICsgMTtcbiAgICAgIGVsLmdvVG9TbGlkZShwYWdlckluZGV4LCAnbmV4dCcpO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBUcmFuc2l0aW9ucyB0byB0aGUgcHJldiBzbGlkZSBpbiB0aGUgc2hvd1xuICAgICAqL1xuICAgIGVsLmdvVG9QcmV2U2xpZGUgPSBmdW5jdGlvbigpIHtcbiAgICAgIC8vIGlmIGluZmluaXRlTG9vcCBpcyBmYWxzZSBhbmQgbGFzdCBwYWdlIGlzIHNob3dpbmcsIGRpc3JlZ2FyZCBjYWxsXG4gICAgICBpZiAoIXNsaWRlci5zZXR0aW5ncy5pbmZpbml0ZUxvb3AgJiYgc2xpZGVyLmFjdGl2ZS5pbmRleCA9PT0gMCkgeyByZXR1cm47IH1cblx0ICBpZiAoc2xpZGVyLndvcmtpbmcgPT09IHRydWUpeyByZXR1cm4gO31cbiAgICAgIHZhciBwYWdlckluZGV4ID0gcGFyc2VJbnQoc2xpZGVyLmFjdGl2ZS5pbmRleCkgLSAxO1xuICAgICAgZWwuZ29Ub1NsaWRlKHBhZ2VySW5kZXgsICdwcmV2Jyk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFN0YXJ0cyB0aGUgYXV0byBzaG93XG4gICAgICpcbiAgICAgKiBAcGFyYW0gcHJldmVudENvbnRyb2xVcGRhdGUgKGJvb2xlYW4pXG4gICAgICogIC0gaWYgdHJ1ZSwgYXV0byBjb250cm9scyBzdGF0ZSB3aWxsIG5vdCBiZSB1cGRhdGVkXG4gICAgICovXG4gICAgZWwuc3RhcnRBdXRvID0gZnVuY3Rpb24ocHJldmVudENvbnRyb2xVcGRhdGUpIHtcbiAgICAgIC8vIGlmIGFuIGludGVydmFsIGFscmVhZHkgZXhpc3RzLCBkaXNyZWdhcmQgY2FsbFxuICAgICAgaWYgKHNsaWRlci5pbnRlcnZhbCkgeyByZXR1cm47IH1cbiAgICAgIC8vIGNyZWF0ZSBhbiBpbnRlcnZhbFxuICAgICAgc2xpZGVyLmludGVydmFsID0gc2V0SW50ZXJ2YWwoZnVuY3Rpb24oKSB7XG4gICAgICAgIGlmIChzbGlkZXIuc2V0dGluZ3MuYXV0b0RpcmVjdGlvbiA9PT0gJ25leHQnKSB7XG4gICAgICAgICAgZWwuZ29Ub05leHRTbGlkZSgpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGVsLmdvVG9QcmV2U2xpZGUoKTtcbiAgICAgICAgfVxuICAgICAgfSwgc2xpZGVyLnNldHRpbmdzLnBhdXNlKTtcblx0ICAvL2FsbGJhY2sgZm9yIHdoZW4gdGhlIGF1dG8gcm90YXRlIHN0YXR1cyBjaGFuZ2VzXG5cdCAgc2xpZGVyLnNldHRpbmdzLm9uQXV0b0NoYW5nZS5jYWxsKGVsLCB0cnVlKTtcbiAgICAgIC8vIGlmIGF1dG8gY29udHJvbHMgYXJlIGRpc3BsYXllZCBhbmQgcHJldmVudENvbnRyb2xVcGRhdGUgaXMgbm90IHRydWVcbiAgICAgIGlmIChzbGlkZXIuc2V0dGluZ3MuYXV0b0NvbnRyb2xzICYmIHByZXZlbnRDb250cm9sVXBkYXRlICE9PSB0cnVlKSB7IHVwZGF0ZUF1dG9Db250cm9scygnc3RvcCcpOyB9XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFN0b3BzIHRoZSBhdXRvIHNob3dcbiAgICAgKlxuICAgICAqIEBwYXJhbSBwcmV2ZW50Q29udHJvbFVwZGF0ZSAoYm9vbGVhbilcbiAgICAgKiAgLSBpZiB0cnVlLCBhdXRvIGNvbnRyb2xzIHN0YXRlIHdpbGwgbm90IGJlIHVwZGF0ZWRcbiAgICAgKi9cbiAgICBlbC5zdG9wQXV0byA9IGZ1bmN0aW9uKHByZXZlbnRDb250cm9sVXBkYXRlKSB7XG4gICAgICAvLyBpZiBzbGlkZXIgaXMgYXV0byBwYXVzZWQsIGp1c3QgY2xlYXIgdGhhdCBzdGF0ZVxuICAgICAgaWYgKHNsaWRlci5hdXRvUGF1c2VkKSBzbGlkZXIuYXV0b1BhdXNlZCA9IGZhbHNlO1xuICAgICAgLy8gaWYgbm8gaW50ZXJ2YWwgZXhpc3RzLCBkaXNyZWdhcmQgY2FsbFxuICAgICAgaWYgKCFzbGlkZXIuaW50ZXJ2YWwpIHsgcmV0dXJuOyB9XG4gICAgICAvLyBjbGVhciB0aGUgaW50ZXJ2YWxcbiAgICAgIGNsZWFySW50ZXJ2YWwoc2xpZGVyLmludGVydmFsKTtcbiAgICAgIHNsaWRlci5pbnRlcnZhbCA9IG51bGw7XG5cdCAgLy9hbGxiYWNrIGZvciB3aGVuIHRoZSBhdXRvIHJvdGF0ZSBzdGF0dXMgY2hhbmdlc1xuXHQgIHNsaWRlci5zZXR0aW5ncy5vbkF1dG9DaGFuZ2UuY2FsbChlbCwgZmFsc2UpO1xuICAgICAgLy8gaWYgYXV0byBjb250cm9scyBhcmUgZGlzcGxheWVkIGFuZCBwcmV2ZW50Q29udHJvbFVwZGF0ZSBpcyBub3QgdHJ1ZVxuICAgICAgaWYgKHNsaWRlci5zZXR0aW5ncy5hdXRvQ29udHJvbHMgJiYgcHJldmVudENvbnRyb2xVcGRhdGUgIT09IHRydWUpIHsgdXBkYXRlQXV0b0NvbnRyb2xzKCdzdGFydCcpOyB9XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgY3VycmVudCBzbGlkZSBpbmRleCAoemVyby1iYXNlZClcbiAgICAgKi9cbiAgICBlbC5nZXRDdXJyZW50U2xpZGUgPSBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiBzbGlkZXIuYWN0aXZlLmluZGV4O1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIGN1cnJlbnQgc2xpZGUgZWxlbWVudFxuICAgICAqL1xuICAgIGVsLmdldEN1cnJlbnRTbGlkZUVsZW1lbnQgPSBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiBzbGlkZXIuY2hpbGRyZW4uZXEoc2xpZGVyLmFjdGl2ZS5pbmRleCk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgYSBzbGlkZSBlbGVtZW50XG4gICAgICogQHBhcmFtIGluZGV4IChpbnQpXG4gICAgICogIC0gVGhlIGluZGV4ICh6ZXJvLWJhc2VkKSBvZiB0aGUgZWxlbWVudCB5b3Ugd2FudCByZXR1cm5lZC5cbiAgICAgKi9cbiAgICBlbC5nZXRTbGlkZUVsZW1lbnQgPSBmdW5jdGlvbihpbmRleCkge1xuICAgICAgcmV0dXJuIHNsaWRlci5jaGlsZHJlbi5lcShpbmRleCk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgbnVtYmVyIG9mIHNsaWRlcyBpbiBzaG93XG4gICAgICovXG4gICAgZWwuZ2V0U2xpZGVDb3VudCA9IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHNsaWRlci5jaGlsZHJlbi5sZW5ndGg7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFJldHVybiBzbGlkZXIud29ya2luZyB2YXJpYWJsZVxuICAgICAqL1xuICAgIGVsLmlzV29ya2luZyA9IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHNsaWRlci53b3JraW5nO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBVcGRhdGUgYWxsIGR5bmFtaWMgc2xpZGVyIGVsZW1lbnRzXG4gICAgICovXG4gICAgZWwucmVkcmF3U2xpZGVyID0gZnVuY3Rpb24oKSB7XG4gICAgICAvLyByZXNpemUgYWxsIGNoaWxkcmVuIGluIHJhdGlvIHRvIG5ldyBzY3JlZW4gc2l6ZVxuICAgICAgc2xpZGVyLmNoaWxkcmVuLmFkZChlbC5maW5kKCcuYngtY2xvbmUnKSkub3V0ZXJXaWR0aChnZXRTbGlkZVdpZHRoKCkpO1xuICAgICAgLy8gYWRqdXN0IHRoZSBoZWlnaHRcbiAgICAgIHNsaWRlci52aWV3cG9ydC5jc3MoJ2hlaWdodCcsIGdldFZpZXdwb3J0SGVpZ2h0KCkpO1xuICAgICAgLy8gdXBkYXRlIHRoZSBzbGlkZSBwb3NpdGlvblxuICAgICAgaWYgKCFzbGlkZXIuc2V0dGluZ3MudGlja2VyKSB7IHNldFNsaWRlUG9zaXRpb24oKTsgfVxuICAgICAgLy8gaWYgYWN0aXZlLmxhc3Qgd2FzIHRydWUgYmVmb3JlIHRoZSBzY3JlZW4gcmVzaXplLCB3ZSB3YW50XG4gICAgICAvLyB0byBrZWVwIGl0IGxhc3Qgbm8gbWF0dGVyIHdoYXQgc2NyZWVuIHNpemUgd2UgZW5kIG9uXG4gICAgICBpZiAoc2xpZGVyLmFjdGl2ZS5sYXN0KSB7IHNsaWRlci5hY3RpdmUuaW5kZXggPSBnZXRQYWdlclF0eSgpIC0gMTsgfVxuICAgICAgLy8gaWYgdGhlIGFjdGl2ZSBpbmRleCAocGFnZSkgbm8gbG9uZ2VyIGV4aXN0cyBkdWUgdG8gdGhlIHJlc2l6ZSwgc2ltcGx5IHNldCB0aGUgaW5kZXggYXMgbGFzdFxuICAgICAgaWYgKHNsaWRlci5hY3RpdmUuaW5kZXggPj0gZ2V0UGFnZXJRdHkoKSkgeyBzbGlkZXIuYWN0aXZlLmxhc3QgPSB0cnVlOyB9XG4gICAgICAvLyBpZiBhIHBhZ2VyIGlzIGJlaW5nIGRpc3BsYXllZCBhbmQgYSBjdXN0b20gcGFnZXIgaXMgbm90IGJlaW5nIHVzZWQsIHVwZGF0ZSBpdFxuICAgICAgaWYgKHNsaWRlci5zZXR0aW5ncy5wYWdlciAmJiAhc2xpZGVyLnNldHRpbmdzLnBhZ2VyQ3VzdG9tKSB7XG4gICAgICAgIHBvcHVsYXRlUGFnZXIoKTtcbiAgICAgICAgdXBkYXRlUGFnZXJBY3RpdmUoc2xpZGVyLmFjdGl2ZS5pbmRleCk7XG4gICAgICB9XG4gICAgICBpZiAoc2xpZGVyLnNldHRpbmdzLmFyaWFIaWRkZW4pIHsgYXBwbHlBcmlhSGlkZGVuQXR0cmlidXRlcyhzbGlkZXIuYWN0aXZlLmluZGV4ICogZ2V0TW92ZUJ5KCkpOyB9XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIERlc3Ryb3kgdGhlIGN1cnJlbnQgaW5zdGFuY2Ugb2YgdGhlIHNsaWRlciAocmV2ZXJ0IGV2ZXJ5dGhpbmcgYmFjayB0byBvcmlnaW5hbCBzdGF0ZSlcbiAgICAgKi9cbiAgICBlbC5kZXN0cm95U2xpZGVyID0gZnVuY3Rpb24oKSB7XG4gICAgICAvLyBkb24ndCBkbyBhbnl0aGluZyBpZiBzbGlkZXIgaGFzIGFscmVhZHkgYmVlbiBkZXN0cm95ZWRcbiAgICAgIGlmICghc2xpZGVyLmluaXRpYWxpemVkKSB7IHJldHVybjsgfVxuICAgICAgc2xpZGVyLmluaXRpYWxpemVkID0gZmFsc2U7XG4gICAgICAkKCcuYngtY2xvbmUnLCB0aGlzKS5yZW1vdmUoKTtcbiAgICAgIHNsaWRlci5jaGlsZHJlbi5lYWNoKGZ1bmN0aW9uKCkge1xuICAgICAgICBpZiAoJCh0aGlzKS5kYXRhKCdvcmlnU3R5bGUnKSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgJCh0aGlzKS5hdHRyKCdzdHlsZScsICQodGhpcykuZGF0YSgnb3JpZ1N0eWxlJykpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICQodGhpcykucmVtb3ZlQXR0cignc3R5bGUnKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICBpZiAoJCh0aGlzKS5kYXRhKCdvcmlnU3R5bGUnKSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHRoaXMuYXR0cignc3R5bGUnLCAkKHRoaXMpLmRhdGEoJ29yaWdTdHlsZScpKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgICQodGhpcykucmVtb3ZlQXR0cignc3R5bGUnKTtcbiAgICAgIH1cbiAgICAgICQodGhpcykudW53cmFwKCkudW53cmFwKCk7XG4gICAgICBpZiAoc2xpZGVyLmNvbnRyb2xzLmVsKSB7IHNsaWRlci5jb250cm9scy5lbC5yZW1vdmUoKTsgfVxuICAgICAgaWYgKHNsaWRlci5jb250cm9scy5uZXh0KSB7IHNsaWRlci5jb250cm9scy5uZXh0LnJlbW92ZSgpOyB9XG4gICAgICBpZiAoc2xpZGVyLmNvbnRyb2xzLnByZXYpIHsgc2xpZGVyLmNvbnRyb2xzLnByZXYucmVtb3ZlKCk7IH1cbiAgICAgIGlmIChzbGlkZXIucGFnZXJFbCAmJiBzbGlkZXIuc2V0dGluZ3MuY29udHJvbHMgJiYgIXNsaWRlci5zZXR0aW5ncy5wYWdlckN1c3RvbSkgeyBzbGlkZXIucGFnZXJFbC5yZW1vdmUoKTsgfVxuICAgICAgJCgnLmJ4LWNhcHRpb24nLCB0aGlzKS5yZW1vdmUoKTtcbiAgICAgIGlmIChzbGlkZXIuY29udHJvbHMuYXV0b0VsKSB7IHNsaWRlci5jb250cm9scy5hdXRvRWwucmVtb3ZlKCk7IH1cbiAgICAgIGNsZWFySW50ZXJ2YWwoc2xpZGVyLmludGVydmFsKTtcbiAgICAgIGlmIChzbGlkZXIuc2V0dGluZ3MucmVzcG9uc2l2ZSkgeyAkKHdpbmRvdykub2ZmKCdyZXNpemUnLCByZXNpemVXaW5kb3cpOyB9XG4gICAgICBpZiAoc2xpZGVyLnNldHRpbmdzLmtleWJvYXJkRW5hYmxlZCkgeyAkKGRvY3VtZW50KS5vZmYoJ2tleWRvd24nLCBrZXlQcmVzcyk7IH1cbiAgICAgIC8vcmVtb3ZlIHNlbGYgcmVmZXJlbmNlIGluIGRhdGFcbiAgICAgICQodGhpcykucmVtb3ZlRGF0YSgnYnhTbGlkZXInKTtcblx0ICAvLyByZW1vdmUgZ2xvYmFsIHdpbmRvdyBoYW5kbGVyc1xuXHQgICQod2luZG93KS5vZmYoJ2JsdXInLCB3aW5kb3dCbHVySGFuZGxlcikub2ZmKCdmb2N1cycsIHdpbmRvd0ZvY3VzSGFuZGxlcik7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFJlbG9hZCB0aGUgc2xpZGVyIChyZXZlcnQgYWxsIERPTSBjaGFuZ2VzLCBhbmQgcmUtaW5pdGlhbGl6ZSlcbiAgICAgKi9cbiAgICBlbC5yZWxvYWRTbGlkZXIgPSBmdW5jdGlvbihzZXR0aW5ncykge1xuICAgICAgaWYgKHNldHRpbmdzICE9PSB1bmRlZmluZWQpIHsgb3B0aW9ucyA9IHNldHRpbmdzOyB9XG4gICAgICBlbC5kZXN0cm95U2xpZGVyKCk7XG4gICAgICBpbml0KCk7XG4gICAgICAvL3N0b3JlIHJlZmVyZW5jZSB0byBzZWxmIGluIG9yZGVyIHRvIGFjY2VzcyBwdWJsaWMgZnVuY3Rpb25zIGxhdGVyXG4gICAgICAkKGVsKS5kYXRhKCdieFNsaWRlcicsIHRoaXMpO1xuICAgIH07XG5cbiAgICBpbml0KCk7XG5cbiAgICAkKGVsKS5kYXRhKCdieFNsaWRlcicsIHRoaXMpO1xuXG4gICAgLy8gcmV0dXJucyB0aGUgY3VycmVudCBqUXVlcnkgb2JqZWN0XG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbn0pKGpRdWVyeSk7XG4iLCIvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuLy8gZmFuY3lCb3ggdjMuNS43XG4vL1xuLy8gTGljZW5zZWQgR1BMdjMgZm9yIG9wZW4gc291cmNlIHVzZVxuLy8gb3IgZmFuY3lCb3ggQ29tbWVyY2lhbCBMaWNlbnNlIGZvciBjb21tZXJjaWFsIHVzZVxuLy9cbi8vIGh0dHA6Ly9mYW5jeWFwcHMuY29tL2ZhbmN5Ym94L1xuLy8gQ29weXJpZ2h0IDIwMTkgZmFuY3lBcHBzXG4vL1xuLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiFmdW5jdGlvbih0LGUsbixvKXtcInVzZSBzdHJpY3RcIjtmdW5jdGlvbiBpKHQsZSl7dmFyIG8saSxhLHM9W10scj0wO3QmJnQuaXNEZWZhdWx0UHJldmVudGVkKCl8fCh0LnByZXZlbnREZWZhdWx0KCksZT1lfHx7fSx0JiZ0LmRhdGEmJihlPWgodC5kYXRhLm9wdGlvbnMsZSkpLG89ZS4kdGFyZ2V0fHxuKHQuY3VycmVudFRhcmdldCkudHJpZ2dlcihcImJsdXJcIiksKGE9bi5mYW5jeWJveC5nZXRJbnN0YW5jZSgpKSYmYS4kdHJpZ2dlciYmYS4kdHJpZ2dlci5pcyhvKXx8KGUuc2VsZWN0b3I/cz1uKGUuc2VsZWN0b3IpOihpPW8uYXR0cihcImRhdGEtZmFuY3lib3hcIil8fFwiXCIsaT8ocz10LmRhdGE/dC5kYXRhLml0ZW1zOltdLHM9cy5sZW5ndGg/cy5maWx0ZXIoJ1tkYXRhLWZhbmN5Ym94PVwiJytpKydcIl0nKTpuKCdbZGF0YS1mYW5jeWJveD1cIicraSsnXCJdJykpOnM9W29dKSxyPW4ocykuaW5kZXgobykscjwwJiYocj0wKSxhPW4uZmFuY3lib3gub3BlbihzLGUsciksYS4kdHJpZ2dlcj1vKSl9aWYodC5jb25zb2xlPXQuY29uc29sZXx8e2luZm86ZnVuY3Rpb24odCl7fX0sbil7aWYobi5mbi5mYW5jeWJveClyZXR1cm4gdm9pZCBjb25zb2xlLmluZm8oXCJmYW5jeUJveCBhbHJlYWR5IGluaXRpYWxpemVkXCIpO3ZhciBhPXtjbG9zZUV4aXN0aW5nOiExLGxvb3A6ITEsZ3V0dGVyOjUwLGtleWJvYXJkOiEwLHByZXZlbnRDYXB0aW9uT3ZlcmxhcDohMCxhcnJvd3M6ITAsaW5mb2JhcjohMCxzbWFsbEJ0bjpcImF1dG9cIix0b29sYmFyOlwiYXV0b1wiLGJ1dHRvbnM6W1wiem9vbVwiLFwic2xpZGVTaG93XCIsXCJ0aHVtYnNcIixcImNsb3NlXCJdLGlkbGVUaW1lOjMscHJvdGVjdDohMSxtb2RhbDohMSxpbWFnZTp7cHJlbG9hZDohMX0sYWpheDp7c2V0dGluZ3M6e2RhdGE6e2ZhbmN5Ym94OiEwfX19LGlmcmFtZTp7dHBsOic8aWZyYW1lIGlkPVwiZmFuY3lib3gtZnJhbWV7cm5kfVwiIG5hbWU9XCJmYW5jeWJveC1mcmFtZXtybmR9XCIgY2xhc3M9XCJmYW5jeWJveC1pZnJhbWVcIiBhbGxvd2Z1bGxzY3JlZW49XCJhbGxvd2Z1bGxzY3JlZW5cIiBhbGxvdz1cImF1dG9wbGF5OyBmdWxsc2NyZWVuXCIgc3JjPVwiXCI+PC9pZnJhbWU+JyxwcmVsb2FkOiEwLGNzczp7fSxhdHRyOntzY3JvbGxpbmc6XCJhdXRvXCJ9fSx2aWRlbzp7dHBsOic8dmlkZW8gY2xhc3M9XCJmYW5jeWJveC12aWRlb1wiIGNvbnRyb2xzIGNvbnRyb2xzTGlzdD1cIm5vZG93bmxvYWRcIiBwb3N0ZXI9XCJ7e3Bvc3Rlcn19XCI+PHNvdXJjZSBzcmM9XCJ7e3NyY319XCIgdHlwZT1cInt7Zm9ybWF0fX1cIiAvPlNvcnJ5LCB5b3VyIGJyb3dzZXIgZG9lc25cXCd0IHN1cHBvcnQgZW1iZWRkZWQgdmlkZW9zLCA8YSBocmVmPVwie3tzcmN9fVwiPmRvd25sb2FkPC9hPiBhbmQgd2F0Y2ggd2l0aCB5b3VyIGZhdm9yaXRlIHZpZGVvIHBsYXllciE8L3ZpZGVvPicsZm9ybWF0OlwiXCIsYXV0b1N0YXJ0OiEwfSxkZWZhdWx0VHlwZTpcImltYWdlXCIsYW5pbWF0aW9uRWZmZWN0Olwiem9vbVwiLGFuaW1hdGlvbkR1cmF0aW9uOjM2Nix6b29tT3BhY2l0eTpcImF1dG9cIix0cmFuc2l0aW9uRWZmZWN0OlwiZmFkZVwiLHRyYW5zaXRpb25EdXJhdGlvbjozNjYsc2xpZGVDbGFzczpcIlwiLGJhc2VDbGFzczpcIlwiLGJhc2VUcGw6JzxkaXYgY2xhc3M9XCJmYW5jeWJveC1jb250YWluZXJcIiByb2xlPVwiZGlhbG9nXCIgdGFiaW5kZXg9XCItMVwiPjxkaXYgY2xhc3M9XCJmYW5jeWJveC1iZ1wiPjwvZGl2PjxkaXYgY2xhc3M9XCJmYW5jeWJveC1pbm5lclwiPjxkaXYgY2xhc3M9XCJmYW5jeWJveC1pbmZvYmFyXCI+PHNwYW4gZGF0YS1mYW5jeWJveC1pbmRleD48L3NwYW4+Jm5ic3A7LyZuYnNwOzxzcGFuIGRhdGEtZmFuY3lib3gtY291bnQ+PC9zcGFuPjwvZGl2PjxkaXYgY2xhc3M9XCJmYW5jeWJveC10b29sYmFyXCI+e3tidXR0b25zfX08L2Rpdj48ZGl2IGNsYXNzPVwiZmFuY3lib3gtbmF2aWdhdGlvblwiPnt7YXJyb3dzfX08L2Rpdj48ZGl2IGNsYXNzPVwiZmFuY3lib3gtc3RhZ2VcIj48L2Rpdj48ZGl2IGNsYXNzPVwiZmFuY3lib3gtY2FwdGlvblwiPjxkaXYgY2xhc3M9XCJmYW5jeWJveC1jYXB0aW9uX19ib2R5XCI+PC9kaXY+PC9kaXY+PC9kaXY+PC9kaXY+JyxzcGlubmVyVHBsOic8ZGl2IGNsYXNzPVwiZmFuY3lib3gtbG9hZGluZ1wiPjwvZGl2PicsZXJyb3JUcGw6JzxkaXYgY2xhc3M9XCJmYW5jeWJveC1lcnJvclwiPjxwPnt7RVJST1J9fTwvcD48L2Rpdj4nLGJ0blRwbDp7ZG93bmxvYWQ6JzxhIGRvd25sb2FkIGRhdGEtZmFuY3lib3gtZG93bmxvYWQgY2xhc3M9XCJmYW5jeWJveC1idXR0b24gZmFuY3lib3gtYnV0dG9uLS1kb3dubG9hZFwiIHRpdGxlPVwie3tET1dOTE9BRH19XCIgaHJlZj1cImphdmFzY3JpcHQ6O1wiPjxzdmcgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiIHZpZXdCb3g9XCIwIDAgMjQgMjRcIj48cGF0aCBkPVwiTTE4LjYyIDE3LjA5VjE5SDUuMzh2LTEuOTF6bS0yLjk3LTYuOTZMMTcgMTEuNDVsLTUgNC44Ny01LTQuODcgMS4zNi0xLjMyIDIuNjggMi42NFY1aDEuOTJ2Ny43N3pcIi8+PC9zdmc+PC9hPicsem9vbTonPGJ1dHRvbiBkYXRhLWZhbmN5Ym94LXpvb20gY2xhc3M9XCJmYW5jeWJveC1idXR0b24gZmFuY3lib3gtYnV0dG9uLS16b29tXCIgdGl0bGU9XCJ7e1pPT019fVwiPjxzdmcgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiIHZpZXdCb3g9XCIwIDAgMjQgMjRcIj48cGF0aCBkPVwiTTE4LjcgMTcuM2wtMy0zYTUuOSA1LjkgMCAwIDAtLjYtNy42IDUuOSA1LjkgMCAwIDAtOC40IDAgNS45IDUuOSAwIDAgMCAwIDguNCA1LjkgNS45IDAgMCAwIDcuNy43bDMgM2ExIDEgMCAwIDAgMS4zIDBjLjQtLjUuNC0xIDAtMS41ek04LjEgMTMuOGE0IDQgMCAwIDEgMC01LjcgNCA0IDAgMCAxIDUuNyAwIDQgNCAwIDAgMSAwIDUuNyA0IDQgMCAwIDEtNS43IDB6XCIvPjwvc3ZnPjwvYnV0dG9uPicsY2xvc2U6JzxidXR0b24gZGF0YS1mYW5jeWJveC1jbG9zZSBjbGFzcz1cImZhbmN5Ym94LWJ1dHRvbiBmYW5jeWJveC1idXR0b24tLWNsb3NlXCIgdGl0bGU9XCJ7e0NMT1NFfX1cIj48c3ZnIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIiB2aWV3Qm94PVwiMCAwIDI0IDI0XCI+PHBhdGggZD1cIk0xMiAxMC42TDYuNiA1LjIgNS4yIDYuNmw1LjQgNS40LTUuNCA1LjQgMS40IDEuNCA1LjQtNS40IDUuNCA1LjQgMS40LTEuNC01LjQtNS40IDUuNC01LjQtMS40LTEuNC01LjQgNS40elwiLz48L3N2Zz48L2J1dHRvbj4nLGFycm93TGVmdDonPGJ1dHRvbiBkYXRhLWZhbmN5Ym94LXByZXYgY2xhc3M9XCJmYW5jeWJveC1idXR0b24gZmFuY3lib3gtYnV0dG9uLS1hcnJvd19sZWZ0XCIgdGl0bGU9XCJ7e1BSRVZ9fVwiPjxkaXY+PHN2ZyB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIgdmlld0JveD1cIjAgMCAyNCAyNFwiPjxwYXRoIGQ9XCJNMTEuMjggMTUuN2wtMS4zNCAxLjM3TDUgMTJsNC45NC01LjA3IDEuMzQgMS4zOC0yLjY4IDIuNzJIMTl2MS45NEg4LjZ6XCIvPjwvc3ZnPjwvZGl2PjwvYnV0dG9uPicsYXJyb3dSaWdodDonPGJ1dHRvbiBkYXRhLWZhbmN5Ym94LW5leHQgY2xhc3M9XCJmYW5jeWJveC1idXR0b24gZmFuY3lib3gtYnV0dG9uLS1hcnJvd19yaWdodFwiIHRpdGxlPVwie3tORVhUfX1cIj48ZGl2PjxzdmcgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiIHZpZXdCb3g9XCIwIDAgMjQgMjRcIj48cGF0aCBkPVwiTTE1LjQgMTIuOTdsLTIuNjggMi43MiAxLjM0IDEuMzhMMTkgMTJsLTQuOTQtNS4wNy0xLjM0IDEuMzggMi42OCAyLjcySDV2MS45NHpcIi8+PC9zdmc+PC9kaXY+PC9idXR0b24+JyxzbWFsbEJ0bjonPGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgZGF0YS1mYW5jeWJveC1jbG9zZSBjbGFzcz1cImZhbmN5Ym94LWJ1dHRvbiBmYW5jeWJveC1jbG9zZS1zbWFsbFwiIHRpdGxlPVwie3tDTE9TRX19XCI+PHN2ZyB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIgdmVyc2lvbj1cIjFcIiB2aWV3Qm94PVwiMCAwIDI0IDI0XCI+PHBhdGggZD1cIk0xMyAxMmw1LTUtMS0xLTUgNS01LTUtMSAxIDUgNS01IDUgMSAxIDUtNSA1IDUgMS0xelwiLz48L3N2Zz48L2J1dHRvbj4nfSxwYXJlbnRFbDpcImJvZHlcIixoaWRlU2Nyb2xsYmFyOiEwLGF1dG9Gb2N1czohMCxiYWNrRm9jdXM6ITAsdHJhcEZvY3VzOiEwLGZ1bGxTY3JlZW46e2F1dG9TdGFydDohMX0sdG91Y2g6e3ZlcnRpY2FsOiEwLG1vbWVudHVtOiEwfSxoYXNoOm51bGwsbWVkaWE6e30sc2xpZGVTaG93OnthdXRvU3RhcnQ6ITEsc3BlZWQ6M2UzfSx0aHVtYnM6e2F1dG9TdGFydDohMSxoaWRlT25DbG9zZTohMCxwYXJlbnRFbDpcIi5mYW5jeWJveC1jb250YWluZXJcIixheGlzOlwieVwifSx3aGVlbDpcImF1dG9cIixvbkluaXQ6bi5ub29wLGJlZm9yZUxvYWQ6bi5ub29wLGFmdGVyTG9hZDpuLm5vb3AsYmVmb3JlU2hvdzpuLm5vb3AsYWZ0ZXJTaG93Om4ubm9vcCxiZWZvcmVDbG9zZTpuLm5vb3AsYWZ0ZXJDbG9zZTpuLm5vb3Asb25BY3RpdmF0ZTpuLm5vb3Asb25EZWFjdGl2YXRlOm4ubm9vcCxjbGlja0NvbnRlbnQ6ZnVuY3Rpb24odCxlKXtyZXR1cm5cImltYWdlXCI9PT10LnR5cGUmJlwiem9vbVwifSxjbGlja1NsaWRlOlwiY2xvc2VcIixjbGlja091dHNpZGU6XCJjbG9zZVwiLGRibGNsaWNrQ29udGVudDohMSxkYmxjbGlja1NsaWRlOiExLGRibGNsaWNrT3V0c2lkZTohMSxtb2JpbGU6e3ByZXZlbnRDYXB0aW9uT3ZlcmxhcDohMSxpZGxlVGltZTohMSxjbGlja0NvbnRlbnQ6ZnVuY3Rpb24odCxlKXtyZXR1cm5cImltYWdlXCI9PT10LnR5cGUmJlwidG9nZ2xlQ29udHJvbHNcIn0sY2xpY2tTbGlkZTpmdW5jdGlvbih0LGUpe3JldHVyblwiaW1hZ2VcIj09PXQudHlwZT9cInRvZ2dsZUNvbnRyb2xzXCI6XCJjbG9zZVwifSxkYmxjbGlja0NvbnRlbnQ6ZnVuY3Rpb24odCxlKXtyZXR1cm5cImltYWdlXCI9PT10LnR5cGUmJlwiem9vbVwifSxkYmxjbGlja1NsaWRlOmZ1bmN0aW9uKHQsZSl7cmV0dXJuXCJpbWFnZVwiPT09dC50eXBlJiZcInpvb21cIn19LGxhbmc6XCJlblwiLGkxOG46e2VuOntDTE9TRTpcIkNsb3NlXCIsTkVYVDpcIk5leHRcIixQUkVWOlwiUHJldmlvdXNcIixFUlJPUjpcIlRoZSByZXF1ZXN0ZWQgY29udGVudCBjYW5ub3QgYmUgbG9hZGVkLiA8YnIvPiBQbGVhc2UgdHJ5IGFnYWluIGxhdGVyLlwiLFBMQVlfU1RBUlQ6XCJTdGFydCBzbGlkZXNob3dcIixQTEFZX1NUT1A6XCJQYXVzZSBzbGlkZXNob3dcIixGVUxMX1NDUkVFTjpcIkZ1bGwgc2NyZWVuXCIsVEhVTUJTOlwiVGh1bWJuYWlsc1wiLERPV05MT0FEOlwiRG93bmxvYWRcIixTSEFSRTpcIlNoYXJlXCIsWk9PTTpcIlpvb21cIn0sZGU6e0NMT1NFOlwiU2NobGllJnN6bGlnO2VuXCIsTkVYVDpcIldlaXRlclwiLFBSRVY6XCJadXImdXVtbDtja1wiLEVSUk9SOlwiRGllIGFuZ2Vmb3JkZXJ0ZW4gRGF0ZW4ga29ubnRlbiBuaWNodCBnZWxhZGVuIHdlcmRlbi4gPGJyLz4gQml0dGUgdmVyc3VjaGVuIFNpZSBlcyBzcCZhdW1sO3RlciBub2NobWFsLlwiLFBMQVlfU1RBUlQ6XCJEaWFzY2hhdSBzdGFydGVuXCIsUExBWV9TVE9QOlwiRGlhc2NoYXUgYmVlbmRlblwiLEZVTExfU0NSRUVOOlwiVm9sbGJpbGRcIixUSFVNQlM6XCJWb3JzY2hhdWJpbGRlclwiLERPV05MT0FEOlwiSGVydW50ZXJsYWRlblwiLFNIQVJFOlwiVGVpbGVuXCIsWk9PTTpcIlZlcmdyJm91bWw7JnN6bGlnO2VyblwifX19LHM9bih0KSxyPW4oZSksYz0wLGw9ZnVuY3Rpb24odCl7cmV0dXJuIHQmJnQuaGFzT3duUHJvcGVydHkmJnQgaW5zdGFuY2VvZiBufSxkPWZ1bmN0aW9uKCl7cmV0dXJuIHQucmVxdWVzdEFuaW1hdGlvbkZyYW1lfHx0LndlYmtpdFJlcXVlc3RBbmltYXRpb25GcmFtZXx8dC5tb3pSZXF1ZXN0QW5pbWF0aW9uRnJhbWV8fHQub1JlcXVlc3RBbmltYXRpb25GcmFtZXx8ZnVuY3Rpb24oZSl7cmV0dXJuIHQuc2V0VGltZW91dChlLDFlMy82MCl9fSgpLHU9ZnVuY3Rpb24oKXtyZXR1cm4gdC5jYW5jZWxBbmltYXRpb25GcmFtZXx8dC53ZWJraXRDYW5jZWxBbmltYXRpb25GcmFtZXx8dC5tb3pDYW5jZWxBbmltYXRpb25GcmFtZXx8dC5vQ2FuY2VsQW5pbWF0aW9uRnJhbWV8fGZ1bmN0aW9uKGUpe3QuY2xlYXJUaW1lb3V0KGUpfX0oKSxmPWZ1bmN0aW9uKCl7dmFyIHQsbj1lLmNyZWF0ZUVsZW1lbnQoXCJmYWtlZWxlbWVudFwiKSxvPXt0cmFuc2l0aW9uOlwidHJhbnNpdGlvbmVuZFwiLE9UcmFuc2l0aW9uOlwib1RyYW5zaXRpb25FbmRcIixNb3pUcmFuc2l0aW9uOlwidHJhbnNpdGlvbmVuZFwiLFdlYmtpdFRyYW5zaXRpb246XCJ3ZWJraXRUcmFuc2l0aW9uRW5kXCJ9O2Zvcih0IGluIG8paWYodm9pZCAwIT09bi5zdHlsZVt0XSlyZXR1cm4gb1t0XTtyZXR1cm5cInRyYW5zaXRpb25lbmRcIn0oKSxwPWZ1bmN0aW9uKHQpe3JldHVybiB0JiZ0Lmxlbmd0aCYmdFswXS5vZmZzZXRIZWlnaHR9LGg9ZnVuY3Rpb24odCxlKXt2YXIgbz1uLmV4dGVuZCghMCx7fSx0LGUpO3JldHVybiBuLmVhY2goZSxmdW5jdGlvbih0LGUpe24uaXNBcnJheShlKSYmKG9bdF09ZSl9KSxvfSxnPWZ1bmN0aW9uKHQpe3ZhciBvLGk7cmV0dXJuISghdHx8dC5vd25lckRvY3VtZW50IT09ZSkmJihuKFwiLmZhbmN5Ym94LWNvbnRhaW5lclwiKS5jc3MoXCJwb2ludGVyLWV2ZW50c1wiLFwibm9uZVwiKSxvPXt4OnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkubGVmdCt0Lm9mZnNldFdpZHRoLzIseTp0LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLnRvcCt0Lm9mZnNldEhlaWdodC8yfSxpPWUuZWxlbWVudEZyb21Qb2ludChvLngsby55KT09PXQsbihcIi5mYW5jeWJveC1jb250YWluZXJcIikuY3NzKFwicG9pbnRlci1ldmVudHNcIixcIlwiKSxpKX0sYj1mdW5jdGlvbih0LGUsbyl7dmFyIGk9dGhpcztpLm9wdHM9aCh7aW5kZXg6b30sbi5mYW5jeWJveC5kZWZhdWx0cyksbi5pc1BsYWluT2JqZWN0KGUpJiYoaS5vcHRzPWgoaS5vcHRzLGUpKSxuLmZhbmN5Ym94LmlzTW9iaWxlJiYoaS5vcHRzPWgoaS5vcHRzLGkub3B0cy5tb2JpbGUpKSxpLmlkPWkub3B0cy5pZHx8KytjLGkuY3VyckluZGV4PXBhcnNlSW50KGkub3B0cy5pbmRleCwxMCl8fDAsaS5wcmV2SW5kZXg9bnVsbCxpLnByZXZQb3M9bnVsbCxpLmN1cnJQb3M9MCxpLmZpcnN0UnVuPSEwLGkuZ3JvdXA9W10saS5zbGlkZXM9e30saS5hZGRDb250ZW50KHQpLGkuZ3JvdXAubGVuZ3RoJiZpLmluaXQoKX07bi5leHRlbmQoYi5wcm90b3R5cGUse2luaXQ6ZnVuY3Rpb24oKXt2YXIgbyxpLGE9dGhpcyxzPWEuZ3JvdXBbYS5jdXJySW5kZXhdLHI9cy5vcHRzO3IuY2xvc2VFeGlzdGluZyYmbi5mYW5jeWJveC5jbG9zZSghMCksbihcImJvZHlcIikuYWRkQ2xhc3MoXCJmYW5jeWJveC1hY3RpdmVcIiksIW4uZmFuY3lib3guZ2V0SW5zdGFuY2UoKSYmITEhPT1yLmhpZGVTY3JvbGxiYXImJiFuLmZhbmN5Ym94LmlzTW9iaWxlJiZlLmJvZHkuc2Nyb2xsSGVpZ2h0PnQuaW5uZXJIZWlnaHQmJihuKFwiaGVhZFwiKS5hcHBlbmQoJzxzdHlsZSBpZD1cImZhbmN5Ym94LXN0eWxlLW5vc2Nyb2xsXCIgdHlwZT1cInRleHQvY3NzXCI+LmNvbXBlbnNhdGUtZm9yLXNjcm9sbGJhcnttYXJnaW4tcmlnaHQ6JysodC5pbm5lcldpZHRoLWUuZG9jdW1lbnRFbGVtZW50LmNsaWVudFdpZHRoKStcInB4O308L3N0eWxlPlwiKSxuKFwiYm9keVwiKS5hZGRDbGFzcyhcImNvbXBlbnNhdGUtZm9yLXNjcm9sbGJhclwiKSksaT1cIlwiLG4uZWFjaChyLmJ1dHRvbnMsZnVuY3Rpb24odCxlKXtpKz1yLmJ0blRwbFtlXXx8XCJcIn0pLG89bihhLnRyYW5zbGF0ZShhLHIuYmFzZVRwbC5yZXBsYWNlKFwie3tidXR0b25zfX1cIixpKS5yZXBsYWNlKFwie3thcnJvd3N9fVwiLHIuYnRuVHBsLmFycm93TGVmdCtyLmJ0blRwbC5hcnJvd1JpZ2h0KSkpLmF0dHIoXCJpZFwiLFwiZmFuY3lib3gtY29udGFpbmVyLVwiK2EuaWQpLmFkZENsYXNzKHIuYmFzZUNsYXNzKS5kYXRhKFwiRmFuY3lCb3hcIixhKS5hcHBlbmRUbyhyLnBhcmVudEVsKSxhLiRyZWZzPXtjb250YWluZXI6b30sW1wiYmdcIixcImlubmVyXCIsXCJpbmZvYmFyXCIsXCJ0b29sYmFyXCIsXCJzdGFnZVwiLFwiY2FwdGlvblwiLFwibmF2aWdhdGlvblwiXS5mb3JFYWNoKGZ1bmN0aW9uKHQpe2EuJHJlZnNbdF09by5maW5kKFwiLmZhbmN5Ym94LVwiK3QpfSksYS50cmlnZ2VyKFwib25Jbml0XCIpLGEuYWN0aXZhdGUoKSxhLmp1bXBUbyhhLmN1cnJJbmRleCl9LHRyYW5zbGF0ZTpmdW5jdGlvbih0LGUpe3ZhciBuPXQub3B0cy5pMThuW3Qub3B0cy5sYW5nXXx8dC5vcHRzLmkxOG4uZW47cmV0dXJuIGUucmVwbGFjZSgvXFx7XFx7KFxcdyspXFx9XFx9L2csZnVuY3Rpb24odCxlKXtyZXR1cm4gdm9pZCAwPT09bltlXT90Om5bZV19KX0sYWRkQ29udGVudDpmdW5jdGlvbih0KXt2YXIgZSxvPXRoaXMsaT1uLm1ha2VBcnJheSh0KTtuLmVhY2goaSxmdW5jdGlvbih0LGUpe3ZhciBpLGEscyxyLGMsbD17fSxkPXt9O24uaXNQbGFpbk9iamVjdChlKT8obD1lLGQ9ZS5vcHRzfHxlKTpcIm9iamVjdFwiPT09bi50eXBlKGUpJiZuKGUpLmxlbmd0aD8oaT1uKGUpLGQ9aS5kYXRhKCl8fHt9LGQ9bi5leHRlbmQoITAse30sZCxkLm9wdGlvbnMpLGQuJG9yaWc9aSxsLnNyYz1vLm9wdHMuc3JjfHxkLnNyY3x8aS5hdHRyKFwiaHJlZlwiKSxsLnR5cGV8fGwuc3JjfHwobC50eXBlPVwiaW5saW5lXCIsbC5zcmM9ZSkpOmw9e3R5cGU6XCJodG1sXCIsc3JjOmUrXCJcIn0sbC5vcHRzPW4uZXh0ZW5kKCEwLHt9LG8ub3B0cyxkKSxuLmlzQXJyYXkoZC5idXR0b25zKSYmKGwub3B0cy5idXR0b25zPWQuYnV0dG9ucyksbi5mYW5jeWJveC5pc01vYmlsZSYmbC5vcHRzLm1vYmlsZSYmKGwub3B0cz1oKGwub3B0cyxsLm9wdHMubW9iaWxlKSksYT1sLnR5cGV8fGwub3B0cy50eXBlLHI9bC5zcmN8fFwiXCIsIWEmJnImJigocz1yLm1hdGNoKC9cXC4obXA0fG1vdnxvZ3Z8d2VibSkoKFxcP3wjKS4qKT8kL2kpKT8oYT1cInZpZGVvXCIsbC5vcHRzLnZpZGVvLmZvcm1hdHx8KGwub3B0cy52aWRlby5mb3JtYXQ9XCJ2aWRlby9cIisoXCJvZ3ZcIj09PXNbMV0/XCJvZ2dcIjpzWzFdKSkpOnIubWF0Y2goLyheZGF0YTppbWFnZVxcL1thLXowLTkrXFwvPV0qLCl8KFxcLihqcChlfGd8ZWcpfGdpZnxwbmd8Ym1wfHdlYnB8c3ZnfGljbykoKFxcP3wjKS4qKT8kKS9pKT9hPVwiaW1hZ2VcIjpyLm1hdGNoKC9cXC4ocGRmKSgoXFw/fCMpLiopPyQvaSk/KGE9XCJpZnJhbWVcIixsPW4uZXh0ZW5kKCEwLGwse2NvbnRlbnRUeXBlOlwicGRmXCIsb3B0czp7aWZyYW1lOntwcmVsb2FkOiExfX19KSk6XCIjXCI9PT1yLmNoYXJBdCgwKSYmKGE9XCJpbmxpbmVcIikpLGE/bC50eXBlPWE6by50cmlnZ2VyKFwib2JqZWN0TmVlZHNUeXBlXCIsbCksbC5jb250ZW50VHlwZXx8KGwuY29udGVudFR5cGU9bi5pbkFycmF5KGwudHlwZSxbXCJodG1sXCIsXCJpbmxpbmVcIixcImFqYXhcIl0pPi0xP1wiaHRtbFwiOmwudHlwZSksbC5pbmRleD1vLmdyb3VwLmxlbmd0aCxcImF1dG9cIj09bC5vcHRzLnNtYWxsQnRuJiYobC5vcHRzLnNtYWxsQnRuPW4uaW5BcnJheShsLnR5cGUsW1wiaHRtbFwiLFwiaW5saW5lXCIsXCJhamF4XCJdKT4tMSksXCJhdXRvXCI9PT1sLm9wdHMudG9vbGJhciYmKGwub3B0cy50b29sYmFyPSFsLm9wdHMuc21hbGxCdG4pLGwuJHRodW1iPWwub3B0cy4kdGh1bWJ8fG51bGwsbC5vcHRzLiR0cmlnZ2VyJiZsLmluZGV4PT09by5vcHRzLmluZGV4JiYobC4kdGh1bWI9bC5vcHRzLiR0cmlnZ2VyLmZpbmQoXCJpbWc6Zmlyc3RcIiksbC4kdGh1bWIubGVuZ3RoJiYobC5vcHRzLiRvcmlnPWwub3B0cy4kdHJpZ2dlcikpLGwuJHRodW1iJiZsLiR0aHVtYi5sZW5ndGh8fCFsLm9wdHMuJG9yaWd8fChsLiR0aHVtYj1sLm9wdHMuJG9yaWcuZmluZChcImltZzpmaXJzdFwiKSksbC4kdGh1bWImJiFsLiR0aHVtYi5sZW5ndGgmJihsLiR0aHVtYj1udWxsKSxsLnRodW1iPWwub3B0cy50aHVtYnx8KGwuJHRodW1iP2wuJHRodW1iWzBdLnNyYzpudWxsKSxcImZ1bmN0aW9uXCI9PT1uLnR5cGUobC5vcHRzLmNhcHRpb24pJiYobC5vcHRzLmNhcHRpb249bC5vcHRzLmNhcHRpb24uYXBwbHkoZSxbbyxsXSkpLFwiZnVuY3Rpb25cIj09PW4udHlwZShvLm9wdHMuY2FwdGlvbikmJihsLm9wdHMuY2FwdGlvbj1vLm9wdHMuY2FwdGlvbi5hcHBseShlLFtvLGxdKSksbC5vcHRzLmNhcHRpb24gaW5zdGFuY2VvZiBufHwobC5vcHRzLmNhcHRpb249dm9pZCAwPT09bC5vcHRzLmNhcHRpb24/XCJcIjpsLm9wdHMuY2FwdGlvbitcIlwiKSxcImFqYXhcIj09PWwudHlwZSYmKGM9ci5zcGxpdCgvXFxzKy8sMiksYy5sZW5ndGg+MSYmKGwuc3JjPWMuc2hpZnQoKSxsLm9wdHMuZmlsdGVyPWMuc2hpZnQoKSkpLGwub3B0cy5tb2RhbCYmKGwub3B0cz1uLmV4dGVuZCghMCxsLm9wdHMse3RyYXBGb2N1czohMCxpbmZvYmFyOjAsdG9vbGJhcjowLHNtYWxsQnRuOjAsa2V5Ym9hcmQ6MCxzbGlkZVNob3c6MCxmdWxsU2NyZWVuOjAsdGh1bWJzOjAsdG91Y2g6MCxjbGlja0NvbnRlbnQ6ITEsY2xpY2tTbGlkZTohMSxjbGlja091dHNpZGU6ITEsZGJsY2xpY2tDb250ZW50OiExLGRibGNsaWNrU2xpZGU6ITEsZGJsY2xpY2tPdXRzaWRlOiExfSkpLG8uZ3JvdXAucHVzaChsKX0pLE9iamVjdC5rZXlzKG8uc2xpZGVzKS5sZW5ndGgmJihvLnVwZGF0ZUNvbnRyb2xzKCksKGU9by5UaHVtYnMpJiZlLmlzQWN0aXZlJiYoZS5jcmVhdGUoKSxlLmZvY3VzKCkpKX0sYWRkRXZlbnRzOmZ1bmN0aW9uKCl7dmFyIGU9dGhpcztlLnJlbW92ZUV2ZW50cygpLGUuJHJlZnMuY29udGFpbmVyLm9uKFwiY2xpY2suZmItY2xvc2VcIixcIltkYXRhLWZhbmN5Ym94LWNsb3NlXVwiLGZ1bmN0aW9uKHQpe3Quc3RvcFByb3BhZ2F0aW9uKCksdC5wcmV2ZW50RGVmYXVsdCgpLGUuY2xvc2UodCl9KS5vbihcInRvdWNoc3RhcnQuZmItcHJldiBjbGljay5mYi1wcmV2XCIsXCJbZGF0YS1mYW5jeWJveC1wcmV2XVwiLGZ1bmN0aW9uKHQpe3Quc3RvcFByb3BhZ2F0aW9uKCksdC5wcmV2ZW50RGVmYXVsdCgpLGUucHJldmlvdXMoKX0pLm9uKFwidG91Y2hzdGFydC5mYi1uZXh0IGNsaWNrLmZiLW5leHRcIixcIltkYXRhLWZhbmN5Ym94LW5leHRdXCIsZnVuY3Rpb24odCl7dC5zdG9wUHJvcGFnYXRpb24oKSx0LnByZXZlbnREZWZhdWx0KCksZS5uZXh0KCl9KS5vbihcImNsaWNrLmZiXCIsXCJbZGF0YS1mYW5jeWJveC16b29tXVwiLGZ1bmN0aW9uKHQpe2VbZS5pc1NjYWxlZERvd24oKT9cInNjYWxlVG9BY3R1YWxcIjpcInNjYWxlVG9GaXRcIl0oKX0pLHMub24oXCJvcmllbnRhdGlvbmNoYW5nZS5mYiByZXNpemUuZmJcIixmdW5jdGlvbih0KXt0JiZ0Lm9yaWdpbmFsRXZlbnQmJlwicmVzaXplXCI9PT10Lm9yaWdpbmFsRXZlbnQudHlwZT8oZS5yZXF1ZXN0SWQmJnUoZS5yZXF1ZXN0SWQpLGUucmVxdWVzdElkPWQoZnVuY3Rpb24oKXtlLnVwZGF0ZSh0KX0pKTooZS5jdXJyZW50JiZcImlmcmFtZVwiPT09ZS5jdXJyZW50LnR5cGUmJmUuJHJlZnMuc3RhZ2UuaGlkZSgpLHNldFRpbWVvdXQoZnVuY3Rpb24oKXtlLiRyZWZzLnN0YWdlLnNob3coKSxlLnVwZGF0ZSh0KX0sbi5mYW5jeWJveC5pc01vYmlsZT82MDA6MjUwKSl9KSxyLm9uKFwia2V5ZG93bi5mYlwiLGZ1bmN0aW9uKHQpe3ZhciBvPW4uZmFuY3lib3g/bi5mYW5jeWJveC5nZXRJbnN0YW5jZSgpOm51bGwsaT1vLmN1cnJlbnQsYT10LmtleUNvZGV8fHQud2hpY2g7aWYoOT09YSlyZXR1cm4gdm9pZChpLm9wdHMudHJhcEZvY3VzJiZlLmZvY3VzKHQpKTtpZighKCFpLm9wdHMua2V5Ym9hcmR8fHQuY3RybEtleXx8dC5hbHRLZXl8fHQuc2hpZnRLZXl8fG4odC50YXJnZXQpLmlzKFwiaW5wdXQsdGV4dGFyZWEsdmlkZW8sYXVkaW8sc2VsZWN0XCIpKSlyZXR1cm4gOD09PWF8fDI3PT09YT8odC5wcmV2ZW50RGVmYXVsdCgpLHZvaWQgZS5jbG9zZSh0KSk6Mzc9PT1hfHwzOD09PWE/KHQucHJldmVudERlZmF1bHQoKSx2b2lkIGUucHJldmlvdXMoKSk6Mzk9PT1hfHw0MD09PWE/KHQucHJldmVudERlZmF1bHQoKSx2b2lkIGUubmV4dCgpKTp2b2lkIGUudHJpZ2dlcihcImFmdGVyS2V5ZG93blwiLHQsYSl9KSxlLmdyb3VwW2UuY3VyckluZGV4XS5vcHRzLmlkbGVUaW1lJiYoZS5pZGxlU2Vjb25kc0NvdW50ZXI9MCxyLm9uKFwibW91c2Vtb3ZlLmZiLWlkbGUgbW91c2VsZWF2ZS5mYi1pZGxlIG1vdXNlZG93bi5mYi1pZGxlIHRvdWNoc3RhcnQuZmItaWRsZSB0b3VjaG1vdmUuZmItaWRsZSBzY3JvbGwuZmItaWRsZSBrZXlkb3duLmZiLWlkbGVcIixmdW5jdGlvbih0KXtlLmlkbGVTZWNvbmRzQ291bnRlcj0wLGUuaXNJZGxlJiZlLnNob3dDb250cm9scygpLGUuaXNJZGxlPSExfSksZS5pZGxlSW50ZXJ2YWw9dC5zZXRJbnRlcnZhbChmdW5jdGlvbigpeysrZS5pZGxlU2Vjb25kc0NvdW50ZXI+PWUuZ3JvdXBbZS5jdXJySW5kZXhdLm9wdHMuaWRsZVRpbWUmJiFlLmlzRHJhZ2dpbmcmJihlLmlzSWRsZT0hMCxlLmlkbGVTZWNvbmRzQ291bnRlcj0wLGUuaGlkZUNvbnRyb2xzKCkpfSwxZTMpKX0scmVtb3ZlRXZlbnRzOmZ1bmN0aW9uKCl7dmFyIGU9dGhpcztzLm9mZihcIm9yaWVudGF0aW9uY2hhbmdlLmZiIHJlc2l6ZS5mYlwiKSxyLm9mZihcImtleWRvd24uZmIgLmZiLWlkbGVcIiksdGhpcy4kcmVmcy5jb250YWluZXIub2ZmKFwiLmZiLWNsb3NlIC5mYi1wcmV2IC5mYi1uZXh0XCIpLGUuaWRsZUludGVydmFsJiYodC5jbGVhckludGVydmFsKGUuaWRsZUludGVydmFsKSxlLmlkbGVJbnRlcnZhbD1udWxsKX0scHJldmlvdXM6ZnVuY3Rpb24odCl7cmV0dXJuIHRoaXMuanVtcFRvKHRoaXMuY3VyclBvcy0xLHQpfSxuZXh0OmZ1bmN0aW9uKHQpe3JldHVybiB0aGlzLmp1bXBUbyh0aGlzLmN1cnJQb3MrMSx0KX0sanVtcFRvOmZ1bmN0aW9uKHQsZSl7dmFyIG8saSxhLHMscixjLGwsZCx1LGY9dGhpcyxoPWYuZ3JvdXAubGVuZ3RoO2lmKCEoZi5pc0RyYWdnaW5nfHxmLmlzQ2xvc2luZ3x8Zi5pc0FuaW1hdGluZyYmZi5maXJzdFJ1bikpe2lmKHQ9cGFyc2VJbnQodCwxMCksIShhPWYuY3VycmVudD9mLmN1cnJlbnQub3B0cy5sb29wOmYub3B0cy5sb29wKSYmKHQ8MHx8dD49aCkpcmV0dXJuITE7aWYobz1mLmZpcnN0UnVuPSFPYmplY3Qua2V5cyhmLnNsaWRlcykubGVuZ3RoLHI9Zi5jdXJyZW50LGYucHJldkluZGV4PWYuY3VyckluZGV4LGYucHJldlBvcz1mLmN1cnJQb3Mscz1mLmNyZWF0ZVNsaWRlKHQpLGg+MSYmKChhfHxzLmluZGV4PGgtMSkmJmYuY3JlYXRlU2xpZGUodCsxKSwoYXx8cy5pbmRleD4wKSYmZi5jcmVhdGVTbGlkZSh0LTEpKSxmLmN1cnJlbnQ9cyxmLmN1cnJJbmRleD1zLmluZGV4LGYuY3VyclBvcz1zLnBvcyxmLnRyaWdnZXIoXCJiZWZvcmVTaG93XCIsbyksZi51cGRhdGVDb250cm9scygpLHMuZm9yY2VkRHVyYXRpb249dm9pZCAwLG4uaXNOdW1lcmljKGUpP3MuZm9yY2VkRHVyYXRpb249ZTplPXMub3B0c1tvP1wiYW5pbWF0aW9uRHVyYXRpb25cIjpcInRyYW5zaXRpb25EdXJhdGlvblwiXSxlPXBhcnNlSW50KGUsMTApLGk9Zi5pc01vdmVkKHMpLHMuJHNsaWRlLmFkZENsYXNzKFwiZmFuY3lib3gtc2xpZGUtLWN1cnJlbnRcIiksbylyZXR1cm4gcy5vcHRzLmFuaW1hdGlvbkVmZmVjdCYmZSYmZi4kcmVmcy5jb250YWluZXIuY3NzKFwidHJhbnNpdGlvbi1kdXJhdGlvblwiLGUrXCJtc1wiKSxmLiRyZWZzLmNvbnRhaW5lci5hZGRDbGFzcyhcImZhbmN5Ym94LWlzLW9wZW5cIikudHJpZ2dlcihcImZvY3VzXCIpLGYubG9hZFNsaWRlKHMpLHZvaWQgZi5wcmVsb2FkKFwiaW1hZ2VcIik7Yz1uLmZhbmN5Ym94LmdldFRyYW5zbGF0ZShyLiRzbGlkZSksbD1uLmZhbmN5Ym94LmdldFRyYW5zbGF0ZShmLiRyZWZzLnN0YWdlKSxuLmVhY2goZi5zbGlkZXMsZnVuY3Rpb24odCxlKXtuLmZhbmN5Ym94LnN0b3AoZS4kc2xpZGUsITApfSksci5wb3MhPT1zLnBvcyYmKHIuaXNDb21wbGV0ZT0hMSksci4kc2xpZGUucmVtb3ZlQ2xhc3MoXCJmYW5jeWJveC1zbGlkZS0tY29tcGxldGUgZmFuY3lib3gtc2xpZGUtLWN1cnJlbnRcIiksaT8odT1jLmxlZnQtKHIucG9zKmMud2lkdGgrci5wb3Mqci5vcHRzLmd1dHRlciksbi5lYWNoKGYuc2xpZGVzLGZ1bmN0aW9uKHQsbyl7by4kc2xpZGUucmVtb3ZlQ2xhc3MoXCJmYW5jeWJveC1hbmltYXRlZFwiKS5yZW1vdmVDbGFzcyhmdW5jdGlvbih0LGUpe3JldHVybihlLm1hdGNoKC8oXnxcXHMpZmFuY3lib3gtZngtXFxTKy9nKXx8W10pLmpvaW4oXCIgXCIpfSk7dmFyIGk9by5wb3MqYy53aWR0aCtvLnBvcypvLm9wdHMuZ3V0dGVyO24uZmFuY3lib3guc2V0VHJhbnNsYXRlKG8uJHNsaWRlLHt0b3A6MCxsZWZ0OmktbC5sZWZ0K3V9KSxvLnBvcyE9PXMucG9zJiZvLiRzbGlkZS5hZGRDbGFzcyhcImZhbmN5Ym94LXNsaWRlLS1cIisoby5wb3M+cy5wb3M/XCJuZXh0XCI6XCJwcmV2aW91c1wiKSkscChvLiRzbGlkZSksbi5mYW5jeWJveC5hbmltYXRlKG8uJHNsaWRlLHt0b3A6MCxsZWZ0OihvLnBvcy1zLnBvcykqYy53aWR0aCsoby5wb3Mtcy5wb3MpKm8ub3B0cy5ndXR0ZXJ9LGUsZnVuY3Rpb24oKXtvLiRzbGlkZS5jc3Moe3RyYW5zZm9ybTpcIlwiLG9wYWNpdHk6XCJcIn0pLnJlbW92ZUNsYXNzKFwiZmFuY3lib3gtc2xpZGUtLW5leHQgZmFuY3lib3gtc2xpZGUtLXByZXZpb3VzXCIpLG8ucG9zPT09Zi5jdXJyUG9zJiZmLmNvbXBsZXRlKCl9KX0pKTplJiZzLm9wdHMudHJhbnNpdGlvbkVmZmVjdCYmKGQ9XCJmYW5jeWJveC1hbmltYXRlZCBmYW5jeWJveC1meC1cIitzLm9wdHMudHJhbnNpdGlvbkVmZmVjdCxyLiRzbGlkZS5hZGRDbGFzcyhcImZhbmN5Ym94LXNsaWRlLS1cIisoci5wb3M+cy5wb3M/XCJuZXh0XCI6XCJwcmV2aW91c1wiKSksbi5mYW5jeWJveC5hbmltYXRlKHIuJHNsaWRlLGQsZSxmdW5jdGlvbigpe3IuJHNsaWRlLnJlbW92ZUNsYXNzKGQpLnJlbW92ZUNsYXNzKFwiZmFuY3lib3gtc2xpZGUtLW5leHQgZmFuY3lib3gtc2xpZGUtLXByZXZpb3VzXCIpfSwhMSkpLHMuaXNMb2FkZWQ/Zi5yZXZlYWxDb250ZW50KHMpOmYubG9hZFNsaWRlKHMpLGYucHJlbG9hZChcImltYWdlXCIpfX0sY3JlYXRlU2xpZGU6ZnVuY3Rpb24odCl7dmFyIGUsbyxpPXRoaXM7cmV0dXJuIG89dCVpLmdyb3VwLmxlbmd0aCxvPW88MD9pLmdyb3VwLmxlbmd0aCtvOm8sIWkuc2xpZGVzW3RdJiZpLmdyb3VwW29dJiYoZT1uKCc8ZGl2IGNsYXNzPVwiZmFuY3lib3gtc2xpZGVcIj48L2Rpdj4nKS5hcHBlbmRUbyhpLiRyZWZzLnN0YWdlKSxpLnNsaWRlc1t0XT1uLmV4dGVuZCghMCx7fSxpLmdyb3VwW29dLHtwb3M6dCwkc2xpZGU6ZSxpc0xvYWRlZDohMX0pLGkudXBkYXRlU2xpZGUoaS5zbGlkZXNbdF0pKSxpLnNsaWRlc1t0XX0sc2NhbGVUb0FjdHVhbDpmdW5jdGlvbih0LGUsbyl7dmFyIGksYSxzLHIsYyxsPXRoaXMsZD1sLmN1cnJlbnQsdT1kLiRjb250ZW50LGY9bi5mYW5jeWJveC5nZXRUcmFuc2xhdGUoZC4kc2xpZGUpLndpZHRoLHA9bi5mYW5jeWJveC5nZXRUcmFuc2xhdGUoZC4kc2xpZGUpLmhlaWdodCxoPWQud2lkdGgsZz1kLmhlaWdodDtsLmlzQW5pbWF0aW5nfHxsLmlzTW92ZWQoKXx8IXV8fFwiaW1hZ2VcIiE9ZC50eXBlfHwhZC5pc0xvYWRlZHx8ZC5oYXNFcnJvcnx8KGwuaXNBbmltYXRpbmc9ITAsbi5mYW5jeWJveC5zdG9wKHUpLHQ9dm9pZCAwPT09dD8uNSpmOnQsZT12b2lkIDA9PT1lPy41KnA6ZSxpPW4uZmFuY3lib3guZ2V0VHJhbnNsYXRlKHUpLGkudG9wLT1uLmZhbmN5Ym94LmdldFRyYW5zbGF0ZShkLiRzbGlkZSkudG9wLGkubGVmdC09bi5mYW5jeWJveC5nZXRUcmFuc2xhdGUoZC4kc2xpZGUpLmxlZnQscj1oL2kud2lkdGgsYz1nL2kuaGVpZ2h0LGE9LjUqZi0uNSpoLHM9LjUqcC0uNSpnLGg+ZiYmKGE9aS5sZWZ0KnItKHQqci10KSxhPjAmJihhPTApLGE8Zi1oJiYoYT1mLWgpKSxnPnAmJihzPWkudG9wKmMtKGUqYy1lKSxzPjAmJihzPTApLHM8cC1nJiYocz1wLWcpKSxsLnVwZGF0ZUN1cnNvcihoLGcpLG4uZmFuY3lib3guYW5pbWF0ZSh1LHt0b3A6cyxsZWZ0OmEsc2NhbGVYOnIsc2NhbGVZOmN9LG98fDM2NixmdW5jdGlvbigpe2wuaXNBbmltYXRpbmc9ITF9KSxsLlNsaWRlU2hvdyYmbC5TbGlkZVNob3cuaXNBY3RpdmUmJmwuU2xpZGVTaG93LnN0b3AoKSl9LHNjYWxlVG9GaXQ6ZnVuY3Rpb24odCl7dmFyIGUsbz10aGlzLGk9by5jdXJyZW50LGE9aS4kY29udGVudDtvLmlzQW5pbWF0aW5nfHxvLmlzTW92ZWQoKXx8IWF8fFwiaW1hZ2VcIiE9aS50eXBlfHwhaS5pc0xvYWRlZHx8aS5oYXNFcnJvcnx8KG8uaXNBbmltYXRpbmc9ITAsbi5mYW5jeWJveC5zdG9wKGEpLGU9by5nZXRGaXRQb3MoaSksby51cGRhdGVDdXJzb3IoZS53aWR0aCxlLmhlaWdodCksbi5mYW5jeWJveC5hbmltYXRlKGEse3RvcDplLnRvcCxsZWZ0OmUubGVmdCxzY2FsZVg6ZS53aWR0aC9hLndpZHRoKCksc2NhbGVZOmUuaGVpZ2h0L2EuaGVpZ2h0KCl9LHR8fDM2NixmdW5jdGlvbigpe28uaXNBbmltYXRpbmc9ITF9KSl9LGdldEZpdFBvczpmdW5jdGlvbih0KXt2YXIgZSxvLGksYSxzPXRoaXMscj10LiRjb250ZW50LGM9dC4kc2xpZGUsbD10LndpZHRofHx0Lm9wdHMud2lkdGgsZD10LmhlaWdodHx8dC5vcHRzLmhlaWdodCx1PXt9O3JldHVybiEhKHQuaXNMb2FkZWQmJnImJnIubGVuZ3RoKSYmKGU9bi5mYW5jeWJveC5nZXRUcmFuc2xhdGUocy4kcmVmcy5zdGFnZSkud2lkdGgsbz1uLmZhbmN5Ym94LmdldFRyYW5zbGF0ZShzLiRyZWZzLnN0YWdlKS5oZWlnaHQsZS09cGFyc2VGbG9hdChjLmNzcyhcInBhZGRpbmdMZWZ0XCIpKStwYXJzZUZsb2F0KGMuY3NzKFwicGFkZGluZ1JpZ2h0XCIpKStwYXJzZUZsb2F0KHIuY3NzKFwibWFyZ2luTGVmdFwiKSkrcGFyc2VGbG9hdChyLmNzcyhcIm1hcmdpblJpZ2h0XCIpKSxvLT1wYXJzZUZsb2F0KGMuY3NzKFwicGFkZGluZ1RvcFwiKSkrcGFyc2VGbG9hdChjLmNzcyhcInBhZGRpbmdCb3R0b21cIikpK3BhcnNlRmxvYXQoci5jc3MoXCJtYXJnaW5Ub3BcIikpK3BhcnNlRmxvYXQoci5jc3MoXCJtYXJnaW5Cb3R0b21cIikpLGwmJmR8fChsPWUsZD1vKSxpPU1hdGgubWluKDEsZS9sLG8vZCksbCo9aSxkKj1pLGw+ZS0uNSYmKGw9ZSksZD5vLS41JiYoZD1vKSxcImltYWdlXCI9PT10LnR5cGU/KHUudG9wPU1hdGguZmxvb3IoLjUqKG8tZCkpK3BhcnNlRmxvYXQoYy5jc3MoXCJwYWRkaW5nVG9wXCIpKSx1LmxlZnQ9TWF0aC5mbG9vciguNSooZS1sKSkrcGFyc2VGbG9hdChjLmNzcyhcInBhZGRpbmdMZWZ0XCIpKSk6XCJ2aWRlb1wiPT09dC5jb250ZW50VHlwZSYmKGE9dC5vcHRzLndpZHRoJiZ0Lm9wdHMuaGVpZ2h0P2wvZDp0Lm9wdHMucmF0aW98fDE2LzksZD5sL2E/ZD1sL2E6bD5kKmEmJihsPWQqYSkpLHUud2lkdGg9bCx1LmhlaWdodD1kLHUpfSx1cGRhdGU6ZnVuY3Rpb24odCl7dmFyIGU9dGhpcztuLmVhY2goZS5zbGlkZXMsZnVuY3Rpb24obixvKXtlLnVwZGF0ZVNsaWRlKG8sdCl9KX0sdXBkYXRlU2xpZGU6ZnVuY3Rpb24odCxlKXt2YXIgbz10aGlzLGk9dCYmdC4kY29udGVudCxhPXQud2lkdGh8fHQub3B0cy53aWR0aCxzPXQuaGVpZ2h0fHx0Lm9wdHMuaGVpZ2h0LHI9dC4kc2xpZGU7by5hZGp1c3RDYXB0aW9uKHQpLGkmJihhfHxzfHxcInZpZGVvXCI9PT10LmNvbnRlbnRUeXBlKSYmIXQuaGFzRXJyb3ImJihuLmZhbmN5Ym94LnN0b3AoaSksbi5mYW5jeWJveC5zZXRUcmFuc2xhdGUoaSxvLmdldEZpdFBvcyh0KSksdC5wb3M9PT1vLmN1cnJQb3MmJihvLmlzQW5pbWF0aW5nPSExLG8udXBkYXRlQ3Vyc29yKCkpKSxvLmFkanVzdExheW91dCh0KSxyLmxlbmd0aCYmKHIudHJpZ2dlcihcInJlZnJlc2hcIiksdC5wb3M9PT1vLmN1cnJQb3MmJm8uJHJlZnMudG9vbGJhci5hZGQoby4kcmVmcy5uYXZpZ2F0aW9uLmZpbmQoXCIuZmFuY3lib3gtYnV0dG9uLS1hcnJvd19yaWdodFwiKSkudG9nZ2xlQ2xhc3MoXCJjb21wZW5zYXRlLWZvci1zY3JvbGxiYXJcIixyLmdldCgwKS5zY3JvbGxIZWlnaHQ+ci5nZXQoMCkuY2xpZW50SGVpZ2h0KSksby50cmlnZ2VyKFwib25VcGRhdGVcIix0LGUpfSxjZW50ZXJTbGlkZTpmdW5jdGlvbih0KXt2YXIgZT10aGlzLG89ZS5jdXJyZW50LGk9by4kc2xpZGU7IWUuaXNDbG9zaW5nJiZvJiYoaS5zaWJsaW5ncygpLmNzcyh7dHJhbnNmb3JtOlwiXCIsb3BhY2l0eTpcIlwifSksaS5wYXJlbnQoKS5jaGlsZHJlbigpLnJlbW92ZUNsYXNzKFwiZmFuY3lib3gtc2xpZGUtLXByZXZpb3VzIGZhbmN5Ym94LXNsaWRlLS1uZXh0XCIpLG4uZmFuY3lib3guYW5pbWF0ZShpLHt0b3A6MCxsZWZ0OjAsb3BhY2l0eToxfSx2b2lkIDA9PT10PzA6dCxmdW5jdGlvbigpe2kuY3NzKHt0cmFuc2Zvcm06XCJcIixvcGFjaXR5OlwiXCJ9KSxvLmlzQ29tcGxldGV8fGUuY29tcGxldGUoKX0sITEpKX0saXNNb3ZlZDpmdW5jdGlvbih0KXt2YXIgZSxvLGk9dHx8dGhpcy5jdXJyZW50O3JldHVybiEhaSYmKG89bi5mYW5jeWJveC5nZXRUcmFuc2xhdGUodGhpcy4kcmVmcy5zdGFnZSksZT1uLmZhbmN5Ym94LmdldFRyYW5zbGF0ZShpLiRzbGlkZSksIWkuJHNsaWRlLmhhc0NsYXNzKFwiZmFuY3lib3gtYW5pbWF0ZWRcIikmJihNYXRoLmFicyhlLnRvcC1vLnRvcCk+LjV8fE1hdGguYWJzKGUubGVmdC1vLmxlZnQpPi41KSl9LHVwZGF0ZUN1cnNvcjpmdW5jdGlvbih0LGUpe3ZhciBvLGksYT10aGlzLHM9YS5jdXJyZW50LHI9YS4kcmVmcy5jb250YWluZXI7cyYmIWEuaXNDbG9zaW5nJiZhLkd1ZXN0dXJlcyYmKHIucmVtb3ZlQ2xhc3MoXCJmYW5jeWJveC1pcy16b29tYWJsZSBmYW5jeWJveC1jYW4tem9vbUluIGZhbmN5Ym94LWNhbi16b29tT3V0IGZhbmN5Ym94LWNhbi1zd2lwZSBmYW5jeWJveC1jYW4tcGFuXCIpLG89YS5jYW5QYW4odCxlKSxpPSEhb3x8YS5pc1pvb21hYmxlKCksci50b2dnbGVDbGFzcyhcImZhbmN5Ym94LWlzLXpvb21hYmxlXCIsaSksbihcIltkYXRhLWZhbmN5Ym94LXpvb21dXCIpLnByb3AoXCJkaXNhYmxlZFwiLCFpKSxvP3IuYWRkQ2xhc3MoXCJmYW5jeWJveC1jYW4tcGFuXCIpOmkmJihcInpvb21cIj09PXMub3B0cy5jbGlja0NvbnRlbnR8fG4uaXNGdW5jdGlvbihzLm9wdHMuY2xpY2tDb250ZW50KSYmXCJ6b29tXCI9PXMub3B0cy5jbGlja0NvbnRlbnQocykpP3IuYWRkQ2xhc3MoXCJmYW5jeWJveC1jYW4tem9vbUluXCIpOnMub3B0cy50b3VjaCYmKHMub3B0cy50b3VjaC52ZXJ0aWNhbHx8YS5ncm91cC5sZW5ndGg+MSkmJlwidmlkZW9cIiE9PXMuY29udGVudFR5cGUmJnIuYWRkQ2xhc3MoXCJmYW5jeWJveC1jYW4tc3dpcGVcIikpfSxpc1pvb21hYmxlOmZ1bmN0aW9uKCl7dmFyIHQsZT10aGlzLG49ZS5jdXJyZW50O2lmKG4mJiFlLmlzQ2xvc2luZyYmXCJpbWFnZVwiPT09bi50eXBlJiYhbi5oYXNFcnJvcil7aWYoIW4uaXNMb2FkZWQpcmV0dXJuITA7aWYoKHQ9ZS5nZXRGaXRQb3MobikpJiYobi53aWR0aD50LndpZHRofHxuLmhlaWdodD50LmhlaWdodCkpcmV0dXJuITB9cmV0dXJuITF9LGlzU2NhbGVkRG93bjpmdW5jdGlvbih0LGUpe3ZhciBvPXRoaXMsaT0hMSxhPW8uY3VycmVudCxzPWEuJGNvbnRlbnQ7cmV0dXJuIHZvaWQgMCE9PXQmJnZvaWQgMCE9PWU/aT10PGEud2lkdGgmJmU8YS5oZWlnaHQ6cyYmKGk9bi5mYW5jeWJveC5nZXRUcmFuc2xhdGUocyksaT1pLndpZHRoPGEud2lkdGgmJmkuaGVpZ2h0PGEuaGVpZ2h0KSxpfSxjYW5QYW46ZnVuY3Rpb24odCxlKXt2YXIgbz10aGlzLGk9by5jdXJyZW50LGE9bnVsbCxzPSExO3JldHVyblwiaW1hZ2VcIj09PWkudHlwZSYmKGkuaXNDb21wbGV0ZXx8dCYmZSkmJiFpLmhhc0Vycm9yJiYocz1vLmdldEZpdFBvcyhpKSx2b2lkIDAhPT10JiZ2b2lkIDAhPT1lP2E9e3dpZHRoOnQsaGVpZ2h0OmV9OmkuaXNDb21wbGV0ZSYmKGE9bi5mYW5jeWJveC5nZXRUcmFuc2xhdGUoaS4kY29udGVudCkpLGEmJnMmJihzPU1hdGguYWJzKGEud2lkdGgtcy53aWR0aCk+MS41fHxNYXRoLmFicyhhLmhlaWdodC1zLmhlaWdodCk+MS41KSksc30sbG9hZFNsaWRlOmZ1bmN0aW9uKHQpe3ZhciBlLG8saSxhPXRoaXM7aWYoIXQuaXNMb2FkaW5nJiYhdC5pc0xvYWRlZCl7aWYodC5pc0xvYWRpbmc9ITAsITE9PT1hLnRyaWdnZXIoXCJiZWZvcmVMb2FkXCIsdCkpcmV0dXJuIHQuaXNMb2FkaW5nPSExLCExO3N3aXRjaChlPXQudHlwZSxvPXQuJHNsaWRlLG8ub2ZmKFwicmVmcmVzaFwiKS50cmlnZ2VyKFwib25SZXNldFwiKS5hZGRDbGFzcyh0Lm9wdHMuc2xpZGVDbGFzcyksZSl7Y2FzZVwiaW1hZ2VcIjphLnNldEltYWdlKHQpO2JyZWFrO2Nhc2VcImlmcmFtZVwiOmEuc2V0SWZyYW1lKHQpO2JyZWFrO2Nhc2VcImh0bWxcIjphLnNldENvbnRlbnQodCx0LnNyY3x8dC5jb250ZW50KTticmVhaztjYXNlXCJ2aWRlb1wiOmEuc2V0Q29udGVudCh0LHQub3B0cy52aWRlby50cGwucmVwbGFjZSgvXFx7XFx7c3JjXFx9XFx9L2dpLHQuc3JjKS5yZXBsYWNlKFwie3tmb3JtYXR9fVwiLHQub3B0cy52aWRlb0Zvcm1hdHx8dC5vcHRzLnZpZGVvLmZvcm1hdHx8XCJcIikucmVwbGFjZShcInt7cG9zdGVyfX1cIix0LnRodW1ifHxcIlwiKSk7YnJlYWs7Y2FzZVwiaW5saW5lXCI6bih0LnNyYykubGVuZ3RoP2Euc2V0Q29udGVudCh0LG4odC5zcmMpKTphLnNldEVycm9yKHQpO2JyZWFrO2Nhc2VcImFqYXhcIjphLnNob3dMb2FkaW5nKHQpLGk9bi5hamF4KG4uZXh0ZW5kKHt9LHQub3B0cy5hamF4LnNldHRpbmdzLHt1cmw6dC5zcmMsc3VjY2VzczpmdW5jdGlvbihlLG4pe1wic3VjY2Vzc1wiPT09biYmYS5zZXRDb250ZW50KHQsZSl9LGVycm9yOmZ1bmN0aW9uKGUsbil7ZSYmXCJhYm9ydFwiIT09biYmYS5zZXRFcnJvcih0KX19KSksby5vbmUoXCJvblJlc2V0XCIsZnVuY3Rpb24oKXtpLmFib3J0KCl9KTticmVhaztkZWZhdWx0OmEuc2V0RXJyb3IodCl9cmV0dXJuITB9fSxzZXRJbWFnZTpmdW5jdGlvbih0KXt2YXIgbyxpPXRoaXM7c2V0VGltZW91dChmdW5jdGlvbigpe3ZhciBlPXQuJGltYWdlO2kuaXNDbG9zaW5nfHwhdC5pc0xvYWRpbmd8fGUmJmUubGVuZ3RoJiZlWzBdLmNvbXBsZXRlfHx0Lmhhc0Vycm9yfHxpLnNob3dMb2FkaW5nKHQpfSw1MCksaS5jaGVja1NyY3NldCh0KSx0LiRjb250ZW50PW4oJzxkaXYgY2xhc3M9XCJmYW5jeWJveC1jb250ZW50XCI+PC9kaXY+JykuYWRkQ2xhc3MoXCJmYW5jeWJveC1pcy1oaWRkZW5cIikuYXBwZW5kVG8odC4kc2xpZGUuYWRkQ2xhc3MoXCJmYW5jeWJveC1zbGlkZS0taW1hZ2VcIikpLCExIT09dC5vcHRzLnByZWxvYWQmJnQub3B0cy53aWR0aCYmdC5vcHRzLmhlaWdodCYmdC50aHVtYiYmKHQud2lkdGg9dC5vcHRzLndpZHRoLHQuaGVpZ2h0PXQub3B0cy5oZWlnaHQsbz1lLmNyZWF0ZUVsZW1lbnQoXCJpbWdcIiksby5vbmVycm9yPWZ1bmN0aW9uKCl7bih0aGlzKS5yZW1vdmUoKSx0LiRnaG9zdD1udWxsfSxvLm9ubG9hZD1mdW5jdGlvbigpe2kuYWZ0ZXJMb2FkKHQpfSx0LiRnaG9zdD1uKG8pLmFkZENsYXNzKFwiZmFuY3lib3gtaW1hZ2VcIikuYXBwZW5kVG8odC4kY29udGVudCkuYXR0cihcInNyY1wiLHQudGh1bWIpKSxpLnNldEJpZ0ltYWdlKHQpfSxjaGVja1NyY3NldDpmdW5jdGlvbihlKXt2YXIgbixvLGksYSxzPWUub3B0cy5zcmNzZXR8fGUub3B0cy5pbWFnZS5zcmNzZXQ7aWYocyl7aT10LmRldmljZVBpeGVsUmF0aW98fDEsYT10LmlubmVyV2lkdGgqaSxvPXMuc3BsaXQoXCIsXCIpLm1hcChmdW5jdGlvbih0KXt2YXIgZT17fTtyZXR1cm4gdC50cmltKCkuc3BsaXQoL1xccysvKS5mb3JFYWNoKGZ1bmN0aW9uKHQsbil7dmFyIG89cGFyc2VJbnQodC5zdWJzdHJpbmcoMCx0Lmxlbmd0aC0xKSwxMCk7aWYoMD09PW4pcmV0dXJuIGUudXJsPXQ7byYmKGUudmFsdWU9byxlLnBvc3RmaXg9dFt0Lmxlbmd0aC0xXSl9KSxlfSksby5zb3J0KGZ1bmN0aW9uKHQsZSl7cmV0dXJuIHQudmFsdWUtZS52YWx1ZX0pO2Zvcih2YXIgcj0wO3I8by5sZW5ndGg7cisrKXt2YXIgYz1vW3JdO2lmKFwid1wiPT09Yy5wb3N0Zml4JiZjLnZhbHVlPj1hfHxcInhcIj09PWMucG9zdGZpeCYmYy52YWx1ZT49aSl7bj1jO2JyZWFrfX0hbiYmby5sZW5ndGgmJihuPW9bby5sZW5ndGgtMV0pLG4mJihlLnNyYz1uLnVybCxlLndpZHRoJiZlLmhlaWdodCYmXCJ3XCI9PW4ucG9zdGZpeCYmKGUuaGVpZ2h0PWUud2lkdGgvZS5oZWlnaHQqbi52YWx1ZSxlLndpZHRoPW4udmFsdWUpLGUub3B0cy5zcmNzZXQ9cyl9fSxzZXRCaWdJbWFnZTpmdW5jdGlvbih0KXt2YXIgbz10aGlzLGk9ZS5jcmVhdGVFbGVtZW50KFwiaW1nXCIpLGE9bihpKTt0LiRpbWFnZT1hLm9uZShcImVycm9yXCIsZnVuY3Rpb24oKXtvLnNldEVycm9yKHQpfSkub25lKFwibG9hZFwiLGZ1bmN0aW9uKCl7dmFyIGU7dC4kZ2hvc3R8fChvLnJlc29sdmVJbWFnZVNsaWRlU2l6ZSh0LHRoaXMubmF0dXJhbFdpZHRoLHRoaXMubmF0dXJhbEhlaWdodCksby5hZnRlckxvYWQodCkpLG8uaXNDbG9zaW5nfHwodC5vcHRzLnNyY3NldCYmKGU9dC5vcHRzLnNpemVzLGUmJlwiYXV0b1wiIT09ZXx8KGU9KHQud2lkdGgvdC5oZWlnaHQ+MSYmcy53aWR0aCgpL3MuaGVpZ2h0KCk+MT9cIjEwMFwiOk1hdGgucm91bmQodC53aWR0aC90LmhlaWdodCoxMDApKStcInZ3XCIpLGEuYXR0cihcInNpemVzXCIsZSkuYXR0cihcInNyY3NldFwiLHQub3B0cy5zcmNzZXQpKSx0LiRnaG9zdCYmc2V0VGltZW91dChmdW5jdGlvbigpe3QuJGdob3N0JiYhby5pc0Nsb3NpbmcmJnQuJGdob3N0LmhpZGUoKX0sTWF0aC5taW4oMzAwLE1hdGgubWF4KDFlMyx0LmhlaWdodC8xNjAwKSkpLG8uaGlkZUxvYWRpbmcodCkpfSkuYWRkQ2xhc3MoXCJmYW5jeWJveC1pbWFnZVwiKS5hdHRyKFwic3JjXCIsdC5zcmMpLmFwcGVuZFRvKHQuJGNvbnRlbnQpLChpLmNvbXBsZXRlfHxcImNvbXBsZXRlXCI9PWkucmVhZHlTdGF0ZSkmJmEubmF0dXJhbFdpZHRoJiZhLm5hdHVyYWxIZWlnaHQ/YS50cmlnZ2VyKFwibG9hZFwiKTppLmVycm9yJiZhLnRyaWdnZXIoXCJlcnJvclwiKX0scmVzb2x2ZUltYWdlU2xpZGVTaXplOmZ1bmN0aW9uKHQsZSxuKXt2YXIgbz1wYXJzZUludCh0Lm9wdHMud2lkdGgsMTApLGk9cGFyc2VJbnQodC5vcHRzLmhlaWdodCwxMCk7dC53aWR0aD1lLHQuaGVpZ2h0PW4sbz4wJiYodC53aWR0aD1vLHQuaGVpZ2h0PU1hdGguZmxvb3IobypuL2UpKSxpPjAmJih0LndpZHRoPU1hdGguZmxvb3IoaSplL24pLHQuaGVpZ2h0PWkpfSxzZXRJZnJhbWU6ZnVuY3Rpb24odCl7dmFyIGUsbz10aGlzLGk9dC5vcHRzLmlmcmFtZSxhPXQuJHNsaWRlO3QuJGNvbnRlbnQ9bignPGRpdiBjbGFzcz1cImZhbmN5Ym94LWNvbnRlbnQnKyhpLnByZWxvYWQ/XCIgZmFuY3lib3gtaXMtaGlkZGVuXCI6XCJcIikrJ1wiPjwvZGl2PicpLmNzcyhpLmNzcykuYXBwZW5kVG8oYSksYS5hZGRDbGFzcyhcImZhbmN5Ym94LXNsaWRlLS1cIit0LmNvbnRlbnRUeXBlKSx0LiRpZnJhbWU9ZT1uKGkudHBsLnJlcGxhY2UoL1xce3JuZFxcfS9nLChuZXcgRGF0ZSkuZ2V0VGltZSgpKSkuYXR0cihpLmF0dHIpLmFwcGVuZFRvKHQuJGNvbnRlbnQpLGkucHJlbG9hZD8oby5zaG93TG9hZGluZyh0KSxlLm9uKFwibG9hZC5mYiBlcnJvci5mYlwiLGZ1bmN0aW9uKGUpe3RoaXMuaXNSZWFkeT0xLHQuJHNsaWRlLnRyaWdnZXIoXCJyZWZyZXNoXCIpLG8uYWZ0ZXJMb2FkKHQpfSksYS5vbihcInJlZnJlc2guZmJcIixmdW5jdGlvbigpe3ZhciBuLG8scz10LiRjb250ZW50LHI9aS5jc3Mud2lkdGgsYz1pLmNzcy5oZWlnaHQ7aWYoMT09PWVbMF0uaXNSZWFkeSl7dHJ5e249ZS5jb250ZW50cygpLG89bi5maW5kKFwiYm9keVwiKX1jYXRjaCh0KXt9byYmby5sZW5ndGgmJm8uY2hpbGRyZW4oKS5sZW5ndGgmJihhLmNzcyhcIm92ZXJmbG93XCIsXCJ2aXNpYmxlXCIpLHMuY3NzKHt3aWR0aDpcIjEwMCVcIixcIm1heC13aWR0aFwiOlwiMTAwJVwiLGhlaWdodDpcIjk5OTlweFwifSksdm9pZCAwPT09ciYmKHI9TWF0aC5jZWlsKE1hdGgubWF4KG9bMF0uY2xpZW50V2lkdGgsby5vdXRlcldpZHRoKCEwKSkpKSxzLmNzcyhcIndpZHRoXCIscnx8XCJcIikuY3NzKFwibWF4LXdpZHRoXCIsXCJcIiksdm9pZCAwPT09YyYmKGM9TWF0aC5jZWlsKE1hdGgubWF4KG9bMF0uY2xpZW50SGVpZ2h0LG8ub3V0ZXJIZWlnaHQoITApKSkpLHMuY3NzKFwiaGVpZ2h0XCIsY3x8XCJcIiksYS5jc3MoXCJvdmVyZmxvd1wiLFwiYXV0b1wiKSkscy5yZW1vdmVDbGFzcyhcImZhbmN5Ym94LWlzLWhpZGRlblwiKX19KSk6by5hZnRlckxvYWQodCksZS5hdHRyKFwic3JjXCIsdC5zcmMpLGEub25lKFwib25SZXNldFwiLGZ1bmN0aW9uKCl7dHJ5e24odGhpcykuZmluZChcImlmcmFtZVwiKS5oaWRlKCkudW5iaW5kKCkuYXR0cihcInNyY1wiLFwiLy9hYm91dDpibGFua1wiKX1jYXRjaCh0KXt9bih0aGlzKS5vZmYoXCJyZWZyZXNoLmZiXCIpLmVtcHR5KCksdC5pc0xvYWRlZD0hMSx0LmlzUmV2ZWFsZWQ9ITF9KX0sc2V0Q29udGVudDpmdW5jdGlvbih0LGUpe3ZhciBvPXRoaXM7by5pc0Nsb3Npbmd8fChvLmhpZGVMb2FkaW5nKHQpLHQuJGNvbnRlbnQmJm4uZmFuY3lib3guc3RvcCh0LiRjb250ZW50KSx0LiRzbGlkZS5lbXB0eSgpLGwoZSkmJmUucGFyZW50KCkubGVuZ3RoPygoZS5oYXNDbGFzcyhcImZhbmN5Ym94LWNvbnRlbnRcIil8fGUucGFyZW50KCkuaGFzQ2xhc3MoXCJmYW5jeWJveC1jb250ZW50XCIpKSYmZS5wYXJlbnRzKFwiLmZhbmN5Ym94LXNsaWRlXCIpLnRyaWdnZXIoXCJvblJlc2V0XCIpLHQuJHBsYWNlaG9sZGVyPW4oXCI8ZGl2PlwiKS5oaWRlKCkuaW5zZXJ0QWZ0ZXIoZSksZS5jc3MoXCJkaXNwbGF5XCIsXCJpbmxpbmUtYmxvY2tcIikpOnQuaGFzRXJyb3J8fChcInN0cmluZ1wiPT09bi50eXBlKGUpJiYoZT1uKFwiPGRpdj5cIikuYXBwZW5kKG4udHJpbShlKSkuY29udGVudHMoKSksdC5vcHRzLmZpbHRlciYmKGU9bihcIjxkaXY+XCIpLmh0bWwoZSkuZmluZCh0Lm9wdHMuZmlsdGVyKSkpLHQuJHNsaWRlLm9uZShcIm9uUmVzZXRcIixmdW5jdGlvbigpe24odGhpcykuZmluZChcInZpZGVvLGF1ZGlvXCIpLnRyaWdnZXIoXCJwYXVzZVwiKSx0LiRwbGFjZWhvbGRlciYmKHQuJHBsYWNlaG9sZGVyLmFmdGVyKGUucmVtb3ZlQ2xhc3MoXCJmYW5jeWJveC1jb250ZW50XCIpLmhpZGUoKSkucmVtb3ZlKCksdC4kcGxhY2Vob2xkZXI9bnVsbCksdC4kc21hbGxCdG4mJih0LiRzbWFsbEJ0bi5yZW1vdmUoKSx0LiRzbWFsbEJ0bj1udWxsKSx0Lmhhc0Vycm9yfHwobih0aGlzKS5lbXB0eSgpLHQuaXNMb2FkZWQ9ITEsdC5pc1JldmVhbGVkPSExKX0pLG4oZSkuYXBwZW5kVG8odC4kc2xpZGUpLG4oZSkuaXMoXCJ2aWRlbyxhdWRpb1wiKSYmKG4oZSkuYWRkQ2xhc3MoXCJmYW5jeWJveC12aWRlb1wiKSxuKGUpLndyYXAoXCI8ZGl2PjwvZGl2PlwiKSx0LmNvbnRlbnRUeXBlPVwidmlkZW9cIix0Lm9wdHMud2lkdGg9dC5vcHRzLndpZHRofHxuKGUpLmF0dHIoXCJ3aWR0aFwiKSx0Lm9wdHMuaGVpZ2h0PXQub3B0cy5oZWlnaHR8fG4oZSkuYXR0cihcImhlaWdodFwiKSksdC4kY29udGVudD10LiRzbGlkZS5jaGlsZHJlbigpLmZpbHRlcihcImRpdixmb3JtLG1haW4sdmlkZW8sYXVkaW8sYXJ0aWNsZSwuZmFuY3lib3gtY29udGVudFwiKS5maXJzdCgpLHQuJGNvbnRlbnQuc2libGluZ3MoKS5oaWRlKCksdC4kY29udGVudC5sZW5ndGh8fCh0LiRjb250ZW50PXQuJHNsaWRlLndyYXBJbm5lcihcIjxkaXY+PC9kaXY+XCIpLmNoaWxkcmVuKCkuZmlyc3QoKSksdC4kY29udGVudC5hZGRDbGFzcyhcImZhbmN5Ym94LWNvbnRlbnRcIiksdC4kc2xpZGUuYWRkQ2xhc3MoXCJmYW5jeWJveC1zbGlkZS0tXCIrdC5jb250ZW50VHlwZSksby5hZnRlckxvYWQodCkpfSxzZXRFcnJvcjpmdW5jdGlvbih0KXt0Lmhhc0Vycm9yPSEwLHQuJHNsaWRlLnRyaWdnZXIoXCJvblJlc2V0XCIpLnJlbW92ZUNsYXNzKFwiZmFuY3lib3gtc2xpZGUtLVwiK3QuY29udGVudFR5cGUpLmFkZENsYXNzKFwiZmFuY3lib3gtc2xpZGUtLWVycm9yXCIpLHQuY29udGVudFR5cGU9XCJodG1sXCIsdGhpcy5zZXRDb250ZW50KHQsdGhpcy50cmFuc2xhdGUodCx0Lm9wdHMuZXJyb3JUcGwpKSx0LnBvcz09PXRoaXMuY3VyclBvcyYmKHRoaXMuaXNBbmltYXRpbmc9ITEpfSxzaG93TG9hZGluZzpmdW5jdGlvbih0KXt2YXIgZT10aGlzOyh0PXR8fGUuY3VycmVudCkmJiF0LiRzcGlubmVyJiYodC4kc3Bpbm5lcj1uKGUudHJhbnNsYXRlKGUsZS5vcHRzLnNwaW5uZXJUcGwpKS5hcHBlbmRUbyh0LiRzbGlkZSkuaGlkZSgpLmZhZGVJbihcImZhc3RcIikpfSxoaWRlTG9hZGluZzpmdW5jdGlvbih0KXt2YXIgZT10aGlzOyh0PXR8fGUuY3VycmVudCkmJnQuJHNwaW5uZXImJih0LiRzcGlubmVyLnN0b3AoKS5yZW1vdmUoKSxkZWxldGUgdC4kc3Bpbm5lcil9LGFmdGVyTG9hZDpmdW5jdGlvbih0KXt2YXIgZT10aGlzO2UuaXNDbG9zaW5nfHwodC5pc0xvYWRpbmc9ITEsdC5pc0xvYWRlZD0hMCxlLnRyaWdnZXIoXCJhZnRlckxvYWRcIix0KSxlLmhpZGVMb2FkaW5nKHQpLCF0Lm9wdHMuc21hbGxCdG58fHQuJHNtYWxsQnRuJiZ0LiRzbWFsbEJ0bi5sZW5ndGh8fCh0LiRzbWFsbEJ0bj1uKGUudHJhbnNsYXRlKHQsdC5vcHRzLmJ0blRwbC5zbWFsbEJ0bikpLmFwcGVuZFRvKHQuJGNvbnRlbnQpKSx0Lm9wdHMucHJvdGVjdCYmdC4kY29udGVudCYmIXQuaGFzRXJyb3ImJih0LiRjb250ZW50Lm9uKFwiY29udGV4dG1lbnUuZmJcIixmdW5jdGlvbih0KXtyZXR1cm4gMj09dC5idXR0b24mJnQucHJldmVudERlZmF1bHQoKSwhMH0pLFwiaW1hZ2VcIj09PXQudHlwZSYmbignPGRpdiBjbGFzcz1cImZhbmN5Ym94LXNwYWNlYmFsbFwiPjwvZGl2PicpLmFwcGVuZFRvKHQuJGNvbnRlbnQpKSxlLmFkanVzdENhcHRpb24odCksZS5hZGp1c3RMYXlvdXQodCksdC5wb3M9PT1lLmN1cnJQb3MmJmUudXBkYXRlQ3Vyc29yKCksZS5yZXZlYWxDb250ZW50KHQpKX0sYWRqdXN0Q2FwdGlvbjpmdW5jdGlvbih0KXt2YXIgZSxuPXRoaXMsbz10fHxuLmN1cnJlbnQsaT1vLm9wdHMuY2FwdGlvbixhPW8ub3B0cy5wcmV2ZW50Q2FwdGlvbk92ZXJsYXAscz1uLiRyZWZzLmNhcHRpb24scj0hMTtzLnRvZ2dsZUNsYXNzKFwiZmFuY3lib3gtY2FwdGlvbi0tc2VwYXJhdGVcIixhKSxhJiZpJiZpLmxlbmd0aCYmKG8ucG9zIT09bi5jdXJyUG9zPyhlPXMuY2xvbmUoKS5hcHBlbmRUbyhzLnBhcmVudCgpKSxlLmNoaWxkcmVuKCkuZXEoMCkuZW1wdHkoKS5odG1sKGkpLHI9ZS5vdXRlckhlaWdodCghMCksZS5lbXB0eSgpLnJlbW92ZSgpKTpuLiRjYXB0aW9uJiYocj1uLiRjYXB0aW9uLm91dGVySGVpZ2h0KCEwKSksby4kc2xpZGUuY3NzKFwicGFkZGluZy1ib3R0b21cIixyfHxcIlwiKSl9LGFkanVzdExheW91dDpmdW5jdGlvbih0KXt2YXIgZSxuLG8saSxhPXRoaXMscz10fHxhLmN1cnJlbnQ7cy5pc0xvYWRlZCYmITAhPT1zLm9wdHMuZGlzYWJsZUxheW91dEZpeCYmKHMuJGNvbnRlbnQuY3NzKFwibWFyZ2luLWJvdHRvbVwiLFwiXCIpLHMuJGNvbnRlbnQub3V0ZXJIZWlnaHQoKT5zLiRzbGlkZS5oZWlnaHQoKSsuNSYmKG89cy4kc2xpZGVbMF0uc3R5bGVbXCJwYWRkaW5nLWJvdHRvbVwiXSxpPXMuJHNsaWRlLmNzcyhcInBhZGRpbmctYm90dG9tXCIpLHBhcnNlRmxvYXQoaSk+MCYmKGU9cy4kc2xpZGVbMF0uc2Nyb2xsSGVpZ2h0LHMuJHNsaWRlLmNzcyhcInBhZGRpbmctYm90dG9tXCIsMCksTWF0aC5hYnMoZS1zLiRzbGlkZVswXS5zY3JvbGxIZWlnaHQpPDEmJihuPWkpLHMuJHNsaWRlLmNzcyhcInBhZGRpbmctYm90dG9tXCIsbykpKSxzLiRjb250ZW50LmNzcyhcIm1hcmdpbi1ib3R0b21cIixuKSl9LHJldmVhbENvbnRlbnQ6ZnVuY3Rpb24odCl7dmFyIGUsbyxpLGEscz10aGlzLHI9dC4kc2xpZGUsYz0hMSxsPSExLGQ9cy5pc01vdmVkKHQpLHU9dC5pc1JldmVhbGVkO3JldHVybiB0LmlzUmV2ZWFsZWQ9ITAsZT10Lm9wdHNbcy5maXJzdFJ1bj9cImFuaW1hdGlvbkVmZmVjdFwiOlwidHJhbnNpdGlvbkVmZmVjdFwiXSxpPXQub3B0c1tzLmZpcnN0UnVuP1wiYW5pbWF0aW9uRHVyYXRpb25cIjpcInRyYW5zaXRpb25EdXJhdGlvblwiXSxpPXBhcnNlSW50KHZvaWQgMD09PXQuZm9yY2VkRHVyYXRpb24/aTp0LmZvcmNlZER1cmF0aW9uLDEwKSwhZCYmdC5wb3M9PT1zLmN1cnJQb3MmJml8fChlPSExKSxcInpvb21cIj09PWUmJih0LnBvcz09PXMuY3VyclBvcyYmaSYmXCJpbWFnZVwiPT09dC50eXBlJiYhdC5oYXNFcnJvciYmKGw9cy5nZXRUaHVtYlBvcyh0KSk/Yz1zLmdldEZpdFBvcyh0KTplPVwiZmFkZVwiKSxcInpvb21cIj09PWU/KHMuaXNBbmltYXRpbmc9ITAsYy5zY2FsZVg9Yy53aWR0aC9sLndpZHRoLGMuc2NhbGVZPWMuaGVpZ2h0L2wuaGVpZ2h0LGE9dC5vcHRzLnpvb21PcGFjaXR5LFwiYXV0b1wiPT1hJiYoYT1NYXRoLmFicyh0LndpZHRoL3QuaGVpZ2h0LWwud2lkdGgvbC5oZWlnaHQpPi4xKSxhJiYobC5vcGFjaXR5PS4xLGMub3BhY2l0eT0xKSxuLmZhbmN5Ym94LnNldFRyYW5zbGF0ZSh0LiRjb250ZW50LnJlbW92ZUNsYXNzKFwiZmFuY3lib3gtaXMtaGlkZGVuXCIpLGwpLHAodC4kY29udGVudCksdm9pZCBuLmZhbmN5Ym94LmFuaW1hdGUodC4kY29udGVudCxjLGksZnVuY3Rpb24oKXtzLmlzQW5pbWF0aW5nPSExLHMuY29tcGxldGUoKX0pKToocy51cGRhdGVTbGlkZSh0KSxlPyhuLmZhbmN5Ym94LnN0b3Aociksbz1cImZhbmN5Ym94LXNsaWRlLS1cIisodC5wb3M+PXMucHJldlBvcz9cIm5leHRcIjpcInByZXZpb3VzXCIpK1wiIGZhbmN5Ym94LWFuaW1hdGVkIGZhbmN5Ym94LWZ4LVwiK2Usci5hZGRDbGFzcyhvKS5yZW1vdmVDbGFzcyhcImZhbmN5Ym94LXNsaWRlLS1jdXJyZW50XCIpLHQuJGNvbnRlbnQucmVtb3ZlQ2xhc3MoXCJmYW5jeWJveC1pcy1oaWRkZW5cIikscChyKSxcImltYWdlXCIhPT10LnR5cGUmJnQuJGNvbnRlbnQuaGlkZSgpLnNob3coMCksdm9pZCBuLmZhbmN5Ym94LmFuaW1hdGUocixcImZhbmN5Ym94LXNsaWRlLS1jdXJyZW50XCIsaSxmdW5jdGlvbigpe3IucmVtb3ZlQ2xhc3MobykuY3NzKHt0cmFuc2Zvcm06XCJcIixvcGFjaXR5OlwiXCJ9KSx0LnBvcz09PXMuY3VyclBvcyYmcy5jb21wbGV0ZSgpfSwhMCkpOih0LiRjb250ZW50LnJlbW92ZUNsYXNzKFwiZmFuY3lib3gtaXMtaGlkZGVuXCIpLHV8fCFkfHxcImltYWdlXCIhPT10LnR5cGV8fHQuaGFzRXJyb3J8fHQuJGNvbnRlbnQuaGlkZSgpLmZhZGVJbihcImZhc3RcIiksdm9pZCh0LnBvcz09PXMuY3VyclBvcyYmcy5jb21wbGV0ZSgpKSkpfSxnZXRUaHVtYlBvczpmdW5jdGlvbih0KXt2YXIgZSxvLGksYSxzLHI9ITEsYz10LiR0aHVtYjtyZXR1cm4hKCFjfHwhZyhjWzBdKSkmJihlPW4uZmFuY3lib3guZ2V0VHJhbnNsYXRlKGMpLG89cGFyc2VGbG9hdChjLmNzcyhcImJvcmRlci10b3Atd2lkdGhcIil8fDApLGk9cGFyc2VGbG9hdChjLmNzcyhcImJvcmRlci1yaWdodC13aWR0aFwiKXx8MCksYT1wYXJzZUZsb2F0KGMuY3NzKFwiYm9yZGVyLWJvdHRvbS13aWR0aFwiKXx8MCkscz1wYXJzZUZsb2F0KGMuY3NzKFwiYm9yZGVyLWxlZnQtd2lkdGhcIil8fDApLHI9e3RvcDplLnRvcCtvLGxlZnQ6ZS5sZWZ0K3Msd2lkdGg6ZS53aWR0aC1pLXMsaGVpZ2h0OmUuaGVpZ2h0LW8tYSxzY2FsZVg6MSxzY2FsZVk6MX0sZS53aWR0aD4wJiZlLmhlaWdodD4wJiZyKX0sY29tcGxldGU6ZnVuY3Rpb24oKXt2YXIgdCxlPXRoaXMsbz1lLmN1cnJlbnQsaT17fTshZS5pc01vdmVkKCkmJm8uaXNMb2FkZWQmJihvLmlzQ29tcGxldGV8fChvLmlzQ29tcGxldGU9ITAsby4kc2xpZGUuc2libGluZ3MoKS50cmlnZ2VyKFwib25SZXNldFwiKSxlLnByZWxvYWQoXCJpbmxpbmVcIikscChvLiRzbGlkZSksby4kc2xpZGUuYWRkQ2xhc3MoXCJmYW5jeWJveC1zbGlkZS0tY29tcGxldGVcIiksbi5lYWNoKGUuc2xpZGVzLGZ1bmN0aW9uKHQsbyl7by5wb3M+PWUuY3VyclBvcy0xJiZvLnBvczw9ZS5jdXJyUG9zKzE/aVtvLnBvc109bzpvJiYobi5mYW5jeWJveC5zdG9wKG8uJHNsaWRlKSxvLiRzbGlkZS5vZmYoKS5yZW1vdmUoKSl9KSxlLnNsaWRlcz1pKSxlLmlzQW5pbWF0aW5nPSExLGUudXBkYXRlQ3Vyc29yKCksZS50cmlnZ2VyKFwiYWZ0ZXJTaG93XCIpLG8ub3B0cy52aWRlby5hdXRvU3RhcnQmJm8uJHNsaWRlLmZpbmQoXCJ2aWRlbyxhdWRpb1wiKS5maWx0ZXIoXCI6dmlzaWJsZTpmaXJzdFwiKS50cmlnZ2VyKFwicGxheVwiKS5vbmUoXCJlbmRlZFwiLGZ1bmN0aW9uKCl7RG9jdW1lbnQuZXhpdEZ1bGxzY3JlZW4/RG9jdW1lbnQuZXhpdEZ1bGxzY3JlZW4oKTp0aGlzLndlYmtpdEV4aXRGdWxsc2NyZWVuJiZ0aGlzLndlYmtpdEV4aXRGdWxsc2NyZWVuKCksZS5uZXh0KCl9KSxvLm9wdHMuYXV0b0ZvY3VzJiZcImh0bWxcIj09PW8uY29udGVudFR5cGUmJih0PW8uJGNvbnRlbnQuZmluZChcImlucHV0W2F1dG9mb2N1c106ZW5hYmxlZDp2aXNpYmxlOmZpcnN0XCIpLHQubGVuZ3RoP3QudHJpZ2dlcihcImZvY3VzXCIpOmUuZm9jdXMobnVsbCwhMCkpLG8uJHNsaWRlLnNjcm9sbFRvcCgwKS5zY3JvbGxMZWZ0KDApKX0scHJlbG9hZDpmdW5jdGlvbih0KXt2YXIgZSxuLG89dGhpcztvLmdyb3VwLmxlbmd0aDwyfHwobj1vLnNsaWRlc1tvLmN1cnJQb3MrMV0sZT1vLnNsaWRlc1tvLmN1cnJQb3MtMV0sZSYmZS50eXBlPT09dCYmby5sb2FkU2xpZGUoZSksbiYmbi50eXBlPT09dCYmby5sb2FkU2xpZGUobikpfSxmb2N1czpmdW5jdGlvbih0LG8pe3ZhciBpLGEscz10aGlzLHI9W1wiYVtocmVmXVwiLFwiYXJlYVtocmVmXVwiLCdpbnB1dDpub3QoW2Rpc2FibGVkXSk6bm90KFt0eXBlPVwiaGlkZGVuXCJdKTpub3QoW2FyaWEtaGlkZGVuXSknLFwic2VsZWN0Om5vdChbZGlzYWJsZWRdKTpub3QoW2FyaWEtaGlkZGVuXSlcIixcInRleHRhcmVhOm5vdChbZGlzYWJsZWRdKTpub3QoW2FyaWEtaGlkZGVuXSlcIixcImJ1dHRvbjpub3QoW2Rpc2FibGVkXSk6bm90KFthcmlhLWhpZGRlbl0pXCIsXCJpZnJhbWVcIixcIm9iamVjdFwiLFwiZW1iZWRcIixcInZpZGVvXCIsXCJhdWRpb1wiLFwiW2NvbnRlbnRlZGl0YWJsZV1cIiwnW3RhYmluZGV4XTpub3QoW3RhYmluZGV4Xj1cIi1cIl0pJ10uam9pbihcIixcIik7cy5pc0Nsb3Npbmd8fChpPSF0JiZzLmN1cnJlbnQmJnMuY3VycmVudC5pc0NvbXBsZXRlP3MuY3VycmVudC4kc2xpZGUuZmluZChcIio6dmlzaWJsZVwiKyhvP1wiOm5vdCguZmFuY3lib3gtY2xvc2Utc21hbGwpXCI6XCJcIikpOnMuJHJlZnMuY29udGFpbmVyLmZpbmQoXCIqOnZpc2libGVcIiksaT1pLmZpbHRlcihyKS5maWx0ZXIoZnVuY3Rpb24oKXtyZXR1cm5cImhpZGRlblwiIT09bih0aGlzKS5jc3MoXCJ2aXNpYmlsaXR5XCIpJiYhbih0aGlzKS5oYXNDbGFzcyhcImRpc2FibGVkXCIpfSksaS5sZW5ndGg/KGE9aS5pbmRleChlLmFjdGl2ZUVsZW1lbnQpLHQmJnQuc2hpZnRLZXk/KGE8MHx8MD09YSkmJih0LnByZXZlbnREZWZhdWx0KCksaS5lcShpLmxlbmd0aC0xKS50cmlnZ2VyKFwiZm9jdXNcIikpOihhPDB8fGE9PWkubGVuZ3RoLTEpJiYodCYmdC5wcmV2ZW50RGVmYXVsdCgpLGkuZXEoMCkudHJpZ2dlcihcImZvY3VzXCIpKSk6cy4kcmVmcy5jb250YWluZXIudHJpZ2dlcihcImZvY3VzXCIpKX0sYWN0aXZhdGU6ZnVuY3Rpb24oKXt2YXIgdD10aGlzO24oXCIuZmFuY3lib3gtY29udGFpbmVyXCIpLmVhY2goZnVuY3Rpb24oKXt2YXIgZT1uKHRoaXMpLmRhdGEoXCJGYW5jeUJveFwiKTtlJiZlLmlkIT09dC5pZCYmIWUuaXNDbG9zaW5nJiYoZS50cmlnZ2VyKFwib25EZWFjdGl2YXRlXCIpLGUucmVtb3ZlRXZlbnRzKCksZS5pc1Zpc2libGU9ITEpfSksdC5pc1Zpc2libGU9ITAsKHQuY3VycmVudHx8dC5pc0lkbGUpJiYodC51cGRhdGUoKSx0LnVwZGF0ZUNvbnRyb2xzKCkpLHQudHJpZ2dlcihcIm9uQWN0aXZhdGVcIiksdC5hZGRFdmVudHMoKX0sY2xvc2U6ZnVuY3Rpb24odCxlKXt2YXIgbyxpLGEscyxyLGMsbCx1PXRoaXMsZj11LmN1cnJlbnQsaD1mdW5jdGlvbigpe3UuY2xlYW5VcCh0KX07cmV0dXJuIXUuaXNDbG9zaW5nJiYodS5pc0Nsb3Npbmc9ITAsITE9PT11LnRyaWdnZXIoXCJiZWZvcmVDbG9zZVwiLHQpPyh1LmlzQ2xvc2luZz0hMSxkKGZ1bmN0aW9uKCl7dS51cGRhdGUoKX0pLCExKToodS5yZW1vdmVFdmVudHMoKSxhPWYuJGNvbnRlbnQsbz1mLm9wdHMuYW5pbWF0aW9uRWZmZWN0LGk9bi5pc051bWVyaWMoZSk/ZTpvP2Yub3B0cy5hbmltYXRpb25EdXJhdGlvbjowLGYuJHNsaWRlLnJlbW92ZUNsYXNzKFwiZmFuY3lib3gtc2xpZGUtLWNvbXBsZXRlIGZhbmN5Ym94LXNsaWRlLS1uZXh0IGZhbmN5Ym94LXNsaWRlLS1wcmV2aW91cyBmYW5jeWJveC1hbmltYXRlZFwiKSwhMCE9PXQ/bi5mYW5jeWJveC5zdG9wKGYuJHNsaWRlKTpvPSExLGYuJHNsaWRlLnNpYmxpbmdzKCkudHJpZ2dlcihcIm9uUmVzZXRcIikucmVtb3ZlKCksaSYmdS4kcmVmcy5jb250YWluZXIucmVtb3ZlQ2xhc3MoXCJmYW5jeWJveC1pcy1vcGVuXCIpLmFkZENsYXNzKFwiZmFuY3lib3gtaXMtY2xvc2luZ1wiKS5jc3MoXCJ0cmFuc2l0aW9uLWR1cmF0aW9uXCIsaStcIm1zXCIpLHUuaGlkZUxvYWRpbmcoZiksdS5oaWRlQ29udHJvbHMoITApLHUudXBkYXRlQ3Vyc29yKCksXCJ6b29tXCIhPT1vfHxhJiZpJiZcImltYWdlXCI9PT1mLnR5cGUmJiF1LmlzTW92ZWQoKSYmIWYuaGFzRXJyb3ImJihsPXUuZ2V0VGh1bWJQb3MoZikpfHwobz1cImZhZGVcIiksXCJ6b29tXCI9PT1vPyhuLmZhbmN5Ym94LnN0b3AoYSkscz1uLmZhbmN5Ym94LmdldFRyYW5zbGF0ZShhKSxjPXt0b3A6cy50b3AsbGVmdDpzLmxlZnQsc2NhbGVYOnMud2lkdGgvbC53aWR0aCxzY2FsZVk6cy5oZWlnaHQvbC5oZWlnaHQsd2lkdGg6bC53aWR0aCxoZWlnaHQ6bC5oZWlnaHR9LHI9Zi5vcHRzLnpvb21PcGFjaXR5LFxuXCJhdXRvXCI9PXImJihyPU1hdGguYWJzKGYud2lkdGgvZi5oZWlnaHQtbC53aWR0aC9sLmhlaWdodCk+LjEpLHImJihsLm9wYWNpdHk9MCksbi5mYW5jeWJveC5zZXRUcmFuc2xhdGUoYSxjKSxwKGEpLG4uZmFuY3lib3guYW5pbWF0ZShhLGwsaSxoKSwhMCk6KG8mJmk/bi5mYW5jeWJveC5hbmltYXRlKGYuJHNsaWRlLmFkZENsYXNzKFwiZmFuY3lib3gtc2xpZGUtLXByZXZpb3VzXCIpLnJlbW92ZUNsYXNzKFwiZmFuY3lib3gtc2xpZGUtLWN1cnJlbnRcIiksXCJmYW5jeWJveC1hbmltYXRlZCBmYW5jeWJveC1meC1cIitvLGksaCk6ITA9PT10P3NldFRpbWVvdXQoaCxpKTpoKCksITApKSl9LGNsZWFuVXA6ZnVuY3Rpb24oZSl7dmFyIG8saSxhLHM9dGhpcyxyPXMuY3VycmVudC5vcHRzLiRvcmlnO3MuY3VycmVudC4kc2xpZGUudHJpZ2dlcihcIm9uUmVzZXRcIikscy4kcmVmcy5jb250YWluZXIuZW1wdHkoKS5yZW1vdmUoKSxzLnRyaWdnZXIoXCJhZnRlckNsb3NlXCIsZSkscy5jdXJyZW50Lm9wdHMuYmFja0ZvY3VzJiYociYmci5sZW5ndGgmJnIuaXMoXCI6dmlzaWJsZVwiKXx8KHI9cy4kdHJpZ2dlciksciYmci5sZW5ndGgmJihpPXQuc2Nyb2xsWCxhPXQuc2Nyb2xsWSxyLnRyaWdnZXIoXCJmb2N1c1wiKSxuKFwiaHRtbCwgYm9keVwiKS5zY3JvbGxUb3AoYSkuc2Nyb2xsTGVmdChpKSkpLHMuY3VycmVudD1udWxsLG89bi5mYW5jeWJveC5nZXRJbnN0YW5jZSgpLG8/by5hY3RpdmF0ZSgpOihuKFwiYm9keVwiKS5yZW1vdmVDbGFzcyhcImZhbmN5Ym94LWFjdGl2ZSBjb21wZW5zYXRlLWZvci1zY3JvbGxiYXJcIiksbihcIiNmYW5jeWJveC1zdHlsZS1ub3Njcm9sbFwiKS5yZW1vdmUoKSl9LHRyaWdnZXI6ZnVuY3Rpb24odCxlKXt2YXIgbyxpPUFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cywxKSxhPXRoaXMscz1lJiZlLm9wdHM/ZTphLmN1cnJlbnQ7aWYocz9pLnVuc2hpZnQocyk6cz1hLGkudW5zaGlmdChhKSxuLmlzRnVuY3Rpb24ocy5vcHRzW3RdKSYmKG89cy5vcHRzW3RdLmFwcGx5KHMsaSkpLCExPT09bylyZXR1cm4gbztcImFmdGVyQ2xvc2VcIiE9PXQmJmEuJHJlZnM/YS4kcmVmcy5jb250YWluZXIudHJpZ2dlcih0K1wiLmZiXCIsaSk6ci50cmlnZ2VyKHQrXCIuZmJcIixpKX0sdXBkYXRlQ29udHJvbHM6ZnVuY3Rpb24oKXt2YXIgdD10aGlzLG89dC5jdXJyZW50LGk9by5pbmRleCxhPXQuJHJlZnMuY29udGFpbmVyLHM9dC4kcmVmcy5jYXB0aW9uLHI9by5vcHRzLmNhcHRpb247by4kc2xpZGUudHJpZ2dlcihcInJlZnJlc2hcIiksciYmci5sZW5ndGg/KHQuJGNhcHRpb249cyxzLmNoaWxkcmVuKCkuZXEoMCkuaHRtbChyKSk6dC4kY2FwdGlvbj1udWxsLHQuaGFzSGlkZGVuQ29udHJvbHN8fHQuaXNJZGxlfHx0LnNob3dDb250cm9scygpLGEuZmluZChcIltkYXRhLWZhbmN5Ym94LWNvdW50XVwiKS5odG1sKHQuZ3JvdXAubGVuZ3RoKSxhLmZpbmQoXCJbZGF0YS1mYW5jeWJveC1pbmRleF1cIikuaHRtbChpKzEpLGEuZmluZChcIltkYXRhLWZhbmN5Ym94LXByZXZdXCIpLnByb3AoXCJkaXNhYmxlZFwiLCFvLm9wdHMubG9vcCYmaTw9MCksYS5maW5kKFwiW2RhdGEtZmFuY3lib3gtbmV4dF1cIikucHJvcChcImRpc2FibGVkXCIsIW8ub3B0cy5sb29wJiZpPj10Lmdyb3VwLmxlbmd0aC0xKSxcImltYWdlXCI9PT1vLnR5cGU/YS5maW5kKFwiW2RhdGEtZmFuY3lib3gtem9vbV1cIikuc2hvdygpLmVuZCgpLmZpbmQoXCJbZGF0YS1mYW5jeWJveC1kb3dubG9hZF1cIikuYXR0cihcImhyZWZcIixvLm9wdHMuaW1hZ2Uuc3JjfHxvLnNyYykuc2hvdygpOm8ub3B0cy50b29sYmFyJiZhLmZpbmQoXCJbZGF0YS1mYW5jeWJveC1kb3dubG9hZF0sW2RhdGEtZmFuY3lib3gtem9vbV1cIikuaGlkZSgpLG4oZS5hY3RpdmVFbGVtZW50KS5pcyhcIjpoaWRkZW4sW2Rpc2FibGVkXVwiKSYmdC4kcmVmcy5jb250YWluZXIudHJpZ2dlcihcImZvY3VzXCIpfSxoaWRlQ29udHJvbHM6ZnVuY3Rpb24odCl7dmFyIGU9dGhpcyxuPVtcImluZm9iYXJcIixcInRvb2xiYXJcIixcIm5hdlwiXTshdCYmZS5jdXJyZW50Lm9wdHMucHJldmVudENhcHRpb25PdmVybGFwfHxuLnB1c2goXCJjYXB0aW9uXCIpLHRoaXMuJHJlZnMuY29udGFpbmVyLnJlbW92ZUNsYXNzKG4ubWFwKGZ1bmN0aW9uKHQpe3JldHVyblwiZmFuY3lib3gtc2hvdy1cIit0fSkuam9pbihcIiBcIikpLHRoaXMuaGFzSGlkZGVuQ29udHJvbHM9ITB9LHNob3dDb250cm9sczpmdW5jdGlvbigpe3ZhciB0PXRoaXMsZT10LmN1cnJlbnQ/dC5jdXJyZW50Lm9wdHM6dC5vcHRzLG49dC4kcmVmcy5jb250YWluZXI7dC5oYXNIaWRkZW5Db250cm9scz0hMSx0LmlkbGVTZWNvbmRzQ291bnRlcj0wLG4udG9nZ2xlQ2xhc3MoXCJmYW5jeWJveC1zaG93LXRvb2xiYXJcIiwhKCFlLnRvb2xiYXJ8fCFlLmJ1dHRvbnMpKS50b2dnbGVDbGFzcyhcImZhbmN5Ym94LXNob3ctaW5mb2JhclwiLCEhKGUuaW5mb2JhciYmdC5ncm91cC5sZW5ndGg+MSkpLnRvZ2dsZUNsYXNzKFwiZmFuY3lib3gtc2hvdy1jYXB0aW9uXCIsISF0LiRjYXB0aW9uKS50b2dnbGVDbGFzcyhcImZhbmN5Ym94LXNob3ctbmF2XCIsISEoZS5hcnJvd3MmJnQuZ3JvdXAubGVuZ3RoPjEpKS50b2dnbGVDbGFzcyhcImZhbmN5Ym94LWlzLW1vZGFsXCIsISFlLm1vZGFsKX0sdG9nZ2xlQ29udHJvbHM6ZnVuY3Rpb24oKXt0aGlzLmhhc0hpZGRlbkNvbnRyb2xzP3RoaXMuc2hvd0NvbnRyb2xzKCk6dGhpcy5oaWRlQ29udHJvbHMoKX19KSxuLmZhbmN5Ym94PXt2ZXJzaW9uOlwiMy41LjdcIixkZWZhdWx0czphLGdldEluc3RhbmNlOmZ1bmN0aW9uKHQpe3ZhciBlPW4oJy5mYW5jeWJveC1jb250YWluZXI6bm90KFwiLmZhbmN5Ym94LWlzLWNsb3NpbmdcIik6bGFzdCcpLmRhdGEoXCJGYW5jeUJveFwiKSxvPUFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cywxKTtyZXR1cm4gZSBpbnN0YW5jZW9mIGImJihcInN0cmluZ1wiPT09bi50eXBlKHQpP2VbdF0uYXBwbHkoZSxvKTpcImZ1bmN0aW9uXCI9PT1uLnR5cGUodCkmJnQuYXBwbHkoZSxvKSxlKX0sb3BlbjpmdW5jdGlvbih0LGUsbil7cmV0dXJuIG5ldyBiKHQsZSxuKX0sY2xvc2U6ZnVuY3Rpb24odCl7dmFyIGU9dGhpcy5nZXRJbnN0YW5jZSgpO2UmJihlLmNsb3NlKCksITA9PT10JiZ0aGlzLmNsb3NlKHQpKX0sZGVzdHJveTpmdW5jdGlvbigpe3RoaXMuY2xvc2UoITApLHIuYWRkKFwiYm9keVwiKS5vZmYoXCJjbGljay5mYi1zdGFydFwiLFwiKipcIil9LGlzTW9iaWxlOi9BbmRyb2lkfHdlYk9TfGlQaG9uZXxpUGFkfGlQb2R8QmxhY2tCZXJyeXxJRU1vYmlsZXxPcGVyYSBNaW5pL2kudGVzdChuYXZpZ2F0b3IudXNlckFnZW50KSx1c2UzZDpmdW5jdGlvbigpe3ZhciBuPWUuY3JlYXRlRWxlbWVudChcImRpdlwiKTtyZXR1cm4gdC5nZXRDb21wdXRlZFN0eWxlJiZ0LmdldENvbXB1dGVkU3R5bGUobikmJnQuZ2V0Q29tcHV0ZWRTdHlsZShuKS5nZXRQcm9wZXJ0eVZhbHVlKFwidHJhbnNmb3JtXCIpJiYhKGUuZG9jdW1lbnRNb2RlJiZlLmRvY3VtZW50TW9kZTwxMSl9KCksZ2V0VHJhbnNsYXRlOmZ1bmN0aW9uKHQpe3ZhciBlO3JldHVybiEoIXR8fCF0Lmxlbmd0aCkmJihlPXRbMF0uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkse3RvcDplLnRvcHx8MCxsZWZ0OmUubGVmdHx8MCx3aWR0aDplLndpZHRoLGhlaWdodDplLmhlaWdodCxvcGFjaXR5OnBhcnNlRmxvYXQodC5jc3MoXCJvcGFjaXR5XCIpKX0pfSxzZXRUcmFuc2xhdGU6ZnVuY3Rpb24odCxlKXt2YXIgbj1cIlwiLG89e307aWYodCYmZSlyZXR1cm4gdm9pZCAwPT09ZS5sZWZ0JiZ2b2lkIDA9PT1lLnRvcHx8KG49KHZvaWQgMD09PWUubGVmdD90LnBvc2l0aW9uKCkubGVmdDplLmxlZnQpK1wicHgsIFwiKyh2b2lkIDA9PT1lLnRvcD90LnBvc2l0aW9uKCkudG9wOmUudG9wKStcInB4XCIsbj10aGlzLnVzZTNkP1widHJhbnNsYXRlM2QoXCIrbitcIiwgMHB4KVwiOlwidHJhbnNsYXRlKFwiK24rXCIpXCIpLHZvaWQgMCE9PWUuc2NhbGVYJiZ2b2lkIDAhPT1lLnNjYWxlWT9uKz1cIiBzY2FsZShcIitlLnNjYWxlWCtcIiwgXCIrZS5zY2FsZVkrXCIpXCI6dm9pZCAwIT09ZS5zY2FsZVgmJihuKz1cIiBzY2FsZVgoXCIrZS5zY2FsZVgrXCIpXCIpLG4ubGVuZ3RoJiYoby50cmFuc2Zvcm09biksdm9pZCAwIT09ZS5vcGFjaXR5JiYoby5vcGFjaXR5PWUub3BhY2l0eSksdm9pZCAwIT09ZS53aWR0aCYmKG8ud2lkdGg9ZS53aWR0aCksdm9pZCAwIT09ZS5oZWlnaHQmJihvLmhlaWdodD1lLmhlaWdodCksdC5jc3Mobyl9LGFuaW1hdGU6ZnVuY3Rpb24odCxlLG8saSxhKXt2YXIgcyxyPXRoaXM7bi5pc0Z1bmN0aW9uKG8pJiYoaT1vLG89bnVsbCksci5zdG9wKHQpLHM9ci5nZXRUcmFuc2xhdGUodCksdC5vbihmLGZ1bmN0aW9uKGMpeyghY3x8IWMub3JpZ2luYWxFdmVudHx8dC5pcyhjLm9yaWdpbmFsRXZlbnQudGFyZ2V0KSYmXCJ6LWluZGV4XCIhPWMub3JpZ2luYWxFdmVudC5wcm9wZXJ0eU5hbWUpJiYoci5zdG9wKHQpLG4uaXNOdW1lcmljKG8pJiZ0LmNzcyhcInRyYW5zaXRpb24tZHVyYXRpb25cIixcIlwiKSxuLmlzUGxhaW5PYmplY3QoZSk/dm9pZCAwIT09ZS5zY2FsZVgmJnZvaWQgMCE9PWUuc2NhbGVZJiZyLnNldFRyYW5zbGF0ZSh0LHt0b3A6ZS50b3AsbGVmdDplLmxlZnQsd2lkdGg6cy53aWR0aCplLnNjYWxlWCxoZWlnaHQ6cy5oZWlnaHQqZS5zY2FsZVksc2NhbGVYOjEsc2NhbGVZOjF9KTohMCE9PWEmJnQucmVtb3ZlQ2xhc3MoZSksbi5pc0Z1bmN0aW9uKGkpJiZpKGMpKX0pLG4uaXNOdW1lcmljKG8pJiZ0LmNzcyhcInRyYW5zaXRpb24tZHVyYXRpb25cIixvK1wibXNcIiksbi5pc1BsYWluT2JqZWN0KGUpPyh2b2lkIDAhPT1lLnNjYWxlWCYmdm9pZCAwIT09ZS5zY2FsZVkmJihkZWxldGUgZS53aWR0aCxkZWxldGUgZS5oZWlnaHQsdC5wYXJlbnQoKS5oYXNDbGFzcyhcImZhbmN5Ym94LXNsaWRlLS1pbWFnZVwiKSYmdC5wYXJlbnQoKS5hZGRDbGFzcyhcImZhbmN5Ym94LWlzLXNjYWxpbmdcIikpLG4uZmFuY3lib3guc2V0VHJhbnNsYXRlKHQsZSkpOnQuYWRkQ2xhc3MoZSksdC5kYXRhKFwidGltZXJcIixzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7dC50cmlnZ2VyKGYpfSxvKzMzKSl9LHN0b3A6ZnVuY3Rpb24odCxlKXt0JiZ0Lmxlbmd0aCYmKGNsZWFyVGltZW91dCh0LmRhdGEoXCJ0aW1lclwiKSksZSYmdC50cmlnZ2VyKGYpLHQub2ZmKGYpLmNzcyhcInRyYW5zaXRpb24tZHVyYXRpb25cIixcIlwiKSx0LnBhcmVudCgpLnJlbW92ZUNsYXNzKFwiZmFuY3lib3gtaXMtc2NhbGluZ1wiKSl9fSxuLmZuLmZhbmN5Ym94PWZ1bmN0aW9uKHQpe3ZhciBlO3JldHVybiB0PXR8fHt9LGU9dC5zZWxlY3Rvcnx8ITEsZT9uKFwiYm9keVwiKS5vZmYoXCJjbGljay5mYi1zdGFydFwiLGUpLm9uKFwiY2xpY2suZmItc3RhcnRcIixlLHtvcHRpb25zOnR9LGkpOnRoaXMub2ZmKFwiY2xpY2suZmItc3RhcnRcIikub24oXCJjbGljay5mYi1zdGFydFwiLHtpdGVtczp0aGlzLG9wdGlvbnM6dH0saSksdGhpc30sci5vbihcImNsaWNrLmZiLXN0YXJ0XCIsXCJbZGF0YS1mYW5jeWJveF1cIixpKSxyLm9uKFwiY2xpY2suZmItc3RhcnRcIixcIltkYXRhLWZhbmN5Ym94LXRyaWdnZXJdXCIsZnVuY3Rpb24odCl7bignW2RhdGEtZmFuY3lib3g9XCInK24odGhpcykuYXR0cihcImRhdGEtZmFuY3lib3gtdHJpZ2dlclwiKSsnXCJdJykuZXEobih0aGlzKS5hdHRyKFwiZGF0YS1mYW5jeWJveC1pbmRleFwiKXx8MCkudHJpZ2dlcihcImNsaWNrLmZiLXN0YXJ0XCIseyR0cmlnZ2VyOm4odGhpcyl9KX0pLGZ1bmN0aW9uKCl7dmFyIHQ9bnVsbDtyLm9uKFwibW91c2Vkb3duIG1vdXNldXAgZm9jdXMgYmx1clwiLFwiLmZhbmN5Ym94LWJ1dHRvblwiLGZ1bmN0aW9uKGUpe3N3aXRjaChlLnR5cGUpe2Nhc2VcIm1vdXNlZG93blwiOnQ9bih0aGlzKTticmVhaztjYXNlXCJtb3VzZXVwXCI6dD1udWxsO2JyZWFrO2Nhc2VcImZvY3VzaW5cIjpuKFwiLmZhbmN5Ym94LWJ1dHRvblwiKS5yZW1vdmVDbGFzcyhcImZhbmN5Ym94LWZvY3VzXCIpLG4odGhpcykuaXModCl8fG4odGhpcykuaXMoXCJbZGlzYWJsZWRdXCIpfHxuKHRoaXMpLmFkZENsYXNzKFwiZmFuY3lib3gtZm9jdXNcIik7YnJlYWs7Y2FzZVwiZm9jdXNvdXRcIjpuKFwiLmZhbmN5Ym94LWJ1dHRvblwiKS5yZW1vdmVDbGFzcyhcImZhbmN5Ym94LWZvY3VzXCIpfX0pfSgpfX0od2luZG93LGRvY3VtZW50LGpRdWVyeSksZnVuY3Rpb24odCl7XCJ1c2Ugc3RyaWN0XCI7dmFyIGU9e3lvdXR1YmU6e21hdGNoZXI6Lyh5b3V0dWJlXFwuY29tfHlvdXR1XFwuYmV8eW91dHViZVxcLW5vY29va2llXFwuY29tKVxcLyh3YXRjaFxcPyguKiYpP3Y9fHZcXC98dVxcL3xlbWJlZFxcLz8pPyh2aWRlb3Nlcmllc1xcP2xpc3Q9KC4qKXxbXFx3LV17MTF9fFxcP2xpc3RUeXBlPSguKikmbGlzdD0oLiopKSguKikvaSxwYXJhbXM6e2F1dG9wbGF5OjEsYXV0b2hpZGU6MSxmczoxLHJlbDowLGhkOjEsd21vZGU6XCJ0cmFuc3BhcmVudFwiLGVuYWJsZWpzYXBpOjEsaHRtbDU6MX0scGFyYW1QbGFjZTo4LHR5cGU6XCJpZnJhbWVcIix1cmw6XCJodHRwczovL3d3dy55b3V0dWJlLW5vY29va2llLmNvbS9lbWJlZC8kNFwiLHRodW1iOlwiaHR0cHM6Ly9pbWcueW91dHViZS5jb20vdmkvJDQvaHFkZWZhdWx0LmpwZ1wifSx2aW1lbzp7bWF0Y2hlcjovXi4rdmltZW8uY29tXFwvKC4qXFwvKT8oW1xcZF0rKSguKik/LyxwYXJhbXM6e2F1dG9wbGF5OjEsaGQ6MSxzaG93X3RpdGxlOjEsc2hvd19ieWxpbmU6MSxzaG93X3BvcnRyYWl0OjAsZnVsbHNjcmVlbjoxfSxwYXJhbVBsYWNlOjMsdHlwZTpcImlmcmFtZVwiLHVybDpcIi8vcGxheWVyLnZpbWVvLmNvbS92aWRlby8kMlwifSxpbnN0YWdyYW06e21hdGNoZXI6LyhpbnN0YWdyXFwuYW18aW5zdGFncmFtXFwuY29tKVxcL3BcXC8oW2EtekEtWjAtOV9cXC1dKylcXC8/L2ksdHlwZTpcImltYWdlXCIsdXJsOlwiLy8kMS9wLyQyL21lZGlhLz9zaXplPWxcIn0sZ21hcF9wbGFjZTp7bWF0Y2hlcjovKG1hcHNcXC4pP2dvb2dsZVxcLihbYS16XXsyLDN9KFxcLlthLXpdezJ9KT8pXFwvKCgobWFwc1xcLyhwbGFjZVxcLyguKilcXC8pP1xcQCguKiksKFxcZCsuP1xcZCs/KXopKXwoXFw/bGw9KSkoLiopPy9pLHR5cGU6XCJpZnJhbWVcIix1cmw6ZnVuY3Rpb24odCl7cmV0dXJuXCIvL21hcHMuZ29vZ2xlLlwiK3RbMl0rXCIvP2xsPVwiKyh0WzldP3RbOV0rXCImej1cIitNYXRoLmZsb29yKHRbMTBdKSsodFsxMl0/dFsxMl0ucmVwbGFjZSgvXlxcLy8sXCImXCIpOlwiXCIpOnRbMTJdK1wiXCIpLnJlcGxhY2UoL1xcPy8sXCImXCIpK1wiJm91dHB1dD1cIisodFsxMl0mJnRbMTJdLmluZGV4T2YoXCJsYXllcj1jXCIpPjA/XCJzdmVtYmVkXCI6XCJlbWJlZFwiKX19LGdtYXBfc2VhcmNoOnttYXRjaGVyOi8obWFwc1xcLik/Z29vZ2xlXFwuKFthLXpdezIsM30oXFwuW2Etel17Mn0pPylcXC8obWFwc1xcL3NlYXJjaFxcLykoLiopL2ksdHlwZTpcImlmcmFtZVwiLHVybDpmdW5jdGlvbih0KXtyZXR1cm5cIi8vbWFwcy5nb29nbGUuXCIrdFsyXStcIi9tYXBzP3E9XCIrdFs1XS5yZXBsYWNlKFwicXVlcnk9XCIsXCJxPVwiKS5yZXBsYWNlKFwiYXBpPTFcIixcIlwiKStcIiZvdXRwdXQ9ZW1iZWRcIn19fSxuPWZ1bmN0aW9uKGUsbixvKXtpZihlKXJldHVybiBvPW98fFwiXCIsXCJvYmplY3RcIj09PXQudHlwZShvKSYmKG89dC5wYXJhbShvLCEwKSksdC5lYWNoKG4sZnVuY3Rpb24odCxuKXtlPWUucmVwbGFjZShcIiRcIit0LG58fFwiXCIpfSksby5sZW5ndGgmJihlKz0oZS5pbmRleE9mKFwiP1wiKT4wP1wiJlwiOlwiP1wiKStvKSxlfTt0KGRvY3VtZW50KS5vbihcIm9iamVjdE5lZWRzVHlwZS5mYlwiLGZ1bmN0aW9uKG8saSxhKXt2YXIgcyxyLGMsbCxkLHUsZixwPWEuc3JjfHxcIlwiLGg9ITE7cz10LmV4dGVuZCghMCx7fSxlLGEub3B0cy5tZWRpYSksdC5lYWNoKHMsZnVuY3Rpb24oZSxvKXtpZihjPXAubWF0Y2goby5tYXRjaGVyKSl7aWYoaD1vLnR5cGUsZj1lLHU9e30sby5wYXJhbVBsYWNlJiZjW28ucGFyYW1QbGFjZV0pe2Q9Y1tvLnBhcmFtUGxhY2VdLFwiP1wiPT1kWzBdJiYoZD1kLnN1YnN0cmluZygxKSksZD1kLnNwbGl0KFwiJlwiKTtmb3IodmFyIGk9MDtpPGQubGVuZ3RoOysraSl7dmFyIHM9ZFtpXS5zcGxpdChcIj1cIiwyKTsyPT1zLmxlbmd0aCYmKHVbc1swXV09ZGVjb2RlVVJJQ29tcG9uZW50KHNbMV0ucmVwbGFjZSgvXFwrL2csXCIgXCIpKSl9fXJldHVybiBsPXQuZXh0ZW5kKCEwLHt9LG8ucGFyYW1zLGEub3B0c1tlXSx1KSxwPVwiZnVuY3Rpb25cIj09PXQudHlwZShvLnVybCk/by51cmwuY2FsbCh0aGlzLGMsbCxhKTpuKG8udXJsLGMsbCkscj1cImZ1bmN0aW9uXCI9PT10LnR5cGUoby50aHVtYik/by50aHVtYi5jYWxsKHRoaXMsYyxsLGEpOm4oby50aHVtYixjKSxcInlvdXR1YmVcIj09PWU/cD1wLnJlcGxhY2UoLyZ0PSgoXFxkKyltKT8oXFxkKylzLyxmdW5jdGlvbih0LGUsbixvKXtyZXR1cm5cIiZzdGFydD1cIisoKG4/NjAqcGFyc2VJbnQobiwxMCk6MCkrcGFyc2VJbnQobywxMCkpfSk6XCJ2aW1lb1wiPT09ZSYmKHA9cC5yZXBsYWNlKFwiJiUyM1wiLFwiI1wiKSksITF9fSksaD8oYS5vcHRzLnRodW1ifHxhLm9wdHMuJHRodW1iJiZhLm9wdHMuJHRodW1iLmxlbmd0aHx8KGEub3B0cy50aHVtYj1yKSxcImlmcmFtZVwiPT09aCYmKGEub3B0cz10LmV4dGVuZCghMCxhLm9wdHMse2lmcmFtZTp7cHJlbG9hZDohMSxhdHRyOntzY3JvbGxpbmc6XCJub1wifX19KSksdC5leHRlbmQoYSx7dHlwZTpoLHNyYzpwLG9yaWdTcmM6YS5zcmMsY29udGVudFNvdXJjZTpmLGNvbnRlbnRUeXBlOlwiaW1hZ2VcIj09PWg/XCJpbWFnZVwiOlwiZ21hcF9wbGFjZVwiPT1mfHxcImdtYXBfc2VhcmNoXCI9PWY/XCJtYXBcIjpcInZpZGVvXCJ9KSk6cCYmKGEudHlwZT1hLm9wdHMuZGVmYXVsdFR5cGUpfSk7dmFyIG89e3lvdXR1YmU6e3NyYzpcImh0dHBzOi8vd3d3LnlvdXR1YmUuY29tL2lmcmFtZV9hcGlcIixjbGFzczpcIllUXCIsbG9hZGluZzohMSxsb2FkZWQ6ITF9LHZpbWVvOntzcmM6XCJodHRwczovL3BsYXllci52aW1lby5jb20vYXBpL3BsYXllci5qc1wiLGNsYXNzOlwiVmltZW9cIixsb2FkaW5nOiExLGxvYWRlZDohMX0sbG9hZDpmdW5jdGlvbih0KXt2YXIgZSxuPXRoaXM7aWYodGhpc1t0XS5sb2FkZWQpcmV0dXJuIHZvaWQgc2V0VGltZW91dChmdW5jdGlvbigpe24uZG9uZSh0KX0pO3RoaXNbdF0ubG9hZGluZ3x8KHRoaXNbdF0ubG9hZGluZz0hMCxlPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzY3JpcHRcIiksZS50eXBlPVwidGV4dC9qYXZhc2NyaXB0XCIsZS5zcmM9dGhpc1t0XS5zcmMsXCJ5b3V0dWJlXCI9PT10P3dpbmRvdy5vbllvdVR1YmVJZnJhbWVBUElSZWFkeT1mdW5jdGlvbigpe25bdF0ubG9hZGVkPSEwLG4uZG9uZSh0KX06ZS5vbmxvYWQ9ZnVuY3Rpb24oKXtuW3RdLmxvYWRlZD0hMCxuLmRvbmUodCl9LGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoZSkpfSxkb25lOmZ1bmN0aW9uKGUpe3ZhciBuLG8saTtcInlvdXR1YmVcIj09PWUmJmRlbGV0ZSB3aW5kb3cub25Zb3VUdWJlSWZyYW1lQVBJUmVhZHksKG49dC5mYW5jeWJveC5nZXRJbnN0YW5jZSgpKSYmKG89bi5jdXJyZW50LiRjb250ZW50LmZpbmQoXCJpZnJhbWVcIiksXCJ5b3V0dWJlXCI9PT1lJiZ2b2lkIDAhPT1ZVCYmWVQ/aT1uZXcgWVQuUGxheWVyKG8uYXR0cihcImlkXCIpLHtldmVudHM6e29uU3RhdGVDaGFuZ2U6ZnVuY3Rpb24odCl7MD09dC5kYXRhJiZuLm5leHQoKX19fSk6XCJ2aW1lb1wiPT09ZSYmdm9pZCAwIT09VmltZW8mJlZpbWVvJiYoaT1uZXcgVmltZW8uUGxheWVyKG8pLGkub24oXCJlbmRlZFwiLGZ1bmN0aW9uKCl7bi5uZXh0KCl9KSkpfX07dChkb2N1bWVudCkub24oe1wiYWZ0ZXJTaG93LmZiXCI6ZnVuY3Rpb24odCxlLG4pe2UuZ3JvdXAubGVuZ3RoPjEmJihcInlvdXR1YmVcIj09PW4uY29udGVudFNvdXJjZXx8XCJ2aW1lb1wiPT09bi5jb250ZW50U291cmNlKSYmby5sb2FkKG4uY29udGVudFNvdXJjZSl9fSl9KGpRdWVyeSksZnVuY3Rpb24odCxlLG4pe1widXNlIHN0cmljdFwiO3ZhciBvPWZ1bmN0aW9uKCl7cmV0dXJuIHQucmVxdWVzdEFuaW1hdGlvbkZyYW1lfHx0LndlYmtpdFJlcXVlc3RBbmltYXRpb25GcmFtZXx8dC5tb3pSZXF1ZXN0QW5pbWF0aW9uRnJhbWV8fHQub1JlcXVlc3RBbmltYXRpb25GcmFtZXx8ZnVuY3Rpb24oZSl7cmV0dXJuIHQuc2V0VGltZW91dChlLDFlMy82MCl9fSgpLGk9ZnVuY3Rpb24oKXtyZXR1cm4gdC5jYW5jZWxBbmltYXRpb25GcmFtZXx8dC53ZWJraXRDYW5jZWxBbmltYXRpb25GcmFtZXx8dC5tb3pDYW5jZWxBbmltYXRpb25GcmFtZXx8dC5vQ2FuY2VsQW5pbWF0aW9uRnJhbWV8fGZ1bmN0aW9uKGUpe3QuY2xlYXJUaW1lb3V0KGUpfX0oKSxhPWZ1bmN0aW9uKGUpe3ZhciBuPVtdO2U9ZS5vcmlnaW5hbEV2ZW50fHxlfHx0LmUsZT1lLnRvdWNoZXMmJmUudG91Y2hlcy5sZW5ndGg/ZS50b3VjaGVzOmUuY2hhbmdlZFRvdWNoZXMmJmUuY2hhbmdlZFRvdWNoZXMubGVuZ3RoP2UuY2hhbmdlZFRvdWNoZXM6W2VdO2Zvcih2YXIgbyBpbiBlKWVbb10ucGFnZVg/bi5wdXNoKHt4OmVbb10ucGFnZVgseTplW29dLnBhZ2VZfSk6ZVtvXS5jbGllbnRYJiZuLnB1c2goe3g6ZVtvXS5jbGllbnRYLHk6ZVtvXS5jbGllbnRZfSk7cmV0dXJuIG59LHM9ZnVuY3Rpb24odCxlLG4pe3JldHVybiBlJiZ0P1wieFwiPT09bj90LngtZS54OlwieVwiPT09bj90LnktZS55Ok1hdGguc3FydChNYXRoLnBvdyh0LngtZS54LDIpK01hdGgucG93KHQueS1lLnksMikpOjB9LHI9ZnVuY3Rpb24odCl7aWYodC5pcygnYSxhcmVhLGJ1dHRvbixbcm9sZT1cImJ1dHRvblwiXSxpbnB1dCxsYWJlbCxzZWxlY3Qsc3VtbWFyeSx0ZXh0YXJlYSx2aWRlbyxhdWRpbyxpZnJhbWUnKXx8bi5pc0Z1bmN0aW9uKHQuZ2V0KDApLm9uY2xpY2spfHx0LmRhdGEoXCJzZWxlY3RhYmxlXCIpKXJldHVybiEwO2Zvcih2YXIgZT0wLG89dFswXS5hdHRyaWJ1dGVzLGk9by5sZW5ndGg7ZTxpO2UrKylpZihcImRhdGEtZmFuY3lib3gtXCI9PT1vW2VdLm5vZGVOYW1lLnN1YnN0cigwLDE0KSlyZXR1cm4hMDtyZXR1cm4hMX0sYz1mdW5jdGlvbihlKXt2YXIgbj10LmdldENvbXB1dGVkU3R5bGUoZSlbXCJvdmVyZmxvdy15XCJdLG89dC5nZXRDb21wdXRlZFN0eWxlKGUpW1wib3ZlcmZsb3cteFwiXSxpPShcInNjcm9sbFwiPT09bnx8XCJhdXRvXCI9PT1uKSYmZS5zY3JvbGxIZWlnaHQ+ZS5jbGllbnRIZWlnaHQsYT0oXCJzY3JvbGxcIj09PW98fFwiYXV0b1wiPT09bykmJmUuc2Nyb2xsV2lkdGg+ZS5jbGllbnRXaWR0aDtyZXR1cm4gaXx8YX0sbD1mdW5jdGlvbih0KXtmb3IodmFyIGU9ITE7Oyl7aWYoZT1jKHQuZ2V0KDApKSlicmVhaztpZih0PXQucGFyZW50KCksIXQubGVuZ3RofHx0Lmhhc0NsYXNzKFwiZmFuY3lib3gtc3RhZ2VcIil8fHQuaXMoXCJib2R5XCIpKWJyZWFrfXJldHVybiBlfSxkPWZ1bmN0aW9uKHQpe3ZhciBlPXRoaXM7ZS5pbnN0YW5jZT10LGUuJGJnPXQuJHJlZnMuYmcsZS4kc3RhZ2U9dC4kcmVmcy5zdGFnZSxlLiRjb250YWluZXI9dC4kcmVmcy5jb250YWluZXIsZS5kZXN0cm95KCksZS4kY29udGFpbmVyLm9uKFwidG91Y2hzdGFydC5mYi50b3VjaCBtb3VzZWRvd24uZmIudG91Y2hcIixuLnByb3h5KGUsXCJvbnRvdWNoc3RhcnRcIikpfTtkLnByb3RvdHlwZS5kZXN0cm95PWZ1bmN0aW9uKCl7dmFyIHQ9dGhpczt0LiRjb250YWluZXIub2ZmKFwiLmZiLnRvdWNoXCIpLG4oZSkub2ZmKFwiLmZiLnRvdWNoXCIpLHQucmVxdWVzdElkJiYoaSh0LnJlcXVlc3RJZCksdC5yZXF1ZXN0SWQ9bnVsbCksdC50YXBwZWQmJihjbGVhclRpbWVvdXQodC50YXBwZWQpLHQudGFwcGVkPW51bGwpfSxkLnByb3RvdHlwZS5vbnRvdWNoc3RhcnQ9ZnVuY3Rpb24obyl7dmFyIGk9dGhpcyxjPW4oby50YXJnZXQpLGQ9aS5pbnN0YW5jZSx1PWQuY3VycmVudCxmPXUuJHNsaWRlLHA9dS4kY29udGVudCxoPVwidG91Y2hzdGFydFwiPT1vLnR5cGU7aWYoaCYmaS4kY29udGFpbmVyLm9mZihcIm1vdXNlZG93bi5mYi50b3VjaFwiKSwoIW8ub3JpZ2luYWxFdmVudHx8MiE9by5vcmlnaW5hbEV2ZW50LmJ1dHRvbikmJmYubGVuZ3RoJiZjLmxlbmd0aCYmIXIoYykmJiFyKGMucGFyZW50KCkpJiYoYy5pcyhcImltZ1wiKXx8IShvLm9yaWdpbmFsRXZlbnQuY2xpZW50WD5jWzBdLmNsaWVudFdpZHRoK2Mub2Zmc2V0KCkubGVmdCkpKXtpZighdXx8ZC5pc0FuaW1hdGluZ3x8dS4kc2xpZGUuaGFzQ2xhc3MoXCJmYW5jeWJveC1hbmltYXRlZFwiKSlyZXR1cm4gby5zdG9wUHJvcGFnYXRpb24oKSx2b2lkIG8ucHJldmVudERlZmF1bHQoKTtpLnJlYWxQb2ludHM9aS5zdGFydFBvaW50cz1hKG8pLGkuc3RhcnRQb2ludHMubGVuZ3RoJiYodS50b3VjaCYmby5zdG9wUHJvcGFnYXRpb24oKSxpLnN0YXJ0RXZlbnQ9byxpLmNhblRhcD0hMCxpLiR0YXJnZXQ9YyxpLiRjb250ZW50PXAsaS5vcHRzPXUub3B0cy50b3VjaCxpLmlzUGFubmluZz0hMSxpLmlzU3dpcGluZz0hMSxpLmlzWm9vbWluZz0hMSxpLmlzU2Nyb2xsaW5nPSExLGkuY2FuUGFuPWQuY2FuUGFuKCksaS5zdGFydFRpbWU9KG5ldyBEYXRlKS5nZXRUaW1lKCksaS5kaXN0YW5jZVg9aS5kaXN0YW5jZVk9aS5kaXN0YW5jZT0wLGkuY2FudmFzV2lkdGg9TWF0aC5yb3VuZChmWzBdLmNsaWVudFdpZHRoKSxpLmNhbnZhc0hlaWdodD1NYXRoLnJvdW5kKGZbMF0uY2xpZW50SGVpZ2h0KSxpLmNvbnRlbnRMYXN0UG9zPW51bGwsaS5jb250ZW50U3RhcnRQb3M9bi5mYW5jeWJveC5nZXRUcmFuc2xhdGUoaS4kY29udGVudCl8fHt0b3A6MCxsZWZ0OjB9LGkuc2xpZGVyU3RhcnRQb3M9bi5mYW5jeWJveC5nZXRUcmFuc2xhdGUoZiksaS5zdGFnZVBvcz1uLmZhbmN5Ym94LmdldFRyYW5zbGF0ZShkLiRyZWZzLnN0YWdlKSxpLnNsaWRlclN0YXJ0UG9zLnRvcC09aS5zdGFnZVBvcy50b3AsaS5zbGlkZXJTdGFydFBvcy5sZWZ0LT1pLnN0YWdlUG9zLmxlZnQsaS5jb250ZW50U3RhcnRQb3MudG9wLT1pLnN0YWdlUG9zLnRvcCxpLmNvbnRlbnRTdGFydFBvcy5sZWZ0LT1pLnN0YWdlUG9zLmxlZnQsbihlKS5vZmYoXCIuZmIudG91Y2hcIikub24oaD9cInRvdWNoZW5kLmZiLnRvdWNoIHRvdWNoY2FuY2VsLmZiLnRvdWNoXCI6XCJtb3VzZXVwLmZiLnRvdWNoIG1vdXNlbGVhdmUuZmIudG91Y2hcIixuLnByb3h5KGksXCJvbnRvdWNoZW5kXCIpKS5vbihoP1widG91Y2htb3ZlLmZiLnRvdWNoXCI6XCJtb3VzZW1vdmUuZmIudG91Y2hcIixuLnByb3h5KGksXCJvbnRvdWNobW92ZVwiKSksbi5mYW5jeWJveC5pc01vYmlsZSYmZS5hZGRFdmVudExpc3RlbmVyKFwic2Nyb2xsXCIsaS5vbnNjcm9sbCwhMCksKChpLm9wdHN8fGkuY2FuUGFuKSYmKGMuaXMoaS4kc3RhZ2UpfHxpLiRzdGFnZS5maW5kKGMpLmxlbmd0aCl8fChjLmlzKFwiLmZhbmN5Ym94LWltYWdlXCIpJiZvLnByZXZlbnREZWZhdWx0KCksbi5mYW5jeWJveC5pc01vYmlsZSYmYy5wYXJlbnRzKFwiLmZhbmN5Ym94LWNhcHRpb25cIikubGVuZ3RoKSkmJihpLmlzU2Nyb2xsYWJsZT1sKGMpfHxsKGMucGFyZW50KCkpLG4uZmFuY3lib3guaXNNb2JpbGUmJmkuaXNTY3JvbGxhYmxlfHxvLnByZXZlbnREZWZhdWx0KCksKDE9PT1pLnN0YXJ0UG9pbnRzLmxlbmd0aHx8dS5oYXNFcnJvcikmJihpLmNhblBhbj8obi5mYW5jeWJveC5zdG9wKGkuJGNvbnRlbnQpLGkuaXNQYW5uaW5nPSEwKTppLmlzU3dpcGluZz0hMCxpLiRjb250YWluZXIuYWRkQ2xhc3MoXCJmYW5jeWJveC1pcy1ncmFiYmluZ1wiKSksMj09PWkuc3RhcnRQb2ludHMubGVuZ3RoJiZcImltYWdlXCI9PT11LnR5cGUmJih1LmlzTG9hZGVkfHx1LiRnaG9zdCkmJihpLmNhblRhcD0hMSxpLmlzU3dpcGluZz0hMSxpLmlzUGFubmluZz0hMSxpLmlzWm9vbWluZz0hMCxuLmZhbmN5Ym94LnN0b3AoaS4kY29udGVudCksaS5jZW50ZXJQb2ludFN0YXJ0WD0uNSooaS5zdGFydFBvaW50c1swXS54K2kuc3RhcnRQb2ludHNbMV0ueCktbih0KS5zY3JvbGxMZWZ0KCksaS5jZW50ZXJQb2ludFN0YXJ0WT0uNSooaS5zdGFydFBvaW50c1swXS55K2kuc3RhcnRQb2ludHNbMV0ueSktbih0KS5zY3JvbGxUb3AoKSxpLnBlcmNlbnRhZ2VPZkltYWdlQXRQaW5jaFBvaW50WD0oaS5jZW50ZXJQb2ludFN0YXJ0WC1pLmNvbnRlbnRTdGFydFBvcy5sZWZ0KS9pLmNvbnRlbnRTdGFydFBvcy53aWR0aCxpLnBlcmNlbnRhZ2VPZkltYWdlQXRQaW5jaFBvaW50WT0oaS5jZW50ZXJQb2ludFN0YXJ0WS1pLmNvbnRlbnRTdGFydFBvcy50b3ApL2kuY29udGVudFN0YXJ0UG9zLmhlaWdodCxpLnN0YXJ0RGlzdGFuY2VCZXR3ZWVuRmluZ2Vycz1zKGkuc3RhcnRQb2ludHNbMF0saS5zdGFydFBvaW50c1sxXSkpKSl9fSxkLnByb3RvdHlwZS5vbnNjcm9sbD1mdW5jdGlvbih0KXt2YXIgbj10aGlzO24uaXNTY3JvbGxpbmc9ITAsZS5yZW1vdmVFdmVudExpc3RlbmVyKFwic2Nyb2xsXCIsbi5vbnNjcm9sbCwhMCl9LGQucHJvdG90eXBlLm9udG91Y2htb3ZlPWZ1bmN0aW9uKHQpe3ZhciBlPXRoaXM7cmV0dXJuIHZvaWQgMCE9PXQub3JpZ2luYWxFdmVudC5idXR0b25zJiYwPT09dC5vcmlnaW5hbEV2ZW50LmJ1dHRvbnM/dm9pZCBlLm9udG91Y2hlbmQodCk6ZS5pc1Njcm9sbGluZz92b2lkKGUuY2FuVGFwPSExKTooZS5uZXdQb2ludHM9YSh0KSx2b2lkKChlLm9wdHN8fGUuY2FuUGFuKSYmZS5uZXdQb2ludHMubGVuZ3RoJiZlLm5ld1BvaW50cy5sZW5ndGgmJihlLmlzU3dpcGluZyYmITA9PT1lLmlzU3dpcGluZ3x8dC5wcmV2ZW50RGVmYXVsdCgpLGUuZGlzdGFuY2VYPXMoZS5uZXdQb2ludHNbMF0sZS5zdGFydFBvaW50c1swXSxcInhcIiksZS5kaXN0YW5jZVk9cyhlLm5ld1BvaW50c1swXSxlLnN0YXJ0UG9pbnRzWzBdLFwieVwiKSxlLmRpc3RhbmNlPXMoZS5uZXdQb2ludHNbMF0sZS5zdGFydFBvaW50c1swXSksZS5kaXN0YW5jZT4wJiYoZS5pc1N3aXBpbmc/ZS5vblN3aXBlKHQpOmUuaXNQYW5uaW5nP2Uub25QYW4oKTplLmlzWm9vbWluZyYmZS5vblpvb20oKSkpKSl9LGQucHJvdG90eXBlLm9uU3dpcGU9ZnVuY3Rpb24oZSl7dmFyIGEscz10aGlzLHI9cy5pbnN0YW5jZSxjPXMuaXNTd2lwaW5nLGw9cy5zbGlkZXJTdGFydFBvcy5sZWZ0fHwwO2lmKCEwIT09YylcInhcIj09YyYmKHMuZGlzdGFuY2VYPjAmJihzLmluc3RhbmNlLmdyb3VwLmxlbmd0aDwyfHwwPT09cy5pbnN0YW5jZS5jdXJyZW50LmluZGV4JiYhcy5pbnN0YW5jZS5jdXJyZW50Lm9wdHMubG9vcCk/bCs9TWF0aC5wb3cocy5kaXN0YW5jZVgsLjgpOnMuZGlzdGFuY2VYPDAmJihzLmluc3RhbmNlLmdyb3VwLmxlbmd0aDwyfHxzLmluc3RhbmNlLmN1cnJlbnQuaW5kZXg9PT1zLmluc3RhbmNlLmdyb3VwLmxlbmd0aC0xJiYhcy5pbnN0YW5jZS5jdXJyZW50Lm9wdHMubG9vcCk/bC09TWF0aC5wb3coLXMuZGlzdGFuY2VYLC44KTpsKz1zLmRpc3RhbmNlWCkscy5zbGlkZXJMYXN0UG9zPXt0b3A6XCJ4XCI9PWM/MDpzLnNsaWRlclN0YXJ0UG9zLnRvcCtzLmRpc3RhbmNlWSxsZWZ0Omx9LHMucmVxdWVzdElkJiYoaShzLnJlcXVlc3RJZCkscy5yZXF1ZXN0SWQ9bnVsbCkscy5yZXF1ZXN0SWQ9byhmdW5jdGlvbigpe3Muc2xpZGVyTGFzdFBvcyYmKG4uZWFjaChzLmluc3RhbmNlLnNsaWRlcyxmdW5jdGlvbih0LGUpe3ZhciBvPWUucG9zLXMuaW5zdGFuY2UuY3VyclBvcztuLmZhbmN5Ym94LnNldFRyYW5zbGF0ZShlLiRzbGlkZSx7dG9wOnMuc2xpZGVyTGFzdFBvcy50b3AsbGVmdDpzLnNsaWRlckxhc3RQb3MubGVmdCtvKnMuY2FudmFzV2lkdGgrbyplLm9wdHMuZ3V0dGVyfSl9KSxzLiRjb250YWluZXIuYWRkQ2xhc3MoXCJmYW5jeWJveC1pcy1zbGlkaW5nXCIpKX0pO2Vsc2UgaWYoTWF0aC5hYnMocy5kaXN0YW5jZSk+MTApe2lmKHMuY2FuVGFwPSExLHIuZ3JvdXAubGVuZ3RoPDImJnMub3B0cy52ZXJ0aWNhbD9zLmlzU3dpcGluZz1cInlcIjpyLmlzRHJhZ2dpbmd8fCExPT09cy5vcHRzLnZlcnRpY2FsfHxcImF1dG9cIj09PXMub3B0cy52ZXJ0aWNhbCYmbih0KS53aWR0aCgpPjgwMD9zLmlzU3dpcGluZz1cInhcIjooYT1NYXRoLmFicygxODAqTWF0aC5hdGFuMihzLmRpc3RhbmNlWSxzLmRpc3RhbmNlWCkvTWF0aC5QSSkscy5pc1N3aXBpbmc9YT40NSYmYTwxMzU/XCJ5XCI6XCJ4XCIpLFwieVwiPT09cy5pc1N3aXBpbmcmJm4uZmFuY3lib3guaXNNb2JpbGUmJnMuaXNTY3JvbGxhYmxlKXJldHVybiB2b2lkKHMuaXNTY3JvbGxpbmc9ITApO3IuaXNEcmFnZ2luZz1zLmlzU3dpcGluZyxzLnN0YXJ0UG9pbnRzPXMubmV3UG9pbnRzLG4uZWFjaChyLnNsaWRlcyxmdW5jdGlvbih0LGUpe3ZhciBvLGk7bi5mYW5jeWJveC5zdG9wKGUuJHNsaWRlKSxvPW4uZmFuY3lib3guZ2V0VHJhbnNsYXRlKGUuJHNsaWRlKSxpPW4uZmFuY3lib3guZ2V0VHJhbnNsYXRlKHIuJHJlZnMuc3RhZ2UpLGUuJHNsaWRlLmNzcyh7dHJhbnNmb3JtOlwiXCIsb3BhY2l0eTpcIlwiLFwidHJhbnNpdGlvbi1kdXJhdGlvblwiOlwiXCJ9KS5yZW1vdmVDbGFzcyhcImZhbmN5Ym94LWFuaW1hdGVkXCIpLnJlbW92ZUNsYXNzKGZ1bmN0aW9uKHQsZSl7cmV0dXJuKGUubWF0Y2goLyhefFxccylmYW5jeWJveC1meC1cXFMrL2cpfHxbXSkuam9pbihcIiBcIil9KSxlLnBvcz09PXIuY3VycmVudC5wb3MmJihzLnNsaWRlclN0YXJ0UG9zLnRvcD1vLnRvcC1pLnRvcCxzLnNsaWRlclN0YXJ0UG9zLmxlZnQ9by5sZWZ0LWkubGVmdCksbi5mYW5jeWJveC5zZXRUcmFuc2xhdGUoZS4kc2xpZGUse3RvcDpvLnRvcC1pLnRvcCxsZWZ0Om8ubGVmdC1pLmxlZnR9KX0pLHIuU2xpZGVTaG93JiZyLlNsaWRlU2hvdy5pc0FjdGl2ZSYmci5TbGlkZVNob3cuc3RvcCgpfX0sZC5wcm90b3R5cGUub25QYW49ZnVuY3Rpb24oKXt2YXIgdD10aGlzO2lmKHModC5uZXdQb2ludHNbMF0sdC5yZWFsUG9pbnRzWzBdKTwobi5mYW5jeWJveC5pc01vYmlsZT8xMDo1KSlyZXR1cm4gdm9pZCh0LnN0YXJ0UG9pbnRzPXQubmV3UG9pbnRzKTt0LmNhblRhcD0hMSx0LmNvbnRlbnRMYXN0UG9zPXQubGltaXRNb3ZlbWVudCgpLHQucmVxdWVzdElkJiZpKHQucmVxdWVzdElkKSx0LnJlcXVlc3RJZD1vKGZ1bmN0aW9uKCl7bi5mYW5jeWJveC5zZXRUcmFuc2xhdGUodC4kY29udGVudCx0LmNvbnRlbnRMYXN0UG9zKX0pfSxkLnByb3RvdHlwZS5saW1pdE1vdmVtZW50PWZ1bmN0aW9uKCl7dmFyIHQsZSxuLG8saSxhLHM9dGhpcyxyPXMuY2FudmFzV2lkdGgsYz1zLmNhbnZhc0hlaWdodCxsPXMuZGlzdGFuY2VYLGQ9cy5kaXN0YW5jZVksdT1zLmNvbnRlbnRTdGFydFBvcyxmPXUubGVmdCxwPXUudG9wLGg9dS53aWR0aCxnPXUuaGVpZ2h0O3JldHVybiBpPWg+cj9mK2w6ZixhPXArZCx0PU1hdGgubWF4KDAsLjUqci0uNSpoKSxlPU1hdGgubWF4KDAsLjUqYy0uNSpnKSxuPU1hdGgubWluKHItaCwuNSpyLS41KmgpLG89TWF0aC5taW4oYy1nLC41KmMtLjUqZyksbD4wJiZpPnQmJihpPXQtMStNYXRoLnBvdygtdCtmK2wsLjgpfHwwKSxsPDAmJmk8biYmKGk9bisxLU1hdGgucG93KG4tZi1sLC44KXx8MCksZD4wJiZhPmUmJihhPWUtMStNYXRoLnBvdygtZStwK2QsLjgpfHwwKSxkPDAmJmE8byYmKGE9bysxLU1hdGgucG93KG8tcC1kLC44KXx8MCkse3RvcDphLGxlZnQ6aX19LGQucHJvdG90eXBlLmxpbWl0UG9zaXRpb249ZnVuY3Rpb24odCxlLG4sbyl7dmFyIGk9dGhpcyxhPWkuY2FudmFzV2lkdGgscz1pLmNhbnZhc0hlaWdodDtyZXR1cm4gbj5hPyh0PXQ+MD8wOnQsdD10PGEtbj9hLW46dCk6dD1NYXRoLm1heCgwLGEvMi1uLzIpLG8+cz8oZT1lPjA/MDplLGU9ZTxzLW8/cy1vOmUpOmU9TWF0aC5tYXgoMCxzLzItby8yKSx7dG9wOmUsbGVmdDp0fX0sZC5wcm90b3R5cGUub25ab29tPWZ1bmN0aW9uKCl7dmFyIGU9dGhpcyxhPWUuY29udGVudFN0YXJ0UG9zLHI9YS53aWR0aCxjPWEuaGVpZ2h0LGw9YS5sZWZ0LGQ9YS50b3AsdT1zKGUubmV3UG9pbnRzWzBdLGUubmV3UG9pbnRzWzFdKSxmPXUvZS5zdGFydERpc3RhbmNlQmV0d2VlbkZpbmdlcnMscD1NYXRoLmZsb29yKHIqZiksaD1NYXRoLmZsb29yKGMqZiksZz0oci1wKSplLnBlcmNlbnRhZ2VPZkltYWdlQXRQaW5jaFBvaW50WCxiPShjLWgpKmUucGVyY2VudGFnZU9mSW1hZ2VBdFBpbmNoUG9pbnRZLG09KGUubmV3UG9pbnRzWzBdLngrZS5uZXdQb2ludHNbMV0ueCkvMi1uKHQpLnNjcm9sbExlZnQoKSx2PShlLm5ld1BvaW50c1swXS55K2UubmV3UG9pbnRzWzFdLnkpLzItbih0KS5zY3JvbGxUb3AoKSx5PW0tZS5jZW50ZXJQb2ludFN0YXJ0WCx4PXYtZS5jZW50ZXJQb2ludFN0YXJ0WSx3PWwrKGcreSksJD1kKyhiK3gpLFM9e3RvcDokLGxlZnQ6dyxzY2FsZVg6ZixzY2FsZVk6Zn07ZS5jYW5UYXA9ITEsZS5uZXdXaWR0aD1wLGUubmV3SGVpZ2h0PWgsZS5jb250ZW50TGFzdFBvcz1TLGUucmVxdWVzdElkJiZpKGUucmVxdWVzdElkKSxlLnJlcXVlc3RJZD1vKGZ1bmN0aW9uKCl7bi5mYW5jeWJveC5zZXRUcmFuc2xhdGUoZS4kY29udGVudCxlLmNvbnRlbnRMYXN0UG9zKX0pfSxkLnByb3RvdHlwZS5vbnRvdWNoZW5kPWZ1bmN0aW9uKHQpe3ZhciBvPXRoaXMscz1vLmlzU3dpcGluZyxyPW8uaXNQYW5uaW5nLGM9by5pc1pvb21pbmcsbD1vLmlzU2Nyb2xsaW5nO2lmKG8uZW5kUG9pbnRzPWEodCksby5kTXM9TWF0aC5tYXgoKG5ldyBEYXRlKS5nZXRUaW1lKCktby5zdGFydFRpbWUsMSksby4kY29udGFpbmVyLnJlbW92ZUNsYXNzKFwiZmFuY3lib3gtaXMtZ3JhYmJpbmdcIiksbihlKS5vZmYoXCIuZmIudG91Y2hcIiksZS5yZW1vdmVFdmVudExpc3RlbmVyKFwic2Nyb2xsXCIsby5vbnNjcm9sbCwhMCksby5yZXF1ZXN0SWQmJihpKG8ucmVxdWVzdElkKSxvLnJlcXVlc3RJZD1udWxsKSxvLmlzU3dpcGluZz0hMSxvLmlzUGFubmluZz0hMSxvLmlzWm9vbWluZz0hMSxvLmlzU2Nyb2xsaW5nPSExLG8uaW5zdGFuY2UuaXNEcmFnZ2luZz0hMSxvLmNhblRhcClyZXR1cm4gby5vblRhcCh0KTtvLnNwZWVkPTEwMCxvLnZlbG9jaXR5WD1vLmRpc3RhbmNlWC9vLmRNcyouNSxvLnZlbG9jaXR5WT1vLmRpc3RhbmNlWS9vLmRNcyouNSxyP28uZW5kUGFubmluZygpOmM/by5lbmRab29taW5nKCk6by5lbmRTd2lwaW5nKHMsbCl9LGQucHJvdG90eXBlLmVuZFN3aXBpbmc9ZnVuY3Rpb24odCxlKXt2YXIgbz10aGlzLGk9ITEsYT1vLmluc3RhbmNlLmdyb3VwLmxlbmd0aCxzPU1hdGguYWJzKG8uZGlzdGFuY2VYKSxyPVwieFwiPT10JiZhPjEmJihvLmRNcz4xMzAmJnM+MTB8fHM+NTApO28uc2xpZGVyTGFzdFBvcz1udWxsLFwieVwiPT10JiYhZSYmTWF0aC5hYnMoby5kaXN0YW5jZVkpPjUwPyhuLmZhbmN5Ym94LmFuaW1hdGUoby5pbnN0YW5jZS5jdXJyZW50LiRzbGlkZSx7dG9wOm8uc2xpZGVyU3RhcnRQb3MudG9wK28uZGlzdGFuY2VZKzE1MCpvLnZlbG9jaXR5WSxvcGFjaXR5OjB9LDIwMCksaT1vLmluc3RhbmNlLmNsb3NlKCEwLDI1MCkpOnImJm8uZGlzdGFuY2VYPjA/aT1vLmluc3RhbmNlLnByZXZpb3VzKDMwMCk6ciYmby5kaXN0YW5jZVg8MCYmKGk9by5pbnN0YW5jZS5uZXh0KDMwMCkpLCExIT09aXx8XCJ4XCIhPXQmJlwieVwiIT10fHxvLmluc3RhbmNlLmNlbnRlclNsaWRlKDIwMCksby4kY29udGFpbmVyLnJlbW92ZUNsYXNzKFwiZmFuY3lib3gtaXMtc2xpZGluZ1wiKX0sZC5wcm90b3R5cGUuZW5kUGFubmluZz1mdW5jdGlvbigpe3ZhciB0LGUsbyxpPXRoaXM7aS5jb250ZW50TGFzdFBvcyYmKCExPT09aS5vcHRzLm1vbWVudHVtfHxpLmRNcz4zNTA/KHQ9aS5jb250ZW50TGFzdFBvcy5sZWZ0LGU9aS5jb250ZW50TGFzdFBvcy50b3ApOih0PWkuY29udGVudExhc3RQb3MubGVmdCs1MDAqaS52ZWxvY2l0eVgsZT1pLmNvbnRlbnRMYXN0UG9zLnRvcCs1MDAqaS52ZWxvY2l0eVkpLG89aS5saW1pdFBvc2l0aW9uKHQsZSxpLmNvbnRlbnRTdGFydFBvcy53aWR0aCxpLmNvbnRlbnRTdGFydFBvcy5oZWlnaHQpLG8ud2lkdGg9aS5jb250ZW50U3RhcnRQb3Mud2lkdGgsby5oZWlnaHQ9aS5jb250ZW50U3RhcnRQb3MuaGVpZ2h0LG4uZmFuY3lib3guYW5pbWF0ZShpLiRjb250ZW50LG8sMzY2KSl9LGQucHJvdG90eXBlLmVuZFpvb21pbmc9ZnVuY3Rpb24oKXt2YXIgdCxlLG8saSxhPXRoaXMscz1hLmluc3RhbmNlLmN1cnJlbnQscj1hLm5ld1dpZHRoLGM9YS5uZXdIZWlnaHQ7YS5jb250ZW50TGFzdFBvcyYmKHQ9YS5jb250ZW50TGFzdFBvcy5sZWZ0LGU9YS5jb250ZW50TGFzdFBvcy50b3AsaT17dG9wOmUsbGVmdDp0LHdpZHRoOnIsaGVpZ2h0OmMsc2NhbGVYOjEsc2NhbGVZOjF9LG4uZmFuY3lib3guc2V0VHJhbnNsYXRlKGEuJGNvbnRlbnQsaSkscjxhLmNhbnZhc1dpZHRoJiZjPGEuY2FudmFzSGVpZ2h0P2EuaW5zdGFuY2Uuc2NhbGVUb0ZpdCgxNTApOnI+cy53aWR0aHx8Yz5zLmhlaWdodD9hLmluc3RhbmNlLnNjYWxlVG9BY3R1YWwoYS5jZW50ZXJQb2ludFN0YXJ0WCxhLmNlbnRlclBvaW50U3RhcnRZLDE1MCk6KG89YS5saW1pdFBvc2l0aW9uKHQsZSxyLGMpLG4uZmFuY3lib3guYW5pbWF0ZShhLiRjb250ZW50LG8sMTUwKSkpfSxkLnByb3RvdHlwZS5vblRhcD1mdW5jdGlvbihlKXt2YXIgbyxpPXRoaXMscz1uKGUudGFyZ2V0KSxyPWkuaW5zdGFuY2UsYz1yLmN1cnJlbnQsbD1lJiZhKGUpfHxpLnN0YXJ0UG9pbnRzLGQ9bFswXT9sWzBdLngtbih0KS5zY3JvbGxMZWZ0KCktaS5zdGFnZVBvcy5sZWZ0OjAsdT1sWzBdP2xbMF0ueS1uKHQpLnNjcm9sbFRvcCgpLWkuc3RhZ2VQb3MudG9wOjAsZj1mdW5jdGlvbih0KXt2YXIgbz1jLm9wdHNbdF07aWYobi5pc0Z1bmN0aW9uKG8pJiYobz1vLmFwcGx5KHIsW2MsZV0pKSxvKXN3aXRjaChvKXtjYXNlXCJjbG9zZVwiOnIuY2xvc2UoaS5zdGFydEV2ZW50KTticmVhaztjYXNlXCJ0b2dnbGVDb250cm9sc1wiOnIudG9nZ2xlQ29udHJvbHMoKTticmVhaztjYXNlXCJuZXh0XCI6ci5uZXh0KCk7YnJlYWs7Y2FzZVwibmV4dE9yQ2xvc2VcIjpyLmdyb3VwLmxlbmd0aD4xP3IubmV4dCgpOnIuY2xvc2UoaS5zdGFydEV2ZW50KTticmVhaztjYXNlXCJ6b29tXCI6XCJpbWFnZVwiPT1jLnR5cGUmJihjLmlzTG9hZGVkfHxjLiRnaG9zdCkmJihyLmNhblBhbigpP3Iuc2NhbGVUb0ZpdCgpOnIuaXNTY2FsZWREb3duKCk/ci5zY2FsZVRvQWN0dWFsKGQsdSk6ci5ncm91cC5sZW5ndGg8MiYmci5jbG9zZShpLnN0YXJ0RXZlbnQpKX19O2lmKCghZS5vcmlnaW5hbEV2ZW50fHwyIT1lLm9yaWdpbmFsRXZlbnQuYnV0dG9uKSYmKHMuaXMoXCJpbWdcIil8fCEoZD5zWzBdLmNsaWVudFdpZHRoK3Mub2Zmc2V0KCkubGVmdCkpKXtpZihzLmlzKFwiLmZhbmN5Ym94LWJnLC5mYW5jeWJveC1pbm5lciwuZmFuY3lib3gtb3V0ZXIsLmZhbmN5Ym94LWNvbnRhaW5lclwiKSlvPVwiT3V0c2lkZVwiO2Vsc2UgaWYocy5pcyhcIi5mYW5jeWJveC1zbGlkZVwiKSlvPVwiU2xpZGVcIjtlbHNle2lmKCFyLmN1cnJlbnQuJGNvbnRlbnR8fCFyLmN1cnJlbnQuJGNvbnRlbnQuZmluZChzKS5hZGRCYWNrKCkuZmlsdGVyKHMpLmxlbmd0aClyZXR1cm47bz1cIkNvbnRlbnRcIn1pZihpLnRhcHBlZCl7aWYoY2xlYXJUaW1lb3V0KGkudGFwcGVkKSxpLnRhcHBlZD1udWxsLE1hdGguYWJzKGQtaS50YXBYKT41MHx8TWF0aC5hYnModS1pLnRhcFkpPjUwKXJldHVybiB0aGlzO2YoXCJkYmxjbGlja1wiK28pfWVsc2UgaS50YXBYPWQsaS50YXBZPXUsYy5vcHRzW1wiZGJsY2xpY2tcIitvXSYmYy5vcHRzW1wiZGJsY2xpY2tcIitvXSE9PWMub3B0c1tcImNsaWNrXCIrb10/aS50YXBwZWQ9c2V0VGltZW91dChmdW5jdGlvbigpe2kudGFwcGVkPW51bGwsci5pc0FuaW1hdGluZ3x8ZihcImNsaWNrXCIrbyl9LDUwMCk6ZihcImNsaWNrXCIrbyk7cmV0dXJuIHRoaXN9fSxuKGUpLm9uKFwib25BY3RpdmF0ZS5mYlwiLGZ1bmN0aW9uKHQsZSl7ZSYmIWUuR3Vlc3R1cmVzJiYoZS5HdWVzdHVyZXM9bmV3IGQoZSkpfSkub24oXCJiZWZvcmVDbG9zZS5mYlwiLGZ1bmN0aW9uKHQsZSl7ZSYmZS5HdWVzdHVyZXMmJmUuR3Vlc3R1cmVzLmRlc3Ryb3koKX0pfSh3aW5kb3csZG9jdW1lbnQsalF1ZXJ5KSxmdW5jdGlvbih0LGUpe1widXNlIHN0cmljdFwiO2UuZXh0ZW5kKCEwLGUuZmFuY3lib3guZGVmYXVsdHMse2J0blRwbDp7c2xpZGVTaG93Oic8YnV0dG9uIGRhdGEtZmFuY3lib3gtcGxheSBjbGFzcz1cImZhbmN5Ym94LWJ1dHRvbiBmYW5jeWJveC1idXR0b24tLXBsYXlcIiB0aXRsZT1cInt7UExBWV9TVEFSVH19XCI+PHN2ZyB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIgdmlld0JveD1cIjAgMCAyNCAyNFwiPjxwYXRoIGQ9XCJNNi41IDUuNHYxMy4ybDExLTYuNnpcIi8+PC9zdmc+PHN2ZyB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIgdmlld0JveD1cIjAgMCAyNCAyNFwiPjxwYXRoIGQ9XCJNOC4zMyA1Ljc1aDIuMnYxMi41aC0yLjJWNS43NXptNS4xNSAwaDIuMnYxMi41aC0yLjJWNS43NXpcIi8+PC9zdmc+PC9idXR0b24+J30sc2xpZGVTaG93OnthdXRvU3RhcnQ6ITEsc3BlZWQ6M2UzLHByb2dyZXNzOiEwfX0pO3ZhciBuPWZ1bmN0aW9uKHQpe3RoaXMuaW5zdGFuY2U9dCx0aGlzLmluaXQoKX07ZS5leHRlbmQobi5wcm90b3R5cGUse3RpbWVyOm51bGwsaXNBY3RpdmU6ITEsJGJ1dHRvbjpudWxsLGluaXQ6ZnVuY3Rpb24oKXt2YXIgdD10aGlzLG49dC5pbnN0YW5jZSxvPW4uZ3JvdXBbbi5jdXJySW5kZXhdLm9wdHMuc2xpZGVTaG93O3QuJGJ1dHRvbj1uLiRyZWZzLnRvb2xiYXIuZmluZChcIltkYXRhLWZhbmN5Ym94LXBsYXldXCIpLm9uKFwiY2xpY2tcIixmdW5jdGlvbigpe3QudG9nZ2xlKCl9KSxuLmdyb3VwLmxlbmd0aDwyfHwhbz90LiRidXR0b24uaGlkZSgpOm8ucHJvZ3Jlc3MmJih0LiRwcm9ncmVzcz1lKCc8ZGl2IGNsYXNzPVwiZmFuY3lib3gtcHJvZ3Jlc3NcIj48L2Rpdj4nKS5hcHBlbmRUbyhuLiRyZWZzLmlubmVyKSl9LHNldDpmdW5jdGlvbih0KXt2YXIgbj10aGlzLG89bi5pbnN0YW5jZSxpPW8uY3VycmVudDtpJiYoITA9PT10fHxpLm9wdHMubG9vcHx8by5jdXJySW5kZXg8by5ncm91cC5sZW5ndGgtMSk/bi5pc0FjdGl2ZSYmXCJ2aWRlb1wiIT09aS5jb250ZW50VHlwZSYmKG4uJHByb2dyZXNzJiZlLmZhbmN5Ym94LmFuaW1hdGUobi4kcHJvZ3Jlc3Muc2hvdygpLHtzY2FsZVg6MX0saS5vcHRzLnNsaWRlU2hvdy5zcGVlZCksbi50aW1lcj1zZXRUaW1lb3V0KGZ1bmN0aW9uKCl7by5jdXJyZW50Lm9wdHMubG9vcHx8by5jdXJyZW50LmluZGV4IT1vLmdyb3VwLmxlbmd0aC0xP28ubmV4dCgpOm8uanVtcFRvKDApfSxpLm9wdHMuc2xpZGVTaG93LnNwZWVkKSk6KG4uc3RvcCgpLG8uaWRsZVNlY29uZHNDb3VudGVyPTAsby5zaG93Q29udHJvbHMoKSl9LGNsZWFyOmZ1bmN0aW9uKCl7dmFyIHQ9dGhpcztjbGVhclRpbWVvdXQodC50aW1lciksdC50aW1lcj1udWxsLHQuJHByb2dyZXNzJiZ0LiRwcm9ncmVzcy5yZW1vdmVBdHRyKFwic3R5bGVcIikuaGlkZSgpfSxzdGFydDpmdW5jdGlvbigpe3ZhciB0PXRoaXMsZT10Lmluc3RhbmNlLmN1cnJlbnQ7ZSYmKHQuJGJ1dHRvbi5hdHRyKFwidGl0bGVcIiwoZS5vcHRzLmkxOG5bZS5vcHRzLmxhbmddfHxlLm9wdHMuaTE4bi5lbikuUExBWV9TVE9QKS5yZW1vdmVDbGFzcyhcImZhbmN5Ym94LWJ1dHRvbi0tcGxheVwiKS5hZGRDbGFzcyhcImZhbmN5Ym94LWJ1dHRvbi0tcGF1c2VcIiksdC5pc0FjdGl2ZT0hMCxlLmlzQ29tcGxldGUmJnQuc2V0KCEwKSx0Lmluc3RhbmNlLnRyaWdnZXIoXCJvblNsaWRlU2hvd0NoYW5nZVwiLCEwKSl9LHN0b3A6ZnVuY3Rpb24oKXt2YXIgdD10aGlzLGU9dC5pbnN0YW5jZS5jdXJyZW50O3QuY2xlYXIoKSx0LiRidXR0b24uYXR0cihcInRpdGxlXCIsKGUub3B0cy5pMThuW2Uub3B0cy5sYW5nXXx8ZS5vcHRzLmkxOG4uZW4pLlBMQVlfU1RBUlQpLnJlbW92ZUNsYXNzKFwiZmFuY3lib3gtYnV0dG9uLS1wYXVzZVwiKS5hZGRDbGFzcyhcImZhbmN5Ym94LWJ1dHRvbi0tcGxheVwiKSx0LmlzQWN0aXZlPSExLHQuaW5zdGFuY2UudHJpZ2dlcihcIm9uU2xpZGVTaG93Q2hhbmdlXCIsITEpLHQuJHByb2dyZXNzJiZ0LiRwcm9ncmVzcy5yZW1vdmVBdHRyKFwic3R5bGVcIikuaGlkZSgpfSx0b2dnbGU6ZnVuY3Rpb24oKXt2YXIgdD10aGlzO3QuaXNBY3RpdmU/dC5zdG9wKCk6dC5zdGFydCgpfX0pLGUodCkub24oe1wib25Jbml0LmZiXCI6ZnVuY3Rpb24odCxlKXtlJiYhZS5TbGlkZVNob3cmJihlLlNsaWRlU2hvdz1uZXcgbihlKSl9LFwiYmVmb3JlU2hvdy5mYlwiOmZ1bmN0aW9uKHQsZSxuLG8pe3ZhciBpPWUmJmUuU2xpZGVTaG93O28/aSYmbi5vcHRzLnNsaWRlU2hvdy5hdXRvU3RhcnQmJmkuc3RhcnQoKTppJiZpLmlzQWN0aXZlJiZpLmNsZWFyKCl9LFwiYWZ0ZXJTaG93LmZiXCI6ZnVuY3Rpb24odCxlLG4pe3ZhciBvPWUmJmUuU2xpZGVTaG93O28mJm8uaXNBY3RpdmUmJm8uc2V0KCl9LFwiYWZ0ZXJLZXlkb3duLmZiXCI6ZnVuY3Rpb24obixvLGksYSxzKXt2YXIgcj1vJiZvLlNsaWRlU2hvdzshcnx8IWkub3B0cy5zbGlkZVNob3d8fDgwIT09cyYmMzIhPT1zfHxlKHQuYWN0aXZlRWxlbWVudCkuaXMoXCJidXR0b24sYSxpbnB1dFwiKXx8KGEucHJldmVudERlZmF1bHQoKSxyLnRvZ2dsZSgpKX0sXCJiZWZvcmVDbG9zZS5mYiBvbkRlYWN0aXZhdGUuZmJcIjpmdW5jdGlvbih0LGUpe3ZhciBuPWUmJmUuU2xpZGVTaG93O24mJm4uc3RvcCgpfX0pLGUodCkub24oXCJ2aXNpYmlsaXR5Y2hhbmdlXCIsZnVuY3Rpb24oKXt2YXIgbj1lLmZhbmN5Ym94LmdldEluc3RhbmNlKCksbz1uJiZuLlNsaWRlU2hvdztvJiZvLmlzQWN0aXZlJiYodC5oaWRkZW4/by5jbGVhcigpOm8uc2V0KCkpfSl9KGRvY3VtZW50LGpRdWVyeSksZnVuY3Rpb24odCxlKXtcInVzZSBzdHJpY3RcIjt2YXIgbj1mdW5jdGlvbigpe2Zvcih2YXIgZT1bW1wicmVxdWVzdEZ1bGxzY3JlZW5cIixcImV4aXRGdWxsc2NyZWVuXCIsXCJmdWxsc2NyZWVuRWxlbWVudFwiLFwiZnVsbHNjcmVlbkVuYWJsZWRcIixcImZ1bGxzY3JlZW5jaGFuZ2VcIixcImZ1bGxzY3JlZW5lcnJvclwiXSxbXCJ3ZWJraXRSZXF1ZXN0RnVsbHNjcmVlblwiLFwid2Via2l0RXhpdEZ1bGxzY3JlZW5cIixcIndlYmtpdEZ1bGxzY3JlZW5FbGVtZW50XCIsXCJ3ZWJraXRGdWxsc2NyZWVuRW5hYmxlZFwiLFwid2Via2l0ZnVsbHNjcmVlbmNoYW5nZVwiLFwid2Via2l0ZnVsbHNjcmVlbmVycm9yXCJdLFtcIndlYmtpdFJlcXVlc3RGdWxsU2NyZWVuXCIsXCJ3ZWJraXRDYW5jZWxGdWxsU2NyZWVuXCIsXCJ3ZWJraXRDdXJyZW50RnVsbFNjcmVlbkVsZW1lbnRcIixcIndlYmtpdENhbmNlbEZ1bGxTY3JlZW5cIixcIndlYmtpdGZ1bGxzY3JlZW5jaGFuZ2VcIixcIndlYmtpdGZ1bGxzY3JlZW5lcnJvclwiXSxbXCJtb3pSZXF1ZXN0RnVsbFNjcmVlblwiLFwibW96Q2FuY2VsRnVsbFNjcmVlblwiLFwibW96RnVsbFNjcmVlbkVsZW1lbnRcIixcIm1vekZ1bGxTY3JlZW5FbmFibGVkXCIsXCJtb3pmdWxsc2NyZWVuY2hhbmdlXCIsXCJtb3pmdWxsc2NyZWVuZXJyb3JcIl0sW1wibXNSZXF1ZXN0RnVsbHNjcmVlblwiLFwibXNFeGl0RnVsbHNjcmVlblwiLFwibXNGdWxsc2NyZWVuRWxlbWVudFwiLFwibXNGdWxsc2NyZWVuRW5hYmxlZFwiLFwiTVNGdWxsc2NyZWVuQ2hhbmdlXCIsXCJNU0Z1bGxzY3JlZW5FcnJvclwiXV0sbj17fSxvPTA7bzxlLmxlbmd0aDtvKyspe3ZhciBpPWVbb107aWYoaSYmaVsxXWluIHQpe2Zvcih2YXIgYT0wO2E8aS5sZW5ndGg7YSsrKW5bZVswXVthXV09aVthXTtyZXR1cm4gbn19cmV0dXJuITF9KCk7aWYobil7dmFyIG89e3JlcXVlc3Q6ZnVuY3Rpb24oZSl7ZT1lfHx0LmRvY3VtZW50RWxlbWVudCxlW24ucmVxdWVzdEZ1bGxzY3JlZW5dKGUuQUxMT1dfS0VZQk9BUkRfSU5QVVQpfSxleGl0OmZ1bmN0aW9uKCl7dFtuLmV4aXRGdWxsc2NyZWVuXSgpfSx0b2dnbGU6ZnVuY3Rpb24oZSl7ZT1lfHx0LmRvY3VtZW50RWxlbWVudCx0aGlzLmlzRnVsbHNjcmVlbigpP3RoaXMuZXhpdCgpOnRoaXMucmVxdWVzdChlKX0saXNGdWxsc2NyZWVuOmZ1bmN0aW9uKCl7cmV0dXJuIEJvb2xlYW4odFtuLmZ1bGxzY3JlZW5FbGVtZW50XSl9LGVuYWJsZWQ6ZnVuY3Rpb24oKXtyZXR1cm4gQm9vbGVhbih0W24uZnVsbHNjcmVlbkVuYWJsZWRdKX19O2UuZXh0ZW5kKCEwLGUuZmFuY3lib3guZGVmYXVsdHMse2J0blRwbDp7ZnVsbFNjcmVlbjonPGJ1dHRvbiBkYXRhLWZhbmN5Ym94LWZ1bGxzY3JlZW4gY2xhc3M9XCJmYW5jeWJveC1idXR0b24gZmFuY3lib3gtYnV0dG9uLS1mc2VudGVyXCIgdGl0bGU9XCJ7e0ZVTExfU0NSRUVOfX1cIj48c3ZnIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIiB2aWV3Qm94PVwiMCAwIDI0IDI0XCI+PHBhdGggZD1cIk03IDE0SDV2NWg1di0ySDd2LTN6bS0yLTRoMlY3aDNWNUg1djV6bTEyIDdoLTN2Mmg1di01aC0ydjN6TTE0IDV2MmgzdjNoMlY1aC01elwiLz48L3N2Zz48c3ZnIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIiB2aWV3Qm94PVwiMCAwIDI0IDI0XCI+PHBhdGggZD1cIk01IDE2aDN2M2gydi01SDV6bTMtOEg1djJoNVY1SDh6bTYgMTFoMnYtM2gzdi0yaC01em0yLTExVjVoLTJ2NWg1Vjh6XCIvPjwvc3ZnPjwvYnV0dG9uPid9LGZ1bGxTY3JlZW46e2F1dG9TdGFydDohMX19KSxlKHQpLm9uKG4uZnVsbHNjcmVlbmNoYW5nZSxmdW5jdGlvbigpe3ZhciB0PW8uaXNGdWxsc2NyZWVuKCksbj1lLmZhbmN5Ym94LmdldEluc3RhbmNlKCk7biYmKG4uY3VycmVudCYmXCJpbWFnZVwiPT09bi5jdXJyZW50LnR5cGUmJm4uaXNBbmltYXRpbmcmJihuLmlzQW5pbWF0aW5nPSExLG4udXBkYXRlKCEwLCEwLDApLG4uaXNDb21wbGV0ZXx8bi5jb21wbGV0ZSgpKSxuLnRyaWdnZXIoXCJvbkZ1bGxzY3JlZW5DaGFuZ2VcIix0KSxuLiRyZWZzLmNvbnRhaW5lci50b2dnbGVDbGFzcyhcImZhbmN5Ym94LWlzLWZ1bGxzY3JlZW5cIix0KSxuLiRyZWZzLnRvb2xiYXIuZmluZChcIltkYXRhLWZhbmN5Ym94LWZ1bGxzY3JlZW5dXCIpLnRvZ2dsZUNsYXNzKFwiZmFuY3lib3gtYnV0dG9uLS1mc2VudGVyXCIsIXQpLnRvZ2dsZUNsYXNzKFwiZmFuY3lib3gtYnV0dG9uLS1mc2V4aXRcIix0KSl9KX1lKHQpLm9uKHtcIm9uSW5pdC5mYlwiOmZ1bmN0aW9uKHQsZSl7dmFyIGk7aWYoIW4pcmV0dXJuIHZvaWQgZS4kcmVmcy50b29sYmFyLmZpbmQoXCJbZGF0YS1mYW5jeWJveC1mdWxsc2NyZWVuXVwiKS5yZW1vdmUoKTtlJiZlLmdyb3VwW2UuY3VyckluZGV4XS5vcHRzLmZ1bGxTY3JlZW4/KGk9ZS4kcmVmcy5jb250YWluZXIsaS5vbihcImNsaWNrLmZiLWZ1bGxzY3JlZW5cIixcIltkYXRhLWZhbmN5Ym94LWZ1bGxzY3JlZW5dXCIsZnVuY3Rpb24odCl7dC5zdG9wUHJvcGFnYXRpb24oKSx0LnByZXZlbnREZWZhdWx0KCksby50b2dnbGUoKX0pLGUub3B0cy5mdWxsU2NyZWVuJiYhMD09PWUub3B0cy5mdWxsU2NyZWVuLmF1dG9TdGFydCYmby5yZXF1ZXN0KCksZS5GdWxsU2NyZWVuPW8pOmUmJmUuJHJlZnMudG9vbGJhci5maW5kKFwiW2RhdGEtZmFuY3lib3gtZnVsbHNjcmVlbl1cIikuaGlkZSgpfSxcImFmdGVyS2V5ZG93bi5mYlwiOmZ1bmN0aW9uKHQsZSxuLG8saSl7ZSYmZS5GdWxsU2NyZWVuJiY3MD09PWkmJihvLnByZXZlbnREZWZhdWx0KCksZS5GdWxsU2NyZWVuLnRvZ2dsZSgpKX0sXCJiZWZvcmVDbG9zZS5mYlwiOmZ1bmN0aW9uKHQsZSl7ZSYmZS5GdWxsU2NyZWVuJiZlLiRyZWZzLmNvbnRhaW5lci5oYXNDbGFzcyhcImZhbmN5Ym94LWlzLWZ1bGxzY3JlZW5cIikmJm8uZXhpdCgpfX0pfShkb2N1bWVudCxqUXVlcnkpLGZ1bmN0aW9uKHQsZSl7XCJ1c2Ugc3RyaWN0XCI7dmFyIG49XCJmYW5jeWJveC10aHVtYnNcIjtlLmZhbmN5Ym94LmRlZmF1bHRzPWUuZXh0ZW5kKCEwLHtidG5UcGw6e3RodW1iczonPGJ1dHRvbiBkYXRhLWZhbmN5Ym94LXRodW1icyBjbGFzcz1cImZhbmN5Ym94LWJ1dHRvbiBmYW5jeWJveC1idXR0b24tLXRodW1ic1wiIHRpdGxlPVwie3tUSFVNQlN9fVwiPjxzdmcgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiIHZpZXdCb3g9XCIwIDAgMjQgMjRcIj48cGF0aCBkPVwiTTE0LjU5IDE0LjU5aDMuNzZ2My43NmgtMy43NnYtMy43NnptLTQuNDcgMGgzLjc2djMuNzZoLTMuNzZ2LTMuNzZ6bS00LjQ3IDBoMy43NnYzLjc2SDUuNjV2LTMuNzZ6bTguOTQtNC40N2gzLjc2djMuNzZoLTMuNzZ2LTMuNzZ6bS00LjQ3IDBoMy43NnYzLjc2aC0zLjc2di0zLjc2em0tNC40NyAwaDMuNzZ2My43Nkg1LjY1di0zLjc2em04Ljk0LTQuNDdoMy43NnYzLjc2aC0zLjc2VjUuNjV6bS00LjQ3IDBoMy43NnYzLjc2aC0zLjc2VjUuNjV6bS00LjQ3IDBoMy43NnYzLjc2SDUuNjVWNS42NXpcIi8+PC9zdmc+PC9idXR0b24+J30sdGh1bWJzOnthdXRvU3RhcnQ6ITEsaGlkZU9uQ2xvc2U6ITAscGFyZW50RWw6XCIuZmFuY3lib3gtY29udGFpbmVyXCIsYXhpczpcInlcIn19LGUuZmFuY3lib3guZGVmYXVsdHMpO3ZhciBvPWZ1bmN0aW9uKHQpe3RoaXMuaW5pdCh0KX07ZS5leHRlbmQoby5wcm90b3R5cGUseyRidXR0b246bnVsbCwkZ3JpZDpudWxsLCRsaXN0Om51bGwsaXNWaXNpYmxlOiExLGlzQWN0aXZlOiExLGluaXQ6ZnVuY3Rpb24odCl7dmFyIGU9dGhpcyxuPXQuZ3JvdXAsbz0wO2UuaW5zdGFuY2U9dCxlLm9wdHM9blt0LmN1cnJJbmRleF0ub3B0cy50aHVtYnMsdC5UaHVtYnM9ZSxlLiRidXR0b249dC4kcmVmcy50b29sYmFyLmZpbmQoXCJbZGF0YS1mYW5jeWJveC10aHVtYnNdXCIpO2Zvcih2YXIgaT0wLGE9bi5sZW5ndGg7aTxhJiYobltpXS50aHVtYiYmbysrLCEobz4xKSk7aSsrKTtvPjEmJmUub3B0cz8oZS4kYnV0dG9uLnJlbW92ZUF0dHIoXCJzdHlsZVwiKS5vbihcImNsaWNrXCIsZnVuY3Rpb24oKXtlLnRvZ2dsZSgpfSksZS5pc0FjdGl2ZT0hMCk6ZS4kYnV0dG9uLmhpZGUoKX0sY3JlYXRlOmZ1bmN0aW9uKCl7dmFyIHQsbz10aGlzLGk9by5pbnN0YW5jZSxhPW8ub3B0cy5wYXJlbnRFbCxzPVtdO28uJGdyaWR8fChvLiRncmlkPWUoJzxkaXYgY2xhc3M9XCInK24rXCIgXCIrbitcIi1cIitvLm9wdHMuYXhpcysnXCI+PC9kaXY+JykuYXBwZW5kVG8oaS4kcmVmcy5jb250YWluZXIuZmluZChhKS5hZGRCYWNrKCkuZmlsdGVyKGEpKSxvLiRncmlkLm9uKFwiY2xpY2tcIixcImFcIixmdW5jdGlvbigpe2kuanVtcFRvKGUodGhpcykuYXR0cihcImRhdGEtaW5kZXhcIikpfSkpLG8uJGxpc3R8fChvLiRsaXN0PWUoJzxkaXYgY2xhc3M9XCInK24rJ19fbGlzdFwiPicpLmFwcGVuZFRvKG8uJGdyaWQpKSxlLmVhY2goaS5ncm91cCxmdW5jdGlvbihlLG4pe3Q9bi50aHVtYix0fHxcImltYWdlXCIhPT1uLnR5cGV8fCh0PW4uc3JjKSxzLnB1c2goJzxhIGhyZWY9XCJqYXZhc2NyaXB0OjtcIiB0YWJpbmRleD1cIjBcIiBkYXRhLWluZGV4PVwiJytlKydcIicrKHQmJnQubGVuZ3RoPycgc3R5bGU9XCJiYWNrZ3JvdW5kLWltYWdlOnVybCgnK3QrJylcIic6J2NsYXNzPVwiZmFuY3lib3gtdGh1bWJzLW1pc3NpbmdcIicpK1wiPjwvYT5cIil9KSxvLiRsaXN0WzBdLmlubmVySFRNTD1zLmpvaW4oXCJcIiksXCJ4XCI9PT1vLm9wdHMuYXhpcyYmby4kbGlzdC53aWR0aChwYXJzZUludChvLiRncmlkLmNzcyhcInBhZGRpbmctcmlnaHRcIiksMTApK2kuZ3JvdXAubGVuZ3RoKm8uJGxpc3QuY2hpbGRyZW4oKS5lcSgwKS5vdXRlcldpZHRoKCEwKSl9LGZvY3VzOmZ1bmN0aW9uKHQpe3ZhciBlLG4sbz10aGlzLGk9by4kbGlzdCxhPW8uJGdyaWQ7by5pbnN0YW5jZS5jdXJyZW50JiYoZT1pLmNoaWxkcmVuKCkucmVtb3ZlQ2xhc3MoXCJmYW5jeWJveC10aHVtYnMtYWN0aXZlXCIpLmZpbHRlcignW2RhdGEtaW5kZXg9XCInK28uaW5zdGFuY2UuY3VycmVudC5pbmRleCsnXCJdJykuYWRkQ2xhc3MoXCJmYW5jeWJveC10aHVtYnMtYWN0aXZlXCIpLG49ZS5wb3NpdGlvbigpLFwieVwiPT09by5vcHRzLmF4aXMmJihuLnRvcDwwfHxuLnRvcD5pLmhlaWdodCgpLWUub3V0ZXJIZWlnaHQoKSk/aS5zdG9wKCkuYW5pbWF0ZSh7c2Nyb2xsVG9wOmkuc2Nyb2xsVG9wKCkrbi50b3B9LHQpOlwieFwiPT09by5vcHRzLmF4aXMmJihuLmxlZnQ8YS5zY3JvbGxMZWZ0KCl8fG4ubGVmdD5hLnNjcm9sbExlZnQoKSsoYS53aWR0aCgpLWUub3V0ZXJXaWR0aCgpKSkmJmkucGFyZW50KCkuc3RvcCgpLmFuaW1hdGUoe3Njcm9sbExlZnQ6bi5sZWZ0fSx0KSl9LHVwZGF0ZTpmdW5jdGlvbigpe3ZhciB0PXRoaXM7dC5pbnN0YW5jZS4kcmVmcy5jb250YWluZXIudG9nZ2xlQ2xhc3MoXCJmYW5jeWJveC1zaG93LXRodW1ic1wiLHRoaXMuaXNWaXNpYmxlKSx0LmlzVmlzaWJsZT8odC4kZ3JpZHx8dC5jcmVhdGUoKSx0Lmluc3RhbmNlLnRyaWdnZXIoXCJvblRodW1ic1Nob3dcIiksdC5mb2N1cygwKSk6dC4kZ3JpZCYmdC5pbnN0YW5jZS50cmlnZ2VyKFwib25UaHVtYnNIaWRlXCIpLHQuaW5zdGFuY2UudXBkYXRlKCl9LGhpZGU6ZnVuY3Rpb24oKXt0aGlzLmlzVmlzaWJsZT0hMSx0aGlzLnVwZGF0ZSgpfSxzaG93OmZ1bmN0aW9uKCl7dGhpcy5pc1Zpc2libGU9ITAsdGhpcy51cGRhdGUoKX0sdG9nZ2xlOmZ1bmN0aW9uKCl7dGhpcy5pc1Zpc2libGU9IXRoaXMuaXNWaXNpYmxlLHRoaXMudXBkYXRlKCl9fSksZSh0KS5vbih7XCJvbkluaXQuZmJcIjpmdW5jdGlvbih0LGUpe3ZhciBuO2UmJiFlLlRodW1icyYmKG49bmV3IG8oZSksbi5pc0FjdGl2ZSYmITA9PT1uLm9wdHMuYXV0b1N0YXJ0JiZuLnNob3coKSl9LFwiYmVmb3JlU2hvdy5mYlwiOmZ1bmN0aW9uKHQsZSxuLG8pe3ZhciBpPWUmJmUuVGh1bWJzO2kmJmkuaXNWaXNpYmxlJiZpLmZvY3VzKG8/MDoyNTApfSxcImFmdGVyS2V5ZG93bi5mYlwiOmZ1bmN0aW9uKHQsZSxuLG8saSl7dmFyIGE9ZSYmZS5UaHVtYnM7YSYmYS5pc0FjdGl2ZSYmNzE9PT1pJiYoby5wcmV2ZW50RGVmYXVsdCgpLGEudG9nZ2xlKCkpfSxcImJlZm9yZUNsb3NlLmZiXCI6ZnVuY3Rpb24odCxlKXt2YXIgbj1lJiZlLlRodW1icztuJiZuLmlzVmlzaWJsZSYmITEhPT1uLm9wdHMuaGlkZU9uQ2xvc2UmJm4uJGdyaWQuaGlkZSgpfX0pfShkb2N1bWVudCxqUXVlcnkpLGZ1bmN0aW9uKHQsZSl7XCJ1c2Ugc3RyaWN0XCI7ZnVuY3Rpb24gbih0KXt2YXIgZT17XCImXCI6XCImYW1wO1wiLFwiPFwiOlwiJmx0O1wiLFwiPlwiOlwiJmd0O1wiLCdcIic6XCImcXVvdDtcIixcIidcIjpcIiYjMzk7XCIsXCIvXCI6XCImI3gyRjtcIixcImBcIjpcIiYjeDYwO1wiLFwiPVwiOlwiJiN4M0Q7XCJ9O3JldHVybiBTdHJpbmcodCkucmVwbGFjZSgvWyY8PlwiJ2A9XFwvXS9nLGZ1bmN0aW9uKHQpe3JldHVybiBlW3RdfSl9ZS5leHRlbmQoITAsZS5mYW5jeWJveC5kZWZhdWx0cyx7YnRuVHBsOntzaGFyZTonPGJ1dHRvbiBkYXRhLWZhbmN5Ym94LXNoYXJlIGNsYXNzPVwiZmFuY3lib3gtYnV0dG9uIGZhbmN5Ym94LWJ1dHRvbi0tc2hhcmVcIiB0aXRsZT1cInt7U0hBUkV9fVwiPjxzdmcgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiIHZpZXdCb3g9XCIwIDAgMjQgMjRcIj48cGF0aCBkPVwiTTIuNTUgMTljMS40LTguNCA5LjEtOS44IDExLjktOS44VjVsNyA3LTcgNi4zdi0zLjVjLTIuOCAwLTEwLjUgMi4xLTExLjkgNC4yelwiLz48L3N2Zz48L2J1dHRvbj4nfSxzaGFyZTp7dXJsOmZ1bmN0aW9uKHQsZSl7cmV0dXJuIXQuY3VycmVudEhhc2gmJlwiaW5saW5lXCIhPT1lLnR5cGUmJlwiaHRtbFwiIT09ZS50eXBlJiYoZS5vcmlnU3JjfHxlLnNyYyl8fHdpbmRvdy5sb2NhdGlvbn0sXG50cGw6JzxkaXYgY2xhc3M9XCJmYW5jeWJveC1zaGFyZVwiPjxoMT57e1NIQVJFfX08L2gxPjxwPjxhIGNsYXNzPVwiZmFuY3lib3gtc2hhcmVfX2J1dHRvbiBmYW5jeWJveC1zaGFyZV9fYnV0dG9uLS1mYlwiIGhyZWY9XCJodHRwczovL3d3dy5mYWNlYm9vay5jb20vc2hhcmVyL3NoYXJlci5waHA/dT17e3VybH19XCI+PHN2ZyB2aWV3Qm94PVwiMCAwIDUxMiA1MTJcIiB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCI+PHBhdGggZD1cIm0yODcgNDU2di0yOTljMC0yMSA2LTM1IDM1LTM1aDM4di02M2MtNy0xLTI5LTMtNTUtMy01NCAwLTkxIDMzLTkxIDk0djMwNm0xNDMtMjU0aC0yMDV2NzJoMTk2XCIgLz48L3N2Zz48c3Bhbj5GYWNlYm9vazwvc3Bhbj48L2E+PGEgY2xhc3M9XCJmYW5jeWJveC1zaGFyZV9fYnV0dG9uIGZhbmN5Ym94LXNoYXJlX19idXR0b24tLXR3XCIgaHJlZj1cImh0dHBzOi8vdHdpdHRlci5jb20vaW50ZW50L3R3ZWV0P3VybD17e3VybH19JnRleHQ9e3tkZXNjcn19XCI+PHN2ZyB2aWV3Qm94PVwiMCAwIDUxMiA1MTJcIiB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCI+PHBhdGggZD1cIm00NTYgMTMzYy0xNCA3LTMxIDExLTQ3IDEzIDE3LTEwIDMwLTI3IDM3LTQ2LTE1IDEwLTM0IDE2LTUyIDIwLTYxLTYyLTE1Ny03LTE0MSA3NS02OC0zLTEyOS0zNS0xNjktODUtMjIgMzctMTEgODYgMjYgMTA5LTEzIDAtMjYtNC0zNy05IDAgMzkgMjggNzIgNjUgODAtMTIgMy0yNSA0LTM3IDIgMTAgMzMgNDEgNTcgNzcgNTctNDIgMzAtNzcgMzgtMTIyIDM0IDE3MCAxMTEgMzc4LTMyIDM1OS0yMDggMTYtMTEgMzAtMjUgNDEtNDJ6XCIgLz48L3N2Zz48c3Bhbj5Ud2l0dGVyPC9zcGFuPjwvYT48YSBjbGFzcz1cImZhbmN5Ym94LXNoYXJlX19idXR0b24gZmFuY3lib3gtc2hhcmVfX2J1dHRvbi0tcHRcIiBocmVmPVwiaHR0cHM6Ly93d3cucGludGVyZXN0LmNvbS9waW4vY3JlYXRlL2J1dHRvbi8/dXJsPXt7dXJsfX0mZGVzY3JpcHRpb249e3tkZXNjcn19Jm1lZGlhPXt7bWVkaWF9fVwiPjxzdmcgdmlld0JveD1cIjAgMCA1MTIgNTEyXCIgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiPjxwYXRoIGQ9XCJtMjY1IDU2Yy0xMDkgMC0xNjQgNzgtMTY0IDE0NCAwIDM5IDE1IDc0IDQ3IDg3IDUgMiAxMCAwIDEyLTVsNC0xOWMyLTYgMS04LTMtMTMtOS0xMS0xNS0yNS0xNS00NSAwLTU4IDQzLTExMCAxMTMtMTEwIDYyIDAgOTYgMzggOTYgODggMCA2Ny0zMCAxMjItNzMgMTIyLTI0IDAtNDItMTktMzYtNDQgNi0yOSAyMC02MCAyMC04MSAwLTE5LTEwLTM1LTMxLTM1LTI1IDAtNDQgMjYtNDQgNjAgMCAyMSA3IDM2IDcgMzZsLTMwIDEyNWMtOCAzNy0xIDgzIDAgODcgMCAzIDQgNCA1IDIgMi0zIDMyLTM5IDQyLTc1bDE2LTY0YzggMTYgMzEgMjkgNTYgMjkgNzQgMCAxMjQtNjcgMTI0LTE1NyAwLTY5LTU4LTEzMi0xNDYtMTMyelwiIGZpbGw9XCIjZmZmXCIvPjwvc3ZnPjxzcGFuPlBpbnRlcmVzdDwvc3Bhbj48L2E+PC9wPjxwPjxpbnB1dCBjbGFzcz1cImZhbmN5Ym94LXNoYXJlX19pbnB1dFwiIHR5cGU9XCJ0ZXh0XCIgdmFsdWU9XCJ7e3VybF9yYXd9fVwiIG9uY2xpY2s9XCJzZWxlY3QoKVwiIC8+PC9wPjwvZGl2Pid9fSksZSh0KS5vbihcImNsaWNrXCIsXCJbZGF0YS1mYW5jeWJveC1zaGFyZV1cIixmdW5jdGlvbigpe3ZhciB0LG8saT1lLmZhbmN5Ym94LmdldEluc3RhbmNlKCksYT1pLmN1cnJlbnR8fG51bGw7YSYmKFwiZnVuY3Rpb25cIj09PWUudHlwZShhLm9wdHMuc2hhcmUudXJsKSYmKHQ9YS5vcHRzLnNoYXJlLnVybC5hcHBseShhLFtpLGFdKSksbz1hLm9wdHMuc2hhcmUudHBsLnJlcGxhY2UoL1xce1xce21lZGlhXFx9XFx9L2csXCJpbWFnZVwiPT09YS50eXBlP2VuY29kZVVSSUNvbXBvbmVudChhLnNyYyk6XCJcIikucmVwbGFjZSgvXFx7XFx7dXJsXFx9XFx9L2csZW5jb2RlVVJJQ29tcG9uZW50KHQpKS5yZXBsYWNlKC9cXHtcXHt1cmxfcmF3XFx9XFx9L2csbih0KSkucmVwbGFjZSgvXFx7XFx7ZGVzY3JcXH1cXH0vZyxpLiRjYXB0aW9uP2VuY29kZVVSSUNvbXBvbmVudChpLiRjYXB0aW9uLnRleHQoKSk6XCJcIiksZS5mYW5jeWJveC5vcGVuKHtzcmM6aS50cmFuc2xhdGUoaSxvKSx0eXBlOlwiaHRtbFwiLG9wdHM6e3RvdWNoOiExLGFuaW1hdGlvbkVmZmVjdDohMSxhZnRlckxvYWQ6ZnVuY3Rpb24odCxlKXtpLiRyZWZzLmNvbnRhaW5lci5vbmUoXCJiZWZvcmVDbG9zZS5mYlwiLGZ1bmN0aW9uKCl7dC5jbG9zZShudWxsLDApfSksZS4kY29udGVudC5maW5kKFwiLmZhbmN5Ym94LXNoYXJlX19idXR0b25cIikuY2xpY2soZnVuY3Rpb24oKXtyZXR1cm4gd2luZG93Lm9wZW4odGhpcy5ocmVmLFwiU2hhcmVcIixcIndpZHRoPTU1MCwgaGVpZ2h0PTQ1MFwiKSwhMX0pfSxtb2JpbGU6e2F1dG9Gb2N1czohMX19fSkpfSl9KGRvY3VtZW50LGpRdWVyeSksZnVuY3Rpb24odCxlLG4pe1widXNlIHN0cmljdFwiO2Z1bmN0aW9uIG8oKXt2YXIgZT10LmxvY2F0aW9uLmhhc2guc3Vic3RyKDEpLG49ZS5zcGxpdChcIi1cIiksbz1uLmxlbmd0aD4xJiYvXlxcKz9cXGQrJC8udGVzdChuW24ubGVuZ3RoLTFdKT9wYXJzZUludChuLnBvcCgtMSksMTApfHwxOjEsaT1uLmpvaW4oXCItXCIpO3JldHVybntoYXNoOmUsaW5kZXg6bzwxPzE6byxnYWxsZXJ5Oml9fWZ1bmN0aW9uIGkodCl7XCJcIiE9PXQuZ2FsbGVyeSYmbihcIltkYXRhLWZhbmN5Ym94PSdcIituLmVzY2FwZVNlbGVjdG9yKHQuZ2FsbGVyeSkrXCInXVwiKS5lcSh0LmluZGV4LTEpLmZvY3VzKCkudHJpZ2dlcihcImNsaWNrLmZiLXN0YXJ0XCIpfWZ1bmN0aW9uIGEodCl7dmFyIGUsbjtyZXR1cm4hIXQmJihlPXQuY3VycmVudD90LmN1cnJlbnQub3B0czp0Lm9wdHMsXCJcIiE9PShuPWUuaGFzaHx8KGUuJG9yaWc/ZS4kb3JpZy5kYXRhKFwiZmFuY3lib3hcIil8fGUuJG9yaWcuZGF0YShcImZhbmN5Ym94LXRyaWdnZXJcIik6XCJcIikpJiZuKX1uLmVzY2FwZVNlbGVjdG9yfHwobi5lc2NhcGVTZWxlY3Rvcj1mdW5jdGlvbih0KXtyZXR1cm4odCtcIlwiKS5yZXBsYWNlKC8oW1xcMC1cXHgxZlxceDdmXXxeLT9cXGQpfF4tJHxbXlxceDgwLVxcdUZGRkZcXHctXS9nLGZ1bmN0aW9uKHQsZSl7cmV0dXJuIGU/XCJcXDBcIj09PXQ/XCLvv71cIjp0LnNsaWNlKDAsLTEpK1wiXFxcXFwiK3QuY2hhckNvZGVBdCh0Lmxlbmd0aC0xKS50b1N0cmluZygxNikrXCIgXCI6XCJcXFxcXCIrdH0pfSksbihmdW5jdGlvbigpeyExIT09bi5mYW5jeWJveC5kZWZhdWx0cy5oYXNoJiYobihlKS5vbih7XCJvbkluaXQuZmJcIjpmdW5jdGlvbih0LGUpe3ZhciBuLGk7ITEhPT1lLmdyb3VwW2UuY3VyckluZGV4XS5vcHRzLmhhc2gmJihuPW8oKSwoaT1hKGUpKSYmbi5nYWxsZXJ5JiZpPT1uLmdhbGxlcnkmJihlLmN1cnJJbmRleD1uLmluZGV4LTEpKX0sXCJiZWZvcmVTaG93LmZiXCI6ZnVuY3Rpb24obixvLGkscyl7dmFyIHI7aSYmITEhPT1pLm9wdHMuaGFzaCYmKHI9YShvKSkmJihvLmN1cnJlbnRIYXNoPXIrKG8uZ3JvdXAubGVuZ3RoPjE/XCItXCIrKGkuaW5kZXgrMSk6XCJcIiksdC5sb2NhdGlvbi5oYXNoIT09XCIjXCIrby5jdXJyZW50SGFzaCYmKHMmJiFvLm9yaWdIYXNoJiYoby5vcmlnSGFzaD10LmxvY2F0aW9uLmhhc2gpLG8uaGFzaFRpbWVyJiZjbGVhclRpbWVvdXQoby5oYXNoVGltZXIpLG8uaGFzaFRpbWVyPXNldFRpbWVvdXQoZnVuY3Rpb24oKXtcInJlcGxhY2VTdGF0ZVwiaW4gdC5oaXN0b3J5Pyh0Lmhpc3Rvcnlbcz9cInB1c2hTdGF0ZVwiOlwicmVwbGFjZVN0YXRlXCJdKHt9LGUudGl0bGUsdC5sb2NhdGlvbi5wYXRobmFtZSt0LmxvY2F0aW9uLnNlYXJjaCtcIiNcIitvLmN1cnJlbnRIYXNoKSxzJiYoby5oYXNDcmVhdGVkSGlzdG9yeT0hMCkpOnQubG9jYXRpb24uaGFzaD1vLmN1cnJlbnRIYXNoLG8uaGFzaFRpbWVyPW51bGx9LDMwMCkpKX0sXCJiZWZvcmVDbG9zZS5mYlwiOmZ1bmN0aW9uKG4sbyxpKXtpJiYhMSE9PWkub3B0cy5oYXNoJiYoY2xlYXJUaW1lb3V0KG8uaGFzaFRpbWVyKSxvLmN1cnJlbnRIYXNoJiZvLmhhc0NyZWF0ZWRIaXN0b3J5P3QuaGlzdG9yeS5iYWNrKCk6by5jdXJyZW50SGFzaCYmKFwicmVwbGFjZVN0YXRlXCJpbiB0Lmhpc3Rvcnk/dC5oaXN0b3J5LnJlcGxhY2VTdGF0ZSh7fSxlLnRpdGxlLHQubG9jYXRpb24ucGF0aG5hbWUrdC5sb2NhdGlvbi5zZWFyY2grKG8ub3JpZ0hhc2h8fFwiXCIpKTp0LmxvY2F0aW9uLmhhc2g9by5vcmlnSGFzaCksby5jdXJyZW50SGFzaD1udWxsKX19KSxuKHQpLm9uKFwiaGFzaGNoYW5nZS5mYlwiLGZ1bmN0aW9uKCl7dmFyIHQ9bygpLGU9bnVsbDtuLmVhY2gobihcIi5mYW5jeWJveC1jb250YWluZXJcIikuZ2V0KCkucmV2ZXJzZSgpLGZ1bmN0aW9uKHQsbyl7dmFyIGk9bihvKS5kYXRhKFwiRmFuY3lCb3hcIik7aWYoaSYmaS5jdXJyZW50SGFzaClyZXR1cm4gZT1pLCExfSksZT9lLmN1cnJlbnRIYXNoPT09dC5nYWxsZXJ5K1wiLVwiK3QuaW5kZXh8fDE9PT10LmluZGV4JiZlLmN1cnJlbnRIYXNoPT10LmdhbGxlcnl8fChlLmN1cnJlbnRIYXNoPW51bGwsZS5jbG9zZSgpKTpcIlwiIT09dC5nYWxsZXJ5JiZpKHQpfSksc2V0VGltZW91dChmdW5jdGlvbigpe24uZmFuY3lib3guZ2V0SW5zdGFuY2UoKXx8aShvKCkpfSw1MCkpfSl9KHdpbmRvdyxkb2N1bWVudCxqUXVlcnkpLGZ1bmN0aW9uKHQsZSl7XCJ1c2Ugc3RyaWN0XCI7dmFyIG49KG5ldyBEYXRlKS5nZXRUaW1lKCk7ZSh0KS5vbih7XCJvbkluaXQuZmJcIjpmdW5jdGlvbih0LGUsbyl7ZS4kcmVmcy5zdGFnZS5vbihcIm1vdXNld2hlZWwgRE9NTW91c2VTY3JvbGwgd2hlZWwgTW96TW91c2VQaXhlbFNjcm9sbFwiLGZ1bmN0aW9uKHQpe3ZhciBvPWUuY3VycmVudCxpPShuZXcgRGF0ZSkuZ2V0VGltZSgpO2UuZ3JvdXAubGVuZ3RoPDJ8fCExPT09by5vcHRzLndoZWVsfHxcImF1dG9cIj09PW8ub3B0cy53aGVlbCYmXCJpbWFnZVwiIT09by50eXBlfHwodC5wcmV2ZW50RGVmYXVsdCgpLHQuc3RvcFByb3BhZ2F0aW9uKCksby4kc2xpZGUuaGFzQ2xhc3MoXCJmYW5jeWJveC1hbmltYXRlZFwiKXx8KHQ9dC5vcmlnaW5hbEV2ZW50fHx0LGktbjwyNTB8fChuPWksZVsoLXQuZGVsdGFZfHwtdC5kZWx0YVh8fHQud2hlZWxEZWx0YXx8LXQuZGV0YWlsKTwwP1wibmV4dFwiOlwicHJldmlvdXNcIl0oKSkpKX0pfX0pfShkb2N1bWVudCxqUXVlcnkpOyIsIi8qIVxuICogQGZpbGVPdmVydmlldyBUb3VjaFN3aXBlIC0galF1ZXJ5IFBsdWdpblxuICogQHZlcnNpb24gMS42LjE4XG4gKlxuICogQGF1dGhvciBNYXR0IEJyeXNvbiBodHRwOi8vd3d3LmdpdGh1Yi5jb20vbWF0dGJyeXNvblxuICogQHNlZSBodHRwczovL2dpdGh1Yi5jb20vbWF0dGJyeXNvbi9Ub3VjaFN3aXBlLUpxdWVyeS1QbHVnaW5cbiAqIEBzZWUgaHR0cDovL2xhYnMucmFtcGludGVyYWN0aXZlLmNvLnVrL3RvdWNoU3dpcGUvXG4gKiBAc2VlIGh0dHA6Ly9wbHVnaW5zLmpxdWVyeS5jb20vcHJvamVjdC90b3VjaFN3aXBlXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IChjKSAyMDEwLTIwMTUgTWF0dCBCcnlzb25cbiAqIER1YWwgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBvciBHUEwgVmVyc2lvbiAyIGxpY2Vuc2VzLlxuICpcbiAqL1xuXG4vKlxuICpcbiAqIENoYW5nZWxvZ1xuICogJERhdGU6IDIwMTAtMTItMTIgKFdlZCwgMTIgRGVjIDIwMTApICRcbiAqICR2ZXJzaW9uOiAxLjAuMFxuICogJHZlcnNpb246IDEuMC4xIC0gcmVtb3ZlZCBtdWx0aWJ5dGUgY29tbWVudHNcbiAqXG4gKiAkRGF0ZTogMjAxMS0yMS0wMiAoTW9uLCAyMSBGZWIgMjAxMSkgJFxuICogJHZlcnNpb246IDEuMS4wIFx0LSBhZGRlZCBhbGxvd1BhZ2VTY3JvbGwgcHJvcGVydHkgdG8gYWxsb3cgc3dpcGluZyBhbmQgc2Nyb2xsaW5nIG9mIHBhZ2VcbiAqXHRcdFx0XHRcdC0gY2hhbmdlZCBoYW5kbGVyIHNpZ25hdHVyZXMgc28gb25lIGhhbmRsZXIgY2FuIGJlIHVzZWQgZm9yIG11bHRpcGxlIGV2ZW50c1xuICogJERhdGU6IDIwMTEtMjMtMDIgKFdlZCwgMjMgRmViIDIwMTEpICRcbiAqICR2ZXJzaW9uOiAxLjIuMCBcdC0gYWRkZWQgY2xpY2sgaGFuZGxlci4gVGhpcyBpcyBmaXJlZCBpZiB0aGUgdXNlciBzaW1wbHkgY2xpY2tzIGFuZCBkb2VzIG5vdCBzd2lwZS4gVGhlIGV2ZW50IG9iamVjdCBhbmQgY2xpY2sgdGFyZ2V0IGFyZSBwYXNzZWQgdG8gaGFuZGxlci5cbiAqXHRcdFx0XHRcdC0gSWYgeW91IHVzZSB0aGUgaHR0cDovL2NvZGUuZ29vZ2xlLmNvbS9wL2pxdWVyeS11aS1mb3ItaXBhZC1hbmQtaXBob25lLyBwbHVnaW4sIHlvdSBjYW4gYWxzbyBhc3NpZ24galF1ZXJ5IG1vdXNlIGV2ZW50cyB0byBjaGlsZHJlbiBvZiBhIHRvdWNoU3dpcGUgb2JqZWN0LlxuICogJHZlcnNpb246IDEuMi4xIFx0LSByZW1vdmVkIGNvbnNvbGUgbG9nIVxuICpcbiAqICR2ZXJzaW9uOiAxLjIuMiBcdC0gRml4ZWQgYnVnIHdoZXJlIHNjb3BlIHdhcyBub3QgcHJlc2VydmVkIGluIGNhbGxiYWNrIG1ldGhvZHMuXG4gKlxuICogJERhdGU6IDIwMTEtMjgtMDQgKFRodXJzLCAyOCBBcHJpbCAyMDExKSAkXG4gKiAkdmVyc2lvbjogMS4yLjQgXHQtIENoYW5nZWQgbGljZW5jZSB0ZXJtcyB0byBiZSBNSVQgb3IgR1BMIGlubGluZSB3aXRoIGpRdWVyeS4gQWRkZWQgY2hlY2sgZm9yIHN1cHBvcnQgb2YgdG91Y2ggZXZlbnRzIHRvIHN0b3Agbm9uIGNvbXBhdGlibGUgYnJvd3NlcnMgZXJyb3JpbmcuXG4gKlxuICogJERhdGU6IDIwMTEtMjctMDkgKFR1ZXMsIDI3IFNlcHRlbWJlciAyMDExKSAkXG4gKiAkdmVyc2lvbjogMS4yLjUgXHQtIEFkZGVkIHN1cHBvcnQgZm9yIHRlc3Rpbmcgc3dpcGVzIHdpdGggbW91c2Ugb24gZGVza3RvcCBicm93c2VyICh0aGFua3MgdG8gaHR0cHM6Ly9naXRodWIuY29tL2pvZWxoeSlcbiAqXG4gKiAkRGF0ZTogMjAxMi0xNC0wNSAoTW9uLCAxNCBNYXkgMjAxMikgJFxuICogJHZlcnNpb246IDEuMi42IFx0LSBBZGRlZCB0aW1lVGhyZXNob2xkIGJldHdlZW4gc3RhcnQgYW5kIGVuZCB0b3VjaCwgc28gdXNlciBjYW4gaWdub3JlIHNsb3cgc3dpcGVzICh0aGFua3MgdG8gTWFyayBDaGFzZSkuIERlZmF1bHQgaXMgbnVsbCwgYWxsIHN3aXBlcyBhcmUgZGV0ZWN0ZWRcbiAqXG4gKiAkRGF0ZTogMjAxMi0wNS0wNiAoVHVlcywgMDUgSnVuZSAyMDEyKSAkXG4gKiAkdmVyc2lvbjogMS4yLjcgXHQtIENoYW5nZWQgdGltZSB0aHJlc2hvbGQgdG8gaGF2ZSBudWxsIGRlZmF1bHQgZm9yIGJhY2t3YXJkcyBjb21wYXRpYmlsaXR5LiBBZGRlZCBkdXJhdGlvbiBwYXJhbSBwYXNzZWQgYmFjayBpbiBldmVudHMsIGFuZCByZWZhY3RvcmVkIGhvdyB0aW1lIGlzIGhhbmRsZWQuXG4gKlxuICogJERhdGU6IDIwMTItMDUtMDYgKFR1ZXMsIDA1IEp1bmUgMjAxMikgJFxuICogJHZlcnNpb246IDEuMi44IFx0LSBBZGRlZCB0aGUgcG9zc2liaWxpdHkgdG8gcmV0dXJuIGEgdmFsdWUgbGlrZSBudWxsIG9yIGZhbHNlIGluIHRoZSB0cmlnZ2VyIGNhbGxiYWNrLiBJbiB0aGF0IHdheSB3ZSBjYW4gY29udHJvbCB3aGVuIHRoZSB0b3VjaCBzdGFydC9tb3ZlIHNob3VsZCB0YWtlIGVmZmVjdCBvciBub3QgKHNpbXBseSBieSByZXR1cm5pbmcgaW4gc29tZSBjYXNlcyByZXR1cm4gbnVsbDsgb3IgcmV0dXJuIGZhbHNlOykgVGhpcyBlZmZlY3RzIHRoZSBvbnRvdWNoc3RhcnQvb250b3VjaG1vdmUgZXZlbnQuXG4gKlxuICogJERhdGU6IDIwMTItMDYtMDYgKFdlZCwgMDYgSnVuZSAyMDEyKSAkXG4gKiAkdmVyc2lvbjogMS4zLjAgXHQtIFJlZmFjdG9yZWQgd2hvbGUgcGx1Z2luIHRvIGFsbG93IGZvciBtZXRob2RzIHRvIGJlIGV4ZWN1dGVkLCBhcyB3ZWxsIGFzIGV4cG9zZWQgZGVmYXVsdHMgZm9yIHVzZXIgb3ZlcnJpZGUuIEFkZGVkICdlbmFibGUnLCAnZGlzYWJsZScsIGFuZCAnZGVzdHJveScgbWV0aG9kc1xuICpcbiAqICREYXRlOiAyMDEyLTA1LTA2IChGcmksIDA1IEp1bmUgMjAxMikgJFxuICogJHZlcnNpb246IDEuMy4xIFx0LSBCdWcgZml4ZXMgIC0gYmluZCgpIHdpdGggZmFsc2UgYXMgbGFzdCBhcmd1bWVudCBpcyBubyBsb25nZXIgc3VwcG9ydGVkIGluIGpRdWVyeSAxLjYsIGFsc28sIGlmIHlvdSBqdXN0IGNsaWNrLCB0aGUgZHVyYXRpb24gaXMgbm93IHJldHVybmVkIGNvcnJlY3RseS5cbiAqXG4gKiAkRGF0ZTogMjAxMi0yOS0wNyAoU3VuLCAyOSBKdWx5IDIwMTIpICRcbiAqICR2ZXJzaW9uOiAxLjMuMlx0LSBBZGRlZCBmYWxsYmFja1RvTW91c2VFdmVudHMgb3B0aW9uIHRvIE5PVCBjYXB0dXJlIG1vdXNlIGV2ZW50cyBvbiBub24gdG91Y2ggZGV2aWNlcy5cbiAqIFx0XHRcdC0gQWRkZWQgXCJhbGxcIiBmaW5nZXJzIHZhbHVlIHRvIHRoZSBmaW5nZXJzIHByb3BlcnR5LCBzbyBhbnkgY29tYmluYXRpb24gb2YgZmluZ2VycyB0cmlnZ2VycyB0aGUgc3dpcGUsIGFsbG93aW5nIGV2ZW50IGhhbmRsZXJzIHRvIGNoZWNrIHRoZSBmaW5nZXIgY291bnRcbiAqXG4gKiAkRGF0ZTogMjAxMi0wOS0wOCAoVGh1cnMsIDkgQXVnIDIwMTIpICRcbiAqICR2ZXJzaW9uOiAxLjMuM1x0LSBDb2RlIHRpZHkgcHJlcCBmb3IgbWluIHZlcnNpb25cbiAqXG4gKiAkRGF0ZTogMjAxMi0wNC0xMCAod2VkLCA0IE9jdCAyMDEyKSAkXG4gKiAkdmVyc2lvbjogMS40LjBcdC0gQWRkZWQgcGluY2ggc3VwcG9ydCwgcGluY2hJbiBhbmQgcGluY2hPdXRcbiAqXG4gKiAkRGF0ZTogMjAxMi0xMS0xMCAoVGh1cnMsIDExIE9jdCAyMDEyKSAkXG4gKiAkdmVyc2lvbjogMS41LjBcdC0gQWRkZWQgZXhjbHVkZWRFbGVtZW50cywgYSBqcXVlcnkgc2VsZWN0b3IgdGhhdCBzcGVjaWZpZXMgY2hpbGQgZWxlbWVudHMgdGhhdCBkbyBOT1QgdHJpZ2dlciBzd2lwZXMuIEJ5IGRlZmF1bHQsIHRoaXMgaXMgLm5vU3dpcGVcbiAqXG4gKiAkRGF0ZTogMjAxMi0yMi0xMCAoTW9uLCAyMiBPY3QgMjAxMikgJFxuICogJHZlcnNpb246IDEuNS4xXHQtIEZpeGVkIGJ1ZyB3aXRoIGpRdWVyeSAxLjggYW5kIHRyYWlsaW5nIGNvbW1hIGluIGV4Y2x1ZGVkRWxlbWVudHNcbiAqXHRcdFx0XHRcdC0gRml4ZWQgYnVnIHdpdGggSUUgYW5kIGV2ZW50UHJldmVudERlZmF1bHQoKVxuICogJERhdGU6IDIwMTMtMDEtMTIgKEZyaSwgMTIgSmFuIDIwMTMpICRcbiAqICR2ZXJzaW9uOiAxLjYuMFx0LSBGaXhlZCBidWdzIHdpdGggcGluY2hpbmcsIG1haW5seSB3aGVuIGJvdGggcGluY2ggYW5kIHN3aXBlIGVuYWJsZWQsIGFzIHdlbGwgYXMgYWRkaW5nIHRpbWUgdGhyZXNob2xkIGZvciBtdWx0aWZpbmdlciBnZXN0dXJlcywgc28gcmVsZWFzaW5nIG9uZSBmaW5nZXIgYmVvZnJlIHRoZSBvdGhlciBkb2VzbnQgdHJpZ2dlciBhcyBzaW5nbGUgZmluZ2VyIGdlc3R1cmUuXG4gKlx0XHRcdFx0XHQtIG1hZGUgdGhlIGRlbW8gc2l0ZSBhbGwgc3RhdGljIGxvY2FsIEhUTUwgcGFnZXMgc28gdGhleSBjYW4gYmUgcnVuIGxvY2FsbHkgYnkgYSBkZXZlbG9wZXJcbiAqXHRcdFx0XHRcdC0gYWRkZWQganNEb2MgY29tbWVudHMgYW5kIGFkZGVkIGRvY3VtZW50YXRpb24gZm9yIHRoZSBwbHVnaW5cbiAqXHRcdFx0XHRcdC0gY29kZSB0aWR5XG4gKlx0XHRcdFx0XHQtIGFkZGVkIHRyaWdnZXJPblRvdWNoTGVhdmUgcHJvcGVydHkgdGhhdCB3aWxsIGVuZCB0aGUgZXZlbnQgd2hlbiB0aGUgdXNlciBzd2lwZXMgb2ZmIHRoZSBlbGVtZW50LlxuICogJERhdGU6IDIwMTMtMDMtMjMgKFNhdCwgMjMgTWFyIDIwMTMpICRcbiAqICR2ZXJzaW9uOiAxLjYuMVx0LSBBZGRlZCBzdXBwb3J0IGZvciBpZTggdG91Y2ggZXZlbnRzXG4gKiAkdmVyc2lvbjogMS42LjJcdC0gQWRkZWQgc3VwcG9ydCBmb3IgZXZlbnRzIGJpbmRpbmcgd2l0aCBvbiAvIG9mZiAvIGJpbmQgaW4galEgZm9yIGFsbCBjYWxsYmFjayBuYW1lcy5cbiAqICAgICAgICAgICAgICAgICAgIC0gRGVwcmVjYXRlZCB0aGUgJ2NsaWNrJyBoYW5kbGVyIGluIGZhdm91ciBvZiB0YXAuXG4gKiAgICAgICAgICAgICAgICAgICAtIGFkZGVkIGNhbmNlbFRocmVzaG9sZCBwcm9wZXJ0eVxuICogICAgICAgICAgICAgICAgICAgLSBhZGRlZCBvcHRpb24gbWV0aG9kIHRvIHVwZGF0ZSBpbml0IG9wdGlvbnMgYXQgcnVudGltZVxuICogJHZlcnNpb24gMS42LjMgICAgLSBhZGRlZCBkb3VibGV0YXAsIGxvbmd0YXAgZXZlbnRzIGFuZCBsb25nVGFwVGhyZXNob2xkLCBkb3VibGVUYXBUaHJlc2hvbGQgcHJvcGVydHlcbiAqXG4gKiAkRGF0ZTogMjAxMy0wNC0wNCAoVGh1cnMsIDA0IEFwcmlsIDIwMTMpICRcbiAqICR2ZXJzaW9uIDEuNi40ICAgIC0gRml4ZWQgYnVnIHdpdGggY2FuY2VsVGhyZXNob2xkIGludHJvZHVjZWQgaW4gMS42LjMsIHdoZXJlIHN3aXBlIHN0YXR1cyBubyBsb25nZXIgZmlyZWQgc3RhcnQgZXZlbnQsIGFuZCBzdG9wcGVkIG9uY2Ugc3dpcGluZyBiYWNrLlxuICpcbiAqICREYXRlOiAyMDEzLTA4LTI0IChTYXQsIDI0IEF1ZyAyMDEzKSAkXG4gKiAkdmVyc2lvbiAxLjYuNSAgICAtIE1lcmdlZCBhIGZldyBwdWxsIHJlcXVlc3RzIGZpeGluZyB2YXJpb3VzIGJ1Z3MsIGFkZGVkIEFNRCBzdXBwb3J0LlxuICpcbiAqICREYXRlOiAyMDE0LTA2LTA0IChXZWQsIDA0IEp1bmUgMjAxNCkgJFxuICogJHZlcnNpb24gMS42LjYgXHQtIE1lcmdlIG9mIHB1bGwgcmVxdWVzdHMuXG4gKiAgICBcdFx0XHRcdC0gSUUxMCB0b3VjaCBzdXBwb3J0XG4gKiAgICBcdFx0XHRcdC0gT25seSBwcmV2ZW50IGRlZmF1bHQgZXZlbnQgaGFuZGxpbmcgb24gdmFsaWQgc3dpcGVcbiAqICAgIFx0XHRcdFx0LSBTZXBhcmF0ZSBsaWNlbnNlL2NoYW5nZWxvZyBjb21tZW50XG4gKiAgICBcdFx0XHRcdC0gRGV0ZWN0IGlmIHRoZSBzd2lwZSBpcyB2YWxpZCBhdCB0aGUgZW5kIG9mIHRoZSB0b3VjaCBldmVudC5cbiAqICAgIFx0XHRcdFx0LSBQYXNzIGZpbmdlcmRhdGEgdG8gZXZlbnQgaGFuZGxlcnMuXG4gKiAgICBcdFx0XHRcdC0gQWRkICdob2xkJyBnZXN0dXJlXG4gKiAgICBcdFx0XHRcdC0gQmUgbW9yZSB0b2xlcmFudCBhYm91dCB0aGUgdGFwIGRpc3RhbmNlXG4gKiAgICBcdFx0XHRcdC0gVHlwb3MgYW5kIG1pbm9yIGZpeGVzXG4gKlxuICogJERhdGU6IDIwMTUtMjItMDEgKFRodXJzLCAyMiBKYW4gMjAxNSkgJFxuICogJHZlcnNpb24gMS42LjcgICAgLSBBZGRlZCBwYXRjaCBmcm9tIGh0dHBzOi8vZ2l0aHViLmNvbS9tYXR0YnJ5c29uL1RvdWNoU3dpcGUtSnF1ZXJ5LVBsdWdpbi9pc3N1ZXMvMjA2IHRvIGZpeCBtZW1vcnkgbGVha1xuICpcbiAqICREYXRlOiAyMDE1LTItMiAoTW9uLCAyIEZlYiAyMDE1KSAkXG4gKiAkdmVyc2lvbiAxLjYuOCAgICAtIEFkZGVkIHByZXZlbnREZWZhdWx0RXZlbnRzIG9wdGlvbiB0byBwcm94eSBldmVudHMgcmVnYXJkbGVzcy5cbiAqXHRcdFx0XHRcdC0gRml4ZWQgaXNzdWUgd2l0aCBzd2lwZSBhbmQgcGluY2ggbm90IHRyaWdnZXJpbmcgYXQgdGhlIHNhbWUgdGltZVxuICpcbiAqICREYXRlOiAyMDE1LTktNiAoVHVlcywgOSBKdW5lIDIwMTUpICRcbiAqICR2ZXJzaW9uIDEuNi45ICAgIC0gQWRkZWQgUFIgZnJvbSBqZGFsdG9uL2h5YnJpZCB0byBmaXggcG9pbnRlciBldmVudHNcbiAqXHRcdFx0XHRcdC0gQWRkZWQgc2Nyb2xsaW5nIGRlbW9cbiAqXHRcdFx0XHRcdC0gQWRkZWQgdmVyc2lvbiBwcm9wZXJ0eSB0byBwbHVnaW5cbiAqXG4gKiAkRGF0ZTogMjAxNS0xLTEwIChXZWQsIDEgT2N0b2JlciAyMDE1KSAkXG4gKiAkdmVyc2lvbiAxLjYuMTAgICAgLSBBZGRlZCBQUiBmcm9tIGJlYXRzcGFjZSB0byBmaXggdGFwIGV2ZW50c1xuICogJHZlcnNpb24gMS42LjExICAgIC0gQWRkZWQgUFJzIGZyb20gaW5kcmktaW5kcmkgKCBEb2MgdGlkeXVwKSwga2tpcnNjaGUgKCBCb3dlciB0aWR5IHVwICksIFV6aVRlY2ggKHByZXZlbnREZWZhdWx0RXZlbnRzIGZpeGVzIClcbiAqXHRcdFx0XHRcdCAtIEFsbG93ZWQgc2V0dGluZyBtdWx0aXBsZSBvcHRpb25zIHZpYSAuc3dpcGUoXCJvcHRpb25zXCIsIG9wdGlvbnNfaGFzaCkgYW5kIG1vcmUgc2ltcGx5IC5zd2lwZShvcHRpb25zX2hhc2gpIG9yIGV4aXNpdG5nIGluc3RhbmNlc1xuICogJHZlcnNpb24gMS42LjEyICAgIC0gRml4ZWQgYnVnIHdpdGggbXVsdGkgZmluZ2VyIHJlbGVhc2VzIGFib3ZlIDIgbm90IHRyaWdnZXJpbmcgZXZlbnRzXG4gKlxuICogJERhdGU6IDIwMTUtMTItMTggKEZyaSwgMTggRGVjZW1iZXIgMjAxNSkgJFxuICogJHZlcnNpb24gMS42LjEzICAgIC0gQWRkZWQgUFJzXG4gKiAgICAgICAgICAgICAgICAgICAgLSBGaXhlZCAjMjY3IGFsbG93UGFnZVNjcm9sbCBub3Qgd29ya2luZyBjb3JyZWN0bHlcbiAqICR2ZXJzaW9uIDEuNi4xNCAgICAtIEZpeGVkICMyMjAgLyAjMjQ4IGRvdWJsZXRhcCBub3QgZmlyaW5nIHdpdGggc3dpcGVzLCAjMjIzIGNvbW1vbkpTIGNvbXBhdGlibGVcbiAqICR2ZXJzaW9uIDEuNi4xNSAgICAtIE1vcmUgYnVnIGZpeGVzXG4gKlxuICogJERhdGU6IDIwMTYtMDQtMjkgKEZyaSwgMjkgQXByaWwgMjAxNikgJFxuICogJHZlcnNpb24gMS42LjE2ICAgIC0gU3dpcGVzIHdpdGggMCBkaXN0YW5jZSBub3cgYWxsb3cgZGVmYXVsdCBldmVudHMgdG8gdHJpZ2dlci4gIFNvIHRhcHBpbmcgYW55IGZvcm0gZWxlbWVudHMgb3IgQSB0YWdzIHdpbGwgYWxsb3cgZGVmYXVsdCBpbnRlcmFjdGlvbiwgYnV0IHN3aXBpbmcgd2lsbCB0cmlnZ2VyIGEgc3dpcGUuXG4gKiAgICAgICAgICAgICAgICAgICAgICAgUmVtb3ZlZCB0aGUgYSwgaW5wdXQsIHNlbGVjdCBldGMgZnJvbSB0aGUgZXhjbHVkZWQgQ2hpbGRyZW4gbGlzdCBhcyB0aGUgMCBkaXN0YW5jZSB0YXAgc29sdmVzIHRoYXQgaXNzdWUuXG4gKiAkRGF0ZTogMjAxNi0wNS0xOSAgKEZyaSwgMjkgQXByaWwgMjAxNikgJFxuICogJHZlcnNpb24gMS42LjE3ICAgICAtIEZpeGVkIGNvbnRleHQgaXNzdWUgd2hlbiBjYWxsaW5nIGluc3RhbmNlIG1ldGhvZHMgdmlhICQoXCJzZWxlY3RvclwiKS5zd2lwZShcIm1ldGhvZFwiKTtcbiAqICR2ZXJzaW9uIDEuNi4xOCAgICAgLSBub3cgaG9ub3JzIGZhbGxiYWNrVG9Nb3VzZUV2ZW50cz1mYWxzZSBmb3IgTVMgUG9pbnRlciBldmVudHMgd2hlbiBhIE1vdXNlIGlzIHVzZWQuXG4gKiBcbiAqICREYXRlOiAyMDE4LTA5LTE3ICAoTW9uLCAxNyBTZXB0ZW1iZXIgMjAxOCkgJFxuICogJHZlcnNpb24gMS42LjE5ICAgICAtIHJlcGxhY2VkIGpRdWVyeSBiaW5kIHdpdGggb24sIHJlcGxhY2VkIGRlcHJlY2F0ZWQgYG5hdmlnYXRvci5wb2ludGVyRXZlbnRzYCB3aXRoIGB3aW5kb3cuUG9pbnRlckV2ZW50c2BcblxuICovXG5cbi8qKlxuICogU2VlIChodHRwOi8vanF1ZXJ5LmNvbS8pLlxuICogQG5hbWUgJFxuICogQGNsYXNzXG4gKiBTZWUgdGhlIGpRdWVyeSBMaWJyYXJ5ICAoaHR0cDovL2pxdWVyeS5jb20vKSBmb3IgZnVsbCBkZXRhaWxzLiAgVGhpcyBqdXN0XG4gKiBkb2N1bWVudHMgdGhlIGZ1bmN0aW9uIGFuZCBjbGFzc2VzIHRoYXQgYXJlIGFkZGVkIHRvIGpRdWVyeSBieSB0aGlzIHBsdWctaW4uXG4gKi9cblxuLyoqXG4gKiBTZWUgKGh0dHA6Ly9qcXVlcnkuY29tLylcbiAqIEBuYW1lIGZuXG4gKiBAY2xhc3NcbiAqIFNlZSB0aGUgalF1ZXJ5IExpYnJhcnkgIChodHRwOi8vanF1ZXJ5LmNvbS8pIGZvciBmdWxsIGRldGFpbHMuICBUaGlzIGp1c3RcbiAqIGRvY3VtZW50cyB0aGUgZnVuY3Rpb24gYW5kIGNsYXNzZXMgdGhhdCBhcmUgYWRkZWQgdG8galF1ZXJ5IGJ5IHRoaXMgcGx1Zy1pbi5cbiAqIEBtZW1iZXJPZiAkXG4gKi9cblxuXG4oZnVuY3Rpb24oZmFjdG9yeSkge1xuICBpZiAodHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kICYmIGRlZmluZS5hbWQualF1ZXJ5KSB7XG4gICAgLy8gQU1ELiBSZWdpc3RlciBhcyBhbm9ueW1vdXMgbW9kdWxlLlxuICAgIGRlZmluZShbJ2pxdWVyeSddLCBmYWN0b3J5KTtcbiAgfSBlbHNlIGlmICh0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJyAmJiBtb2R1bGUuZXhwb3J0cykge1xuICAgIC8vIENvbW1vbkpTIE1vZHVsZVxuICAgIGZhY3RvcnkocmVxdWlyZShcImpxdWVyeVwiKSk7XG4gIH0gZWxzZSB7XG4gICAgLy8gQnJvd3NlciBnbG9iYWxzLlxuICAgIGZhY3RvcnkoalF1ZXJ5KTtcbiAgfVxufShmdW5jdGlvbigkKSB7XG4gIFwidXNlIHN0cmljdFwiO1xuXG4gIC8vQ29uc3RhbnRzXG4gIHZhciBWRVJTSU9OID0gXCIxLjYuMThcIixcbiAgICBMRUZUID0gXCJsZWZ0XCIsXG4gICAgUklHSFQgPSBcInJpZ2h0XCIsXG4gICAgVVAgPSBcInVwXCIsXG4gICAgRE9XTiA9IFwiZG93blwiLFxuICAgIElOID0gXCJpblwiLFxuICAgIE9VVCA9IFwib3V0XCIsXG5cbiAgICBOT05FID0gXCJub25lXCIsXG4gICAgQVVUTyA9IFwiYXV0b1wiLFxuXG4gICAgU1dJUEUgPSBcInN3aXBlXCIsXG4gICAgUElOQ0ggPSBcInBpbmNoXCIsXG4gICAgVEFQID0gXCJ0YXBcIixcbiAgICBET1VCTEVfVEFQID0gXCJkb3VibGV0YXBcIixcbiAgICBMT05HX1RBUCA9IFwibG9uZ3RhcFwiLFxuICAgIEhPTEQgPSBcImhvbGRcIixcblxuICAgIEhPUklaT05UQUwgPSBcImhvcml6b250YWxcIixcbiAgICBWRVJUSUNBTCA9IFwidmVydGljYWxcIixcblxuICAgIEFMTF9GSU5HRVJTID0gXCJhbGxcIixcblxuICAgIERPVUJMRV9UQVBfVEhSRVNIT0xEID0gMTAsXG5cbiAgICBQSEFTRV9TVEFSVCA9IFwic3RhcnRcIixcbiAgICBQSEFTRV9NT1ZFID0gXCJtb3ZlXCIsXG4gICAgUEhBU0VfRU5EID0gXCJlbmRcIixcbiAgICBQSEFTRV9DQU5DRUwgPSBcImNhbmNlbFwiLFxuXG4gICAgU1VQUE9SVFNfVE9VQ0ggPSAnb250b3VjaHN0YXJ0JyBpbiB3aW5kb3csXG5cbiAgICBTVVBQT1JUU19QT0lOVEVSX0lFMTAgPSB3aW5kb3cubmF2aWdhdG9yLm1zUG9pbnRlckVuYWJsZWQgJiYgIXdpbmRvdy5Qb2ludGVyRXZlbnQgJiYgIVNVUFBPUlRTX1RPVUNILFxuXG4gICAgU1VQUE9SVFNfUE9JTlRFUiA9ICh3aW5kb3cuUG9pbnRlckV2ZW50IHx8IHdpbmRvdy5uYXZpZ2F0b3IubXNQb2ludGVyRW5hYmxlZCkgJiYgIVNVUFBPUlRTX1RPVUNILFxuXG4gICAgUExVR0lOX05TID0gJ1RvdWNoU3dpcGUnO1xuXG5cblxuICAvKipcbiAgKiBUaGUgZGVmYXVsdCBjb25maWd1cmF0aW9uLCBhbmQgYXZhaWxhYmxlIG9wdGlvbnMgdG8gY29uZmlndXJlIHRvdWNoIHN3aXBlIHdpdGguXG4gICogWW91IGNhbiBzZXQgdGhlIGRlZmF1bHQgdmFsdWVzIGJ5IHVwZGF0aW5nIGFueSBvZiB0aGUgcHJvcGVydGllcyBwcmlvciB0byBpbnN0YW50aWF0aW9uLlxuICAqIEBuYW1lICQuZm4uc3dpcGUuZGVmYXVsdHNcbiAgKiBAbmFtZXNwYWNlXG4gICogQHByb3BlcnR5IHtpbnR9IFtmaW5nZXJzPTFdIFRoZSBudW1iZXIgb2YgZmluZ2VycyB0byBkZXRlY3QgaW4gYSBzd2lwZS4gQW55IHN3aXBlcyB0aGF0IGRvIG5vdCBtZWV0IHRoaXMgcmVxdWlyZW1lbnQgd2lsbCBOT1QgdHJpZ2dlciBzd2lwZSBoYW5kbGVycy5cbiAgKiBAcHJvcGVydHkge2ludH0gW3RocmVzaG9sZD03NV0gVGhlIG51bWJlciBvZiBwaXhlbHMgdGhhdCB0aGUgdXNlciBtdXN0IG1vdmUgdGhlaXIgZmluZ2VyIGJ5IGJlZm9yZSBpdCBpcyBjb25zaWRlcmVkIGEgc3dpcGUuXG4gICogQHByb3BlcnR5IHtpbnR9IFtjYW5jZWxUaHJlc2hvbGQ9bnVsbF0gVGhlIG51bWJlciBvZiBwaXhlbHMgdGhhdCB0aGUgdXNlciBtdXN0IG1vdmUgdGhlaXIgZmluZ2VyIGJhY2sgZnJvbSB0aGUgb3JpZ2luYWwgc3dpcGUgZGlyZWN0aW9uIHRvIGNhbmNlbCB0aGUgZ2VzdHVyZS5cbiAgKiBAcHJvcGVydHkge2ludH0gW3BpbmNoVGhyZXNob2xkPTIwXSBUaGUgbnVtYmVyIG9mIHBpeGVscyB0aGF0IHRoZSB1c2VyIG11c3QgcGluY2ggdGhlaXIgZmluZ2VyIGJ5IGJlZm9yZSBpdCBpcyBjb25zaWRlcmVkIGEgcGluY2guXG4gICogQHByb3BlcnR5IHtpbnR9IFttYXhUaW1lVGhyZXNob2xkPW51bGxdIFRpbWUsIGluIG1pbGxpc2Vjb25kcywgYmV0d2VlbiB0b3VjaFN0YXJ0IGFuZCB0b3VjaEVuZCBtdXN0IE5PVCBleGNlZWQgaW4gb3JkZXIgdG8gYmUgY29uc2lkZXJlZCBhIHN3aXBlLlxuICAqIEBwcm9wZXJ0eSB7aW50fSBbZmluZ2VyUmVsZWFzZVRocmVzaG9sZD0yNTBdIFRpbWUgaW4gbWlsbGlzZWNvbmRzIGJldHdlZW4gcmVsZWFzaW5nIG11bHRpcGxlIGZpbmdlcnMuICBJZiAyIGZpbmdlcnMgYXJlIGRvd24sIGFuZCBhcmUgcmVsZWFzZWQgb25lIGFmdGVyIHRoZSBvdGhlciwgaWYgdGhleSBhcmUgd2l0aGluIHRoaXMgdGhyZXNob2xkLCBpdCBjb3VudHMgYXMgYSBzaW11bHRhbmVvdXMgcmVsZWFzZS5cbiAgKiBAcHJvcGVydHkge2ludH0gW2xvbmdUYXBUaHJlc2hvbGQ9NTAwXSBUaW1lIGluIG1pbGxpc2Vjb25kcyBiZXR3ZWVuIHRhcCBhbmQgcmVsZWFzZSBmb3IgYSBsb25nIHRhcFxuICAqIEBwcm9wZXJ0eSB7aW50fSBbZG91YmxlVGFwVGhyZXNob2xkPTIwMF0gVGltZSBpbiBtaWxsaXNlY29uZHMgYmV0d2VlbiAyIHRhcHMgdG8gY291bnQgYXMgYSBkb3VibGUgdGFwXG4gICogQHByb3BlcnR5IHtmdW5jdGlvbn0gW3N3aXBlPW51bGxdIEEgaGFuZGxlciB0byBjYXRjaCBhbGwgc3dpcGVzLiBTZWUge0BsaW5rICQuZm4uc3dpcGUjZXZlbnQ6c3dpcGV9XG4gICogQHByb3BlcnR5IHtmdW5jdGlvbn0gW3N3aXBlTGVmdD1udWxsXSBBIGhhbmRsZXIgdGhhdCBpcyB0cmlnZ2VyZWQgZm9yIFwibGVmdFwiIHN3aXBlcy4gU2VlIHtAbGluayAkLmZuLnN3aXBlI2V2ZW50OnN3aXBlTGVmdH1cbiAgKiBAcHJvcGVydHkge2Z1bmN0aW9ufSBbc3dpcGVSaWdodD1udWxsXSBBIGhhbmRsZXIgdGhhdCBpcyB0cmlnZ2VyZWQgZm9yIFwicmlnaHRcIiBzd2lwZXMuIFNlZSB7QGxpbmsgJC5mbi5zd2lwZSNldmVudDpzd2lwZVJpZ2h0fVxuICAqIEBwcm9wZXJ0eSB7ZnVuY3Rpb259IFtzd2lwZVVwPW51bGxdIEEgaGFuZGxlciB0aGF0IGlzIHRyaWdnZXJlZCBmb3IgXCJ1cFwiIHN3aXBlcy4gU2VlIHtAbGluayAkLmZuLnN3aXBlI2V2ZW50OnN3aXBlVXB9XG4gICogQHByb3BlcnR5IHtmdW5jdGlvbn0gW3N3aXBlRG93bj1udWxsXSBBIGhhbmRsZXIgdGhhdCBpcyB0cmlnZ2VyZWQgZm9yIFwiZG93blwiIHN3aXBlcy4gU2VlIHtAbGluayAkLmZuLnN3aXBlI2V2ZW50OnN3aXBlRG93bn1cbiAgKiBAcHJvcGVydHkge2Z1bmN0aW9ufSBbc3dpcGVTdGF0dXM9bnVsbF0gQSBoYW5kbGVyIHRyaWdnZXJlZCBmb3IgZXZlcnkgcGhhc2Ugb2YgdGhlIHN3aXBlLiBTZWUge0BsaW5rICQuZm4uc3dpcGUjZXZlbnQ6c3dpcGVTdGF0dXN9XG4gICogQHByb3BlcnR5IHtmdW5jdGlvbn0gW3BpbmNoSW49bnVsbF0gQSBoYW5kbGVyIHRyaWdnZXJlZCBmb3IgcGluY2ggaW4gZXZlbnRzLiBTZWUge0BsaW5rICQuZm4uc3dpcGUjZXZlbnQ6cGluY2hJbn1cbiAgKiBAcHJvcGVydHkge2Z1bmN0aW9ufSBbcGluY2hPdXQ9bnVsbF0gQSBoYW5kbGVyIHRyaWdnZXJlZCBmb3IgcGluY2ggb3V0IGV2ZW50cy4gU2VlIHtAbGluayAkLmZuLnN3aXBlI2V2ZW50OnBpbmNoT3V0fVxuICAqIEBwcm9wZXJ0eSB7ZnVuY3Rpb259IFtwaW5jaFN0YXR1cz1udWxsXSBBIGhhbmRsZXIgdHJpZ2dlcmVkIGZvciBldmVyeSBwaGFzZSBvZiBhIHBpbmNoLiBTZWUge0BsaW5rICQuZm4uc3dpcGUjZXZlbnQ6cGluY2hTdGF0dXN9XG4gICogQHByb3BlcnR5IHtmdW5jdGlvbn0gW3RhcD1udWxsXSBBIGhhbmRsZXIgdHJpZ2dlcmVkIHdoZW4gYSB1c2VyIGp1c3QgdGFwcyBvbiB0aGUgaXRlbSwgcmF0aGVyIHRoYW4gc3dpcGVzIGl0LiBJZiB0aGV5IGRvIG5vdCBtb3ZlLCB0YXAgaXMgdHJpZ2dlcmVkLCBpZiB0aGV5IGRvIG1vdmUsIGl0IGlzIG5vdC5cbiAgKiBAcHJvcGVydHkge2Z1bmN0aW9ufSBbZG91YmxlVGFwPW51bGxdIEEgaGFuZGxlciB0cmlnZ2VyZWQgd2hlbiBhIHVzZXIgZG91YmxlIHRhcHMgb24gdGhlIGl0ZW0uIFRoZSBkZWxheSBiZXR3ZWVuIHRhcHMgY2FuIGJlIHNldCB3aXRoIHRoZSBkb3VibGVUYXBUaHJlc2hvbGQgcHJvcGVydHkuIFNlZSB7QGxpbmsgJC5mbi5zd2lwZS5kZWZhdWx0cyNkb3VibGVUYXBUaHJlc2hvbGR9XG4gICogQHByb3BlcnR5IHtmdW5jdGlvbn0gW2xvbmdUYXA9bnVsbF0gQSBoYW5kbGVyIHRyaWdnZXJlZCB3aGVuIGEgdXNlciBsb25nIHRhcHMgb24gdGhlIGl0ZW0uIFRoZSBkZWxheSBiZXR3ZWVuIHN0YXJ0IGFuZCBlbmQgY2FuIGJlIHNldCB3aXRoIHRoZSBsb25nVGFwVGhyZXNob2xkIHByb3BlcnR5LiBTZWUge0BsaW5rICQuZm4uc3dpcGUuZGVmYXVsdHMjbG9uZ1RhcFRocmVzaG9sZH1cbiAgKiBAcHJvcGVydHkgKGZ1bmN0aW9uKSBbaG9sZD1udWxsXSBBIGhhbmRsZXIgdHJpZ2dlcmVkIHdoZW4gYSB1c2VyIHJlYWNoZXMgbG9uZ1RhcFRocmVzaG9sZCBvbiB0aGUgaXRlbS4gU2VlIHtAbGluayAkLmZuLnN3aXBlLmRlZmF1bHRzI2xvbmdUYXBUaHJlc2hvbGR9XG4gICogQHByb3BlcnR5IHtib29sZWFufSBbdHJpZ2dlck9uVG91Y2hFbmQ9dHJ1ZV0gSWYgdHJ1ZSwgdGhlIHN3aXBlIGV2ZW50cyBhcmUgdHJpZ2dlcmVkIHdoZW4gdGhlIHRvdWNoIGVuZCBldmVudCBpcyByZWNlaXZlZCAodXNlciByZWxlYXNlcyBmaW5nZXIpLiAgSWYgZmFsc2UsIGl0IHdpbGwgYmUgdHJpZ2dlcmVkIG9uIHJlYWNoaW5nIHRoZSB0aHJlc2hvbGQsIGFuZCB0aGVuIGNhbmNlbCB0aGUgdG91Y2ggZXZlbnQgYXV0b21hdGljYWxseS5cbiAgKiBAcHJvcGVydHkge2Jvb2xlYW59IFt0cmlnZ2VyT25Ub3VjaExlYXZlPWZhbHNlXSBJZiB0cnVlLCB0aGVuIHdoZW4gdGhlIHVzZXIgbGVhdmVzIHRoZSBzd2lwZSBvYmplY3QsIHRoZSBzd2lwZSB3aWxsIGVuZCBhbmQgdHJpZ2dlciBhcHByb3ByaWF0ZSBoYW5kbGVycy5cbiAgKiBAcHJvcGVydHkge3N0cmluZ3x1bmRlZmluZWR9IFthbGxvd1BhZ2VTY3JvbGw9J2F1dG8nXSBIb3cgdGhlIGJyb3dzZXIgaGFuZGxlcyBwYWdlIHNjcm9sbHMgd2hlbiB0aGUgdXNlciBpcyBzd2lwaW5nIG9uIGEgdG91Y2hTd2lwZSBvYmplY3QuIFNlZSB7QGxpbmsgJC5mbi5zd2lwZS5wYWdlU2Nyb2xsfS4gIDxici8+PGJyLz5cbiAgICAgICAgICAgICAgICAgICAgPGNvZGU+XCJhdXRvXCI8L2NvZGU+IDogYWxsIHVuZGVmaW5lZCBzd2lwZXMgd2lsbCBjYXVzZSB0aGUgcGFnZSB0byBzY3JvbGwgaW4gdGhhdCBkaXJlY3Rpb24uIDxici8+XG4gICAgICAgICAgICAgICAgICAgIDxjb2RlPlwibm9uZVwiPC9jb2RlPiA6IHRoZSBwYWdlIHdpbGwgbm90IHNjcm9sbCB3aGVuIHVzZXIgc3dpcGVzLiA8YnIvPlxuICAgICAgICAgICAgICAgICAgICA8Y29kZT5cImhvcml6b250YWxcIjwvY29kZT4gOiB3aWxsIGZvcmNlIHBhZ2UgdG8gc2Nyb2xsIG9uIGhvcml6b250YWwgc3dpcGVzLiA8YnIvPlxuICAgICAgICAgICAgICAgICAgICA8Y29kZT5cInZlcnRpY2FsXCI8L2NvZGU+IDogd2lsbCBmb3JjZSBwYWdlIHRvIHNjcm9sbCBvbiB2ZXJ0aWNhbCBzd2lwZXMuIDxici8+XG4gICogQHByb3BlcnR5IHtib29sZWFufSBbZmFsbGJhY2tUb01vdXNlRXZlbnRzPXRydWVdIElmIHRydWUgbW91c2UgZXZlbnRzIGFyZSB1c2VkIHdoZW4gcnVuIG9uIGEgbm9uIHRvdWNoIGRldmljZSwgZmFsc2Ugd2lsbCBzdG9wIHN3aXBlcyBiZWluZyB0cmlnZ2VyZWQgYnkgbW91c2UgZXZlbnRzIG9uIG5vbiB0b3VjaCBkZXZpY2VzLlxuICAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBbZXhjbHVkZWRFbGVtZW50cz1cIi5ub1N3aXBlXCJdIEEganF1ZXJ5IHNlbGVjdG9yIHRoYXQgc3BlY2lmaWVzIGNoaWxkIGVsZW1lbnRzIHRoYXQgZG8gTk9UIHRyaWdnZXIgc3dpcGVzLiBCeSBkZWZhdWx0IHRoaXMgZXhjbHVkZXMgZWxlbWVudHMgd2l0aCB0aGUgY2xhc3MgLm5vU3dpcGUgLlxuICAqIEBwcm9wZXJ0eSB7Ym9vbGVhbn0gW3ByZXZlbnREZWZhdWx0RXZlbnRzPXRydWVdIGJ5IGRlZmF1bHQgZGVmYXVsdCBldmVudHMgYXJlIGNhbmNlbGxlZCwgc28gdGhlIHBhZ2UgZG9lc24ndCBtb3ZlLiAgWW91IGNhbiBkaXNhYmxlIHRoaXMgc28gYm90aCBuYXRpdmUgZXZlbnRzIGZpcmUgYXMgd2VsbCBhcyB5b3VyIGhhbmRsZXJzLlxuXG4gICovXG4gIHZhciBkZWZhdWx0cyA9IHtcbiAgICBmaW5nZXJzOiAxLFxuICAgIHRocmVzaG9sZDogNzUsXG4gICAgY2FuY2VsVGhyZXNob2xkOiBudWxsLFxuICAgIHBpbmNoVGhyZXNob2xkOiAyMCxcbiAgICBtYXhUaW1lVGhyZXNob2xkOiBudWxsLFxuICAgIGZpbmdlclJlbGVhc2VUaHJlc2hvbGQ6IDI1MCxcbiAgICBsb25nVGFwVGhyZXNob2xkOiA1MDAsXG4gICAgZG91YmxlVGFwVGhyZXNob2xkOiAyMDAsXG4gICAgc3dpcGU6IG51bGwsXG4gICAgc3dpcGVMZWZ0OiBudWxsLFxuICAgIHN3aXBlUmlnaHQ6IG51bGwsXG4gICAgc3dpcGVVcDogbnVsbCxcbiAgICBzd2lwZURvd246IG51bGwsXG4gICAgc3dpcGVTdGF0dXM6IG51bGwsXG4gICAgcGluY2hJbjogbnVsbCxcbiAgICBwaW5jaE91dDogbnVsbCxcbiAgICBwaW5jaFN0YXR1czogbnVsbCxcbiAgICBjbGljazogbnVsbCwgLy9EZXByZWNhdGVkIHNpbmNlIDEuNi4yXG4gICAgdGFwOiBudWxsLFxuICAgIGRvdWJsZVRhcDogbnVsbCxcbiAgICBsb25nVGFwOiBudWxsLFxuICAgIGhvbGQ6IG51bGwsXG4gICAgdHJpZ2dlck9uVG91Y2hFbmQ6IHRydWUsXG4gICAgdHJpZ2dlck9uVG91Y2hMZWF2ZTogZmFsc2UsXG4gICAgYWxsb3dQYWdlU2Nyb2xsOiBcImF1dG9cIixcbiAgICBmYWxsYmFja1RvTW91c2VFdmVudHM6IHRydWUsXG4gICAgZXhjbHVkZWRFbGVtZW50czogXCIubm9Td2lwZVwiLFxuICAgIHByZXZlbnREZWZhdWx0RXZlbnRzOiB0cnVlXG4gIH07XG5cblxuXG4gIC8qKlxuICAgKiBBcHBsaWVzIFRvdWNoU3dpcGUgYmVoYXZpb3VyIHRvIG9uZSBvciBtb3JlIGpRdWVyeSBvYmplY3RzLlxuICAgKiBUaGUgVG91Y2hTd2lwZSBwbHVnaW4gY2FuIGJlIGluc3RhbnRpYXRlZCB2aWEgdGhpcyBtZXRob2QsIG9yIG1ldGhvZHMgd2l0aGluXG4gICAqIFRvdWNoU3dpcGUgY2FuIGJlIGV4ZWN1dGVkIHZpYSB0aGlzIG1ldGhvZCBhcyBwZXIgalF1ZXJ5IHBsdWdpbiBhcmNoaXRlY3R1cmUuXG4gICAqIEFuIGV4aXN0aW5nIHBsdWdpbiBjYW4gaGF2ZSBpdHMgb3B0aW9ucyBjaGFuZ2VkIHNpbXBseSBieSByZSBjYWxsaW5nIC5zd2lwZShvcHRpb25zKVxuICAgKiBAc2VlIFRvdWNoU3dpcGVcbiAgICogQGNsYXNzXG4gICAqIEBwYXJhbSB7TWl4ZWR9IG1ldGhvZCBJZiB0aGUgY3VycmVudCBET01Ob2RlIGlzIGEgVG91Y2hTd2lwZSBvYmplY3QsIGFuZCA8Y29kZT5tZXRob2Q8L2NvZGU+IGlzIGEgVG91Y2hTd2lwZSBtZXRob2QsIHRoZW5cbiAgICogdGhlIDxjb2RlPm1ldGhvZDwvY29kZT4gaXMgZXhlY3V0ZWQsIGFuZCBhbnkgZm9sbG93aW5nIGFyZ3VtZW50cyBhcmUgcGFzc2VkIHRvIHRoZSBUb3VjaFN3aXBlIG1ldGhvZC5cbiAgICogSWYgPGNvZGU+bWV0aG9kPC9jb2RlPiBpcyBhbiBvYmplY3QsIHRoZW4gdGhlIFRvdWNoU3dpcGUgY2xhc3MgaXMgaW5zdGFudGlhdGVkIG9uIHRoZSBjdXJyZW50IERPTU5vZGUsIHBhc3NpbmcgdGhlXG4gICAqIGNvbmZpZ3VyYXRpb24gcHJvcGVydGllcyBkZWZpbmVkIGluIHRoZSBvYmplY3QuIFNlZSBUb3VjaFN3aXBlXG4gICAqXG4gICAqL1xuICAkLmZuLnN3aXBlID0gZnVuY3Rpb24obWV0aG9kKSB7XG4gICAgdmFyICR0aGlzID0gJCh0aGlzKSxcbiAgICAgIHBsdWdpbiA9ICR0aGlzLmRhdGEoUExVR0lOX05TKTtcblxuICAgIC8vQ2hlY2sgaWYgd2UgYXJlIGFscmVhZHkgaW5zdGFudGlhdGVkIGFuZCB0cnlpbmcgdG8gZXhlY3V0ZSBhIG1ldGhvZFxuICAgIGlmIChwbHVnaW4gJiYgdHlwZW9mIG1ldGhvZCA9PT0gJ3N0cmluZycpIHtcbiAgICAgIGlmIChwbHVnaW5bbWV0aG9kXSkge1xuICAgICAgICByZXR1cm4gcGx1Z2luW21ldGhvZF0uYXBwbHkocGx1Z2luLCBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMsIDEpKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgICQuZXJyb3IoJ01ldGhvZCAnICsgbWV0aG9kICsgJyBkb2VzIG5vdCBleGlzdCBvbiBqUXVlcnkuc3dpcGUnKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvL0Vsc2UgdXBkYXRlIGV4aXN0aW5nIHBsdWdpbiB3aXRoIG5ldyBvcHRpb25zIGhhc2hcbiAgICBlbHNlIGlmIChwbHVnaW4gJiYgdHlwZW9mIG1ldGhvZCA9PT0gJ29iamVjdCcpIHtcbiAgICAgIHBsdWdpblsnb3B0aW9uJ10uYXBwbHkocGx1Z2luLCBhcmd1bWVudHMpO1xuICAgIH1cblxuICAgIC8vRWxzZSBub3QgaW5zdGFudGlhdGVkIGFuZCB0cnlpbmcgdG8gcGFzcyBpbml0IG9iamVjdCAob3Igbm90aGluZylcbiAgICBlbHNlIGlmICghcGx1Z2luICYmICh0eXBlb2YgbWV0aG9kID09PSAnb2JqZWN0JyB8fCAhbWV0aG9kKSkge1xuICAgICAgcmV0dXJuIGluaXQuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICB9XG5cbiAgICByZXR1cm4gJHRoaXM7XG4gIH07XG5cbiAgLyoqXG4gICAqIFRoZSB2ZXJzaW9uIG9mIHRoZSBwbHVnaW5cbiAgICogQHJlYWRvbmx5XG4gICAqL1xuICAkLmZuLnN3aXBlLnZlcnNpb24gPSBWRVJTSU9OO1xuXG5cblxuICAvL0V4cG9zZSBvdXIgZGVmYXVsdHMgc28gYSB1c2VyIGNvdWxkIG92ZXJyaWRlIHRoZSBwbHVnaW4gZGVmYXVsdHNcbiAgJC5mbi5zd2lwZS5kZWZhdWx0cyA9IGRlZmF1bHRzO1xuXG4gIC8qKlxuICAgKiBUaGUgcGhhc2VzIHRoYXQgYSB0b3VjaCBldmVudCBnb2VzIHRocm91Z2guICBUaGUgPGNvZGU+cGhhc2U8L2NvZGU+IGlzIHBhc3NlZCB0byB0aGUgZXZlbnQgaGFuZGxlcnMuXG4gICAqIFRoZXNlIHByb3BlcnRpZXMgYXJlIHJlYWQgb25seSwgYXR0ZW1wdGluZyB0byBjaGFuZ2UgdGhlbSB3aWxsIG5vdCBhbHRlciB0aGUgdmFsdWVzIHBhc3NlZCB0byB0aGUgZXZlbnQgaGFuZGxlcnMuXG4gICAqIEBuYW1lc3BhY2VcbiAgICogQHJlYWRvbmx5XG4gICAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBQSEFTRV9TVEFSVCBDb25zdGFudCBpbmRpY2F0aW5nIHRoZSBzdGFydCBwaGFzZSBvZiB0aGUgdG91Y2ggZXZlbnQuIFZhbHVlIGlzIDxjb2RlPlwic3RhcnRcIjwvY29kZT4uXG4gICAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBQSEFTRV9NT1ZFIENvbnN0YW50IGluZGljYXRpbmcgdGhlIG1vdmUgcGhhc2Ugb2YgdGhlIHRvdWNoIGV2ZW50LiBWYWx1ZSBpcyA8Y29kZT5cIm1vdmVcIjwvY29kZT4uXG4gICAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBQSEFTRV9FTkQgQ29uc3RhbnQgaW5kaWNhdGluZyB0aGUgZW5kIHBoYXNlIG9mIHRoZSB0b3VjaCBldmVudC4gVmFsdWUgaXMgPGNvZGU+XCJlbmRcIjwvY29kZT4uXG4gICAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBQSEFTRV9DQU5DRUwgQ29uc3RhbnQgaW5kaWNhdGluZyB0aGUgY2FuY2VsIHBoYXNlIG9mIHRoZSB0b3VjaCBldmVudC4gVmFsdWUgaXMgPGNvZGU+XCJjYW5jZWxcIjwvY29kZT4uXG4gICAqL1xuICAkLmZuLnN3aXBlLnBoYXNlcyA9IHtcbiAgICBQSEFTRV9TVEFSVDogUEhBU0VfU1RBUlQsXG4gICAgUEhBU0VfTU9WRTogUEhBU0VfTU9WRSxcbiAgICBQSEFTRV9FTkQ6IFBIQVNFX0VORCxcbiAgICBQSEFTRV9DQU5DRUw6IFBIQVNFX0NBTkNFTFxuICB9O1xuXG4gIC8qKlxuICAgKiBUaGUgZGlyZWN0aW9uIGNvbnN0YW50cyB0aGF0IGFyZSBwYXNzZWQgdG8gdGhlIGV2ZW50IGhhbmRsZXJzLlxuICAgKiBUaGVzZSBwcm9wZXJ0aWVzIGFyZSByZWFkIG9ubHksIGF0dGVtcHRpbmcgdG8gY2hhbmdlIHRoZW0gd2lsbCBub3QgYWx0ZXIgdGhlIHZhbHVlcyBwYXNzZWQgdG8gdGhlIGV2ZW50IGhhbmRsZXJzLlxuICAgKiBAbmFtZXNwYWNlXG4gICAqIEByZWFkb25seVxuICAgKiBAcHJvcGVydHkge3N0cmluZ30gTEVGVCBDb25zdGFudCBpbmRpY2F0aW5nIHRoZSBsZWZ0IGRpcmVjdGlvbi4gVmFsdWUgaXMgPGNvZGU+XCJsZWZ0XCI8L2NvZGU+LlxuICAgKiBAcHJvcGVydHkge3N0cmluZ30gUklHSFQgQ29uc3RhbnQgaW5kaWNhdGluZyB0aGUgcmlnaHQgZGlyZWN0aW9uLiBWYWx1ZSBpcyA8Y29kZT5cInJpZ2h0XCI8L2NvZGU+LlxuICAgKiBAcHJvcGVydHkge3N0cmluZ30gVVAgQ29uc3RhbnQgaW5kaWNhdGluZyB0aGUgdXAgZGlyZWN0aW9uLiBWYWx1ZSBpcyA8Y29kZT5cInVwXCI8L2NvZGU+LlxuICAgKiBAcHJvcGVydHkge3N0cmluZ30gRE9XTiBDb25zdGFudCBpbmRpY2F0aW5nIHRoZSBkb3duIGRpcmVjdGlvbi4gVmFsdWUgaXMgPGNvZGU+XCJjYW5jZWxcIjwvY29kZT4uXG4gICAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBJTiBDb25zdGFudCBpbmRpY2F0aW5nIHRoZSBpbiBkaXJlY3Rpb24uIFZhbHVlIGlzIDxjb2RlPlwiaW5cIjwvY29kZT4uXG4gICAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBPVVQgQ29uc3RhbnQgaW5kaWNhdGluZyB0aGUgb3V0IGRpcmVjdGlvbi4gVmFsdWUgaXMgPGNvZGU+XCJvdXRcIjwvY29kZT4uXG4gICAqL1xuICAkLmZuLnN3aXBlLmRpcmVjdGlvbnMgPSB7XG4gICAgTEVGVDogTEVGVCxcbiAgICBSSUdIVDogUklHSFQsXG4gICAgVVA6IFVQLFxuICAgIERPV046IERPV04sXG4gICAgSU46IElOLFxuICAgIE9VVDogT1VUXG4gIH07XG5cbiAgLyoqXG4gICAqIFRoZSBwYWdlIHNjcm9sbCBjb25zdGFudHMgdGhhdCBjYW4gYmUgdXNlZCB0byBzZXQgdGhlIHZhbHVlIG9mIDxjb2RlPmFsbG93UGFnZVNjcm9sbDwvY29kZT4gb3B0aW9uXG4gICAqIFRoZXNlIHByb3BlcnRpZXMgYXJlIHJlYWQgb25seVxuICAgKiBAbmFtZXNwYWNlXG4gICAqIEByZWFkb25seVxuICAgKiBAc2VlICQuZm4uc3dpcGUuZGVmYXVsdHMjYWxsb3dQYWdlU2Nyb2xsXG4gICAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBOT05FIENvbnN0YW50IGluZGljYXRpbmcgbm8gcGFnZSBzY3JvbGxpbmcgaXMgYWxsb3dlZC4gVmFsdWUgaXMgPGNvZGU+XCJub25lXCI8L2NvZGU+LlxuICAgKiBAcHJvcGVydHkge3N0cmluZ30gSE9SSVpPTlRBTCBDb25zdGFudCBpbmRpY2F0aW5nIGhvcml6b250YWwgcGFnZSBzY3JvbGxpbmcgaXMgYWxsb3dlZC4gVmFsdWUgaXMgPGNvZGU+XCJob3Jpem9udGFsXCI8L2NvZGU+LlxuICAgKiBAcHJvcGVydHkge3N0cmluZ30gVkVSVElDQUwgQ29uc3RhbnQgaW5kaWNhdGluZyB2ZXJ0aWNhbCBwYWdlIHNjcm9sbGluZyBpcyBhbGxvd2VkLiBWYWx1ZSBpcyA8Y29kZT5cInZlcnRpY2FsXCI8L2NvZGU+LlxuICAgKiBAcHJvcGVydHkge3N0cmluZ30gQVVUTyBDb25zdGFudCBpbmRpY2F0aW5nIGVpdGhlciBob3Jpem9udGFsIG9yIHZlcnRpY2FsIHdpbGwgYmUgYWxsb3dlZCwgZGVwZW5kaW5nIG9uIHRoZSBzd2lwZSBoYW5kbGVycyByZWdpc3RlcmVkLiBWYWx1ZSBpcyA8Y29kZT5cImF1dG9cIjwvY29kZT4uXG4gICAqL1xuICAkLmZuLnN3aXBlLnBhZ2VTY3JvbGwgPSB7XG4gICAgTk9ORTogTk9ORSxcbiAgICBIT1JJWk9OVEFMOiBIT1JJWk9OVEFMLFxuICAgIFZFUlRJQ0FMOiBWRVJUSUNBTCxcbiAgICBBVVRPOiBBVVRPXG4gIH07XG5cbiAgLyoqXG4gICAqIENvbnN0YW50cyByZXByZXNlbnRpbmcgdGhlIG51bWJlciBvZiBmaW5nZXJzIHVzZWQgaW4gYSBzd2lwZS4gIFRoZXNlIGFyZSB1c2VkIHRvIHNldCBib3RoIHRoZSB2YWx1ZSBvZiA8Y29kZT5maW5nZXJzPC9jb2RlPiBpbiB0aGVcbiAgICogb3B0aW9ucyBvYmplY3QsIGFzIHdlbGwgYXMgdGhlIHZhbHVlIG9mIHRoZSA8Y29kZT5maW5nZXJzPC9jb2RlPiBldmVudCBwcm9wZXJ0eS5cbiAgICogVGhlc2UgcHJvcGVydGllcyBhcmUgcmVhZCBvbmx5LCBhdHRlbXB0aW5nIHRvIGNoYW5nZSB0aGVtIHdpbGwgbm90IGFsdGVyIHRoZSB2YWx1ZXMgcGFzc2VkIHRvIHRoZSBldmVudCBoYW5kbGVycy5cbiAgICogQG5hbWVzcGFjZVxuICAgKiBAcmVhZG9ubHlcbiAgICogQHNlZSAkLmZuLnN3aXBlLmRlZmF1bHRzI2ZpbmdlcnNcbiAgICogQHByb3BlcnR5IHtzdHJpbmd9IE9ORSBDb25zdGFudCBpbmRpY2F0aW5nIDEgZmluZ2VyIGlzIHRvIGJlIGRldGVjdGVkIC8gd2FzIGRldGVjdGVkLiBWYWx1ZSBpcyA8Y29kZT4xPC9jb2RlPi5cbiAgICogQHByb3BlcnR5IHtzdHJpbmd9IFRXTyBDb25zdGFudCBpbmRpY2F0aW5nIDIgZmluZ2VycyBhcmUgdG8gYmUgZGV0ZWN0ZWQgLyB3ZXJlIGRldGVjdGVkLiBWYWx1ZSBpcyA8Y29kZT4yPC9jb2RlPi5cbiAgICogQHByb3BlcnR5IHtzdHJpbmd9IFRIUkVFIENvbnN0YW50IGluZGljYXRpbmcgMyBmaW5nZXIgYXJlIHRvIGJlIGRldGVjdGVkIC8gd2VyZSBkZXRlY3RlZC4gVmFsdWUgaXMgPGNvZGU+MzwvY29kZT4uXG4gICAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBGT1VSIENvbnN0YW50IGluZGljYXRpbmcgNCBmaW5nZXIgYXJlIHRvIGJlIGRldGVjdGVkIC8gd2VyZSBkZXRlY3RlZC4gTm90IGFsbCBkZXZpY2VzIHN1cHBvcnQgdGhpcy4gVmFsdWUgaXMgPGNvZGU+NDwvY29kZT4uXG4gICAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBGSVZFIENvbnN0YW50IGluZGljYXRpbmcgNSBmaW5nZXIgYXJlIHRvIGJlIGRldGVjdGVkIC8gd2VyZSBkZXRlY3RlZC4gTm90IGFsbCBkZXZpY2VzIHN1cHBvcnQgdGhpcy4gVmFsdWUgaXMgPGNvZGU+NTwvY29kZT4uXG4gICAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBBTEwgQ29uc3RhbnQgaW5kaWNhdGluZyBhbnkgY29tYmluYXRpb24gb2YgZmluZ2VyIGFyZSB0byBiZSBkZXRlY3RlZC4gIFZhbHVlIGlzIDxjb2RlPlwiYWxsXCI8L2NvZGU+LlxuICAgKi9cbiAgJC5mbi5zd2lwZS5maW5nZXJzID0ge1xuICAgIE9ORTogMSxcbiAgICBUV086IDIsXG4gICAgVEhSRUU6IDMsXG4gICAgRk9VUjogNCxcbiAgICBGSVZFOiA1LFxuICAgIEFMTDogQUxMX0ZJTkdFUlNcbiAgfTtcblxuICAvKipcbiAgICogSW5pdGlhbGlzZSB0aGUgcGx1Z2luIGZvciBlYWNoIERPTSBlbGVtZW50IG1hdGNoZWRcbiAgICogVGhpcyBjcmVhdGVzIGEgbmV3IGluc3RhbmNlIG9mIHRoZSBtYWluIFRvdWNoU3dpcGUgY2xhc3MgZm9yIGVhY2ggRE9NIGVsZW1lbnQsIGFuZCB0aGVuXG4gICAqIHNhdmVzIGEgcmVmZXJlbmNlIHRvIHRoYXQgaW5zdGFuY2UgaW4gdGhlIGVsZW1lbnRzIGRhdGEgcHJvcGVydHkuXG4gICAqIEBpbnRlcm5hbFxuICAgKi9cbiAgZnVuY3Rpb24gaW5pdChvcHRpb25zKSB7XG4gICAgLy9QcmVwIGFuZCBleHRlbmQgdGhlIG9wdGlvbnNcbiAgICBpZiAob3B0aW9ucyAmJiAob3B0aW9ucy5hbGxvd1BhZ2VTY3JvbGwgPT09IHVuZGVmaW5lZCAmJiAob3B0aW9ucy5zd2lwZSAhPT0gdW5kZWZpbmVkIHx8IG9wdGlvbnMuc3dpcGVTdGF0dXMgIT09IHVuZGVmaW5lZCkpKSB7XG4gICAgICBvcHRpb25zLmFsbG93UGFnZVNjcm9sbCA9IE5PTkU7XG4gICAgfVxuXG4gICAgLy9DaGVjayBmb3IgZGVwcmVjYXRlZCBvcHRpb25zXG4gICAgLy9FbnN1cmUgdGhhdCBhbnkgb2xkIGNsaWNrIGhhbmRsZXJzIGFyZSBhc3NpZ25lZCB0byB0aGUgbmV3IHRhcCwgdW5sZXNzIHdlIGhhdmUgYSB0YXBcbiAgICBpZiAob3B0aW9ucy5jbGljayAhPT0gdW5kZWZpbmVkICYmIG9wdGlvbnMudGFwID09PSB1bmRlZmluZWQpIHtcbiAgICAgIG9wdGlvbnMudGFwID0gb3B0aW9ucy5jbGljaztcbiAgICB9XG5cbiAgICBpZiAoIW9wdGlvbnMpIHtcbiAgICAgIG9wdGlvbnMgPSB7fTtcbiAgICB9XG5cbiAgICAvL3Bhc3MgZW1wdHkgb2JqZWN0IHNvIHdlIGRvbnQgbW9kaWZ5IHRoZSBkZWZhdWx0c1xuICAgIG9wdGlvbnMgPSAkLmV4dGVuZCh7fSwgJC5mbi5zd2lwZS5kZWZhdWx0cywgb3B0aW9ucyk7XG5cbiAgICAvL0ZvciBlYWNoIGVsZW1lbnQgaW5zdGFudGlhdGUgdGhlIHBsdWdpblxuICAgIHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgJHRoaXMgPSAkKHRoaXMpO1xuXG4gICAgICAvL0NoZWNrIHdlIGhhdmVudCBhbHJlYWR5IGluaXRpYWxpc2VkIHRoZSBwbHVnaW5cbiAgICAgIHZhciBwbHVnaW4gPSAkdGhpcy5kYXRhKFBMVUdJTl9OUyk7XG5cbiAgICAgIGlmICghcGx1Z2luKSB7XG4gICAgICAgIHBsdWdpbiA9IG5ldyBUb3VjaFN3aXBlKHRoaXMsIG9wdGlvbnMpO1xuICAgICAgICAkdGhpcy5kYXRhKFBMVUdJTl9OUywgcGx1Z2luKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBNYWluIFRvdWNoU3dpcGUgUGx1Z2luIENsYXNzLlxuICAgKiBEbyBub3QgdXNlIHRoaXMgdG8gY29uc3RydWN0IHlvdXIgVG91Y2hTd2lwZSBvYmplY3QsIHVzZSB0aGUgalF1ZXJ5IHBsdWdpbiBtZXRob2QgJC5mbi5zd2lwZSgpOyB7QGxpbmsgJC5mbi5zd2lwZX1cbiAgICogQHByaXZhdGVcbiAgICogQG5hbWUgVG91Y2hTd2lwZVxuICAgKiBAcGFyYW0ge0RPTU5vZGV9IGVsZW1lbnQgVGhlIEhUTUwgRE9NIG9iamVjdCB0byBhcHBseSB0byBwbHVnaW4gdG9cbiAgICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnMgVGhlIG9wdGlvbnMgdG8gY29uZmlndXJlIHRoZSBwbHVnaW4gd2l0aC4gIEBsaW5rIHskLmZuLnN3aXBlLmRlZmF1bHRzfVxuICAgKiBAc2VlICQuZmguc3dpcGUuZGVmYXVsdHNcbiAgICogQHNlZSAkLmZoLnN3aXBlXG4gICAqIEBjbGFzc1xuICAgKi9cbiAgZnVuY3Rpb24gVG91Y2hTd2lwZShlbGVtZW50LCBvcHRpb25zKSB7XG5cbiAgICAvL3Rha2UgYSBsb2NhbC9pbnN0YWNuZSBsZXZlbCBjb3B5IG9mIHRoZSBvcHRpb25zIC0gc2hvdWxkIG1ha2UgaXQgdGhpcy5vcHRpb25zIHJlYWxseS4uLlxuICAgIHZhciBvcHRpb25zID0gJC5leHRlbmQoe30sIG9wdGlvbnMpO1xuXG4gICAgdmFyIHVzZVRvdWNoRXZlbnRzID0gKFNVUFBPUlRTX1RPVUNIIHx8IFNVUFBPUlRTX1BPSU5URVIgfHwgIW9wdGlvbnMuZmFsbGJhY2tUb01vdXNlRXZlbnRzKSxcbiAgICAgIFNUQVJUX0VWID0gdXNlVG91Y2hFdmVudHMgPyAoU1VQUE9SVFNfUE9JTlRFUiA/IChTVVBQT1JUU19QT0lOVEVSX0lFMTAgPyAnTVNQb2ludGVyRG93bicgOiAncG9pbnRlcmRvd24nKSA6ICd0b3VjaHN0YXJ0JykgOiAnbW91c2Vkb3duJyxcbiAgICAgIE1PVkVfRVYgPSB1c2VUb3VjaEV2ZW50cyA/IChTVVBQT1JUU19QT0lOVEVSID8gKFNVUFBPUlRTX1BPSU5URVJfSUUxMCA/ICdNU1BvaW50ZXJNb3ZlJyA6ICdwb2ludGVybW92ZScpIDogJ3RvdWNobW92ZScpIDogJ21vdXNlbW92ZScsXG4gICAgICBFTkRfRVYgPSB1c2VUb3VjaEV2ZW50cyA/IChTVVBQT1JUU19QT0lOVEVSID8gKFNVUFBPUlRTX1BPSU5URVJfSUUxMCA/ICdNU1BvaW50ZXJVcCcgOiAncG9pbnRlcnVwJykgOiAndG91Y2hlbmQnKSA6ICdtb3VzZXVwJyxcbiAgICAgIExFQVZFX0VWID0gdXNlVG91Y2hFdmVudHMgPyAoU1VQUE9SVFNfUE9JTlRFUiA/ICdtb3VzZWxlYXZlJyA6IG51bGwpIDogJ21vdXNlbGVhdmUnLCAvL3dlIG1hbnVhbGx5IGRldGVjdCBsZWF2ZSBvbiB0b3VjaCBkZXZpY2VzLCBzbyBudWxsIGV2ZW50IGhlcmVcbiAgICAgIENBTkNFTF9FViA9IChTVVBQT1JUU19QT0lOVEVSID8gKFNVUFBPUlRTX1BPSU5URVJfSUUxMCA/ICdNU1BvaW50ZXJDYW5jZWwnIDogJ3BvaW50ZXJjYW5jZWwnKSA6ICd0b3VjaGNhbmNlbCcpO1xuXG5cblxuICAgIC8vdG91Y2ggcHJvcGVydGllc1xuICAgIHZhciBkaXN0YW5jZSA9IDAsXG4gICAgICBkaXJlY3Rpb24gPSBudWxsLFxuICAgICAgY3VycmVudERpcmVjdGlvbiA9IG51bGwsXG4gICAgICBkdXJhdGlvbiA9IDAsXG4gICAgICBzdGFydFRvdWNoZXNEaXN0YW5jZSA9IDAsXG4gICAgICBlbmRUb3VjaGVzRGlzdGFuY2UgPSAwLFxuICAgICAgcGluY2hab29tID0gMSxcbiAgICAgIHBpbmNoRGlzdGFuY2UgPSAwLFxuICAgICAgcGluY2hEaXJlY3Rpb24gPSAwLFxuICAgICAgbWF4aW11bXNNYXAgPSBudWxsO1xuXG5cblxuICAgIC8valF1ZXJ5IHdyYXBwZWQgZWxlbWVudCBmb3IgdGhpcyBpbnN0YW5jZVxuICAgIHZhciAkZWxlbWVudCA9ICQoZWxlbWVudCk7XG5cbiAgICAvL0N1cnJlbnQgcGhhc2Ugb2YgdGggdG91Y2ggY3ljbGVcbiAgICB2YXIgcGhhc2UgPSBcInN0YXJ0XCI7XG5cbiAgICAvLyB0aGUgY3VycmVudCBudW1iZXIgb2YgZmluZ2VycyBiZWluZyB1c2VkLlxuICAgIHZhciBmaW5nZXJDb3VudCA9IDA7XG5cbiAgICAvL3RyYWNrIG1vdXNlIHBvaW50cyAvIGRlbHRhXG4gICAgdmFyIGZpbmdlckRhdGEgPSB7fTtcblxuICAgIC8vdHJhY2sgdGltZXNcbiAgICB2YXIgc3RhcnRUaW1lID0gMCxcbiAgICAgIGVuZFRpbWUgPSAwLFxuICAgICAgcHJldmlvdXNUb3VjaEVuZFRpbWUgPSAwLFxuICAgICAgZmluZ2VyQ291bnRBdFJlbGVhc2UgPSAwLFxuICAgICAgZG91YmxlVGFwU3RhcnRUaW1lID0gMDtcblxuICAgIC8vVGltZW91dHNcbiAgICB2YXIgc2luZ2xlVGFwVGltZW91dCA9IG51bGwsXG4gICAgICBob2xkVGltZW91dCA9IG51bGw7XG5cbiAgICAvLyBBZGQgZ2VzdHVyZXMgdG8gYWxsIHN3aXBhYmxlIGFyZWFzIGlmIHN1cHBvcnRlZFxuICAgIHRyeSB7XG4gICAgICAkZWxlbWVudC5vbihTVEFSVF9FViwgdG91Y2hTdGFydCk7XG4gICAgICAkZWxlbWVudC5vbihDQU5DRUxfRVYsIHRvdWNoQ2FuY2VsKTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICAkLmVycm9yKCdldmVudHMgbm90IHN1cHBvcnRlZCAnICsgU1RBUlRfRVYgKyAnLCcgKyBDQU5DRUxfRVYgKyAnIG9uIGpRdWVyeS5zd2lwZScpO1xuICAgIH1cblxuICAgIC8vXG4gICAgLy9QdWJsaWMgbWV0aG9kc1xuICAgIC8vXG5cbiAgICAvKipcbiAgICAgKiByZS1lbmFibGVzIHRoZSBzd2lwZSBwbHVnaW4gd2l0aCB0aGUgcHJldmlvdXMgY29uZmlndXJhdGlvblxuICAgICAqIEBmdW5jdGlvblxuICAgICAqIEBuYW1lICQuZm4uc3dpcGUjZW5hYmxlXG4gICAgICogQHJldHVybiB7RE9NTm9kZX0gVGhlIERvbSBlbGVtZW50IHRoYXQgd2FzIHJlZ2lzdGVyZWQgd2l0aCBUb3VjaFN3aXBlXG4gICAgICogQGV4YW1wbGUgJChcIiNlbGVtZW50XCIpLnN3aXBlKFwiZW5hYmxlXCIpO1xuICAgICAqL1xuICAgIHRoaXMuZW5hYmxlID0gZnVuY3Rpb24oKSB7XG4gICAgICAvL0luY2FzZSB3ZSBhcmUgYWxyZWFkeSBlbmFibGVkLCBjbGVhbiB1cC4uLlxuICAgICAgdGhpcy5kaXNhYmxlKCk7XG4gICAgICAkZWxlbWVudC5vbihTVEFSVF9FViwgdG91Y2hTdGFydCk7XG4gICAgICAkZWxlbWVudC5vbihDQU5DRUxfRVYsIHRvdWNoQ2FuY2VsKTtcbiAgICAgIHJldHVybiAkZWxlbWVudDtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogZGlzYWJsZXMgdGhlIHN3aXBlIHBsdWdpblxuICAgICAqIEBmdW5jdGlvblxuICAgICAqIEBuYW1lICQuZm4uc3dpcGUjZGlzYWJsZVxuICAgICAqIEByZXR1cm4ge0RPTU5vZGV9IFRoZSBEb20gZWxlbWVudCB0aGF0IGlzIG5vdyByZWdpc3RlcmVkIHdpdGggVG91Y2hTd2lwZVxuICAgICAqIEBleGFtcGxlICQoXCIjZWxlbWVudFwiKS5zd2lwZShcImRpc2FibGVcIik7XG4gICAgICovXG4gICAgdGhpcy5kaXNhYmxlID0gZnVuY3Rpb24oKSB7XG4gICAgICByZW1vdmVMaXN0ZW5lcnMoKTtcbiAgICAgIHJldHVybiAkZWxlbWVudDtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogRGVzdHJveSB0aGUgc3dpcGUgcGx1Z2luIGNvbXBsZXRlbHkuIFRvIHVzZSBhbnkgc3dpcGUgbWV0aG9kcywgeW91IG11c3QgcmUgaW5pdGlhbGlzZSB0aGUgcGx1Z2luLlxuICAgICAqIEBmdW5jdGlvblxuICAgICAqIEBuYW1lICQuZm4uc3dpcGUjZGVzdHJveVxuICAgICAqIEBleGFtcGxlICQoXCIjZWxlbWVudFwiKS5zd2lwZShcImRlc3Ryb3lcIik7XG4gICAgICovXG4gICAgdGhpcy5kZXN0cm95ID0gZnVuY3Rpb24oKSB7XG4gICAgICByZW1vdmVMaXN0ZW5lcnMoKTtcbiAgICAgICRlbGVtZW50LmRhdGEoUExVR0lOX05TLCBudWxsKTtcbiAgICAgICRlbGVtZW50ID0gbnVsbDtcbiAgICB9O1xuXG5cbiAgICAvKipcbiAgICAgKiBBbGxvd3MgcnVuIHRpbWUgdXBkYXRpbmcgb2YgdGhlIHN3aXBlIGNvbmZpZ3VyYXRpb24gb3B0aW9ucy5cbiAgICAgKiBAZnVuY3Rpb25cbiAgICAgKiBAbmFtZSAkLmZuLnN3aXBlI29wdGlvblxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBwcm9wZXJ0eSBUaGUgb3B0aW9uIHByb3BlcnR5IHRvIGdldCBvciBzZXQsIG9yIGEgaGFzIG9mIG11bHRpcGxlIG9wdGlvbnMgdG8gc2V0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IFt2YWx1ZV0gVGhlIHZhbHVlIHRvIHNldCB0aGUgcHJvcGVydHkgdG9cbiAgICAgKiBAcmV0dXJuIHtPYmplY3R9IElmIG9ubHkgYSBwcm9wZXJ0eSBuYW1lIGlzIHBhc3NlZCwgdGhlbiB0aGF0IHByb3BlcnR5IHZhbHVlIGlzIHJldHVybmVkLiBJZiBub3RoaW5nIGlzIHBhc3NlZCB0aGUgY3VycmVudCBvcHRpb25zIGhhc2ggaXMgcmV0dXJuZWQuXG4gICAgICogQGV4YW1wbGUgJChcIiNlbGVtZW50XCIpLnN3aXBlKFwib3B0aW9uXCIsIFwidGhyZXNob2xkXCIpOyAvLyByZXR1cm4gdGhlIHRocmVzaG9sZFxuICAgICAqIEBleGFtcGxlICQoXCIjZWxlbWVudFwiKS5zd2lwZShcIm9wdGlvblwiLCBcInRocmVzaG9sZFwiLCAxMDApOyAvLyBzZXQgdGhlIHRocmVzaG9sZCBhZnRlciBpbml0XG4gICAgICogQGV4YW1wbGUgJChcIiNlbGVtZW50XCIpLnN3aXBlKFwib3B0aW9uXCIsIHt0aHJlc2hvbGQ6MTAwLCBmaW5nZXJzOjN9ICk7IC8vIHNldCBtdWx0aXBsZSBwcm9wZXJ0aWVzIGFmdGVyIGluaXRcbiAgICAgKiBAZXhhbXBsZSAkKFwiI2VsZW1lbnRcIikuc3dpcGUoe3RocmVzaG9sZDoxMDAsIGZpbmdlcnM6M30gKTsgLy8gc2V0IG11bHRpcGxlIHByb3BlcnRpZXMgYWZ0ZXIgaW5pdCAtIHRoZSBcIm9wdGlvblwiIG1ldGhvZCBpcyBvcHRpb25hbCFcbiAgICAgKiBAZXhhbXBsZSAkKFwiI2VsZW1lbnRcIikuc3dpcGUoXCJvcHRpb25cIik7IC8vIFJldHVybiB0aGUgY3VycmVudCBvcHRpb25zIGhhc2hcbiAgICAgKiBAc2VlICQuZm4uc3dpcGUuZGVmYXVsdHNcbiAgICAgKlxuICAgICAqL1xuICAgIHRoaXMub3B0aW9uID0gZnVuY3Rpb24ocHJvcGVydHksIHZhbHVlKSB7XG5cbiAgICAgIGlmICh0eXBlb2YgcHJvcGVydHkgPT09ICdvYmplY3QnKSB7XG4gICAgICAgIG9wdGlvbnMgPSAkLmV4dGVuZChvcHRpb25zLCBwcm9wZXJ0eSk7XG4gICAgICB9IGVsc2UgaWYgKG9wdGlvbnNbcHJvcGVydHldICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgaWYgKHZhbHVlID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICByZXR1cm4gb3B0aW9uc1twcm9wZXJ0eV07XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgb3B0aW9uc1twcm9wZXJ0eV0gPSB2YWx1ZTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmICghcHJvcGVydHkpIHtcbiAgICAgICAgcmV0dXJuIG9wdGlvbnM7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAkLmVycm9yKCdPcHRpb24gJyArIHByb3BlcnR5ICsgJyBkb2VzIG5vdCBleGlzdCBvbiBqUXVlcnkuc3dpcGUub3B0aW9ucycpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cblxuXG4gICAgLy9cbiAgICAvLyBQcml2YXRlIG1ldGhvZHNcbiAgICAvL1xuXG4gICAgLy9cbiAgICAvLyBFVkVOVFNcbiAgICAvL1xuICAgIC8qKlxuICAgICAqIEV2ZW50IGhhbmRsZXIgZm9yIGEgdG91Y2ggc3RhcnQgZXZlbnQuXG4gICAgICogU3RvcHMgdGhlIGRlZmF1bHQgY2xpY2sgZXZlbnQgZnJvbSB0cmlnZ2VyaW5nIGFuZCBzdG9yZXMgd2hlcmUgd2UgdG91Y2hlZFxuICAgICAqIEBpbm5lclxuICAgICAqIEBwYXJhbSB7b2JqZWN0fSBqcUV2ZW50IFRoZSBub3JtYWxpc2VkIGpRdWVyeSBldmVudCBvYmplY3QuXG4gICAgICovXG4gICAgZnVuY3Rpb24gdG91Y2hTdGFydChqcUV2ZW50KSB7XG5cbiAgICAgIC8vSWYgd2UgYWxyZWFkeSBpbiBhIHRvdWNoIGV2ZW50IChhIGZpbmdlciBhbHJlYWR5IGluIHVzZSkgdGhlbiBpZ25vcmUgc3Vic2VxdWVudCBvbmVzLi5cbiAgICAgIGlmIChnZXRUb3VjaEluUHJvZ3Jlc3MoKSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIC8vQ2hlY2sgaWYgdGhpcyBlbGVtZW50IG1hdGNoZXMgYW55IGluIHRoZSBleGNsdWRlZCBlbGVtZW50cyBzZWxlY3RvcnMsICBvciBpdHMgcGFyZW50IGlzIGV4Y2x1ZGVkLCBpZiBzbywgRE9OJ1Qgc3dpcGVcbiAgICAgIGlmICgkKGpxRXZlbnQudGFyZ2V0KS5jbG9zZXN0KG9wdGlvbnMuZXhjbHVkZWRFbGVtZW50cywgJGVsZW1lbnQpLmxlbmd0aCA+IDApIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICAvL0FzIHdlIHVzZSBKcXVlcnkgYmluZCBmb3IgZXZlbnRzLCB3ZSBuZWVkIHRvIHRhcmdldCB0aGUgb3JpZ2luYWwgZXZlbnQgb2JqZWN0XG4gICAgICAvL0lmIHRoZXNlIGV2ZW50cyBhcmUgYmVpbmcgcHJvZ3JhbW1hdGljYWxseSB0cmlnZ2VyZWQsIHdlIGRvbid0IGhhdmUgYW4gb3JpZ2luYWwgZXZlbnQgb2JqZWN0LCBzbyB1c2UgdGhlIEpxIG9uZS5cbiAgICAgIHZhciBldmVudCA9IGpxRXZlbnQub3JpZ2luYWxFdmVudCA/IGpxRXZlbnQub3JpZ2luYWxFdmVudCA6IGpxRXZlbnQ7XG5cblxuICAgICAgLy9JZiB3ZSBoYXZlIGEgcG9pbnRlciBldmVudCwgd2hvZXMgdHlwZSBpcyAnbW91c2UnIGFuZCB3ZSBoYXZlIHNhaWQgTk8gbW91c2UgZXZlbnRzLCB0aGVuIGRvbnQgZG8gYW55dGhpbmcuXG4gICAgICBpZihldmVudC5wb2ludGVyVHlwZSAmJiBldmVudC5wb2ludGVyVHlwZT09XCJtb3VzZVwiICYmIG9wdGlvbnMuZmFsbGJhY2tUb01vdXNlRXZlbnRzPT1mYWxzZSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9O1xuXG4gICAgICB2YXIgcmV0LFxuICAgICAgICB0b3VjaGVzID0gZXZlbnQudG91Y2hlcyxcbiAgICAgICAgZXZ0ID0gdG91Y2hlcyA/IHRvdWNoZXNbMF0gOiBldmVudDtcblxuICAgICAgcGhhc2UgPSBQSEFTRV9TVEFSVDtcblxuICAgICAgLy9JZiB3ZSBzdXBwb3J0IHRvdWNoZXMsIGdldCB0aGUgZmluZ2VyIGNvdW50XG4gICAgICBpZiAodG91Y2hlcykge1xuICAgICAgICAvLyBnZXQgdGhlIHRvdGFsIG51bWJlciBvZiBmaW5nZXJzIHRvdWNoaW5nIHRoZSBzY3JlZW5cbiAgICAgICAgZmluZ2VyQ291bnQgPSB0b3VjaGVzLmxlbmd0aDtcbiAgICAgIH1cbiAgICAgIC8vRWxzZSB0aGlzIGlzIHRoZSBkZXNrdG9wLCBzbyBzdG9wIHRoZSBicm93c2VyIGZyb20gZHJhZ2dpbmcgY29udGVudFxuICAgICAgZWxzZSBpZiAob3B0aW9ucy5wcmV2ZW50RGVmYXVsdEV2ZW50cyAhPT0gZmFsc2UpIHtcbiAgICAgICAganFFdmVudC5wcmV2ZW50RGVmYXVsdCgpOyAvL2NhbGwgdGhpcyBvbiBqcSBldmVudCBzbyB3ZSBhcmUgY3Jvc3MgYnJvd3NlclxuICAgICAgfVxuXG4gICAgICAvL2NsZWFyIHZhcnMuLlxuICAgICAgZGlzdGFuY2UgPSAwO1xuICAgICAgZGlyZWN0aW9uID0gbnVsbDtcbiAgICAgIGN1cnJlbnREaXJlY3Rpb249bnVsbDtcbiAgICAgIHBpbmNoRGlyZWN0aW9uID0gbnVsbDtcbiAgICAgIGR1cmF0aW9uID0gMDtcbiAgICAgIHN0YXJ0VG91Y2hlc0Rpc3RhbmNlID0gMDtcbiAgICAgIGVuZFRvdWNoZXNEaXN0YW5jZSA9IDA7XG4gICAgICBwaW5jaFpvb20gPSAxO1xuICAgICAgcGluY2hEaXN0YW5jZSA9IDA7XG4gICAgICBtYXhpbXVtc01hcCA9IGNyZWF0ZU1heGltdW1zRGF0YSgpO1xuICAgICAgY2FuY2VsTXVsdGlGaW5nZXJSZWxlYXNlKCk7XG5cbiAgICAgIC8vQ3JlYXRlIHRoZSBkZWZhdWx0IGZpbmdlciBkYXRhXG4gICAgICBjcmVhdGVGaW5nZXJEYXRhKDAsIGV2dCk7XG5cbiAgICAgIC8vIGNoZWNrIHRoZSBudW1iZXIgb2YgZmluZ2VycyBpcyB3aGF0IHdlIGFyZSBsb29raW5nIGZvciwgb3Igd2UgYXJlIGNhcHR1cmluZyBwaW5jaGVzXG4gICAgICBpZiAoIXRvdWNoZXMgfHwgKGZpbmdlckNvdW50ID09PSBvcHRpb25zLmZpbmdlcnMgfHwgb3B0aW9ucy5maW5nZXJzID09PSBBTExfRklOR0VSUykgfHwgaGFzUGluY2hlcygpKSB7XG4gICAgICAgIC8vIGdldCB0aGUgY29vcmRpbmF0ZXMgb2YgdGhlIHRvdWNoXG4gICAgICAgIHN0YXJ0VGltZSA9IGdldFRpbWVTdGFtcCgpO1xuXG4gICAgICAgIGlmIChmaW5nZXJDb3VudCA9PSAyKSB7XG4gICAgICAgICAgLy9LZWVwIHRyYWNrIG9mIHRoZSBpbml0aWFsIHBpbmNoIGRpc3RhbmNlLCBzbyB3ZSBjYW4gY2FsY3VsYXRlIHRoZSBkaWZmIGxhdGVyXG4gICAgICAgICAgLy9TdG9yZSBzZWNvbmQgZmluZ2VyIGRhdGEgYXMgc3RhcnRcbiAgICAgICAgICBjcmVhdGVGaW5nZXJEYXRhKDEsIHRvdWNoZXNbMV0pO1xuICAgICAgICAgIHN0YXJ0VG91Y2hlc0Rpc3RhbmNlID0gZW5kVG91Y2hlc0Rpc3RhbmNlID0gY2FsY3VsYXRlVG91Y2hlc0Rpc3RhbmNlKGZpbmdlckRhdGFbMF0uc3RhcnQsIGZpbmdlckRhdGFbMV0uc3RhcnQpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKG9wdGlvbnMuc3dpcGVTdGF0dXMgfHwgb3B0aW9ucy5waW5jaFN0YXR1cykge1xuICAgICAgICAgIHJldCA9IHRyaWdnZXJIYW5kbGVyKGV2ZW50LCBwaGFzZSk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vQSB0b3VjaCB3aXRoIG1vcmUgb3IgbGVzcyB0aGFuIHRoZSBmaW5nZXJzIHdlIGFyZSBsb29raW5nIGZvciwgc28gY2FuY2VsXG4gICAgICAgIHJldCA9IGZhbHNlO1xuICAgICAgfVxuXG4gICAgICAvL0lmIHdlIGhhdmUgYSByZXR1cm4gdmFsdWUgZnJvbSB0aGUgdXNlcnMgaGFuZGxlciwgdGhlbiByZXR1cm4gYW5kIGNhbmNlbFxuICAgICAgaWYgKHJldCA9PT0gZmFsc2UpIHtcbiAgICAgICAgcGhhc2UgPSBQSEFTRV9DQU5DRUw7XG4gICAgICAgIHRyaWdnZXJIYW5kbGVyKGV2ZW50LCBwaGFzZSk7XG4gICAgICAgIHJldHVybiByZXQ7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAob3B0aW9ucy5ob2xkKSB7XG4gICAgICAgICAgaG9sZFRpbWVvdXQgPSBzZXRUaW1lb3V0KCQucHJveHkoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAvL1RyaWdnZXIgdGhlIGV2ZW50XG4gICAgICAgICAgICAkZWxlbWVudC50cmlnZ2VyKCdob2xkJywgW2V2ZW50LnRhcmdldF0pO1xuICAgICAgICAgICAgLy9GaXJlIHRoZSBjYWxsYmFja1xuICAgICAgICAgICAgaWYgKG9wdGlvbnMuaG9sZCkge1xuICAgICAgICAgICAgICByZXQgPSBvcHRpb25zLmhvbGQuY2FsbCgkZWxlbWVudCwgZXZlbnQsIGV2ZW50LnRhcmdldCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSwgdGhpcyksIG9wdGlvbnMubG9uZ1RhcFRocmVzaG9sZCk7XG4gICAgICAgIH1cblxuICAgICAgICBzZXRUb3VjaEluUHJvZ3Jlc3ModHJ1ZSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBudWxsO1xuICAgIH07XG5cblxuXG4gICAgLyoqXG4gICAgICogRXZlbnQgaGFuZGxlciBmb3IgYSB0b3VjaCBtb3ZlIGV2ZW50LlxuICAgICAqIElmIHdlIGNoYW5nZSBmaW5nZXJzIGR1cmluZyBtb3ZlLCB0aGVuIGNhbmNlbCB0aGUgZXZlbnRcbiAgICAgKiBAaW5uZXJcbiAgICAgKiBAcGFyYW0ge29iamVjdH0ganFFdmVudCBUaGUgbm9ybWFsaXNlZCBqUXVlcnkgZXZlbnQgb2JqZWN0LlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHRvdWNoTW92ZShqcUV2ZW50KSB7XG5cbiAgICAgIC8vQXMgd2UgdXNlIEpxdWVyeSBiaW5kIGZvciBldmVudHMsIHdlIG5lZWQgdG8gdGFyZ2V0IHRoZSBvcmlnaW5hbCBldmVudCBvYmplY3RcbiAgICAgIC8vSWYgdGhlc2UgZXZlbnRzIGFyZSBiZWluZyBwcm9ncmFtbWF0aWNhbGx5IHRyaWdnZXJlZCwgd2UgZG9uJ3QgaGF2ZSBhbiBvcmlnaW5hbCBldmVudCBvYmplY3QsIHNvIHVzZSB0aGUgSnEgb25lLlxuICAgICAgdmFyIGV2ZW50ID0ganFFdmVudC5vcmlnaW5hbEV2ZW50ID8ganFFdmVudC5vcmlnaW5hbEV2ZW50IDoganFFdmVudDtcblxuICAgICAgLy9JZiB3ZSBhcmUgZW5kaW5nLCBjYW5jZWxsaW5nLCBvciB3aXRoaW4gdGhlIHRocmVzaG9sZCBvZiAyIGZpbmdlcnMgYmVpbmcgcmVsZWFzZWQsIGRvbid0IHRyYWNrIGFueXRoaW5nLi5cbiAgICAgIGlmIChwaGFzZSA9PT0gUEhBU0VfRU5EIHx8IHBoYXNlID09PSBQSEFTRV9DQU5DRUwgfHwgaW5NdWx0aUZpbmdlclJlbGVhc2UoKSlcbiAgICAgICAgcmV0dXJuO1xuXG4gICAgICB2YXIgcmV0LFxuICAgICAgICB0b3VjaGVzID0gZXZlbnQudG91Y2hlcyxcbiAgICAgICAgZXZ0ID0gdG91Y2hlcyA/IHRvdWNoZXNbMF0gOiBldmVudDtcblxuXG4gICAgICAvL1VwZGF0ZSB0aGUgIGZpbmdlciBkYXRhXG4gICAgICB2YXIgY3VycmVudEZpbmdlciA9IHVwZGF0ZUZpbmdlckRhdGEoZXZ0KTtcbiAgICAgIGVuZFRpbWUgPSBnZXRUaW1lU3RhbXAoKTtcblxuICAgICAgaWYgKHRvdWNoZXMpIHtcbiAgICAgICAgZmluZ2VyQ291bnQgPSB0b3VjaGVzLmxlbmd0aDtcbiAgICAgIH1cblxuICAgICAgaWYgKG9wdGlvbnMuaG9sZCkge1xuICAgICAgICBjbGVhclRpbWVvdXQoaG9sZFRpbWVvdXQpO1xuICAgICAgfVxuXG4gICAgICBwaGFzZSA9IFBIQVNFX01PVkU7XG5cbiAgICAgIC8vSWYgd2UgaGF2ZSAyIGZpbmdlcnMgZ2V0IFRvdWNoZXMgZGlzdGFuY2UgYXMgd2VsbFxuICAgICAgaWYgKGZpbmdlckNvdW50ID09IDIpIHtcblxuICAgICAgICAvL0tlZXAgdHJhY2sgb2YgdGhlIGluaXRpYWwgcGluY2ggZGlzdGFuY2UsIHNvIHdlIGNhbiBjYWxjdWxhdGUgdGhlIGRpZmYgbGF0ZXJcbiAgICAgICAgLy9XZSBkbyB0aGlzIGhlcmUgYXMgd2VsbCBhcyB0aGUgc3RhcnQgZXZlbnQsIGluIGNhc2UgdGhleSBzdGFydCB3aXRoIDEgZmluZ2VyLCBhbmQgdGhlIHByZXNzIDIgZmluZ2Vyc1xuICAgICAgICBpZiAoc3RhcnRUb3VjaGVzRGlzdGFuY2UgPT0gMCkge1xuICAgICAgICAgIC8vQ3JlYXRlIHNlY29uZCBmaW5nZXIgaWYgdGhpcyBpcyB0aGUgZmlyc3QgdGltZS4uLlxuICAgICAgICAgIGNyZWF0ZUZpbmdlckRhdGEoMSwgdG91Y2hlc1sxXSk7XG5cbiAgICAgICAgICBzdGFydFRvdWNoZXNEaXN0YW5jZSA9IGVuZFRvdWNoZXNEaXN0YW5jZSA9IGNhbGN1bGF0ZVRvdWNoZXNEaXN0YW5jZShmaW5nZXJEYXRhWzBdLnN0YXJ0LCBmaW5nZXJEYXRhWzFdLnN0YXJ0KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAvL0Vsc2UganVzdCB1cGRhdGUgdGhlIHNlY29uZCBmaW5nZXJcbiAgICAgICAgICB1cGRhdGVGaW5nZXJEYXRhKHRvdWNoZXNbMV0pO1xuXG4gICAgICAgICAgZW5kVG91Y2hlc0Rpc3RhbmNlID0gY2FsY3VsYXRlVG91Y2hlc0Rpc3RhbmNlKGZpbmdlckRhdGFbMF0uZW5kLCBmaW5nZXJEYXRhWzFdLmVuZCk7XG4gICAgICAgICAgcGluY2hEaXJlY3Rpb24gPSBjYWxjdWxhdGVQaW5jaERpcmVjdGlvbihmaW5nZXJEYXRhWzBdLmVuZCwgZmluZ2VyRGF0YVsxXS5lbmQpO1xuICAgICAgICB9XG5cbiAgICAgICAgcGluY2hab29tID0gY2FsY3VsYXRlUGluY2hab29tKHN0YXJ0VG91Y2hlc0Rpc3RhbmNlLCBlbmRUb3VjaGVzRGlzdGFuY2UpO1xuICAgICAgICBwaW5jaERpc3RhbmNlID0gTWF0aC5hYnMoc3RhcnRUb3VjaGVzRGlzdGFuY2UgLSBlbmRUb3VjaGVzRGlzdGFuY2UpO1xuICAgICAgfVxuXG4gICAgICBpZiAoKGZpbmdlckNvdW50ID09PSBvcHRpb25zLmZpbmdlcnMgfHwgb3B0aW9ucy5maW5nZXJzID09PSBBTExfRklOR0VSUykgfHwgIXRvdWNoZXMgfHwgaGFzUGluY2hlcygpKSB7XG5cbiAgICAgICAgLy9UaGUgb3ZlcmFsbCBkaXJlY3Rpb24gb2YgdGhlIHN3aXBlLiBGcm9tIHN0YXJ0IHRvIG5vdy5cbiAgICAgICAgZGlyZWN0aW9uID0gY2FsY3VsYXRlRGlyZWN0aW9uKGN1cnJlbnRGaW5nZXIuc3RhcnQsIGN1cnJlbnRGaW5nZXIuZW5kKTtcblxuICAgICAgICAvL1RoZSBpbW1lZGlhdGUgZGlyZWN0aW9uIG9mIHRoZSBzd2lwZSwgZGlyZWN0aW9uIGJldHdlZW4gdGhlIGxhc3QgbW92ZW1lbnQgYW5kIHRoaXMgb25lLlxuICAgICAgICBjdXJyZW50RGlyZWN0aW9uID0gY2FsY3VsYXRlRGlyZWN0aW9uKGN1cnJlbnRGaW5nZXIubGFzdCwgY3VycmVudEZpbmdlci5lbmQpO1xuXG4gICAgICAgIC8vQ2hlY2sgaWYgd2UgbmVlZCB0byBwcmV2ZW50IGRlZmF1bHQgZXZlbnQgKHBhZ2Ugc2Nyb2xsIC8gcGluY2ggem9vbSkgb3Igbm90XG4gICAgICAgIHZhbGlkYXRlRGVmYXVsdEV2ZW50KGpxRXZlbnQsIGN1cnJlbnREaXJlY3Rpb24pO1xuXG4gICAgICAgIC8vRGlzdGFuY2UgYW5kIGR1cmF0aW9uIGFyZSBhbGwgb2ZmIHRoZSBtYWluIGZpbmdlclxuICAgICAgICBkaXN0YW5jZSA9IGNhbGN1bGF0ZURpc3RhbmNlKGN1cnJlbnRGaW5nZXIuc3RhcnQsIGN1cnJlbnRGaW5nZXIuZW5kKTtcbiAgICAgICAgZHVyYXRpb24gPSBjYWxjdWxhdGVEdXJhdGlvbigpO1xuXG4gICAgICAgIC8vQ2FjaGUgdGhlIG1heGltdW0gZGlzdGFuY2Ugd2UgbWFkZSBpbiB0aGlzIGRpcmVjdGlvblxuICAgICAgICBzZXRNYXhEaXN0YW5jZShkaXJlY3Rpb24sIGRpc3RhbmNlKTtcblxuICAgICAgICAvL1RyaWdnZXIgc3RhdHVzIGhhbmRsZXJcbiAgICAgICAgcmV0ID0gdHJpZ2dlckhhbmRsZXIoZXZlbnQsIHBoYXNlKTtcblxuXG4gICAgICAgIC8vSWYgd2UgdHJpZ2dlciBlbmQgZXZlbnRzIHdoZW4gdGhyZXNob2xkIGFyZSBtZXQsIG9yIHRyaWdnZXIgZXZlbnRzIHdoZW4gdG91Y2ggbGVhdmVzIGVsZW1lbnRcbiAgICAgICAgaWYgKCFvcHRpb25zLnRyaWdnZXJPblRvdWNoRW5kIHx8IG9wdGlvbnMudHJpZ2dlck9uVG91Y2hMZWF2ZSkge1xuXG4gICAgICAgICAgdmFyIGluQm91bmRzID0gdHJ1ZTtcblxuICAgICAgICAgIC8vSWYgY2hlY2tpbmcgaWYgd2UgbGVhdmUgdGhlIGVsZW1lbnQsIHJ1biB0aGUgYm91bmRzIGNoZWNrICh3ZSBjYW4gdXNlIHRvdWNobGVhdmUgYXMgaXRzIG5vdCBzdXBwb3J0ZWQgb24gd2Via2l0KVxuICAgICAgICAgIGlmIChvcHRpb25zLnRyaWdnZXJPblRvdWNoTGVhdmUpIHtcbiAgICAgICAgICAgIHZhciBib3VuZHMgPSBnZXRib3VuZHModGhpcyk7XG4gICAgICAgICAgICBpbkJvdW5kcyA9IGlzSW5Cb3VuZHMoY3VycmVudEZpbmdlci5lbmQsIGJvdW5kcyk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgLy9UcmlnZ2VyIGVuZCBoYW5kbGVzIGFzIHdlIHN3aXBlIGlmIHRocmVzaG9sZHMgbWV0IG9yIGlmIHdlIGhhdmUgbGVmdCB0aGUgZWxlbWVudCBpZiB0aGUgdXNlciBoYXMgYXNrZWQgdG8gY2hlY2sgdGhlc2UuLlxuICAgICAgICAgIGlmICghb3B0aW9ucy50cmlnZ2VyT25Ub3VjaEVuZCAmJiBpbkJvdW5kcykge1xuICAgICAgICAgICAgcGhhc2UgPSBnZXROZXh0UGhhc2UoUEhBU0VfTU9WRSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIC8vV2UgZW5kIGlmIG91dCBvZiBib3VuZHMgaGVyZSwgc28gc2V0IGN1cnJlbnQgcGhhc2UgdG8gRU5ELCBhbmQgY2hlY2sgaWYgaXRzIG1vZGlmaWVkXG4gICAgICAgICAgZWxzZSBpZiAob3B0aW9ucy50cmlnZ2VyT25Ub3VjaExlYXZlICYmICFpbkJvdW5kcykge1xuICAgICAgICAgICAgcGhhc2UgPSBnZXROZXh0UGhhc2UoUEhBU0VfRU5EKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAocGhhc2UgPT0gUEhBU0VfQ0FOQ0VMIHx8IHBoYXNlID09IFBIQVNFX0VORCkge1xuICAgICAgICAgICAgdHJpZ2dlckhhbmRsZXIoZXZlbnQsIHBoYXNlKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHBoYXNlID0gUEhBU0VfQ0FOQ0VMO1xuICAgICAgICB0cmlnZ2VySGFuZGxlcihldmVudCwgcGhhc2UpO1xuICAgICAgfVxuXG4gICAgICBpZiAocmV0ID09PSBmYWxzZSkge1xuICAgICAgICBwaGFzZSA9IFBIQVNFX0NBTkNFTDtcbiAgICAgICAgdHJpZ2dlckhhbmRsZXIoZXZlbnQsIHBoYXNlKTtcbiAgICAgIH1cbiAgICB9XG5cblxuXG5cbiAgICAvKipcbiAgICAgKiBFdmVudCBoYW5kbGVyIGZvciBhIHRvdWNoIGVuZCBldmVudC5cbiAgICAgKiBDYWxjdWxhdGUgdGhlIGRpcmVjdGlvbiBhbmQgdHJpZ2dlciBldmVudHNcbiAgICAgKiBAaW5uZXJcbiAgICAgKiBAcGFyYW0ge29iamVjdH0ganFFdmVudCBUaGUgbm9ybWFsaXNlZCBqUXVlcnkgZXZlbnQgb2JqZWN0LlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHRvdWNoRW5kKGpxRXZlbnQpIHtcbiAgICAgIC8vQXMgd2UgdXNlIEpxdWVyeSBiaW5kIGZvciBldmVudHMsIHdlIG5lZWQgdG8gdGFyZ2V0IHRoZSBvcmlnaW5hbCBldmVudCBvYmplY3RcbiAgICAgIC8vSWYgdGhlc2UgZXZlbnRzIGFyZSBiZWluZyBwcm9ncmFtbWF0aWNhbGx5IHRyaWdnZXJlZCwgd2UgZG9uJ3QgaGF2ZSBhbiBvcmlnaW5hbCBldmVudCBvYmplY3QsIHNvIHVzZSB0aGUgSnEgb25lLlxuICAgICAgdmFyIGV2ZW50ID0ganFFdmVudC5vcmlnaW5hbEV2ZW50ID8ganFFdmVudC5vcmlnaW5hbEV2ZW50IDoganFFdmVudCxcbiAgICAgICAgdG91Y2hlcyA9IGV2ZW50LnRvdWNoZXM7XG5cbiAgICAgIC8vSWYgd2UgYXJlIHN0aWxsIGluIGEgdG91Y2ggd2l0aCB0aGUgZGV2aWNlIHdhaXQgYSBmcmFjdGlvbiBhbmQgc2VlIGlmIHRoZSBvdGhlciBmaW5nZXIgY29tZXMgdXBcbiAgICAgIC8vaWYgaXQgZG9lcyB3aXRoaW4gdGhlIHRocmVzaG9sZCwgdGhlbiB3ZSB0cmVhdCBpdCBhcyBhIG11bHRpIHJlbGVhc2UsIG5vdCBhIHNpbmdsZSByZWxlYXNlIGFuZCBlbmQgdGhlIHRvdWNoIC8gc3dpcGVcbiAgICAgIGlmICh0b3VjaGVzKSB7XG4gICAgICAgIGlmICh0b3VjaGVzLmxlbmd0aCAmJiAhaW5NdWx0aUZpbmdlclJlbGVhc2UoKSkge1xuICAgICAgICAgIHN0YXJ0TXVsdGlGaW5nZXJSZWxlYXNlKGV2ZW50KTtcbiAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfSBlbHNlIGlmICh0b3VjaGVzLmxlbmd0aCAmJiBpbk11bHRpRmluZ2VyUmVsZWFzZSgpKSB7XG4gICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLy9JZiBhIHByZXZpb3VzIGZpbmdlciBoYXMgYmVlbiByZWxlYXNlZCwgY2hlY2sgaG93IGxvbmcgYWdvLCBpZiB3aXRoaW4gdGhlIHRocmVzaG9sZCwgdGhlbiBhc3N1bWUgaXQgd2FzIGEgbXVsdGlmaW5nZXIgcmVsZWFzZS5cbiAgICAgIC8vVGhpcyBpcyB1c2VkIHRvIGFsbG93IDIgZmluZ2VycyB0byByZWxlYXNlIGZyYWN0aW9uYWxseSBhZnRlciBlYWNoIG90aGVyLCB3aGlsc3QgbWFpbnRhaW5pbmcgdGhlIGV2ZW50IGFzIGNvbnRhaW5pbmcgMiBmaW5nZXJzLCBub3QgMVxuICAgICAgaWYgKGluTXVsdGlGaW5nZXJSZWxlYXNlKCkpIHtcbiAgICAgICAgZmluZ2VyQ291bnQgPSBmaW5nZXJDb3VudEF0UmVsZWFzZTtcbiAgICAgIH1cblxuICAgICAgLy9TZXQgZW5kIG9mIHN3aXBlXG4gICAgICBlbmRUaW1lID0gZ2V0VGltZVN0YW1wKCk7XG5cbiAgICAgIC8vR2V0IGR1cmF0aW9uIGluY2FzZSBtb3ZlIHdhcyBuZXZlciBmaXJlZFxuICAgICAgZHVyYXRpb24gPSBjYWxjdWxhdGVEdXJhdGlvbigpO1xuXG4gICAgICAvL0lmIHdlIHRyaWdnZXIgaGFuZGxlcnMgYXQgZW5kIG9mIHN3aXBlIE9SLCB3ZSB0cmlnZ2VyIGR1cmluZywgYnV0IHRoZXkgZGlkbnQgdHJpZ2dlciBhbmQgd2UgYXJlIHN0aWxsIGluIHRoZSBtb3ZlIHBoYXNlXG4gICAgICBpZiAoZGlkU3dpcGVCYWNrVG9DYW5jZWwoKSB8fCAhdmFsaWRhdGVTd2lwZURpc3RhbmNlKCkpIHtcbiAgICAgICAgcGhhc2UgPSBQSEFTRV9DQU5DRUw7XG4gICAgICAgIHRyaWdnZXJIYW5kbGVyKGV2ZW50LCBwaGFzZSk7XG4gICAgICB9IGVsc2UgaWYgKG9wdGlvbnMudHJpZ2dlck9uVG91Y2hFbmQgfHwgKG9wdGlvbnMudHJpZ2dlck9uVG91Y2hFbmQgPT09IGZhbHNlICYmIHBoYXNlID09PSBQSEFTRV9NT1ZFKSkge1xuICAgICAgICAvL2NhbGwgdGhpcyBvbiBqcSBldmVudCBzbyB3ZSBhcmUgY3Jvc3MgYnJvd3NlclxuICAgICAgICBpZiAob3B0aW9ucy5wcmV2ZW50RGVmYXVsdEV2ZW50cyAhPT0gZmFsc2UgJiYganFFdmVudC5jYW5jZWxhYmxlICE9PSBmYWxzZSkge1xuICAgICAgICAgIGpxRXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgfVxuICAgICAgICBwaGFzZSA9IFBIQVNFX0VORDtcbiAgICAgICAgdHJpZ2dlckhhbmRsZXIoZXZlbnQsIHBoYXNlKTtcbiAgICAgIH1cbiAgICAgIC8vU3BlY2lhbCBjYXNlcyAtIEEgdGFwIHNob3VsZCBhbHdheXMgZmlyZSBvbiB0b3VjaCBlbmQgcmVnYXJkbGVzcyxcbiAgICAgIC8vU28gaGVyZSB3ZSBtYW51YWxseSB0cmlnZ2VyIHRoZSB0YXAgZW5kIGhhbmRsZXIgYnkgaXRzZWxmXG4gICAgICAvL1dlIGRvbnQgcnVuIHRyaWdnZXIgaGFuZGxlciBhcyBpdCB3aWxsIHJlLXRyaWdnZXIgZXZlbnRzIHRoYXQgbWF5IGhhdmUgZmlyZWQgYWxyZWFkeVxuICAgICAgZWxzZSBpZiAoIW9wdGlvbnMudHJpZ2dlck9uVG91Y2hFbmQgJiYgaGFzVGFwKCkpIHtcbiAgICAgICAgLy9UcmlnZ2VyIHRoZSBwaW5jaCBldmVudHMuLi5cbiAgICAgICAgcGhhc2UgPSBQSEFTRV9FTkQ7XG4gICAgICAgIHRyaWdnZXJIYW5kbGVyRm9yR2VzdHVyZShldmVudCwgcGhhc2UsIFRBUCk7XG4gICAgICB9IGVsc2UgaWYgKHBoYXNlID09PSBQSEFTRV9NT1ZFKSB7XG4gICAgICAgIHBoYXNlID0gUEhBU0VfQ0FOQ0VMO1xuICAgICAgICB0cmlnZ2VySGFuZGxlcihldmVudCwgcGhhc2UpO1xuICAgICAgfVxuXG4gICAgICBzZXRUb3VjaEluUHJvZ3Jlc3MoZmFsc2UpO1xuXG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cblxuXG4gICAgLyoqXG4gICAgICogRXZlbnQgaGFuZGxlciBmb3IgYSB0b3VjaCBjYW5jZWwgZXZlbnQuXG4gICAgICogQ2xlYXJzIGN1cnJlbnQgdmFyc1xuICAgICAqIEBpbm5lclxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHRvdWNoQ2FuY2VsKCkge1xuICAgICAgLy8gcmVzZXQgdGhlIHZhcmlhYmxlcyBiYWNrIHRvIGRlZmF1bHQgdmFsdWVzXG4gICAgICBmaW5nZXJDb3VudCA9IDA7XG4gICAgICBlbmRUaW1lID0gMDtcbiAgICAgIHN0YXJ0VGltZSA9IDA7XG4gICAgICBzdGFydFRvdWNoZXNEaXN0YW5jZSA9IDA7XG4gICAgICBlbmRUb3VjaGVzRGlzdGFuY2UgPSAwO1xuICAgICAgcGluY2hab29tID0gMTtcblxuICAgICAgLy9JZiB3ZSB3ZXJlIGluIHByb2dyZXNzIG9mIHRyYWNraW5nIGEgcG9zc2libGUgbXVsdGkgdG91Y2ggZW5kLCB0aGVuIHJlIHNldCBpdC5cbiAgICAgIGNhbmNlbE11bHRpRmluZ2VyUmVsZWFzZSgpO1xuXG4gICAgICBzZXRUb3VjaEluUHJvZ3Jlc3MoZmFsc2UpO1xuICAgIH1cblxuXG4gICAgLyoqXG4gICAgICogRXZlbnQgaGFuZGxlciBmb3IgYSB0b3VjaCBsZWF2ZSBldmVudC5cbiAgICAgKiBUaGlzIGlzIG9ubHkgdHJpZ2dlcmVkIG9uIGRlc2t0b3BzLCBpbiB0b3VjaCB3ZSB3b3JrIHRoaXMgb3V0IG1hbnVhbGx5XG4gICAgICogYXMgdGhlIHRvdWNobGVhdmUgZXZlbnQgaXMgbm90IHN1cHBvcnRlZCBpbiB3ZWJraXRcbiAgICAgKiBAaW5uZXJcbiAgICAgKi9cbiAgICBmdW5jdGlvbiB0b3VjaExlYXZlKGpxRXZlbnQpIHtcbiAgICAgIC8vSWYgdGhlc2UgZXZlbnRzIGFyZSBiZWluZyBwcm9ncmFtbWF0aWNhbGx5IHRyaWdnZXJlZCwgd2UgZG9uJ3QgaGF2ZSBhbiBvcmlnaW5hbCBldmVudCBvYmplY3QsIHNvIHVzZSB0aGUgSnEgb25lLlxuICAgICAgdmFyIGV2ZW50ID0ganFFdmVudC5vcmlnaW5hbEV2ZW50ID8ganFFdmVudC5vcmlnaW5hbEV2ZW50IDoganFFdmVudDtcblxuICAgICAgLy9JZiB3ZSBoYXZlIHRoZSB0cmlnZ2VyIG9uIGxlYXZlIHByb3BlcnR5IHNldC4uLi5cbiAgICAgIGlmIChvcHRpb25zLnRyaWdnZXJPblRvdWNoTGVhdmUpIHtcbiAgICAgICAgcGhhc2UgPSBnZXROZXh0UGhhc2UoUEhBU0VfRU5EKTtcbiAgICAgICAgdHJpZ2dlckhhbmRsZXIoZXZlbnQsIHBoYXNlKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZW1vdmVzIGFsbCBsaXN0ZW5lcnMgdGhhdCB3ZXJlIGFzc29jaWF0ZWQgd2l0aCB0aGUgcGx1Z2luXG4gICAgICogQGlubmVyXG4gICAgICovXG4gICAgZnVuY3Rpb24gcmVtb3ZlTGlzdGVuZXJzKCkge1xuICAgICAgJGVsZW1lbnQub2ZmKFNUQVJUX0VWLCB0b3VjaFN0YXJ0KTtcbiAgICAgICRlbGVtZW50Lm9mZihDQU5DRUxfRVYsIHRvdWNoQ2FuY2VsKTtcbiAgICAgICRlbGVtZW50Lm9mZihNT1ZFX0VWLCB0b3VjaE1vdmUpO1xuICAgICAgJGVsZW1lbnQub2ZmKEVORF9FViwgdG91Y2hFbmQpO1xuXG4gICAgICAvL3dlIG9ubHkgaGF2ZSBsZWF2ZSBldmVudHMgb24gZGVza3RvcCwgd2UgbWFudWFsbHkgY2FsY3VsYXRlIGxlYXZlIG9uIHRvdWNoIGFzIGl0cyBub3Qgc3VwcG9ydGVkIGluIHdlYmtpdFxuICAgICAgaWYgKExFQVZFX0VWKSB7XG4gICAgICAgICRlbGVtZW50Lm9mZihMRUFWRV9FViwgdG91Y2hMZWF2ZSk7XG4gICAgICB9XG5cbiAgICAgIHNldFRvdWNoSW5Qcm9ncmVzcyhmYWxzZSk7XG4gICAgfVxuXG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgdGhlIHRpbWUgYW5kIGRpc3RhbmNlIHRocmVzaG9sZHMgaGF2ZSBiZWVuIG1ldCwgYW5kIGlmIHNvIHRoZW4gdGhlIGFwcHJvcHJpYXRlIGhhbmRsZXJzIGFyZSBmaXJlZC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBnZXROZXh0UGhhc2UoY3VycmVudFBoYXNlKSB7XG5cbiAgICAgIHZhciBuZXh0UGhhc2UgPSBjdXJyZW50UGhhc2U7XG5cbiAgICAgIC8vIEVuc3VyZSB3ZSBoYXZlIHZhbGlkIHN3aXBlICh1bmRlciB0aW1lIGFuZCBvdmVyIGRpc3RhbmNlICBhbmQgY2hlY2sgaWYgd2UgYXJlIG91dCBvZiBib3VuZC4uLilcbiAgICAgIHZhciB2YWxpZFRpbWUgPSB2YWxpZGF0ZVN3aXBlVGltZSgpO1xuICAgICAgdmFyIHZhbGlkRGlzdGFuY2UgPSB2YWxpZGF0ZVN3aXBlRGlzdGFuY2UoKTtcbiAgICAgIHZhciBkaWRDYW5jZWwgPSBkaWRTd2lwZUJhY2tUb0NhbmNlbCgpO1xuXG4gICAgICAvL0lmIHdlIGhhdmUgZXhjZWVkZWQgb3VyIHRpbWUsIHRoZW4gY2FuY2VsXG4gICAgICBpZiAoIXZhbGlkVGltZSB8fCBkaWRDYW5jZWwpIHtcbiAgICAgICAgbmV4dFBoYXNlID0gUEhBU0VfQ0FOQ0VMO1xuICAgICAgfVxuICAgICAgLy9FbHNlIGlmIHdlIGFyZSBtb3ZpbmcsIGFuZCBoYXZlIHJlYWNoZWQgZGlzdGFuY2UgdGhlbiBlbmRcbiAgICAgIGVsc2UgaWYgKHZhbGlkRGlzdGFuY2UgJiYgY3VycmVudFBoYXNlID09IFBIQVNFX01PVkUgJiYgKCFvcHRpb25zLnRyaWdnZXJPblRvdWNoRW5kIHx8IG9wdGlvbnMudHJpZ2dlck9uVG91Y2hMZWF2ZSkpIHtcbiAgICAgICAgbmV4dFBoYXNlID0gUEhBU0VfRU5EO1xuICAgICAgfVxuICAgICAgLy9FbHNlIGlmIHdlIGhhdmUgZW5kZWQgYnkgbGVhdmluZyBhbmQgZGlkbid0IHJlYWNoIGRpc3RhbmNlLCB0aGVuIGNhbmNlbFxuICAgICAgZWxzZSBpZiAoIXZhbGlkRGlzdGFuY2UgJiYgY3VycmVudFBoYXNlID09IFBIQVNFX0VORCAmJiBvcHRpb25zLnRyaWdnZXJPblRvdWNoTGVhdmUpIHtcbiAgICAgICAgbmV4dFBoYXNlID0gUEhBU0VfQ0FOQ0VMO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gbmV4dFBoYXNlO1xuICAgIH1cblxuXG4gICAgLyoqXG4gICAgICogVHJpZ2dlciB0aGUgcmVsZXZhbnQgZXZlbnQgaGFuZGxlclxuICAgICAqIFRoZSBoYW5kbGVycyBhcmUgcGFzc2VkIHRoZSBvcmlnaW5hbCBldmVudCwgdGhlIGVsZW1lbnQgdGhhdCB3YXMgc3dpcGVkLCBhbmQgaW4gdGhlIGNhc2Ugb2YgdGhlIGNhdGNoIGFsbCBoYW5kbGVyLCB0aGUgZGlyZWN0aW9uIHRoYXQgd2FzIHN3aXBlZCwgXCJsZWZ0XCIsIFwicmlnaHRcIiwgXCJ1cFwiLCBvciBcImRvd25cIlxuICAgICAqIEBwYXJhbSB7b2JqZWN0fSBldmVudCB0aGUgb3JpZ2luYWwgZXZlbnQgb2JqZWN0XG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHBoYXNlIHRoZSBwaGFzZSBvZiB0aGUgc3dpcGUgKHN0YXJ0LCBlbmQgY2FuY2VsIGV0Yykge0BsaW5rICQuZm4uc3dpcGUucGhhc2VzfVxuICAgICAqIEBpbm5lclxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHRyaWdnZXJIYW5kbGVyKGV2ZW50LCBwaGFzZSkge1xuXG5cblxuICAgICAgdmFyIHJldCxcbiAgICAgICAgdG91Y2hlcyA9IGV2ZW50LnRvdWNoZXM7XG5cbiAgICAgIC8vIFNXSVBFIEdFU1RVUkVTXG4gICAgICBpZiAoZGlkU3dpcGUoKSB8fCBoYXNTd2lwZXMoKSkge1xuICAgICAgICAgIHJldCA9IHRyaWdnZXJIYW5kbGVyRm9yR2VzdHVyZShldmVudCwgcGhhc2UsIFNXSVBFKTtcbiAgICAgIH1cblxuICAgICAgLy8gUElOQ0ggR0VTVFVSRVMgKGlmIHRoZSBhYm92ZSBkaWRuJ3QgY2FuY2VsKVxuICAgICAgaWYgKChkaWRQaW5jaCgpIHx8IGhhc1BpbmNoZXMoKSkgJiYgcmV0ICE9PSBmYWxzZSkge1xuICAgICAgICAgIHJldCA9IHRyaWdnZXJIYW5kbGVyRm9yR2VzdHVyZShldmVudCwgcGhhc2UsIFBJTkNIKTtcbiAgICAgIH1cblxuICAgICAgLy8gQ0xJQ0sgLyBUQVAgKGlmIHRoZSBhYm92ZSBkaWRuJ3QgY2FuY2VsKVxuICAgICAgaWYgKGRpZERvdWJsZVRhcCgpICYmIHJldCAhPT0gZmFsc2UpIHtcbiAgICAgICAgLy9UcmlnZ2VyIHRoZSB0YXAgZXZlbnRzLi4uXG4gICAgICAgIHJldCA9IHRyaWdnZXJIYW5kbGVyRm9yR2VzdHVyZShldmVudCwgcGhhc2UsIERPVUJMRV9UQVApO1xuICAgICAgfVxuXG4gICAgICAvLyBDTElDSyAvIFRBUCAoaWYgdGhlIGFib3ZlIGRpZG4ndCBjYW5jZWwpXG4gICAgICBlbHNlIGlmIChkaWRMb25nVGFwKCkgJiYgcmV0ICE9PSBmYWxzZSkge1xuICAgICAgICAvL1RyaWdnZXIgdGhlIHRhcCBldmVudHMuLi5cbiAgICAgICAgcmV0ID0gdHJpZ2dlckhhbmRsZXJGb3JHZXN0dXJlKGV2ZW50LCBwaGFzZSwgTE9OR19UQVApO1xuICAgICAgfVxuXG4gICAgICAvLyBDTElDSyAvIFRBUCAoaWYgdGhlIGFib3ZlIGRpZG4ndCBjYW5jZWwpXG4gICAgICBlbHNlIGlmIChkaWRUYXAoKSAmJiByZXQgIT09IGZhbHNlKSB7XG4gICAgICAgIC8vVHJpZ2dlciB0aGUgdGFwIGV2ZW50Li5cbiAgICAgICAgcmV0ID0gdHJpZ2dlckhhbmRsZXJGb3JHZXN0dXJlKGV2ZW50LCBwaGFzZSwgVEFQKTtcbiAgICAgIH1cblxuXG5cbiAgICAgIC8vIElmIHdlIGFyZSBjYW5jZWxsaW5nIHRoZSBnZXN0dXJlLCB0aGVuIG1hbnVhbGx5IHRyaWdnZXIgdGhlIHJlc2V0IGhhbmRsZXJcbiAgICAgIGlmIChwaGFzZSA9PT0gUEhBU0VfQ0FOQ0VMKSB7XG5cbiAgICAgICAgdG91Y2hDYW5jZWwoZXZlbnQpO1xuICAgICAgfVxuXG5cblxuXG4gICAgICAvLyBJZiB3ZSBhcmUgZW5kaW5nIHRoZSBnZXN0dXJlLCB0aGVuIG1hbnVhbGx5IHRyaWdnZXIgdGhlIHJlc2V0IGhhbmRsZXIgSUYgYWxsIGZpbmdlcnMgYXJlIG9mZlxuICAgICAgaWYgKHBoYXNlID09PSBQSEFTRV9FTkQpIHtcbiAgICAgICAgLy9JZiB3ZSBzdXBwb3J0IHRvdWNoLCB0aGVuIGNoZWNrIHRoYXQgYWxsIGZpbmdlcnMgYXJlIG9mZiBiZWZvcmUgd2UgY2FuY2VsXG4gICAgICAgIGlmICh0b3VjaGVzKSB7XG4gICAgICAgICAgaWYgKCF0b3VjaGVzLmxlbmd0aCkge1xuICAgICAgICAgICAgdG91Y2hDYW5jZWwoZXZlbnQpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0b3VjaENhbmNlbChldmVudCk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHJldDtcbiAgICB9XG5cblxuXG4gICAgLyoqXG4gICAgICogVHJpZ2dlciB0aGUgcmVsZXZhbnQgZXZlbnQgaGFuZGxlclxuICAgICAqIFRoZSBoYW5kbGVycyBhcmUgcGFzc2VkIHRoZSBvcmlnaW5hbCBldmVudCwgdGhlIGVsZW1lbnQgdGhhdCB3YXMgc3dpcGVkLCBhbmQgaW4gdGhlIGNhc2Ugb2YgdGhlIGNhdGNoIGFsbCBoYW5kbGVyLCB0aGUgZGlyZWN0aW9uIHRoYXQgd2FzIHN3aXBlZCwgXCJsZWZ0XCIsIFwicmlnaHRcIiwgXCJ1cFwiLCBvciBcImRvd25cIlxuICAgICAqIEBwYXJhbSB7b2JqZWN0fSBldmVudCB0aGUgb3JpZ2luYWwgZXZlbnQgb2JqZWN0XG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHBoYXNlIHRoZSBwaGFzZSBvZiB0aGUgc3dpcGUgKHN0YXJ0LCBlbmQgY2FuY2VsIGV0Yykge0BsaW5rICQuZm4uc3dpcGUucGhhc2VzfVxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBnZXN0dXJlIHRoZSBnZXN0dXJlIHRvIHRyaWdnZXIgYSBoYW5kbGVyIGZvciA6IFBJTkNIIG9yIFNXSVBFIHtAbGluayAkLmZuLnN3aXBlLmdlc3R1cmVzfVxuICAgICAqIEByZXR1cm4gQm9vbGVhbiBGYWxzZSwgdG8gaW5kaWNhdGUgdGhhdCB0aGUgZXZlbnQgc2hvdWxkIHN0b3AgcHJvcGFnYXRpb24sIG9yIHZvaWQuXG4gICAgICogQGlubmVyXG4gICAgICovXG4gICAgZnVuY3Rpb24gdHJpZ2dlckhhbmRsZXJGb3JHZXN0dXJlKGV2ZW50LCBwaGFzZSwgZ2VzdHVyZSkge1xuXG4gICAgICB2YXIgcmV0O1xuXG4gICAgICAvL1NXSVBFUy4uLi5cbiAgICAgIGlmIChnZXN0dXJlID09IFNXSVBFKSB7XG4gICAgICAgIC8vVHJpZ2dlciBzdGF0dXMgZXZlcnkgdGltZS4uXG4gICAgICAgICRlbGVtZW50LnRyaWdnZXIoJ3N3aXBlU3RhdHVzJywgW3BoYXNlLCBkaXJlY3Rpb24gfHwgbnVsbCwgZGlzdGFuY2UgfHwgMCwgZHVyYXRpb24gfHwgMCwgZmluZ2VyQ291bnQsIGZpbmdlckRhdGEsIGN1cnJlbnREaXJlY3Rpb25dKTtcblxuICAgICAgICBpZiAob3B0aW9ucy5zd2lwZVN0YXR1cykge1xuICAgICAgICAgIHJldCA9IG9wdGlvbnMuc3dpcGVTdGF0dXMuY2FsbCgkZWxlbWVudCwgZXZlbnQsIHBoYXNlLCBkaXJlY3Rpb24gfHwgbnVsbCwgZGlzdGFuY2UgfHwgMCwgZHVyYXRpb24gfHwgMCwgZmluZ2VyQ291bnQsIGZpbmdlckRhdGEsIGN1cnJlbnREaXJlY3Rpb24pO1xuICAgICAgICAgIC8vSWYgdGhlIHN0YXR1cyBjYW5jZWxzLCB0aGVuIGRvbnQgcnVuIHRoZSBzdWJzZXF1ZW50IGV2ZW50IGhhbmRsZXJzLi5cbiAgICAgICAgICBpZiAocmV0ID09PSBmYWxzZSkgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHBoYXNlID09IFBIQVNFX0VORCAmJiB2YWxpZGF0ZVN3aXBlKCkpIHtcblxuICAgICAgICAgIC8vQ2FuY2VsIGFueSB0YXBzIHRoYXQgd2VyZSBpbiBwcm9ncmVzcy4uLlxuICAgICAgICAgIGNsZWFyVGltZW91dChzaW5nbGVUYXBUaW1lb3V0KTtcbiAgICAgICAgICBjbGVhclRpbWVvdXQoaG9sZFRpbWVvdXQpO1xuXG4gICAgICAgICAgJGVsZW1lbnQudHJpZ2dlcignc3dpcGUnLCBbZGlyZWN0aW9uLCBkaXN0YW5jZSwgZHVyYXRpb24sIGZpbmdlckNvdW50LCBmaW5nZXJEYXRhLCBjdXJyZW50RGlyZWN0aW9uXSk7XG5cbiAgICAgICAgICBpZiAob3B0aW9ucy5zd2lwZSkge1xuICAgICAgICAgICAgcmV0ID0gb3B0aW9ucy5zd2lwZS5jYWxsKCRlbGVtZW50LCBldmVudCwgZGlyZWN0aW9uLCBkaXN0YW5jZSwgZHVyYXRpb24sIGZpbmdlckNvdW50LCBmaW5nZXJEYXRhLCBjdXJyZW50RGlyZWN0aW9uKTtcbiAgICAgICAgICAgIC8vSWYgdGhlIHN0YXR1cyBjYW5jZWxzLCB0aGVuIGRvbnQgcnVuIHRoZSBzdWJzZXF1ZW50IGV2ZW50IGhhbmRsZXJzLi5cbiAgICAgICAgICAgIGlmIChyZXQgPT09IGZhbHNlKSByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgLy90cmlnZ2VyIGRpcmVjdGlvbiBzcGVjaWZpYyBldmVudCBoYW5kbGVyc1xuICAgICAgICAgIHN3aXRjaCAoZGlyZWN0aW9uKSB7XG4gICAgICAgICAgICBjYXNlIExFRlQ6XG4gICAgICAgICAgICAgICRlbGVtZW50LnRyaWdnZXIoJ3N3aXBlTGVmdCcsIFtkaXJlY3Rpb24sIGRpc3RhbmNlLCBkdXJhdGlvbiwgZmluZ2VyQ291bnQsIGZpbmdlckRhdGEsIGN1cnJlbnREaXJlY3Rpb25dKTtcblxuICAgICAgICAgICAgICBpZiAob3B0aW9ucy5zd2lwZUxlZnQpIHtcbiAgICAgICAgICAgICAgICByZXQgPSBvcHRpb25zLnN3aXBlTGVmdC5jYWxsKCRlbGVtZW50LCBldmVudCwgZGlyZWN0aW9uLCBkaXN0YW5jZSwgZHVyYXRpb24sIGZpbmdlckNvdW50LCBmaW5nZXJEYXRhLCBjdXJyZW50RGlyZWN0aW9uKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgY2FzZSBSSUdIVDpcbiAgICAgICAgICAgICAgJGVsZW1lbnQudHJpZ2dlcignc3dpcGVSaWdodCcsIFtkaXJlY3Rpb24sIGRpc3RhbmNlLCBkdXJhdGlvbiwgZmluZ2VyQ291bnQsIGZpbmdlckRhdGEsIGN1cnJlbnREaXJlY3Rpb25dKTtcblxuICAgICAgICAgICAgICBpZiAob3B0aW9ucy5zd2lwZVJpZ2h0KSB7XG4gICAgICAgICAgICAgICAgcmV0ID0gb3B0aW9ucy5zd2lwZVJpZ2h0LmNhbGwoJGVsZW1lbnQsIGV2ZW50LCBkaXJlY3Rpb24sIGRpc3RhbmNlLCBkdXJhdGlvbiwgZmluZ2VyQ291bnQsIGZpbmdlckRhdGEsIGN1cnJlbnREaXJlY3Rpb24pO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICBjYXNlIFVQOlxuICAgICAgICAgICAgICAkZWxlbWVudC50cmlnZ2VyKCdzd2lwZVVwJywgW2RpcmVjdGlvbiwgZGlzdGFuY2UsIGR1cmF0aW9uLCBmaW5nZXJDb3VudCwgZmluZ2VyRGF0YSwgY3VycmVudERpcmVjdGlvbl0pO1xuXG4gICAgICAgICAgICAgIGlmIChvcHRpb25zLnN3aXBlVXApIHtcbiAgICAgICAgICAgICAgICByZXQgPSBvcHRpb25zLnN3aXBlVXAuY2FsbCgkZWxlbWVudCwgZXZlbnQsIGRpcmVjdGlvbiwgZGlzdGFuY2UsIGR1cmF0aW9uLCBmaW5nZXJDb3VudCwgZmluZ2VyRGF0YSwgY3VycmVudERpcmVjdGlvbik7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgIGNhc2UgRE9XTjpcbiAgICAgICAgICAgICAgJGVsZW1lbnQudHJpZ2dlcignc3dpcGVEb3duJywgW2RpcmVjdGlvbiwgZGlzdGFuY2UsIGR1cmF0aW9uLCBmaW5nZXJDb3VudCwgZmluZ2VyRGF0YSwgY3VycmVudERpcmVjdGlvbl0pO1xuXG4gICAgICAgICAgICAgIGlmIChvcHRpb25zLnN3aXBlRG93bikge1xuICAgICAgICAgICAgICAgIHJldCA9IG9wdGlvbnMuc3dpcGVEb3duLmNhbGwoJGVsZW1lbnQsIGV2ZW50LCBkaXJlY3Rpb24sIGRpc3RhbmNlLCBkdXJhdGlvbiwgZmluZ2VyQ291bnQsIGZpbmdlckRhdGEsIGN1cnJlbnREaXJlY3Rpb24pO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuXG5cbiAgICAgIC8vUElOQ0hFUy4uLi5cbiAgICAgIGlmIChnZXN0dXJlID09IFBJTkNIKSB7XG4gICAgICAgICRlbGVtZW50LnRyaWdnZXIoJ3BpbmNoU3RhdHVzJywgW3BoYXNlLCBwaW5jaERpcmVjdGlvbiB8fCBudWxsLCBwaW5jaERpc3RhbmNlIHx8IDAsIGR1cmF0aW9uIHx8IDAsIGZpbmdlckNvdW50LCBwaW5jaFpvb20sIGZpbmdlckRhdGFdKTtcblxuICAgICAgICBpZiAob3B0aW9ucy5waW5jaFN0YXR1cykge1xuICAgICAgICAgIHJldCA9IG9wdGlvbnMucGluY2hTdGF0dXMuY2FsbCgkZWxlbWVudCwgZXZlbnQsIHBoYXNlLCBwaW5jaERpcmVjdGlvbiB8fCBudWxsLCBwaW5jaERpc3RhbmNlIHx8IDAsIGR1cmF0aW9uIHx8IDAsIGZpbmdlckNvdW50LCBwaW5jaFpvb20sIGZpbmdlckRhdGEpO1xuICAgICAgICAgIC8vSWYgdGhlIHN0YXR1cyBjYW5jZWxzLCB0aGVuIGRvbnQgcnVuIHRoZSBzdWJzZXF1ZW50IGV2ZW50IGhhbmRsZXJzLi5cbiAgICAgICAgICBpZiAocmV0ID09PSBmYWxzZSkgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHBoYXNlID09IFBIQVNFX0VORCAmJiB2YWxpZGF0ZVBpbmNoKCkpIHtcblxuICAgICAgICAgIHN3aXRjaCAocGluY2hEaXJlY3Rpb24pIHtcbiAgICAgICAgICAgIGNhc2UgSU46XG4gICAgICAgICAgICAgICRlbGVtZW50LnRyaWdnZXIoJ3BpbmNoSW4nLCBbcGluY2hEaXJlY3Rpb24gfHwgbnVsbCwgcGluY2hEaXN0YW5jZSB8fCAwLCBkdXJhdGlvbiB8fCAwLCBmaW5nZXJDb3VudCwgcGluY2hab29tLCBmaW5nZXJEYXRhXSk7XG5cbiAgICAgICAgICAgICAgaWYgKG9wdGlvbnMucGluY2hJbikge1xuICAgICAgICAgICAgICAgIHJldCA9IG9wdGlvbnMucGluY2hJbi5jYWxsKCRlbGVtZW50LCBldmVudCwgcGluY2hEaXJlY3Rpb24gfHwgbnVsbCwgcGluY2hEaXN0YW5jZSB8fCAwLCBkdXJhdGlvbiB8fCAwLCBmaW5nZXJDb3VudCwgcGluY2hab29tLCBmaW5nZXJEYXRhKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgY2FzZSBPVVQ6XG4gICAgICAgICAgICAgICRlbGVtZW50LnRyaWdnZXIoJ3BpbmNoT3V0JywgW3BpbmNoRGlyZWN0aW9uIHx8IG51bGwsIHBpbmNoRGlzdGFuY2UgfHwgMCwgZHVyYXRpb24gfHwgMCwgZmluZ2VyQ291bnQsIHBpbmNoWm9vbSwgZmluZ2VyRGF0YV0pO1xuXG4gICAgICAgICAgICAgIGlmIChvcHRpb25zLnBpbmNoT3V0KSB7XG4gICAgICAgICAgICAgICAgcmV0ID0gb3B0aW9ucy5waW5jaE91dC5jYWxsKCRlbGVtZW50LCBldmVudCwgcGluY2hEaXJlY3Rpb24gfHwgbnVsbCwgcGluY2hEaXN0YW5jZSB8fCAwLCBkdXJhdGlvbiB8fCAwLCBmaW5nZXJDb3VudCwgcGluY2hab29tLCBmaW5nZXJEYXRhKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKGdlc3R1cmUgPT0gVEFQKSB7XG4gICAgICAgIGlmIChwaGFzZSA9PT0gUEhBU0VfQ0FOQ0VMIHx8IHBoYXNlID09PSBQSEFTRV9FTkQpIHtcblxuICAgICAgICAgIGNsZWFyVGltZW91dChzaW5nbGVUYXBUaW1lb3V0KTtcbiAgICAgICAgICBjbGVhclRpbWVvdXQoaG9sZFRpbWVvdXQpO1xuXG4gICAgICAgICAgLy9JZiB3ZSBhcmUgYWxzbyBsb29raW5nIGZvciBkb3ViZWxUYXBzLCB3YWl0IGluY2FzZSB0aGlzIGlzIG9uZS4uLlxuICAgICAgICAgIGlmIChoYXNEb3VibGVUYXAoKSAmJiAhaW5Eb3VibGVUYXAoKSkge1xuICAgICAgICAgICAgZG91YmxlVGFwU3RhcnRUaW1lID0gZ2V0VGltZVN0YW1wKCk7XG5cbiAgICAgICAgICAgIC8vTm93IHdhaXQgZm9yIHRoZSBkb3VibGUgdGFwIHRpbWVvdXQsIGFuZCB0cmlnZ2VyIHRoaXMgc2luZ2xlIHRhcFxuICAgICAgICAgICAgLy9pZiBpdHMgbm90IGNhbmNlbGxlZCBieSBhIGRvdWJsZSB0YXBcbiAgICAgICAgICAgIHNpbmdsZVRhcFRpbWVvdXQgPSBzZXRUaW1lb3V0KCQucHJveHkoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgIGRvdWJsZVRhcFN0YXJ0VGltZSA9IG51bGw7XG4gICAgICAgICAgICAgICRlbGVtZW50LnRyaWdnZXIoJ3RhcCcsIFtldmVudC50YXJnZXRdKTtcblxuICAgICAgICAgICAgICBpZiAob3B0aW9ucy50YXApIHtcbiAgICAgICAgICAgICAgICByZXQgPSBvcHRpb25zLnRhcC5jYWxsKCRlbGVtZW50LCBldmVudCwgZXZlbnQudGFyZ2V0KTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSwgdGhpcyksIG9wdGlvbnMuZG91YmxlVGFwVGhyZXNob2xkKTtcblxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBkb3VibGVUYXBTdGFydFRpbWUgPSBudWxsO1xuICAgICAgICAgICAgJGVsZW1lbnQudHJpZ2dlcigndGFwJywgW2V2ZW50LnRhcmdldF0pO1xuICAgICAgICAgICAgaWYgKG9wdGlvbnMudGFwKSB7XG4gICAgICAgICAgICAgIHJldCA9IG9wdGlvbnMudGFwLmNhbGwoJGVsZW1lbnQsIGV2ZW50LCBldmVudC50YXJnZXQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChnZXN0dXJlID09IERPVUJMRV9UQVApIHtcbiAgICAgICAgaWYgKHBoYXNlID09PSBQSEFTRV9DQU5DRUwgfHwgcGhhc2UgPT09IFBIQVNFX0VORCkge1xuICAgICAgICAgIGNsZWFyVGltZW91dChzaW5nbGVUYXBUaW1lb3V0KTtcbiAgICAgICAgICBjbGVhclRpbWVvdXQoaG9sZFRpbWVvdXQpO1xuICAgICAgICAgIGRvdWJsZVRhcFN0YXJ0VGltZSA9IG51bGw7XG4gICAgICAgICAgJGVsZW1lbnQudHJpZ2dlcignZG91YmxldGFwJywgW2V2ZW50LnRhcmdldF0pO1xuXG4gICAgICAgICAgaWYgKG9wdGlvbnMuZG91YmxlVGFwKSB7XG4gICAgICAgICAgICByZXQgPSBvcHRpb25zLmRvdWJsZVRhcC5jYWxsKCRlbGVtZW50LCBldmVudCwgZXZlbnQudGFyZ2V0KTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAoZ2VzdHVyZSA9PSBMT05HX1RBUCkge1xuICAgICAgICBpZiAocGhhc2UgPT09IFBIQVNFX0NBTkNFTCB8fCBwaGFzZSA9PT0gUEhBU0VfRU5EKSB7XG4gICAgICAgICAgY2xlYXJUaW1lb3V0KHNpbmdsZVRhcFRpbWVvdXQpO1xuICAgICAgICAgIGRvdWJsZVRhcFN0YXJ0VGltZSA9IG51bGw7XG5cbiAgICAgICAgICAkZWxlbWVudC50cmlnZ2VyKCdsb25ndGFwJywgW2V2ZW50LnRhcmdldF0pO1xuICAgICAgICAgIGlmIChvcHRpb25zLmxvbmdUYXApIHtcbiAgICAgICAgICAgIHJldCA9IG9wdGlvbnMubG9uZ1RhcC5jYWxsKCRlbGVtZW50LCBldmVudCwgZXZlbnQudGFyZ2V0KTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHJldDtcbiAgICB9XG5cblxuICAgIC8vXG4gICAgLy8gR0VTVFVSRSBWQUxJREFUSU9OXG4gICAgLy9cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyB0aGUgdXNlciBoYXMgc3dpcGUgZmFyIGVub3VnaFxuICAgICAqIEByZXR1cm4gQm9vbGVhbiBpZiA8Y29kZT50aHJlc2hvbGQ8L2NvZGU+IGhhcyBiZWVuIHNldCwgcmV0dXJuIHRydWUgaWYgdGhlIHRocmVzaG9sZCB3YXMgbWV0LCBlbHNlIGZhbHNlLlxuICAgICAqIElmIG5vIHRocmVzaG9sZCB3YXMgc2V0LCB0aGVuIHdlIHJldHVybiB0cnVlLlxuICAgICAqIEBpbm5lclxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHZhbGlkYXRlU3dpcGVEaXN0YW5jZSgpIHtcbiAgICAgIHZhciB2YWxpZCA9IHRydWU7XG4gICAgICAvL0lmIHdlIG1hZGUgaXQgcGFzdCB0aGUgbWluIHN3aXBlIGRpc3RhbmNlLi5cbiAgICAgIGlmIChvcHRpb25zLnRocmVzaG9sZCAhPT0gbnVsbCkge1xuICAgICAgICB2YWxpZCA9IGRpc3RhbmNlID49IG9wdGlvbnMudGhyZXNob2xkO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdmFsaWQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIHRoZSB1c2VyIGhhcyBzd2lwZWQgYmFjayB0byBjYW5jZWwuXG4gICAgICogQHJldHVybiBCb29sZWFuIGlmIDxjb2RlPmNhbmNlbFRocmVzaG9sZDwvY29kZT4gaGFzIGJlZW4gc2V0LCByZXR1cm4gdHJ1ZSBpZiB0aGUgY2FuY2VsVGhyZXNob2xkIHdhcyBtZXQsIGVsc2UgZmFsc2UuXG4gICAgICogSWYgbm8gY2FuY2VsVGhyZXNob2xkIHdhcyBzZXQsIHRoZW4gd2UgcmV0dXJuIHRydWUuXG4gICAgICogQGlubmVyXG4gICAgICovXG4gICAgZnVuY3Rpb24gZGlkU3dpcGVCYWNrVG9DYW5jZWwoKSB7XG4gICAgICB2YXIgY2FuY2VsbGVkID0gZmFsc2U7XG4gICAgICBpZiAob3B0aW9ucy5jYW5jZWxUaHJlc2hvbGQgIT09IG51bGwgJiYgZGlyZWN0aW9uICE9PSBudWxsKSB7XG4gICAgICAgIGNhbmNlbGxlZCA9IChnZXRNYXhEaXN0YW5jZShkaXJlY3Rpb24pIC0gZGlzdGFuY2UpID49IG9wdGlvbnMuY2FuY2VsVGhyZXNob2xkO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gY2FuY2VsbGVkO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyB0aGUgdXNlciBoYXMgcGluY2hlZCBmYXIgZW5vdWdoXG4gICAgICogQHJldHVybiBCb29sZWFuIGlmIDxjb2RlPnBpbmNoVGhyZXNob2xkPC9jb2RlPiBoYXMgYmVlbiBzZXQsIHJldHVybiB0cnVlIGlmIHRoZSB0aHJlc2hvbGQgd2FzIG1ldCwgZWxzZSBmYWxzZS5cbiAgICAgKiBJZiBubyB0aHJlc2hvbGQgd2FzIHNldCwgdGhlbiB3ZSByZXR1cm4gdHJ1ZS5cbiAgICAgKiBAaW5uZXJcbiAgICAgKi9cbiAgICBmdW5jdGlvbiB2YWxpZGF0ZVBpbmNoRGlzdGFuY2UoKSB7XG4gICAgICBpZiAob3B0aW9ucy5waW5jaFRocmVzaG9sZCAhPT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gcGluY2hEaXN0YW5jZSA+PSBvcHRpb25zLnBpbmNoVGhyZXNob2xkO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIHRoYXQgdGhlIHRpbWUgdGFrZW4gdG8gc3dpcGUgbWVldHMgdGhlIG1pbmltdW0gLyBtYXhpbXVtIHJlcXVpcmVtZW50c1xuICAgICAqIEByZXR1cm4gQm9vbGVhblxuICAgICAqIEBpbm5lclxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHZhbGlkYXRlU3dpcGVUaW1lKCkge1xuICAgICAgdmFyIHJlc3VsdDtcbiAgICAgIC8vSWYgbm8gdGltZSBzZXQsIHRoZW4gcmV0dXJuIHRydWVcbiAgICAgIGlmIChvcHRpb25zLm1heFRpbWVUaHJlc2hvbGQpIHtcbiAgICAgICAgaWYgKGR1cmF0aW9uID49IG9wdGlvbnMubWF4VGltZVRocmVzaG9sZCkge1xuICAgICAgICAgIHJlc3VsdCA9IGZhbHNlO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJlc3VsdCA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJlc3VsdCA9IHRydWU7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgZGlyZWN0aW9uIG9mIHRoZSBzd2lwZSBhbmQgdGhlIHZhbHVlIGFsbG93UGFnZVNjcm9sbCB0byBzZWUgaWYgd2Ugc2hvdWxkIGFsbG93IG9yIHByZXZlbnQgdGhlIGRlZmF1bHQgYmVoYXZpb3VyIGZyb20gb2NjdXJyaW5nLlxuICAgICAqIFRoaXMgd2lsbCBlc3NlbnRpYWxseSBhbGxvdyBwYWdlIHNjcm9sbGluZyBvciBub3Qgd2hlbiB0aGUgdXNlciBpcyBzd2lwaW5nIG9uIGEgdG91Y2hTd2lwZSBvYmplY3QuXG4gICAgICogQHBhcmFtIHtvYmplY3R9IGpxRXZlbnQgVGhlIG5vcm1hbGlzZWQgalF1ZXJ5IHJlcHJlc2VudGF0aW9uIG9mIHRoZSBldmVudCBvYmplY3QuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGRpcmVjdGlvbiBUaGUgZGlyZWN0aW9uIG9mIHRoZSBldmVudC4gU2VlIHtAbGluayAkLmZuLnN3aXBlLmRpcmVjdGlvbnN9XG4gICAgICogQHNlZSAkLmZuLnN3aXBlLmRpcmVjdGlvbnNcbiAgICAgKiBAaW5uZXJcbiAgICAgKi9cbiAgICBmdW5jdGlvbiB2YWxpZGF0ZURlZmF1bHRFdmVudChqcUV2ZW50LCBkaXJlY3Rpb24pIHtcblxuICAgICAgLy9JZiB0aGUgb3B0aW9uIGlzIHNldCwgYWxsd2F5cyBhbGxvdyB0aGUgZXZlbnQgdG8gYnViYmxlIHVwIChsZXQgdXNlciBoYW5kbGUgd2VpcmRuZXNzKVxuICAgICAgaWYgKG9wdGlvbnMucHJldmVudERlZmF1bHRFdmVudHMgPT09IGZhbHNlKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgaWYgKG9wdGlvbnMuYWxsb3dQYWdlU2Nyb2xsID09PSBOT05FKSB7XG4gICAgICAgIGpxRXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZhciBhdXRvID0gb3B0aW9ucy5hbGxvd1BhZ2VTY3JvbGwgPT09IEFVVE87XG5cbiAgICAgICAgc3dpdGNoIChkaXJlY3Rpb24pIHtcbiAgICAgICAgICBjYXNlIExFRlQ6XG4gICAgICAgICAgICBpZiAoKG9wdGlvbnMuc3dpcGVMZWZ0ICYmIGF1dG8pIHx8ICghYXV0byAmJiBvcHRpb25zLmFsbG93UGFnZVNjcm9sbCAhPSBIT1JJWk9OVEFMKSkge1xuICAgICAgICAgICAgICBqcUV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgIGNhc2UgUklHSFQ6XG4gICAgICAgICAgICBpZiAoKG9wdGlvbnMuc3dpcGVSaWdodCAmJiBhdXRvKSB8fCAoIWF1dG8gJiYgb3B0aW9ucy5hbGxvd1BhZ2VTY3JvbGwgIT0gSE9SSVpPTlRBTCkpIHtcbiAgICAgICAgICAgICAganFFdmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICBjYXNlIFVQOlxuICAgICAgICAgICAgaWYgKChvcHRpb25zLnN3aXBlVXAgJiYgYXV0bykgfHwgKCFhdXRvICYmIG9wdGlvbnMuYWxsb3dQYWdlU2Nyb2xsICE9IFZFUlRJQ0FMKSkge1xuICAgICAgICAgICAgICBqcUV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgIGNhc2UgRE9XTjpcbiAgICAgICAgICAgIGlmICgob3B0aW9ucy5zd2lwZURvd24gJiYgYXV0bykgfHwgKCFhdXRvICYmIG9wdGlvbnMuYWxsb3dQYWdlU2Nyb2xsICE9IFZFUlRJQ0FMKSkge1xuICAgICAgICAgICAgICBqcUV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgIGNhc2UgTk9ORTpcblxuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cblxuICAgIC8vIFBJTkNIRVNcbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRydWUgb2YgdGhlIGN1cnJlbnQgcGluY2ggbWVldHMgdGhlIHRocmVzaG9sZHNcbiAgICAgKiBAcmV0dXJuIEJvb2xlYW5cbiAgICAgKiBAaW5uZXJcbiAgICAgKi9cbiAgICBmdW5jdGlvbiB2YWxpZGF0ZVBpbmNoKCkge1xuICAgICAgdmFyIGhhc0NvcnJlY3RGaW5nZXJDb3VudCA9IHZhbGlkYXRlRmluZ2VycygpO1xuICAgICAgdmFyIGhhc0VuZFBvaW50ID0gdmFsaWRhdGVFbmRQb2ludCgpO1xuICAgICAgdmFyIGhhc0NvcnJlY3REaXN0YW5jZSA9IHZhbGlkYXRlUGluY2hEaXN0YW5jZSgpO1xuICAgICAgcmV0dXJuIGhhc0NvcnJlY3RGaW5nZXJDb3VudCAmJiBoYXNFbmRQb2ludCAmJiBoYXNDb3JyZWN0RGlzdGFuY2U7XG5cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRydWUgaWYgYW55IFBpbmNoIGV2ZW50cyBoYXZlIGJlZW4gcmVnaXN0ZXJlZFxuICAgICAqIEByZXR1cm4gQm9vbGVhblxuICAgICAqIEBpbm5lclxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGhhc1BpbmNoZXMoKSB7XG4gICAgICAvL0VudXJlIHdlIGRvbnQgcmV0dXJuIDAgb3IgbnVsbCBmb3IgZmFsc2UgdmFsdWVzXG4gICAgICByZXR1cm4gISEob3B0aW9ucy5waW5jaFN0YXR1cyB8fCBvcHRpb25zLnBpbmNoSW4gfHwgb3B0aW9ucy5waW5jaE91dCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0cnVlIGlmIHdlIGFyZSBkZXRlY3RpbmcgcGluY2hlcywgYW5kIGhhdmUgb25lXG4gICAgICogQHJldHVybiBCb29sZWFuXG4gICAgICogQGlubmVyXG4gICAgICovXG4gICAgZnVuY3Rpb24gZGlkUGluY2goKSB7XG4gICAgICAvL0VudXJlIHdlIGRvbnQgcmV0dXJuIDAgb3IgbnVsbCBmb3IgZmFsc2UgdmFsdWVzXG4gICAgICByZXR1cm4gISEodmFsaWRhdGVQaW5jaCgpICYmIGhhc1BpbmNoZXMoKSk7XG4gICAgfVxuXG5cblxuXG4gICAgLy8gU1dJUEVTXG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0cnVlIGlmIHRoZSBjdXJyZW50IHN3aXBlIG1lZXRzIHRoZSB0aHJlc2hvbGRzXG4gICAgICogQHJldHVybiBCb29sZWFuXG4gICAgICogQGlubmVyXG4gICAgICovXG4gICAgZnVuY3Rpb24gdmFsaWRhdGVTd2lwZSgpIHtcbiAgICAgIC8vQ2hlY2sgdmFsaWRpdHkgb2Ygc3dpcGVcbiAgICAgIHZhciBoYXNWYWxpZFRpbWUgPSB2YWxpZGF0ZVN3aXBlVGltZSgpO1xuICAgICAgdmFyIGhhc1ZhbGlkRGlzdGFuY2UgPSB2YWxpZGF0ZVN3aXBlRGlzdGFuY2UoKTtcbiAgICAgIHZhciBoYXNDb3JyZWN0RmluZ2VyQ291bnQgPSB2YWxpZGF0ZUZpbmdlcnMoKTtcbiAgICAgIHZhciBoYXNFbmRQb2ludCA9IHZhbGlkYXRlRW5kUG9pbnQoKTtcbiAgICAgIHZhciBkaWRDYW5jZWwgPSBkaWRTd2lwZUJhY2tUb0NhbmNlbCgpO1xuXG4gICAgICAvLyBpZiB0aGUgdXNlciBzd2lwZWQgbW9yZSB0aGFuIHRoZSBtaW5pbXVtIGxlbmd0aCwgcGVyZm9ybSB0aGUgYXBwcm9wcmlhdGUgYWN0aW9uXG4gICAgICAvLyBoYXNWYWxpZERpc3RhbmNlIGlzIG51bGwgd2hlbiBubyBkaXN0YW5jZSBpcyBzZXRcbiAgICAgIHZhciB2YWxpZCA9ICFkaWRDYW5jZWwgJiYgaGFzRW5kUG9pbnQgJiYgaGFzQ29ycmVjdEZpbmdlckNvdW50ICYmIGhhc1ZhbGlkRGlzdGFuY2UgJiYgaGFzVmFsaWRUaW1lO1xuXG4gICAgICByZXR1cm4gdmFsaWQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0cnVlIGlmIGFueSBTd2lwZSBldmVudHMgaGF2ZSBiZWVuIHJlZ2lzdGVyZWRcbiAgICAgKiBAcmV0dXJuIEJvb2xlYW5cbiAgICAgKiBAaW5uZXJcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBoYXNTd2lwZXMoKSB7XG4gICAgICAvL0VudXJlIHdlIGRvbnQgcmV0dXJuIDAgb3IgbnVsbCBmb3IgZmFsc2UgdmFsdWVzXG4gICAgICByZXR1cm4gISEob3B0aW9ucy5zd2lwZSB8fCBvcHRpb25zLnN3aXBlU3RhdHVzIHx8IG9wdGlvbnMuc3dpcGVMZWZ0IHx8IG9wdGlvbnMuc3dpcGVSaWdodCB8fCBvcHRpb25zLnN3aXBlVXAgfHwgb3B0aW9ucy5zd2lwZURvd24pO1xuICAgIH1cblxuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0cnVlIGlmIHdlIGFyZSBkZXRlY3Rpbmcgc3dpcGVzIGFuZCBoYXZlIG9uZVxuICAgICAqIEByZXR1cm4gQm9vbGVhblxuICAgICAqIEBpbm5lclxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGRpZFN3aXBlKCkge1xuICAgICAgLy9FbnVyZSB3ZSBkb250IHJldHVybiAwIG9yIG51bGwgZm9yIGZhbHNlIHZhbHVlc1xuICAgICAgcmV0dXJuICEhKHZhbGlkYXRlU3dpcGUoKSAmJiBoYXNTd2lwZXMoKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0cnVlIGlmIHdlIGhhdmUgbWF0Y2hlZCB0aGUgbnVtYmVyIG9mIGZpbmdlcnMgd2UgYXJlIGxvb2tpbmcgZm9yXG4gICAgICogQHJldHVybiBCb29sZWFuXG4gICAgICogQGlubmVyXG4gICAgICovXG4gICAgZnVuY3Rpb24gdmFsaWRhdGVGaW5nZXJzKCkge1xuICAgICAgLy9UaGUgbnVtYmVyIG9mIGZpbmdlcnMgd2Ugd2FudCB3ZXJlIG1hdGNoZWQsIG9yIG9uIGRlc2t0b3Agd2UgaWdub3JlXG4gICAgICByZXR1cm4gKChmaW5nZXJDb3VudCA9PT0gb3B0aW9ucy5maW5nZXJzIHx8IG9wdGlvbnMuZmluZ2VycyA9PT0gQUxMX0ZJTkdFUlMpIHx8ICFTVVBQT1JUU19UT1VDSCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0cnVlIGlmIHdlIGhhdmUgYW4gZW5kIHBvaW50IGZvciB0aGUgc3dpcGVcbiAgICAgKiBAcmV0dXJuIEJvb2xlYW5cbiAgICAgKiBAaW5uZXJcbiAgICAgKi9cbiAgICBmdW5jdGlvbiB2YWxpZGF0ZUVuZFBvaW50KCkge1xuICAgICAgLy9XZSBoYXZlIGFuIGVuZCB2YWx1ZSBmb3IgdGhlIGZpbmdlclxuICAgICAgcmV0dXJuIGZpbmdlckRhdGFbMF0uZW5kLnggIT09IDA7XG4gICAgfVxuXG4gICAgLy8gVEFQIC8gQ0xJQ0tcbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRydWUgaWYgYSBjbGljayAvIHRhcCBldmVudHMgaGF2ZSBiZWVuIHJlZ2lzdGVyZWRcbiAgICAgKiBAcmV0dXJuIEJvb2xlYW5cbiAgICAgKiBAaW5uZXJcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBoYXNUYXAoKSB7XG4gICAgICAvL0VudXJlIHdlIGRvbnQgcmV0dXJuIDAgb3IgbnVsbCBmb3IgZmFsc2UgdmFsdWVzXG4gICAgICByZXR1cm4gISEob3B0aW9ucy50YXApO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgdHJ1ZSBpZiBhIGRvdWJsZSB0YXAgZXZlbnRzIGhhdmUgYmVlbiByZWdpc3RlcmVkXG4gICAgICogQHJldHVybiBCb29sZWFuXG4gICAgICogQGlubmVyXG4gICAgICovXG4gICAgZnVuY3Rpb24gaGFzRG91YmxlVGFwKCkge1xuICAgICAgLy9FbnVyZSB3ZSBkb250IHJldHVybiAwIG9yIG51bGwgZm9yIGZhbHNlIHZhbHVlc1xuICAgICAgcmV0dXJuICEhKG9wdGlvbnMuZG91YmxlVGFwKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRydWUgaWYgYW55IGxvbmcgdGFwIGV2ZW50cyBoYXZlIGJlZW4gcmVnaXN0ZXJlZFxuICAgICAqIEByZXR1cm4gQm9vbGVhblxuICAgICAqIEBpbm5lclxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGhhc0xvbmdUYXAoKSB7XG4gICAgICAvL0VudXJlIHdlIGRvbnQgcmV0dXJuIDAgb3IgbnVsbCBmb3IgZmFsc2UgdmFsdWVzXG4gICAgICByZXR1cm4gISEob3B0aW9ucy5sb25nVGFwKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRydWUgaWYgd2UgY291bGQgYmUgaW4gdGhlIHByb2Nlc3Mgb2YgYSBkb3VibGUgdGFwIChvbmUgdGFwIGhhcyBvY2N1cnJlZCwgd2UgYXJlIGxpc3RlbmluZyBmb3IgZG91YmxlIHRhcHMsIGFuZCB0aGUgdGhyZXNob2xkIGhhc24ndCBwYXN0LlxuICAgICAqIEByZXR1cm4gQm9vbGVhblxuICAgICAqIEBpbm5lclxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHZhbGlkYXRlRG91YmxlVGFwKCkge1xuICAgICAgaWYgKGRvdWJsZVRhcFN0YXJ0VGltZSA9PSBudWxsKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIHZhciBub3cgPSBnZXRUaW1lU3RhbXAoKTtcbiAgICAgIHJldHVybiAoaGFzRG91YmxlVGFwKCkgJiYgKChub3cgLSBkb3VibGVUYXBTdGFydFRpbWUpIDw9IG9wdGlvbnMuZG91YmxlVGFwVGhyZXNob2xkKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0cnVlIGlmIHdlIGNvdWxkIGJlIGluIHRoZSBwcm9jZXNzIG9mIGEgZG91YmxlIHRhcCAob25lIHRhcCBoYXMgb2NjdXJyZWQsIHdlIGFyZSBsaXN0ZW5pbmcgZm9yIGRvdWJsZSB0YXBzLCBhbmQgdGhlIHRocmVzaG9sZCBoYXNuJ3QgcGFzdC5cbiAgICAgKiBAcmV0dXJuIEJvb2xlYW5cbiAgICAgKiBAaW5uZXJcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpbkRvdWJsZVRhcCgpIHtcbiAgICAgIHJldHVybiB2YWxpZGF0ZURvdWJsZVRhcCgpO1xuICAgIH1cblxuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0cnVlIGlmIHdlIGhhdmUgYSB2YWxpZCB0YXBcbiAgICAgKiBAcmV0dXJuIEJvb2xlYW5cbiAgICAgKiBAaW5uZXJcbiAgICAgKi9cbiAgICBmdW5jdGlvbiB2YWxpZGF0ZVRhcCgpIHtcbiAgICAgIHJldHVybiAoKGZpbmdlckNvdW50ID09PSAxIHx8ICFTVVBQT1JUU19UT1VDSCkgJiYgKGlzTmFOKGRpc3RhbmNlKSB8fCBkaXN0YW5jZSA8IG9wdGlvbnMudGhyZXNob2xkKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0cnVlIGlmIHdlIGhhdmUgYSB2YWxpZCBsb25nIHRhcFxuICAgICAqIEByZXR1cm4gQm9vbGVhblxuICAgICAqIEBpbm5lclxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHZhbGlkYXRlTG9uZ1RhcCgpIHtcbiAgICAgIC8vc2xpZ2h0IHRocmVzaG9sZCBvbiBtb3ZpbmcgZmluZ2VyXG4gICAgICByZXR1cm4gKChkdXJhdGlvbiA+IG9wdGlvbnMubG9uZ1RhcFRocmVzaG9sZCkgJiYgKGRpc3RhbmNlIDwgRE9VQkxFX1RBUF9USFJFU0hPTEQpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRydWUgaWYgd2UgYXJlIGRldGVjdGluZyB0YXBzIGFuZCBoYXZlIG9uZVxuICAgICAqIEByZXR1cm4gQm9vbGVhblxuICAgICAqIEBpbm5lclxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGRpZFRhcCgpIHtcbiAgICAgIC8vRW51cmUgd2UgZG9udCByZXR1cm4gMCBvciBudWxsIGZvciBmYWxzZSB2YWx1ZXNcbiAgICAgIHJldHVybiAhISh2YWxpZGF0ZVRhcCgpICYmIGhhc1RhcCgpKTtcbiAgICB9XG5cblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgdHJ1ZSBpZiB3ZSBhcmUgZGV0ZWN0aW5nIGRvdWJsZSB0YXBzIGFuZCBoYXZlIG9uZVxuICAgICAqIEByZXR1cm4gQm9vbGVhblxuICAgICAqIEBpbm5lclxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGRpZERvdWJsZVRhcCgpIHtcbiAgICAgIC8vRW51cmUgd2UgZG9udCByZXR1cm4gMCBvciBudWxsIGZvciBmYWxzZSB2YWx1ZXNcbiAgICAgIHJldHVybiAhISh2YWxpZGF0ZURvdWJsZVRhcCgpICYmIGhhc0RvdWJsZVRhcCgpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRydWUgaWYgd2UgYXJlIGRldGVjdGluZyBsb25nIHRhcHMgYW5kIGhhdmUgb25lXG4gICAgICogQHJldHVybiBCb29sZWFuXG4gICAgICogQGlubmVyXG4gICAgICovXG4gICAgZnVuY3Rpb24gZGlkTG9uZ1RhcCgpIHtcbiAgICAgIC8vRW51cmUgd2UgZG9udCByZXR1cm4gMCBvciBudWxsIGZvciBmYWxzZSB2YWx1ZXNcbiAgICAgIHJldHVybiAhISh2YWxpZGF0ZUxvbmdUYXAoKSAmJiBoYXNMb25nVGFwKCkpO1xuICAgIH1cblxuXG5cblxuICAgIC8vIE1VTFRJIEZJTkdFUiBUT1VDSFxuICAgIC8qKlxuICAgICAqIFN0YXJ0cyB0cmFja2luZyB0aGUgdGltZSBiZXR3ZWVuIDIgZmluZ2VyIHJlbGVhc2VzLCBhbmQga2VlcHMgdHJhY2sgb2YgaG93IG1hbnkgZmluZ2VycyB3ZSBpbml0aWFsbHkgaGFkIHVwXG4gICAgICogQGlubmVyXG4gICAgICovXG4gICAgZnVuY3Rpb24gc3RhcnRNdWx0aUZpbmdlclJlbGVhc2UoZXZlbnQpIHtcbiAgICAgIHByZXZpb3VzVG91Y2hFbmRUaW1lID0gZ2V0VGltZVN0YW1wKCk7XG4gICAgICBmaW5nZXJDb3VudEF0UmVsZWFzZSA9IGV2ZW50LnRvdWNoZXMubGVuZ3RoICsgMTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDYW5jZWxzIHRoZSB0cmFja2luZyBvZiB0aW1lIGJldHdlZW4gMiBmaW5nZXIgcmVsZWFzZXMsIGFuZCByZXNldHMgY291bnRlcnNcbiAgICAgKiBAaW5uZXJcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjYW5jZWxNdWx0aUZpbmdlclJlbGVhc2UoKSB7XG4gICAgICBwcmV2aW91c1RvdWNoRW5kVGltZSA9IDA7XG4gICAgICBmaW5nZXJDb3VudEF0UmVsZWFzZSA9IDA7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIHdlIGFyZSBpbiB0aGUgdGhyZXNob2xkIGJldHdlZW4gMiBmaW5nZXJzIGJlaW5nIHJlbGVhc2VkXG4gICAgICogQHJldHVybiBCb29sZWFuXG4gICAgICogQGlubmVyXG4gICAgICovXG4gICAgZnVuY3Rpb24gaW5NdWx0aUZpbmdlclJlbGVhc2UoKSB7XG5cbiAgICAgIHZhciB3aXRoaW5UaHJlc2hvbGQgPSBmYWxzZTtcblxuICAgICAgaWYgKHByZXZpb3VzVG91Y2hFbmRUaW1lKSB7XG4gICAgICAgIHZhciBkaWZmID0gZ2V0VGltZVN0YW1wKCkgLSBwcmV2aW91c1RvdWNoRW5kVGltZVxuICAgICAgICBpZiAoZGlmZiA8PSBvcHRpb25zLmZpbmdlclJlbGVhc2VUaHJlc2hvbGQpIHtcbiAgICAgICAgICB3aXRoaW5UaHJlc2hvbGQgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB3aXRoaW5UaHJlc2hvbGQ7XG4gICAgfVxuXG5cbiAgICAvKipcbiAgICAgKiBnZXRzIGEgZGF0YSBmbGFnIHRvIGluZGljYXRlIHRoYXQgYSB0b3VjaCBpcyBpbiBwcm9ncmVzc1xuICAgICAqIEByZXR1cm4gQm9vbGVhblxuICAgICAqIEBpbm5lclxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGdldFRvdWNoSW5Qcm9ncmVzcygpIHtcbiAgICAgIC8vc3RyaWN0IGVxdWFsaXR5IHRvIGVuc3VyZSBvbmx5IHRydWUgYW5kIGZhbHNlIGFyZSByZXR1cm5lZFxuICAgICAgcmV0dXJuICEhKCRlbGVtZW50LmRhdGEoUExVR0lOX05TICsgJ19pbnRvdWNoJykgPT09IHRydWUpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFNldHMgYSBkYXRhIGZsYWcgdG8gaW5kaWNhdGUgdGhhdCBhIHRvdWNoIGlzIGluIHByb2dyZXNzXG4gICAgICogQHBhcmFtIHtib29sZWFufSB2YWwgVGhlIHZhbHVlIHRvIHNldCB0aGUgcHJvcGVydHkgdG9cbiAgICAgKiBAaW5uZXJcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzZXRUb3VjaEluUHJvZ3Jlc3ModmFsKSB7XG5cbiAgICAgIC8vSWYgZGVzdHJveSBpcyBjYWxsZWQgaW4gYW4gZXZlbnQgaGFuZGxlciwgd2UgaGF2ZSBubyBlbCwgYW5kIHdlIGhhdmUgYWxyZWFkeSBjbGVhbmVkIHVwLCBzbyByZXR1cm4uXG4gICAgICBpZighJGVsZW1lbnQpIHsgcmV0dXJuOyB9XG5cbiAgICAgIC8vQWRkIG9yIHJlbW92ZSBldmVudCBsaXN0ZW5lcnMgZGVwZW5kaW5nIG9uIHRvdWNoIHN0YXR1c1xuICAgICAgaWYgKHZhbCA9PT0gdHJ1ZSkge1xuICAgICAgICAkZWxlbWVudC5vbihNT1ZFX0VWLCB0b3VjaE1vdmUpO1xuICAgICAgICAkZWxlbWVudC5vbihFTkRfRVYsIHRvdWNoRW5kKTtcblxuICAgICAgICAvL3dlIG9ubHkgaGF2ZSBsZWF2ZSBldmVudHMgb24gZGVza3RvcCwgd2UgbWFudWFsbHkgY2FsY3VhdGUgbGVhdmUgb24gdG91Y2ggYXMgaXRzIG5vdCBzdXBwb3J0ZWQgaW4gd2Via2l0XG4gICAgICAgIGlmIChMRUFWRV9FVikge1xuICAgICAgICAgICRlbGVtZW50Lm9uKExFQVZFX0VWLCB0b3VjaExlYXZlKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcblxuICAgICAgICAkZWxlbWVudC5vZmYoTU9WRV9FViwgdG91Y2hNb3ZlLCBmYWxzZSk7XG4gICAgICAgICRlbGVtZW50Lm9mZihFTkRfRVYsIHRvdWNoRW5kLCBmYWxzZSk7XG5cbiAgICAgICAgLy93ZSBvbmx5IGhhdmUgbGVhdmUgZXZlbnRzIG9uIGRlc2t0b3AsIHdlIG1hbnVhbGx5IGNhbGN1YXRlIGxlYXZlIG9uIHRvdWNoIGFzIGl0cyBub3Qgc3VwcG9ydGVkIGluIHdlYmtpdFxuICAgICAgICBpZiAoTEVBVkVfRVYpIHtcbiAgICAgICAgICAkZWxlbWVudC5vZmYoTEVBVkVfRVYsIHRvdWNoTGVhdmUsIGZhbHNlKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG5cbiAgICAgIC8vc3RyaWN0IGVxdWFsaXR5IHRvIGVuc3VyZSBvbmx5IHRydWUgYW5kIGZhbHNlIGNhbiB1cGRhdGUgdGhlIHZhbHVlXG4gICAgICAkZWxlbWVudC5kYXRhKFBMVUdJTl9OUyArICdfaW50b3VjaCcsIHZhbCA9PT0gdHJ1ZSk7XG4gICAgfVxuXG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIHRoZSBmaW5nZXIgZGF0YSBmb3IgdGhlIHRvdWNoL2ZpbmdlciBpbiB0aGUgZXZlbnQgb2JqZWN0LlxuICAgICAqIEBwYXJhbSB7aW50fSBpZCBUaGUgaWQgdG8gc3RvcmUgdGhlIGZpbmdlciBkYXRhIHVuZGVyICh1c3VhbGx5IHRoZSBvcmRlciB0aGUgZmluZ2VycyB3ZXJlIHByZXNzZWQpXG4gICAgICogQHBhcmFtIHtvYmplY3R9IGV2dCBUaGUgZXZlbnQgb2JqZWN0IGNvbnRhaW5pbmcgZmluZ2VyIGRhdGFcbiAgICAgKiBAcmV0dXJuIGZpbmdlciBkYXRhIG9iamVjdFxuICAgICAqIEBpbm5lclxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNyZWF0ZUZpbmdlckRhdGEoaWQsIGV2dCkge1xuICAgICAgdmFyIGYgPSB7XG4gICAgICAgIHN0YXJ0OiB7XG4gICAgICAgICAgeDogMCxcbiAgICAgICAgICB5OiAwXG4gICAgICAgIH0sXG4gICAgICAgIGxhc3Q6IHtcbiAgICAgICAgICB4OiAwLFxuICAgICAgICAgIHk6IDBcbiAgICAgICAgfSxcbiAgICAgICAgZW5kOiB7XG4gICAgICAgICAgeDogMCxcbiAgICAgICAgICB5OiAwXG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgICBmLnN0YXJ0LnggPSBmLmxhc3QueCA9IGYuZW5kLnggPSBldnQucGFnZVggfHwgZXZ0LmNsaWVudFg7XG4gICAgICBmLnN0YXJ0LnkgPSBmLmxhc3QueSA9IGYuZW5kLnkgPSBldnQucGFnZVkgfHwgZXZ0LmNsaWVudFk7XG4gICAgICBmaW5nZXJEYXRhW2lkXSA9IGY7XG4gICAgICByZXR1cm4gZjtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBVcGRhdGVzIHRoZSBmaW5nZXIgZGF0YSBmb3IgYSBwYXJ0aWN1bGFyIGV2ZW50IG9iamVjdFxuICAgICAqIEBwYXJhbSB7b2JqZWN0fSBldnQgVGhlIGV2ZW50IG9iamVjdCBjb250YWluaW5nIHRoZSB0b3VjaC9maW5nZXIgZGF0YSB0byB1cGFkdGVcbiAgICAgKiBAcmV0dXJuIGEgZmluZ2VyIGRhdGEgb2JqZWN0LlxuICAgICAqIEBpbm5lclxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHVwZGF0ZUZpbmdlckRhdGEoZXZ0KSB7XG4gICAgICB2YXIgaWQgPSBldnQuaWRlbnRpZmllciAhPT0gdW5kZWZpbmVkID8gZXZ0LmlkZW50aWZpZXIgOiAwO1xuICAgICAgdmFyIGYgPSBnZXRGaW5nZXJEYXRhKGlkKTtcblxuICAgICAgaWYgKGYgPT09IG51bGwpIHtcbiAgICAgICAgZiA9IGNyZWF0ZUZpbmdlckRhdGEoaWQsIGV2dCk7XG4gICAgICB9XG5cbiAgICAgIGYubGFzdC54ID0gZi5lbmQueDtcbiAgICAgIGYubGFzdC55ID0gZi5lbmQueTtcblxuICAgICAgZi5lbmQueCA9IGV2dC5wYWdlWCB8fCBldnQuY2xpZW50WDtcbiAgICAgIGYuZW5kLnkgPSBldnQucGFnZVkgfHwgZXZ0LmNsaWVudFk7XG5cbiAgICAgIHJldHVybiBmO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgYSBmaW5nZXIgZGF0YSBvYmplY3QgYnkgaXRzIGV2ZW50IElELlxuICAgICAqIEVhY2ggdG91Y2ggZXZlbnQgaGFzIGFuIGlkZW50aWZpZXIgcHJvcGVydHksIHdoaWNoIGlzIHVzZWRcbiAgICAgKiB0byB0cmFjayByZXBlYXQgdG91Y2hlc1xuICAgICAqIEBwYXJhbSB7aW50fSBpZCBUaGUgdW5pcXVlIGlkIG9mIHRoZSBmaW5nZXIgaW4gdGhlIHNlcXVlbmNlIG9mIHRvdWNoIGV2ZW50cy5cbiAgICAgKiBAcmV0dXJuIGEgZmluZ2VyIGRhdGEgb2JqZWN0LlxuICAgICAqIEBpbm5lclxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGdldEZpbmdlckRhdGEoaWQpIHtcbiAgICAgIHJldHVybiBmaW5nZXJEYXRhW2lkXSB8fCBudWxsO1xuICAgIH1cblxuXG4gICAgLyoqXG4gICAgICogU2V0cyB0aGUgbWF4aW11bSBkaXN0YW5jZSBzd2lwZWQgaW4gdGhlIGdpdmVuIGRpcmVjdGlvbi5cbiAgICAgKiBJZiB0aGUgbmV3IHZhbHVlIGlzIGxvd2VyIHRoYW4gdGhlIGN1cnJlbnQgdmFsdWUsIHRoZSBtYXggdmFsdWUgaXMgbm90IGNoYW5nZWQuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9ICBkaXJlY3Rpb24gVGhlIGRpcmVjdGlvbiBvZiB0aGUgc3dpcGVcbiAgICAgKiBAcGFyYW0ge2ludH0gIGRpc3RhbmNlIFRoZSBkaXN0YW5jZSBvZiB0aGUgc3dpcGVcbiAgICAgKiBAaW5uZXJcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzZXRNYXhEaXN0YW5jZShkaXJlY3Rpb24sIGRpc3RhbmNlKSB7XG4gICAgICBpZihkaXJlY3Rpb249PU5PTkUpIHJldHVybjtcbiAgICAgIGRpc3RhbmNlID0gTWF0aC5tYXgoZGlzdGFuY2UsIGdldE1heERpc3RhbmNlKGRpcmVjdGlvbikpO1xuICAgICAgbWF4aW11bXNNYXBbZGlyZWN0aW9uXS5kaXN0YW5jZSA9IGRpc3RhbmNlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIGdldHMgdGhlIG1heGltdW0gZGlzdGFuY2Ugc3dpcGVkIGluIHRoZSBnaXZlbiBkaXJlY3Rpb24uXG4gICAgICogQHBhcmFtIHtzdHJpbmd9ICBkaXJlY3Rpb24gVGhlIGRpcmVjdGlvbiBvZiB0aGUgc3dpcGVcbiAgICAgKiBAcmV0dXJuIGludCAgVGhlIGRpc3RhbmNlIG9mIHRoZSBzd2lwZVxuICAgICAqIEBpbm5lclxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGdldE1heERpc3RhbmNlKGRpcmVjdGlvbikge1xuICAgICAgaWYgKG1heGltdW1zTWFwW2RpcmVjdGlvbl0pIHJldHVybiBtYXhpbXVtc01hcFtkaXJlY3Rpb25dLmRpc3RhbmNlO1xuICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdHMgYSBtYXAgb2YgZGlyZWN0aW9ucyB0byBtYXhpbXVtIHN3aXBlZCB2YWx1ZXMuXG4gICAgICogQHJldHVybiBPYmplY3QgQSBkaWN0aW9uYXJ5IG9mIG1heGltdW0gdmFsdWVzLCBpbmRleGVkIGJ5IGRpcmVjdGlvbi5cbiAgICAgKiBAaW5uZXJcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjcmVhdGVNYXhpbXVtc0RhdGEoKSB7XG4gICAgICB2YXIgbWF4RGF0YSA9IHt9O1xuICAgICAgbWF4RGF0YVtMRUZUXSA9IGNyZWF0ZU1heGltdW1WTyhMRUZUKTtcbiAgICAgIG1heERhdGFbUklHSFRdID0gY3JlYXRlTWF4aW11bVZPKFJJR0hUKTtcbiAgICAgIG1heERhdGFbVVBdID0gY3JlYXRlTWF4aW11bVZPKFVQKTtcbiAgICAgIG1heERhdGFbRE9XTl0gPSBjcmVhdGVNYXhpbXVtVk8oRE9XTik7XG5cbiAgICAgIHJldHVybiBtYXhEYXRhO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBtYXAgbWF4aW11bSBzd2lwZWQgdmFsdWVzIGZvciBhIGdpdmVuIHN3aXBlIGRpcmVjdGlvblxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBUaGUgZGlyZWN0aW9uIHRoYXQgdGhlc2UgdmFsdWVzIHdpbGwgYmUgYXNzb2NpYXRlZCB3aXRoXG4gICAgICogQHJldHVybiBPYmplY3QgTWF4aW11bSB2YWx1ZXNcbiAgICAgKiBAaW5uZXJcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjcmVhdGVNYXhpbXVtVk8oZGlyKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBkaXJlY3Rpb246IGRpcixcbiAgICAgICAgZGlzdGFuY2U6IDBcbiAgICAgIH1cbiAgICB9XG5cblxuICAgIC8vXG4gICAgLy8gTUFUSFMgLyBVVElMU1xuICAgIC8vXG5cbiAgICAvKipcbiAgICAgKiBDYWxjdWxhdGUgdGhlIGR1cmF0aW9uIG9mIHRoZSBzd2lwZVxuICAgICAqIEByZXR1cm4gaW50XG4gICAgICogQGlubmVyXG4gICAgICovXG4gICAgZnVuY3Rpb24gY2FsY3VsYXRlRHVyYXRpb24oKSB7XG4gICAgICByZXR1cm4gZW5kVGltZSAtIHN0YXJ0VGltZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDYWxjdWxhdGUgdGhlIGRpc3RhbmNlIGJldHdlZW4gMiB0b3VjaGVzIChwaW5jaClcbiAgICAgKiBAcGFyYW0ge3BvaW50fSBzdGFydFBvaW50IEEgcG9pbnQgb2JqZWN0IGNvbnRhaW5pbmcgeCBhbmQgeSBjby1vcmRpbmF0ZXNcbiAgICAgKiBAcGFyYW0ge3BvaW50fSBlbmRQb2ludCBBIHBvaW50IG9iamVjdCBjb250YWluaW5nIHggYW5kIHkgY28tb3JkaW5hdGVzXG4gICAgICogQHJldHVybiBpbnQ7XG4gICAgICogQGlubmVyXG4gICAgICovXG4gICAgZnVuY3Rpb24gY2FsY3VsYXRlVG91Y2hlc0Rpc3RhbmNlKHN0YXJ0UG9pbnQsIGVuZFBvaW50KSB7XG4gICAgICB2YXIgZGlmZlggPSBNYXRoLmFicyhzdGFydFBvaW50LnggLSBlbmRQb2ludC54KTtcbiAgICAgIHZhciBkaWZmWSA9IE1hdGguYWJzKHN0YXJ0UG9pbnQueSAtIGVuZFBvaW50LnkpO1xuXG4gICAgICByZXR1cm4gTWF0aC5yb3VuZChNYXRoLnNxcnQoZGlmZlggKiBkaWZmWCArIGRpZmZZICogZGlmZlkpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDYWxjdWxhdGUgdGhlIHpvb20gZmFjdG9yIGJldHdlZW4gdGhlIHN0YXJ0IGFuZCBlbmQgZGlzdGFuY2VzXG4gICAgICogQHBhcmFtIHtpbnR9IHN0YXJ0RGlzdGFuY2UgRGlzdGFuY2UgKGJldHdlZW4gMiBmaW5nZXJzKSB0aGUgdXNlciBzdGFydGVkIHBpbmNoaW5nIGF0XG4gICAgICogQHBhcmFtIHtpbnR9IGVuZERpc3RhbmNlIERpc3RhbmNlIChiZXR3ZWVuIDIgZmluZ2VycykgdGhlIHVzZXIgZW5kZWQgcGluY2hpbmcgYXRcbiAgICAgKiBAcmV0dXJuIGZsb2F0IFRoZSB6b29tIHZhbHVlIGZyb20gMCB0byAxLlxuICAgICAqIEBpbm5lclxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNhbGN1bGF0ZVBpbmNoWm9vbShzdGFydERpc3RhbmNlLCBlbmREaXN0YW5jZSkge1xuICAgICAgdmFyIHBlcmNlbnQgPSAoZW5kRGlzdGFuY2UgLyBzdGFydERpc3RhbmNlKSAqIDE7XG4gICAgICByZXR1cm4gcGVyY2VudC50b0ZpeGVkKDIpO1xuICAgIH1cblxuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0aGUgcGluY2ggZGlyZWN0aW9uLCBlaXRoZXIgSU4gb3IgT1VUIGZvciB0aGUgZ2l2ZW4gcG9pbnRzXG4gICAgICogQHJldHVybiBzdHJpbmcgRWl0aGVyIHtAbGluayAkLmZuLnN3aXBlLmRpcmVjdGlvbnMuSU59IG9yIHtAbGluayAkLmZuLnN3aXBlLmRpcmVjdGlvbnMuT1VUfVxuICAgICAqIEBzZWUgJC5mbi5zd2lwZS5kaXJlY3Rpb25zXG4gICAgICogQGlubmVyXG4gICAgICovXG4gICAgZnVuY3Rpb24gY2FsY3VsYXRlUGluY2hEaXJlY3Rpb24oKSB7XG4gICAgICBpZiAocGluY2hab29tIDwgMSkge1xuICAgICAgICByZXR1cm4gT1VUO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIElOO1xuICAgICAgfVxuICAgIH1cblxuXG4gICAgLyoqXG4gICAgICogQ2FsY3VsYXRlIHRoZSBsZW5ndGggLyBkaXN0YW5jZSBvZiB0aGUgc3dpcGVcbiAgICAgKiBAcGFyYW0ge3BvaW50fSBzdGFydFBvaW50IEEgcG9pbnQgb2JqZWN0IGNvbnRhaW5pbmcgeCBhbmQgeSBjby1vcmRpbmF0ZXNcbiAgICAgKiBAcGFyYW0ge3BvaW50fSBlbmRQb2ludCBBIHBvaW50IG9iamVjdCBjb250YWluaW5nIHggYW5kIHkgY28tb3JkaW5hdGVzXG4gICAgICogQHJldHVybiBpbnRcbiAgICAgKiBAaW5uZXJcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjYWxjdWxhdGVEaXN0YW5jZShzdGFydFBvaW50LCBlbmRQb2ludCkge1xuICAgICAgcmV0dXJuIE1hdGgucm91bmQoTWF0aC5zcXJ0KE1hdGgucG93KGVuZFBvaW50LnggLSBzdGFydFBvaW50LngsIDIpICsgTWF0aC5wb3coZW5kUG9pbnQueSAtIHN0YXJ0UG9pbnQueSwgMikpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDYWxjdWxhdGUgdGhlIGFuZ2xlIG9mIHRoZSBzd2lwZVxuICAgICAqIEBwYXJhbSB7cG9pbnR9IHN0YXJ0UG9pbnQgQSBwb2ludCBvYmplY3QgY29udGFpbmluZyB4IGFuZCB5IGNvLW9yZGluYXRlc1xuICAgICAqIEBwYXJhbSB7cG9pbnR9IGVuZFBvaW50IEEgcG9pbnQgb2JqZWN0IGNvbnRhaW5pbmcgeCBhbmQgeSBjby1vcmRpbmF0ZXNcbiAgICAgKiBAcmV0dXJuIGludFxuICAgICAqIEBpbm5lclxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNhbGN1bGF0ZUFuZ2xlKHN0YXJ0UG9pbnQsIGVuZFBvaW50KSB7XG4gICAgICB2YXIgeCA9IHN0YXJ0UG9pbnQueCAtIGVuZFBvaW50Lng7XG4gICAgICB2YXIgeSA9IGVuZFBvaW50LnkgLSBzdGFydFBvaW50Lnk7XG4gICAgICB2YXIgciA9IE1hdGguYXRhbjIoeSwgeCk7IC8vcmFkaWFuc1xuICAgICAgdmFyIGFuZ2xlID0gTWF0aC5yb3VuZChyICogMTgwIC8gTWF0aC5QSSk7IC8vZGVncmVlc1xuXG4gICAgICAvL2Vuc3VyZSB2YWx1ZSBpcyBwb3NpdGl2ZVxuICAgICAgaWYgKGFuZ2xlIDwgMCkge1xuICAgICAgICBhbmdsZSA9IDM2MCAtIE1hdGguYWJzKGFuZ2xlKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGFuZ2xlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENhbGN1bGF0ZSB0aGUgZGlyZWN0aW9uIG9mIHRoZSBzd2lwZVxuICAgICAqIFRoaXMgd2lsbCBhbHNvIGNhbGwgY2FsY3VsYXRlQW5nbGUgdG8gZ2V0IHRoZSBsYXRlc3QgYW5nbGUgb2Ygc3dpcGVcbiAgICAgKiBAcGFyYW0ge3BvaW50fSBzdGFydFBvaW50IEEgcG9pbnQgb2JqZWN0IGNvbnRhaW5pbmcgeCBhbmQgeSBjby1vcmRpbmF0ZXNcbiAgICAgKiBAcGFyYW0ge3BvaW50fSBlbmRQb2ludCBBIHBvaW50IG9iamVjdCBjb250YWluaW5nIHggYW5kIHkgY28tb3JkaW5hdGVzXG4gICAgICogQHJldHVybiBzdHJpbmcgRWl0aGVyIHtAbGluayAkLmZuLnN3aXBlLmRpcmVjdGlvbnMuTEVGVH0gLyB7QGxpbmsgJC5mbi5zd2lwZS5kaXJlY3Rpb25zLlJJR0hUfSAvIHtAbGluayAkLmZuLnN3aXBlLmRpcmVjdGlvbnMuRE9XTn0gLyB7QGxpbmsgJC5mbi5zd2lwZS5kaXJlY3Rpb25zLlVQfVxuICAgICAqIEBzZWUgJC5mbi5zd2lwZS5kaXJlY3Rpb25zXG4gICAgICogQGlubmVyXG4gICAgICovXG4gICAgZnVuY3Rpb24gY2FsY3VsYXRlRGlyZWN0aW9uKHN0YXJ0UG9pbnQsIGVuZFBvaW50KSB7XG5cbiAgICAgIGlmKCBjb21wYXJlUG9pbnRzKHN0YXJ0UG9pbnQsIGVuZFBvaW50KSApIHtcbiAgICAgICAgcmV0dXJuIE5PTkU7XG4gICAgICB9XG5cbiAgICAgIHZhciBhbmdsZSA9IGNhbGN1bGF0ZUFuZ2xlKHN0YXJ0UG9pbnQsIGVuZFBvaW50KTtcblxuICAgICAgaWYgKChhbmdsZSA8PSA0NSkgJiYgKGFuZ2xlID49IDApKSB7XG4gICAgICAgIHJldHVybiBMRUZUO1xuICAgICAgfSBlbHNlIGlmICgoYW5nbGUgPD0gMzYwKSAmJiAoYW5nbGUgPj0gMzE1KSkge1xuICAgICAgICByZXR1cm4gTEVGVDtcbiAgICAgIH0gZWxzZSBpZiAoKGFuZ2xlID49IDEzNSkgJiYgKGFuZ2xlIDw9IDIyNSkpIHtcbiAgICAgICAgcmV0dXJuIFJJR0hUO1xuICAgICAgfSBlbHNlIGlmICgoYW5nbGUgPiA0NSkgJiYgKGFuZ2xlIDwgMTM1KSkge1xuICAgICAgICByZXR1cm4gRE9XTjtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBVUDtcbiAgICAgIH1cbiAgICB9XG5cblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgYSBNUyB0aW1lIHN0YW1wIG9mIHRoZSBjdXJyZW50IHRpbWVcbiAgICAgKiBAcmV0dXJuIGludFxuICAgICAqIEBpbm5lclxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGdldFRpbWVTdGFtcCgpIHtcbiAgICAgIHZhciBub3cgPSBuZXcgRGF0ZSgpO1xuICAgICAgcmV0dXJuIG5vdy5nZXRUaW1lKCk7XG4gICAgfVxuXG5cblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgYSBib3VuZHMgb2JqZWN0IHdpdGggbGVmdCwgcmlnaHQsIHRvcCBhbmQgYm90dG9tIHByb3BlcnRpZXMgZm9yIHRoZSBlbGVtZW50IHNwZWNpZmllZC5cbiAgICAgKiBAcGFyYW0ge0RvbU5vZGV9IFRoZSBET00gbm9kZSB0byBnZXQgdGhlIGJvdW5kcyBmb3IuXG4gICAgICovXG4gICAgZnVuY3Rpb24gZ2V0Ym91bmRzKGVsKSB7XG4gICAgICBlbCA9ICQoZWwpO1xuICAgICAgdmFyIG9mZnNldCA9IGVsLm9mZnNldCgpO1xuXG4gICAgICB2YXIgYm91bmRzID0ge1xuICAgICAgICBsZWZ0OiBvZmZzZXQubGVmdCxcbiAgICAgICAgcmlnaHQ6IG9mZnNldC5sZWZ0ICsgZWwub3V0ZXJXaWR0aCgpLFxuICAgICAgICB0b3A6IG9mZnNldC50b3AsXG4gICAgICAgIGJvdHRvbTogb2Zmc2V0LnRvcCArIGVsLm91dGVySGVpZ2h0KClcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGJvdW5kcztcbiAgICB9XG5cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiB0aGUgcG9pbnQgb2JqZWN0IGlzIGluIHRoZSBib3VuZHMgb2JqZWN0LlxuICAgICAqIEBwYXJhbSB7b2JqZWN0fSBwb2ludCBBIHBvaW50IG9iamVjdC5cbiAgICAgKiBAcGFyYW0ge2ludH0gcG9pbnQueCBUaGUgeCB2YWx1ZSBvZiB0aGUgcG9pbnQuXG4gICAgICogQHBhcmFtIHtpbnR9IHBvaW50LnkgVGhlIHggdmFsdWUgb2YgdGhlIHBvaW50LlxuICAgICAqIEBwYXJhbSB7b2JqZWN0fSBib3VuZHMgVGhlIGJvdW5kcyBvYmplY3QgdG8gdGVzdFxuICAgICAqIEBwYXJhbSB7aW50fSBib3VuZHMubGVmdCBUaGUgbGVmdG1vc3QgdmFsdWVcbiAgICAgKiBAcGFyYW0ge2ludH0gYm91bmRzLnJpZ2h0IFRoZSByaWdodHRtb3N0IHZhbHVlXG4gICAgICogQHBhcmFtIHtpbnR9IGJvdW5kcy50b3AgVGhlIHRvcG1vc3QgdmFsdWVcbiAgICAgKiBAcGFyYW0ge2ludH0gYm91bmRzLmJvdHRvbSBUaGUgYm90dG9tbW9zdCB2YWx1ZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzSW5Cb3VuZHMocG9pbnQsIGJvdW5kcykge1xuICAgICAgcmV0dXJuIChwb2ludC54ID4gYm91bmRzLmxlZnQgJiYgcG9pbnQueCA8IGJvdW5kcy5yaWdodCAmJiBwb2ludC55ID4gYm91bmRzLnRvcCAmJiBwb2ludC55IDwgYm91bmRzLmJvdHRvbSk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiB0aGUgdHdvIHBvaW50cyBhcmUgZXF1YWxcbiAgICAgKiBAcGFyYW0ge29iamVjdH0gcG9pbnQgQSBwb2ludCBvYmplY3QuXG4gICAgICogQHBhcmFtIHtvYmplY3R9IHBvaW50IEIgcG9pbnQgb2JqZWN0LlxuICAgICAqIEByZXR1cm4gdHJ1ZSBvZiB0aGUgcG9pbnRzIG1hdGNoXG4gICAgICovXG4gICAgZnVuY3Rpb24gY29tcGFyZVBvaW50cyhwb2ludEEsIHBvaW50Qikge1xuICAgICAgcmV0dXJuIChwb2ludEEueCA9PSBwb2ludEIueCAmJiBwb2ludEEueSA9PSBwb2ludEIueSk7XG4gICAgfVxuXG5cbiAgfVxuXG5cblxuXG4gIC8qKlxuICAgKiBBIGNhdGNoIGFsbCBoYW5kbGVyIHRoYXQgaXMgdHJpZ2dlcmVkIGZvciBhbGwgc3dpcGUgZGlyZWN0aW9ucy5cbiAgICogQG5hbWUgJC5mbi5zd2lwZSNzd2lwZVxuICAgKiBAZXZlbnRcbiAgICogQGRlZmF1bHQgbnVsbFxuICAgKiBAcGFyYW0ge0V2ZW50T2JqZWN0fSBldmVudCBUaGUgb3JpZ2luYWwgZXZlbnQgb2JqZWN0XG4gICAqIEBwYXJhbSB7aW50fSBkaXJlY3Rpb24gVGhlIGRpcmVjdGlvbiB0aGUgdXNlciBzd2lwZWQgaW4uIFNlZSB7QGxpbmsgJC5mbi5zd2lwZS5kaXJlY3Rpb25zfVxuICAgKiBAcGFyYW0ge2ludH0gZGlzdGFuY2UgVGhlIGRpc3RhbmNlIHRoZSB1c2VyIHN3aXBlZFxuICAgKiBAcGFyYW0ge2ludH0gZHVyYXRpb24gVGhlIGR1cmF0aW9uIG9mIHRoZSBzd2lwZSBpbiBtaWxsaXNlY29uZHNcbiAgICogQHBhcmFtIHtpbnR9IGZpbmdlckNvdW50IFRoZSBudW1iZXIgb2YgZmluZ2VycyB1c2VkLiBTZWUge0BsaW5rICQuZm4uc3dpcGUuZmluZ2Vyc31cbiAgICogQHBhcmFtIHtvYmplY3R9IGZpbmdlckRhdGEgVGhlIGNvb3JkaW5hdGVzIG9mIGZpbmdlcnMgaW4gZXZlbnRcbiAgICogQHBhcmFtIHtzdHJpbmd9IGN1cnJlbnREaXJlY3Rpb24gVGhlIGN1cnJlbnQgZGlyZWN0aW9uIHRoZSB1c2VyIGlzIHN3aXBpbmcuXG4gICAqL1xuXG5cblxuXG4gIC8qKlxuICAgKiBBIGhhbmRsZXIgdGhhdCBpcyB0cmlnZ2VyZWQgZm9yIFwibGVmdFwiIHN3aXBlcy5cbiAgICogQG5hbWUgJC5mbi5zd2lwZSNzd2lwZUxlZnRcbiAgICogQGV2ZW50XG4gICAqIEBkZWZhdWx0IG51bGxcbiAgICogQHBhcmFtIHtFdmVudE9iamVjdH0gZXZlbnQgVGhlIG9yaWdpbmFsIGV2ZW50IG9iamVjdFxuICAgKiBAcGFyYW0ge2ludH0gZGlyZWN0aW9uIFRoZSBkaXJlY3Rpb24gdGhlIHVzZXIgc3dpcGVkIGluLiBTZWUge0BsaW5rICQuZm4uc3dpcGUuZGlyZWN0aW9uc31cbiAgICogQHBhcmFtIHtpbnR9IGRpc3RhbmNlIFRoZSBkaXN0YW5jZSB0aGUgdXNlciBzd2lwZWRcbiAgICogQHBhcmFtIHtpbnR9IGR1cmF0aW9uIFRoZSBkdXJhdGlvbiBvZiB0aGUgc3dpcGUgaW4gbWlsbGlzZWNvbmRzXG4gICAqIEBwYXJhbSB7aW50fSBmaW5nZXJDb3VudCBUaGUgbnVtYmVyIG9mIGZpbmdlcnMgdXNlZC4gU2VlIHtAbGluayAkLmZuLnN3aXBlLmZpbmdlcnN9XG4gICAqIEBwYXJhbSB7b2JqZWN0fSBmaW5nZXJEYXRhIFRoZSBjb29yZGluYXRlcyBvZiBmaW5nZXJzIGluIGV2ZW50XG4gICAqIEBwYXJhbSB7c3RyaW5nfSBjdXJyZW50RGlyZWN0aW9uIFRoZSBjdXJyZW50IGRpcmVjdGlvbiB0aGUgdXNlciBpcyBzd2lwaW5nLlxuICAgKi9cblxuICAvKipcbiAgICogQSBoYW5kbGVyIHRoYXQgaXMgdHJpZ2dlcmVkIGZvciBcInJpZ2h0XCIgc3dpcGVzLlxuICAgKiBAbmFtZSAkLmZuLnN3aXBlI3N3aXBlUmlnaHRcbiAgICogQGV2ZW50XG4gICAqIEBkZWZhdWx0IG51bGxcbiAgICogQHBhcmFtIHtFdmVudE9iamVjdH0gZXZlbnQgVGhlIG9yaWdpbmFsIGV2ZW50IG9iamVjdFxuICAgKiBAcGFyYW0ge2ludH0gZGlyZWN0aW9uIFRoZSBkaXJlY3Rpb24gdGhlIHVzZXIgc3dpcGVkIGluLiBTZWUge0BsaW5rICQuZm4uc3dpcGUuZGlyZWN0aW9uc31cbiAgICogQHBhcmFtIHtpbnR9IGRpc3RhbmNlIFRoZSBkaXN0YW5jZSB0aGUgdXNlciBzd2lwZWRcbiAgICogQHBhcmFtIHtpbnR9IGR1cmF0aW9uIFRoZSBkdXJhdGlvbiBvZiB0aGUgc3dpcGUgaW4gbWlsbGlzZWNvbmRzXG4gICAqIEBwYXJhbSB7aW50fSBmaW5nZXJDb3VudCBUaGUgbnVtYmVyIG9mIGZpbmdlcnMgdXNlZC4gU2VlIHtAbGluayAkLmZuLnN3aXBlLmZpbmdlcnN9XG4gICAqIEBwYXJhbSB7b2JqZWN0fSBmaW5nZXJEYXRhIFRoZSBjb29yZGluYXRlcyBvZiBmaW5nZXJzIGluIGV2ZW50XG4gICAqIEBwYXJhbSB7c3RyaW5nfSBjdXJyZW50RGlyZWN0aW9uIFRoZSBjdXJyZW50IGRpcmVjdGlvbiB0aGUgdXNlciBpcyBzd2lwaW5nLlxuICAgKi9cblxuICAvKipcbiAgICogQSBoYW5kbGVyIHRoYXQgaXMgdHJpZ2dlcmVkIGZvciBcInVwXCIgc3dpcGVzLlxuICAgKiBAbmFtZSAkLmZuLnN3aXBlI3N3aXBlVXBcbiAgICogQGV2ZW50XG4gICAqIEBkZWZhdWx0IG51bGxcbiAgICogQHBhcmFtIHtFdmVudE9iamVjdH0gZXZlbnQgVGhlIG9yaWdpbmFsIGV2ZW50IG9iamVjdFxuICAgKiBAcGFyYW0ge2ludH0gZGlyZWN0aW9uIFRoZSBkaXJlY3Rpb24gdGhlIHVzZXIgc3dpcGVkIGluLiBTZWUge0BsaW5rICQuZm4uc3dpcGUuZGlyZWN0aW9uc31cbiAgICogQHBhcmFtIHtpbnR9IGRpc3RhbmNlIFRoZSBkaXN0YW5jZSB0aGUgdXNlciBzd2lwZWRcbiAgICogQHBhcmFtIHtpbnR9IGR1cmF0aW9uIFRoZSBkdXJhdGlvbiBvZiB0aGUgc3dpcGUgaW4gbWlsbGlzZWNvbmRzXG4gICAqIEBwYXJhbSB7aW50fSBmaW5nZXJDb3VudCBUaGUgbnVtYmVyIG9mIGZpbmdlcnMgdXNlZC4gU2VlIHtAbGluayAkLmZuLnN3aXBlLmZpbmdlcnN9XG4gICAqIEBwYXJhbSB7b2JqZWN0fSBmaW5nZXJEYXRhIFRoZSBjb29yZGluYXRlcyBvZiBmaW5nZXJzIGluIGV2ZW50XG4gICAqIEBwYXJhbSB7c3RyaW5nfSBjdXJyZW50RGlyZWN0aW9uIFRoZSBjdXJyZW50IGRpcmVjdGlvbiB0aGUgdXNlciBpcyBzd2lwaW5nLlxuICAgKi9cblxuICAvKipcbiAgICogQSBoYW5kbGVyIHRoYXQgaXMgdHJpZ2dlcmVkIGZvciBcImRvd25cIiBzd2lwZXMuXG4gICAqIEBuYW1lICQuZm4uc3dpcGUjc3dpcGVEb3duXG4gICAqIEBldmVudFxuICAgKiBAZGVmYXVsdCBudWxsXG4gICAqIEBwYXJhbSB7RXZlbnRPYmplY3R9IGV2ZW50IFRoZSBvcmlnaW5hbCBldmVudCBvYmplY3RcbiAgICogQHBhcmFtIHtpbnR9IGRpcmVjdGlvbiBUaGUgZGlyZWN0aW9uIHRoZSB1c2VyIHN3aXBlZCBpbi4gU2VlIHtAbGluayAkLmZuLnN3aXBlLmRpcmVjdGlvbnN9XG4gICAqIEBwYXJhbSB7aW50fSBkaXN0YW5jZSBUaGUgZGlzdGFuY2UgdGhlIHVzZXIgc3dpcGVkXG4gICAqIEBwYXJhbSB7aW50fSBkdXJhdGlvbiBUaGUgZHVyYXRpb24gb2YgdGhlIHN3aXBlIGluIG1pbGxpc2Vjb25kc1xuICAgKiBAcGFyYW0ge2ludH0gZmluZ2VyQ291bnQgVGhlIG51bWJlciBvZiBmaW5nZXJzIHVzZWQuIFNlZSB7QGxpbmsgJC5mbi5zd2lwZS5maW5nZXJzfVxuICAgKiBAcGFyYW0ge29iamVjdH0gZmluZ2VyRGF0YSBUaGUgY29vcmRpbmF0ZXMgb2YgZmluZ2VycyBpbiBldmVudFxuICAgKiBAcGFyYW0ge3N0cmluZ30gY3VycmVudERpcmVjdGlvbiBUaGUgY3VycmVudCBkaXJlY3Rpb24gdGhlIHVzZXIgaXMgc3dpcGluZy5cbiAgICovXG5cbiAgLyoqXG4gICAqIEEgaGFuZGxlciB0cmlnZ2VyZWQgZm9yIGV2ZXJ5IHBoYXNlIG9mIHRoZSBzd2lwZS4gVGhpcyBoYW5kbGVyIGlzIGNvbnN0YW50bHkgZmlyZWQgZm9yIHRoZSBkdXJhdGlvbiBvZiB0aGUgcGluY2guXG4gICAqIFRoaXMgaXMgdHJpZ2dlcmVkIHJlZ2FyZGxlc3Mgb2Ygc3dpcGUgdGhyZXNob2xkcy5cbiAgICogQG5hbWUgJC5mbi5zd2lwZSNzd2lwZVN0YXR1c1xuICAgKiBAZXZlbnRcbiAgICogQGRlZmF1bHQgbnVsbFxuICAgKiBAcGFyYW0ge0V2ZW50T2JqZWN0fSBldmVudCBUaGUgb3JpZ2luYWwgZXZlbnQgb2JqZWN0XG4gICAqIEBwYXJhbSB7c3RyaW5nfSBwaGFzZSBUaGUgcGhhc2Ugb2YgdGhlIHN3aXBlIGV2ZW50LiBTZWUge0BsaW5rICQuZm4uc3dpcGUucGhhc2VzfVxuICAgKiBAcGFyYW0ge3N0cmluZ30gZGlyZWN0aW9uIFRoZSBkaXJlY3Rpb24gdGhlIHVzZXIgc3dpcGVkIGluLiBUaGlzIGlzIG51bGwgaWYgdGhlIHVzZXIgaGFzIHlldCB0byBtb3ZlLiBTZWUge0BsaW5rICQuZm4uc3dpcGUuZGlyZWN0aW9uc31cbiAgICogQHBhcmFtIHtpbnR9IGRpc3RhbmNlIFRoZSBkaXN0YW5jZSB0aGUgdXNlciBzd2lwZWQuIFRoaXMgaXMgMCBpZiB0aGUgdXNlciBoYXMgeWV0IHRvIG1vdmUuXG4gICAqIEBwYXJhbSB7aW50fSBkdXJhdGlvbiBUaGUgZHVyYXRpb24gb2YgdGhlIHN3aXBlIGluIG1pbGxpc2Vjb25kc1xuICAgKiBAcGFyYW0ge2ludH0gZmluZ2VyQ291bnQgVGhlIG51bWJlciBvZiBmaW5nZXJzIHVzZWQuIFNlZSB7QGxpbmsgJC5mbi5zd2lwZS5maW5nZXJzfVxuICAgKiBAcGFyYW0ge29iamVjdH0gZmluZ2VyRGF0YSBUaGUgY29vcmRpbmF0ZXMgb2YgZmluZ2VycyBpbiBldmVudFxuICAgKiBAcGFyYW0ge3N0cmluZ30gY3VycmVudERpcmVjdGlvbiBUaGUgY3VycmVudCBkaXJlY3Rpb24gdGhlIHVzZXIgaXMgc3dpcGluZy5cbiAgICovXG5cbiAgLyoqXG4gICAqIEEgaGFuZGxlciB0cmlnZ2VyZWQgZm9yIHBpbmNoIGluIGV2ZW50cy5cbiAgICogQG5hbWUgJC5mbi5zd2lwZSNwaW5jaEluXG4gICAqIEBldmVudFxuICAgKiBAZGVmYXVsdCBudWxsXG4gICAqIEBwYXJhbSB7RXZlbnRPYmplY3R9IGV2ZW50IFRoZSBvcmlnaW5hbCBldmVudCBvYmplY3RcbiAgICogQHBhcmFtIHtpbnR9IGRpcmVjdGlvbiBUaGUgZGlyZWN0aW9uIHRoZSB1c2VyIHBpbmNoZWQgaW4uIFNlZSB7QGxpbmsgJC5mbi5zd2lwZS5kaXJlY3Rpb25zfVxuICAgKiBAcGFyYW0ge2ludH0gZGlzdGFuY2UgVGhlIGRpc3RhbmNlIHRoZSB1c2VyIHBpbmNoZWRcbiAgICogQHBhcmFtIHtpbnR9IGR1cmF0aW9uIFRoZSBkdXJhdGlvbiBvZiB0aGUgc3dpcGUgaW4gbWlsbGlzZWNvbmRzXG4gICAqIEBwYXJhbSB7aW50fSBmaW5nZXJDb3VudCBUaGUgbnVtYmVyIG9mIGZpbmdlcnMgdXNlZC4gU2VlIHtAbGluayAkLmZuLnN3aXBlLmZpbmdlcnN9XG4gICAqIEBwYXJhbSB7aW50fSB6b29tIFRoZSB6b29tL3NjYWxlIGxldmVsIHRoZSB1c2VyIHBpbmNoZWQgdG9vLCAwLTEuXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBmaW5nZXJEYXRhIFRoZSBjb29yZGluYXRlcyBvZiBmaW5nZXJzIGluIGV2ZW50XG4gICAqL1xuXG4gIC8qKlxuICAgKiBBIGhhbmRsZXIgdHJpZ2dlcmVkIGZvciBwaW5jaCBvdXQgZXZlbnRzLlxuICAgKiBAbmFtZSAkLmZuLnN3aXBlI3BpbmNoT3V0XG4gICAqIEBldmVudFxuICAgKiBAZGVmYXVsdCBudWxsXG4gICAqIEBwYXJhbSB7RXZlbnRPYmplY3R9IGV2ZW50IFRoZSBvcmlnaW5hbCBldmVudCBvYmplY3RcbiAgICogQHBhcmFtIHtpbnR9IGRpcmVjdGlvbiBUaGUgZGlyZWN0aW9uIHRoZSB1c2VyIHBpbmNoZWQgaW4uIFNlZSB7QGxpbmsgJC5mbi5zd2lwZS5kaXJlY3Rpb25zfVxuICAgKiBAcGFyYW0ge2ludH0gZGlzdGFuY2UgVGhlIGRpc3RhbmNlIHRoZSB1c2VyIHBpbmNoZWRcbiAgICogQHBhcmFtIHtpbnR9IGR1cmF0aW9uIFRoZSBkdXJhdGlvbiBvZiB0aGUgc3dpcGUgaW4gbWlsbGlzZWNvbmRzXG4gICAqIEBwYXJhbSB7aW50fSBmaW5nZXJDb3VudCBUaGUgbnVtYmVyIG9mIGZpbmdlcnMgdXNlZC4gU2VlIHtAbGluayAkLmZuLnN3aXBlLmZpbmdlcnN9XG4gICAqIEBwYXJhbSB7aW50fSB6b29tIFRoZSB6b29tL3NjYWxlIGxldmVsIHRoZSB1c2VyIHBpbmNoZWQgdG9vLCAwLTEuXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBmaW5nZXJEYXRhIFRoZSBjb29yZGluYXRlcyBvZiBmaW5nZXJzIGluIGV2ZW50XG4gICAqL1xuXG4gIC8qKlxuICAgKiBBIGhhbmRsZXIgdHJpZ2dlcmVkIGZvciBhbGwgcGluY2ggZXZlbnRzLiBUaGlzIGhhbmRsZXIgaXMgY29uc3RhbnRseSBmaXJlZCBmb3IgdGhlIGR1cmF0aW9uIG9mIHRoZSBwaW5jaC4gVGhpcyBpcyB0cmlnZ2VyZWQgcmVnYXJkbGVzcyBvZiB0aHJlc2hvbGRzLlxuICAgKiBAbmFtZSAkLmZuLnN3aXBlI3BpbmNoU3RhdHVzXG4gICAqIEBldmVudFxuICAgKiBAZGVmYXVsdCBudWxsXG4gICAqIEBwYXJhbSB7RXZlbnRPYmplY3R9IGV2ZW50IFRoZSBvcmlnaW5hbCBldmVudCBvYmplY3RcbiAgICogQHBhcmFtIHtpbnR9IGRpcmVjdGlvbiBUaGUgZGlyZWN0aW9uIHRoZSB1c2VyIHBpbmNoZWQgaW4uIFNlZSB7QGxpbmsgJC5mbi5zd2lwZS5kaXJlY3Rpb25zfVxuICAgKiBAcGFyYW0ge2ludH0gZGlzdGFuY2UgVGhlIGRpc3RhbmNlIHRoZSB1c2VyIHBpbmNoZWRcbiAgICogQHBhcmFtIHtpbnR9IGR1cmF0aW9uIFRoZSBkdXJhdGlvbiBvZiB0aGUgc3dpcGUgaW4gbWlsbGlzZWNvbmRzXG4gICAqIEBwYXJhbSB7aW50fSBmaW5nZXJDb3VudCBUaGUgbnVtYmVyIG9mIGZpbmdlcnMgdXNlZC4gU2VlIHtAbGluayAkLmZuLnN3aXBlLmZpbmdlcnN9XG4gICAqIEBwYXJhbSB7aW50fSB6b29tIFRoZSB6b29tL3NjYWxlIGxldmVsIHRoZSB1c2VyIHBpbmNoZWQgdG9vLCAwLTEuXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBmaW5nZXJEYXRhIFRoZSBjb29yZGluYXRlcyBvZiBmaW5nZXJzIGluIGV2ZW50XG4gICAqL1xuXG4gIC8qKlxuICAgKiBBIGNsaWNrIGhhbmRsZXIgdHJpZ2dlcmVkIHdoZW4gYSB1c2VyIHNpbXBseSBjbGlja3MsIHJhdGhlciB0aGFuIHN3aXBlcyBvbiBhbiBlbGVtZW50LlxuICAgKiBUaGlzIGlzIGRlcHJlY2F0ZWQgc2luY2UgdmVyc2lvbiAxLjYuMiwgYW55IGFzc2lnbm1lbnQgdG8gY2xpY2sgd2lsbCBiZSBhc3NpZ25lZCB0byB0aGUgdGFwIGhhbmRsZXIuXG4gICAqIFlvdSBjYW5ub3QgdXNlIDxjb2RlPm9uPC9jb2RlPiB0byBiaW5kIHRvIHRoaXMgZXZlbnQgYXMgdGhlIGRlZmF1bHQgalEgPGNvZGU+Y2xpY2s8L2NvZGU+IGV2ZW50IHdpbGwgYmUgdHJpZ2dlcmVkLlxuICAgKiBVc2UgdGhlIDxjb2RlPnRhcDwvY29kZT4gZXZlbnQgaW5zdGVhZC5cbiAgICogQG5hbWUgJC5mbi5zd2lwZSNjbGlja1xuICAgKiBAZXZlbnRcbiAgICogQGRlcHJlY2F0ZWQgc2luY2UgdmVyc2lvbiAxLjYuMiwgcGxlYXNlIHVzZSB7QGxpbmsgJC5mbi5zd2lwZSN0YXB9IGluc3RlYWRcbiAgICogQGRlZmF1bHQgbnVsbFxuICAgKiBAcGFyYW0ge0V2ZW50T2JqZWN0fSBldmVudCBUaGUgb3JpZ2luYWwgZXZlbnQgb2JqZWN0XG4gICAqIEBwYXJhbSB7RG9tT2JqZWN0fSB0YXJnZXQgVGhlIGVsZW1lbnQgY2xpY2tlZCBvbi5cbiAgICovXG5cbiAgLyoqXG4gICAqIEEgY2xpY2sgLyB0YXAgaGFuZGxlciB0cmlnZ2VyZWQgd2hlbiBhIHVzZXIgc2ltcGx5IGNsaWNrcyBvciB0YXBzLCByYXRoZXIgdGhhbiBzd2lwZXMgb24gYW4gZWxlbWVudC5cbiAgICogQG5hbWUgJC5mbi5zd2lwZSN0YXBcbiAgICogQGV2ZW50XG4gICAqIEBkZWZhdWx0IG51bGxcbiAgICogQHBhcmFtIHtFdmVudE9iamVjdH0gZXZlbnQgVGhlIG9yaWdpbmFsIGV2ZW50IG9iamVjdFxuICAgKiBAcGFyYW0ge0RvbU9iamVjdH0gdGFyZ2V0IFRoZSBlbGVtZW50IGNsaWNrZWQgb24uXG4gICAqL1xuXG4gIC8qKlxuICAgKiBBIGRvdWJsZSB0YXAgaGFuZGxlciB0cmlnZ2VyZWQgd2hlbiBhIHVzZXIgZG91YmxlIGNsaWNrcyBvciB0YXBzIG9uIGFuIGVsZW1lbnQuXG4gICAqIFlvdSBjYW4gc2V0IHRoZSB0aW1lIGRlbGF5IGZvciBhIGRvdWJsZSB0YXAgd2l0aCB0aGUge0BsaW5rICQuZm4uc3dpcGUuZGVmYXVsdHMjZG91YmxlVGFwVGhyZXNob2xkfSBwcm9wZXJ0eS5cbiAgICogTm90ZTogSWYgeW91IHNldCBib3RoIDxjb2RlPmRvdWJsZVRhcDwvY29kZT4gYW5kIDxjb2RlPnRhcDwvY29kZT4gaGFuZGxlcnMsIHRoZSA8Y29kZT50YXA8L2NvZGU+IGV2ZW50IHdpbGwgYmUgZGVsYXllZCBieSB0aGUgPGNvZGU+ZG91YmxlVGFwVGhyZXNob2xkPC9jb2RlPlxuICAgKiBhcyB0aGUgc2NyaXB0IG5lZWRzIHRvIGNoZWNrIGlmIGl0cyBhIGRvdWJsZSB0YXAuXG4gICAqIEBuYW1lICQuZm4uc3dpcGUjZG91YmxlVGFwXG4gICAqIEBzZWUgICQuZm4uc3dpcGUuZGVmYXVsdHMjZG91YmxlVGFwVGhyZXNob2xkXG4gICAqIEBldmVudFxuICAgKiBAZGVmYXVsdCBudWxsXG4gICAqIEBwYXJhbSB7RXZlbnRPYmplY3R9IGV2ZW50IFRoZSBvcmlnaW5hbCBldmVudCBvYmplY3RcbiAgICogQHBhcmFtIHtEb21PYmplY3R9IHRhcmdldCBUaGUgZWxlbWVudCBjbGlja2VkIG9uLlxuICAgKi9cblxuICAvKipcbiAgICogQSBsb25nIHRhcCBoYW5kbGVyIHRyaWdnZXJlZCBvbmNlIGEgdGFwIGhhcyBiZWVuIHJlbGVhc2UgaWYgdGhlIHRhcCB3YXMgbG9uZ2VyIHRoYW4gdGhlIGxvbmdUYXBUaHJlc2hvbGQuXG4gICAqIFlvdSBjYW4gc2V0IHRoZSB0aW1lIGRlbGF5IGZvciBhIGxvbmcgdGFwIHdpdGggdGhlIHtAbGluayAkLmZuLnN3aXBlLmRlZmF1bHRzI2xvbmdUYXBUaHJlc2hvbGR9IHByb3BlcnR5LlxuICAgKiBAbmFtZSAkLmZuLnN3aXBlI2xvbmdUYXBcbiAgICogQHNlZSAgJC5mbi5zd2lwZS5kZWZhdWx0cyNsb25nVGFwVGhyZXNob2xkXG4gICAqIEBldmVudFxuICAgKiBAZGVmYXVsdCBudWxsXG4gICAqIEBwYXJhbSB7RXZlbnRPYmplY3R9IGV2ZW50IFRoZSBvcmlnaW5hbCBldmVudCBvYmplY3RcbiAgICogQHBhcmFtIHtEb21PYmplY3R9IHRhcmdldCBUaGUgZWxlbWVudCBjbGlja2VkIG9uLlxuICAgKi9cblxuICAvKipcbiAgICogQSBob2xkIHRhcCBoYW5kbGVyIHRyaWdnZXJlZCBhcyBzb29uIGFzIHRoZSBsb25nVGFwVGhyZXNob2xkIGlzIHJlYWNoZWRcbiAgICogWW91IGNhbiBzZXQgdGhlIHRpbWUgZGVsYXkgZm9yIGEgbG9uZyB0YXAgd2l0aCB0aGUge0BsaW5rICQuZm4uc3dpcGUuZGVmYXVsdHMjbG9uZ1RhcFRocmVzaG9sZH0gcHJvcGVydHkuXG4gICAqIEBuYW1lICQuZm4uc3dpcGUjaG9sZFxuICAgKiBAc2VlICAkLmZuLnN3aXBlLmRlZmF1bHRzI2xvbmdUYXBUaHJlc2hvbGRcbiAgICogQGV2ZW50XG4gICAqIEBkZWZhdWx0IG51bGxcbiAgICogQHBhcmFtIHtFdmVudE9iamVjdH0gZXZlbnQgVGhlIG9yaWdpbmFsIGV2ZW50IG9iamVjdFxuICAgKiBAcGFyYW0ge0RvbU9iamVjdH0gdGFyZ2V0IFRoZSBlbGVtZW50IGNsaWNrZWQgb24uXG4gICAqL1xuXG59KSk7XG4iLCIvLyBUSElTIEZJTEUgSVMgR0VORVJBVEVEIC0gRE8gTk9UIEVESVQhXG4vKiFtb2JpbGUtZGV0ZWN0IHYxLjQuNCAyMDE5LTA5LTIxKi9cbi8qZ2xvYmFsIG1vZHVsZTpmYWxzZSwgZGVmaW5lOmZhbHNlKi9cbi8qanNoaW50IGxhdGVkZWY6ZmFsc2UqL1xuLyohQGxpY2Vuc2UgQ29weXJpZ2h0IDIwMTMsIEhlaW5yaWNoIEdvZWJsLCBMaWNlbnNlOiBNSVQsIHNlZSBodHRwczovL2dpdGh1Yi5jb20vaGdvZWJsL21vYmlsZS1kZXRlY3QuanMqL1xuKGZ1bmN0aW9uIChkZWZpbmUsIHVuZGVmaW5lZCkge1xuZGVmaW5lKGZ1bmN0aW9uICgpIHtcbiAgICAndXNlIHN0cmljdCc7XG5cbiAgICB2YXIgaW1wbCA9IHt9O1xuXG4gICAgaW1wbC5tb2JpbGVEZXRlY3RSdWxlcyA9IHtcbiAgICBcInBob25lc1wiOiB7XG4gICAgICAgIFwiaVBob25lXCI6IFwiXFxcXGJpUGhvbmVcXFxcYnxcXFxcYmlQb2RcXFxcYlwiLFxuICAgICAgICBcIkJsYWNrQmVycnlcIjogXCJCbGFja0JlcnJ5fFxcXFxiQkIxMFxcXFxifHJpbVswLTldK3xcXFxcYihCQkExMDB8QkJCMTAwfEJCRDEwMHxCQkUxMDB8QkJGMTAwfFNUSDEwMClcXFxcYi1bMC05XStcIixcbiAgICAgICAgXCJIVENcIjogXCJIVEN8SFRDLiooU2Vuc2F0aW9ufEV2b3xWaXNpb258RXhwbG9yZXJ8NjgwMHw4MTAwfDg5MDB8QTcyNzJ8UzUxMGV8QzExMGV8TGVnZW5kfERlc2lyZXxUODI4Mil8QVBYNTE1Q0tUfFF0ZWs5MDkwfEFQQTkyOTJLVHxIRF9taW5pfFNlbnNhdGlvbi4qWjcxMGV8UEc4NjEwMHxaNzE1ZXxEZXNpcmUuKihBODE4MXxIRCl8QURSNjIwMHxBRFI2NDAwTHxBRFI2NDI1fDAwMUhUfEluc3BpcmUgNEd8QW5kcm9pZC4qXFxcXGJFVk9cXFxcYnxULU1vYmlsZSBHMXxaNTIwbXxBbmRyb2lkIFswLTkuXSs7IFBpeGVsXCIsXG4gICAgICAgIFwiTmV4dXNcIjogXCJOZXh1cyBPbmV8TmV4dXMgU3xHYWxheHkuKk5leHVzfEFuZHJvaWQuKk5leHVzLipNb2JpbGV8TmV4dXMgNHxOZXh1cyA1fE5leHVzIDZcIixcbiAgICAgICAgXCJEZWxsXCI6IFwiRGVsbFs7XT8gKFN0cmVha3xBZXJvfFZlbnVlfFZlbnVlIFByb3xGbGFzaHxTbW9rZXxNaW5pIDNpWCl8WENEMjh8WENEMzV8XFxcXGIwMDFETFxcXFxifFxcXFxiMTAxRExcXFxcYnxcXFxcYkdTMDFcXFxcYlwiLFxuICAgICAgICBcIk1vdG9yb2xhXCI6IFwiTW90b3JvbGF8RFJPSURYfERST0lEIEJJT05JQ3xcXFxcYkRyb2lkXFxcXGIuKkJ1aWxkfEFuZHJvaWQuKlhvb218SFJJMzl8TU9ULXxBMTI2MHxBMTY4MHxBNTU1fEE4NTN8QTg1NXxBOTUzfEE5NTV8QTk1NnxNb3Rvcm9sYS4qRUxFQ1RSSUZZfE1vdG9yb2xhLippMXxpODY3fGk5NDB8TUIyMDB8TUIzMDB8TUI1MDF8TUI1MDJ8TUI1MDh8TUI1MTF8TUI1MjB8TUI1MjV8TUI1MjZ8TUI2MTF8TUI2MTJ8TUI2MzJ8TUI4MTB8TUI4NTV8TUI4NjB8TUI4NjF8TUI4NjV8TUI4NzB8TUU1MDF8TUU1MDJ8TUU1MTF8TUU1MjV8TUU2MDB8TUU2MzJ8TUU3MjJ8TUU4MTF8TUU4NjB8TUU4NjN8TUU4NjV8TVQ2MjB8TVQ3MTB8TVQ3MTZ8TVQ3MjB8TVQ4MTB8TVQ4NzB8TVQ5MTd8TW90b3JvbGEuKlRJVEFOSVVNfFdYNDM1fFdYNDQ1fFhUMzAwfFhUMzAxfFhUMzExfFhUMzE2fFhUMzE3fFhUMzE5fFhUMzIwfFhUMzkwfFhUNTAyfFhUNTMwfFhUNTMxfFhUNTMyfFhUNTM1fFhUNjAzfFhUNjEwfFhUNjExfFhUNjE1fFhUNjgxfFhUNzAxfFhUNzAyfFhUNzExfFhUNzIwfFhUODAwfFhUODA2fFhUODYwfFhUODYyfFhUODc1fFhUODgyfFhUODgzfFhUODk0fFhUOTAxfFhUOTA3fFhUOTA5fFhUOTEwfFhUOTEyfFhUOTI4fFhUOTI2fFhUOTE1fFhUOTE5fFhUOTI1fFhUMTAyMXxcXFxcYk1vdG8gRVxcXFxifFhUMTA2OHxYVDEwOTJ8WFQxMDUyXCIsXG4gICAgICAgIFwiU2Ftc3VuZ1wiOiBcIlxcXFxiU2Ftc3VuZ1xcXFxifFNNLUc5NTBGfFNNLUc5NTVGfFNNLUc5MjUwfEdULTE5MzAwfFNHSC1JMzM3fEJHVC1TNTIzMHxHVC1CMjEwMHxHVC1CMjcwMHxHVC1CMjcxMHxHVC1CMzIxMHxHVC1CMzMxMHxHVC1CMzQxMHxHVC1CMzczMHxHVC1CMzc0MHxHVC1CNTUxMHxHVC1CNTUxMnxHVC1CNTcyMnxHVC1CNjUyMHxHVC1CNzMwMHxHVC1CNzMyMHxHVC1CNzMzMHxHVC1CNzM1MHxHVC1CNzUxMHxHVC1CNzcyMnxHVC1CNzgwMHxHVC1DMzAxMHxHVC1DMzAxMXxHVC1DMzA2MHxHVC1DMzIwMHxHVC1DMzIxMnxHVC1DMzIxMkl8R1QtQzMyNjJ8R1QtQzMyMjJ8R1QtQzMzMDB8R1QtQzMzMDBLfEdULUMzMzAzfEdULUMzMzAzS3xHVC1DMzMxMHxHVC1DMzMyMnxHVC1DMzMzMHxHVC1DMzM1MHxHVC1DMzUwMHxHVC1DMzUxMHxHVC1DMzUzMHxHVC1DMzYzMHxHVC1DMzc4MHxHVC1DNTAxMHxHVC1DNTIxMnxHVC1DNjYyMHxHVC1DNjYyNXxHVC1DNjcxMnxHVC1FMTA1MHxHVC1FMTA3MHxHVC1FMTA3NXxHVC1FMTA4MHxHVC1FMTA4MXxHVC1FMTA4NXxHVC1FMTA4N3xHVC1FMTEwMHxHVC1FMTEwN3xHVC1FMTExMHxHVC1FMTEyMHxHVC1FMTEyNXxHVC1FMTEzMHxHVC1FMTE2MHxHVC1FMTE3MHxHVC1FMTE3NXxHVC1FMTE4MHxHVC1FMTE4MnxHVC1FMTIwMHxHVC1FMTIxMHxHVC1FMTIyNXxHVC1FMTIzMHxHVC1FMTM5MHxHVC1FMjEwMHxHVC1FMjEyMHxHVC1FMjEyMXxHVC1FMjE1MnxHVC1FMjIyMHxHVC1FMjIyMnxHVC1FMjIzMHxHVC1FMjIzMnxHVC1FMjI1MHxHVC1FMjM3MHxHVC1FMjU1MHxHVC1FMjY1MnxHVC1FMzIxMHxHVC1FMzIxM3xHVC1JNTUwMHxHVC1JNTUwM3xHVC1JNTcwMHxHVC1JNTgwMHxHVC1JNTgwMXxHVC1JNjQxMHxHVC1JNjQyMHxHVC1JNzExMHxHVC1JNzQxMHxHVC1JNzUwMHxHVC1JODAwMHxHVC1JODE1MHxHVC1JODE2MHxHVC1JODE5MHxHVC1JODMyMHxHVC1JODMzMHxHVC1JODM1MHxHVC1JODUzMHxHVC1JODcwMHxHVC1JODcwM3xHVC1JODkxMHxHVC1JOTAwMHxHVC1JOTAwMXxHVC1JOTAwM3xHVC1JOTAxMHxHVC1JOTAyMHxHVC1JOTAyM3xHVC1JOTA3MHxHVC1JOTA4MnxHVC1JOTEwMHxHVC1JOTEwM3xHVC1JOTIyMHxHVC1JOTI1MHxHVC1JOTMwMHxHVC1JOTMwNXxHVC1JOTUwMHxHVC1JOTUwNXxHVC1NMzUxMHxHVC1NNTY1MHxHVC1NNzUwMHxHVC1NNzYwMHxHVC1NNzYwM3xHVC1NODgwMHxHVC1NODkxMHxHVC1ONzAwMHxHVC1TMzExMHxHVC1TMzMxMHxHVC1TMzM1MHxHVC1TMzM1M3xHVC1TMzM3MHxHVC1TMzY1MHxHVC1TMzY1M3xHVC1TMzc3MHxHVC1TMzg1MHxHVC1TNTIxMHxHVC1TNTIyMHxHVC1TNTIyOXxHVC1TNTIzMHxHVC1TNTIzM3xHVC1TNTI1MHxHVC1TNTI1M3xHVC1TNTI2MHxHVC1TNTI2M3xHVC1TNTI3MHxHVC1TNTMwMHxHVC1TNTMzMHxHVC1TNTM1MHxHVC1TNTM2MHxHVC1TNTM2M3xHVC1TNTM2OXxHVC1TNTM4MHxHVC1TNTM4MER8R1QtUzU1NjB8R1QtUzU1NzB8R1QtUzU2MDB8R1QtUzU2MDN8R1QtUzU2MTB8R1QtUzU2MjB8R1QtUzU2NjB8R1QtUzU2NzB8R1QtUzU2OTB8R1QtUzU3NTB8R1QtUzU3ODB8R1QtUzU4MzB8R1QtUzU4Mzl8R1QtUzYxMDJ8R1QtUzY1MDB8R1QtUzcwNzB8R1QtUzcyMDB8R1QtUzcyMjB8R1QtUzcyMzB8R1QtUzcyMzN8R1QtUzcyNTB8R1QtUzc1MDB8R1QtUzc1MzB8R1QtUzc1NTB8R1QtUzc1NjJ8R1QtUzc3MTB8R1QtUzgwMDB8R1QtUzgwMDN8R1QtUzg1MDB8R1QtUzg1MzB8R1QtUzg2MDB8U0NILUEzMTB8U0NILUE1MzB8U0NILUE1NzB8U0NILUE2MTB8U0NILUE2MzB8U0NILUE2NTB8U0NILUE3OTB8U0NILUE3OTV8U0NILUE4NTB8U0NILUE4NzB8U0NILUE4OTB8U0NILUE5MzB8U0NILUE5NTB8U0NILUE5NzB8U0NILUE5OTB8U0NILUkxMDB8U0NILUkxMTB8U0NILUk0MDB8U0NILUk0MDV8U0NILUk1MDB8U0NILUk1MTB8U0NILUk1MTV8U0NILUk2MDB8U0NILUk3MzB8U0NILUk3NjB8U0NILUk3NzB8U0NILUk4MzB8U0NILUk5MTB8U0NILUk5MjB8U0NILUk5NTl8U0NILUxDMTF8U0NILU4xNTB8U0NILU4zMDB8U0NILVIxMDB8U0NILVIzMDB8U0NILVIzNTF8U0NILVI0MDB8U0NILVI0MTB8U0NILVQzMDB8U0NILVUzMTB8U0NILVUzMjB8U0NILVUzNTB8U0NILVUzNjB8U0NILVUzNjV8U0NILVUzNzB8U0NILVUzODB8U0NILVU0MTB8U0NILVU0MzB8U0NILVU0NTB8U0NILVU0NjB8U0NILVU0NzB8U0NILVU0OTB8U0NILVU1NDB8U0NILVU1NTB8U0NILVU2MjB8U0NILVU2NDB8U0NILVU2NTB8U0NILVU2NjB8U0NILVU3MDB8U0NILVU3NDB8U0NILVU3NTB8U0NILVU4MTB8U0NILVU4MjB8U0NILVU5MDB8U0NILVU5NDB8U0NILVU5NjB8U0NTLTI2VUN8U0dILUExMDd8U0dILUExMTd8U0dILUExMjd8U0dILUExMzd8U0dILUExNTd8U0dILUExNjd8U0dILUExNzd8U0dILUExODd8U0dILUExOTd8U0dILUEyMjd8U0dILUEyMzd8U0dILUEyNTd8U0dILUE0Mzd8U0dILUE1MTd8U0dILUE1OTd8U0dILUE2Mzd8U0dILUE2NTd8U0dILUE2Njd8U0dILUE2ODd8U0dILUE2OTd8U0dILUE3MDd8U0dILUE3MTd8U0dILUE3Mjd8U0dILUE3Mzd8U0dILUE3NDd8U0dILUE3Njd8U0dILUE3Nzd8U0dILUE3OTd8U0dILUE4MTd8U0dILUE4Mjd8U0dILUE4Mzd8U0dILUE4NDd8U0dILUE4Njd8U0dILUE4Nzd8U0dILUE4ODd8U0dILUE4OTd8U0dILUE5Mjd8U0dILUIxMDB8U0dILUIxMzB8U0dILUIyMDB8U0dILUIyMjB8U0dILUMxMDB8U0dILUMxMTB8U0dILUMxMjB8U0dILUMxMzB8U0dILUMxNDB8U0dILUMxNjB8U0dILUMxNzB8U0dILUMxODB8U0dILUMyMDB8U0dILUMyMDd8U0dILUMyMTB8U0dILUMyMjV8U0dILUMyMzB8U0dILUM0MTd8U0dILUM0NTB8U0dILUQzMDd8U0dILUQzNDd8U0dILUQzNTd8U0dILUQ0MDd8U0dILUQ0MTV8U0dILUQ3ODB8U0dILUQ4MDd8U0dILUQ5ODB8U0dILUUxMDV8U0dILUUyMDB8U0dILUUzMTV8U0dILUUzMTZ8U0dILUUzMTd8U0dILUUzMzV8U0dILUU1OTB8U0dILUU2MzV8U0dILUU3MTV8U0dILUU4OTB8U0dILUYzMDB8U0dILUY0ODB8U0dILUkyMDB8U0dILUkzMDB8U0dILUkzMjB8U0dILUk1NTB8U0dILUk1Nzd8U0dILUk2MDB8U0dILUk2MDd8U0dILUk2MTd8U0dILUk2Mjd8U0dILUk2Mzd8U0dILUk2Nzd8U0dILUk3MDB8U0dILUk3MTd8U0dILUk3Mjd8U0dILWk3NDdNfFNHSC1JNzc3fFNHSC1JNzgwfFNHSC1JODI3fFNHSC1JODQ3fFNHSC1JODU3fFNHSC1JODk2fFNHSC1JODk3fFNHSC1JOTAwfFNHSC1JOTA3fFNHSC1JOTE3fFNHSC1JOTI3fFNHSC1JOTM3fFNHSC1JOTk3fFNHSC1KMTUwfFNHSC1KMjAwfFNHSC1MMTcwfFNHSC1MNzAwfFNHSC1NMTEwfFNHSC1NMTUwfFNHSC1NMjAwfFNHSC1OMTA1fFNHSC1ONTAwfFNHSC1ONjAwfFNHSC1ONjIwfFNHSC1ONjI1fFNHSC1ONzAwfFNHSC1ONzEwfFNHSC1QMTA3fFNHSC1QMjA3fFNHSC1QMzAwfFNHSC1QMzEwfFNHSC1QNTIwfFNHSC1QNzM1fFNHSC1QNzc3fFNHSC1RMTA1fFNHSC1SMjEwfFNHSC1SMjIwfFNHSC1SMjI1fFNHSC1TMTA1fFNHSC1TMzA3fFNHSC1UMTA5fFNHSC1UMTE5fFNHSC1UMTM5fFNHSC1UMjA5fFNHSC1UMjE5fFNHSC1UMjI5fFNHSC1UMjM5fFNHSC1UMjQ5fFNHSC1UMjU5fFNHSC1UMzA5fFNHSC1UMzE5fFNHSC1UMzI5fFNHSC1UMzM5fFNHSC1UMzQ5fFNHSC1UMzU5fFNHSC1UMzY5fFNHSC1UMzc5fFNHSC1UNDA5fFNHSC1UNDI5fFNHSC1UNDM5fFNHSC1UNDU5fFNHSC1UNDY5fFNHSC1UNDc5fFNHSC1UNDk5fFNHSC1UNTA5fFNHSC1UNTE5fFNHSC1UNTM5fFNHSC1UNTU5fFNHSC1UNTg5fFNHSC1UNjA5fFNHSC1UNjE5fFNHSC1UNjI5fFNHSC1UNjM5fFNHSC1UNjU5fFNHSC1UNjY5fFNHSC1UNjc5fFNHSC1UNzA5fFNHSC1UNzE5fFNHSC1UNzI5fFNHSC1UNzM5fFNHSC1UNzQ2fFNHSC1UNzQ5fFNHSC1UNzU5fFNHSC1UNzY5fFNHSC1UODA5fFNHSC1UODE5fFNHSC1UODM5fFNHSC1UOTE5fFNHSC1UOTI5fFNHSC1UOTM5fFNHSC1UOTU5fFNHSC1UOTg5fFNHSC1VMTAwfFNHSC1VMjAwfFNHSC1VODAwfFNHSC1WMjA1fFNHSC1WMjA2fFNHSC1YMTAwfFNHSC1YMTA1fFNHSC1YMTIwfFNHSC1YMTQwfFNHSC1YNDI2fFNHSC1YNDI3fFNHSC1YNDc1fFNHSC1YNDk1fFNHSC1YNDk3fFNHSC1YNTA3fFNHSC1YNjAwfFNHSC1YNjEwfFNHSC1YNjIwfFNHSC1YNjMwfFNHSC1YNzAwfFNHSC1YODIwfFNHSC1YODkwfFNHSC1aMTMwfFNHSC1aMTUwfFNHSC1aMTcwfFNHSC1aWDEwfFNHSC1aWDIwfFNIVy1NMTEwfFNQSC1BMTIwfFNQSC1BNDAwfFNQSC1BNDIwfFNQSC1BNDYwfFNQSC1BNTAwfFNQSC1BNTYwfFNQSC1BNjAwfFNQSC1BNjIwfFNQSC1BNjYwfFNQSC1BNzAwfFNQSC1BNzQwfFNQSC1BNzYwfFNQSC1BNzkwfFNQSC1BODAwfFNQSC1BODIwfFNQSC1BODQwfFNQSC1BODgwfFNQSC1BOTAwfFNQSC1BOTQwfFNQSC1BOTYwfFNQSC1ENjAwfFNQSC1ENzAwfFNQSC1ENzEwfFNQSC1ENzIwfFNQSC1JMzAwfFNQSC1JMzI1fFNQSC1JMzMwfFNQSC1JMzUwfFNQSC1JNTAwfFNQSC1JNjAwfFNQSC1JNzAwfFNQSC1MNzAwfFNQSC1NMTAwfFNQSC1NMjIwfFNQSC1NMjQwfFNQSC1NMzAwfFNQSC1NMzA1fFNQSC1NMzIwfFNQSC1NMzMwfFNQSC1NMzUwfFNQSC1NMzYwfFNQSC1NMzcwfFNQSC1NMzgwfFNQSC1NNTEwfFNQSC1NNTQwfFNQSC1NNTUwfFNQSC1NNTYwfFNQSC1NNTcwfFNQSC1NNTgwfFNQSC1NNjEwfFNQSC1NNjIwfFNQSC1NNjMwfFNQSC1NODAwfFNQSC1NODEwfFNQSC1NODUwfFNQSC1NOTAwfFNQSC1NOTEwfFNQSC1NOTIwfFNQSC1NOTMwfFNQSC1OMTAwfFNQSC1OMjAwfFNQSC1OMjQwfFNQSC1OMzAwfFNQSC1ONDAwfFNQSC1aNDAwfFNXQy1FMTAwfFNDSC1pOTA5fEdULU43MTAwfEdULU43MTA1fFNDSC1JNTM1fFNNLU45MDBBfFNHSC1JMzE3fFNHSC1UOTk5THxHVC1TNTM2MEJ8R1QtSTgyNjJ8R1QtUzY4MDJ8R1QtUzYzMTJ8R1QtUzYzMTB8R1QtUzUzMTJ8R1QtUzUzMTB8R1QtSTkxMDV8R1QtSTg1MTB8R1QtUzY3OTBOfFNNLUc3MTA1fFNNLU45MDA1fEdULVM1MzAxfEdULUk5Mjk1fEdULUk5MTk1fFNNLUMxMDF8R1QtUzczOTJ8R1QtUzc1NjB8R1QtQjc2MTB8R1QtSTU1MTB8R1QtUzc1ODJ8R1QtUzc1MzBFfEdULUk4NzUwfFNNLUc5MDA2VnxTTS1HOTAwOFZ8U00tRzkwMDlEfFNNLUc5MDBBfFNNLUc5MDBEfFNNLUc5MDBGfFNNLUc5MDBIfFNNLUc5MDBJfFNNLUc5MDBKfFNNLUc5MDBLfFNNLUc5MDBMfFNNLUc5MDBNfFNNLUc5MDBQfFNNLUc5MDBSNHxTTS1HOTAwU3xTTS1HOTAwVHxTTS1HOTAwVnxTTS1HOTAwVzh8U0hWLUUxNjBLfFNDSC1QNzA5fFNDSC1QNzI5fFNNLVQyNTU4fEdULUk5MjA1fFNNLUc5MzUwfFNNLUoxMjBGfFNNLUc5MjBGfFNNLUc5MjBWfFNNLUc5MzBGfFNNLU45MTBDfFNNLUEzMTBGfEdULUk5MTkwfFNNLUo1MDBGTnxTTS1HOTAzRnxTTS1KMzMwRlwiLFxuICAgICAgICBcIkxHXCI6IFwiXFxcXGJMR1xcXFxiO3xMR1stIF0/KEM4MDB8QzkwMHxFNDAwfEU2MTB8RTkwMHxFLTkwMHxGMTYwfEYxODBLfEYxODBMfEYxODBTfDczMHw4NTV8TDE2MHxMUzc0MHxMUzg0MHxMUzk3MHxMVTYyMDB8TVM2OTB8TVM2OTV8TVM3NzB8TVM4NDB8TVM4NzB8TVM5MTB8UDUwMHxQNzAwfFA3MDV8Vk02OTZ8QVM2ODB8QVM2OTV8QVg4NDB8QzcyOXxFOTcwfEdTNTA1fDI3MnxDMzk1fEU3MzlCS3xFOTYwfEw1NUN8TDc1Q3xMUzY5NnxMUzg2MHxQNzY5Qkt8UDM1MHxQNTAwfFA1MDl8UDg3MHxVTjI3MnxVUzczMHxWUzg0MHxWUzk1MHxMTjI3MnxMTjUxMHxMUzY3MHxMUzg1NXxMVzY5MHxNTjI3MHxNTjUxMHxQNTA5fFA3Njl8UDkzMHxVTjIwMHxVTjI3MHxVTjUxMHxVTjYxMHxVUzY3MHxVUzc0MHxVUzc2MHxVWDI2NXxVWDg0MHxWTjI3MXxWTjUzMHxWUzY2MHxWUzcwMHxWUzc0MHxWUzc1MHxWUzkxMHxWUzkyMHxWUzkzMHxWWDkyMDB8VlgxMTAwMHxBWDg0MEF8TFc3NzB8UDUwNnxQOTI1fFA5OTl8RTYxMnxEOTU1fEQ4MDJ8TVMzMjN8TTI1Nyl8TE0tRzcxMFwiLFxuICAgICAgICBcIlNvbnlcIjogXCJTb255U1R8U29ueUxUfFNvbnlFcmljc3NvbnxTb255RXJpY3Nzb25MVDE1aXZ8TFQxOGl8RTEwaXxMVDI4aHxMVDI2d3xTb255RXJpY3Nzb25NVDI3aXxDNTMwM3xDNjkwMnxDNjkwM3xDNjkwNnxDNjk0M3xEMjUzM1wiLFxuICAgICAgICBcIkFzdXNcIjogXCJBc3VzLipHYWxheHl8UGFkRm9uZS4qTW9iaWxlXCIsXG4gICAgICAgIFwiTm9raWFMdW1pYVwiOiBcIkx1bWlhIFswLTldezMsNH1cIixcbiAgICAgICAgXCJNaWNyb21heFwiOiBcIk1pY3JvbWF4LipcXFxcYihBMjEwfEE5MnxBODh8QTcyfEExMTF8QTExMFF8QTExNXxBMTE2fEExMTB8QTkwU3xBMjZ8QTUxfEEzNXxBNTR8QTI1fEEyN3xBODl8QTY4fEE2NXxBNTd8QTkwKVxcXFxiXCIsXG4gICAgICAgIFwiUGFsbVwiOiBcIlBhbG1Tb3VyY2V8UGFsbVwiLFxuICAgICAgICBcIlZlcnR1XCI6IFwiVmVydHV8VmVydHUuKkx0ZHxWZXJ0dS4qQXNjZW50fFZlcnR1LipBeXh0YXxWZXJ0dS4qQ29uc3RlbGxhdGlvbihGfFF1ZXN0KT98VmVydHUuKk1vbmlrYXxWZXJ0dS4qU2lnbmF0dXJlXCIsXG4gICAgICAgIFwiUGFudGVjaFwiOiBcIlBBTlRFQ0h8SU0tQTg1MFN8SU0tQTg0MFN8SU0tQTgzMEx8SU0tQTgzMEt8SU0tQTgzMFN8SU0tQTgyMEx8SU0tQTgxMEt8SU0tQTgxMFN8SU0tQTgwMFN8SU0tVDEwMEt8SU0tQTcyNUx8SU0tQTc4MEx8SU0tQTc3NUN8SU0tQTc3MEt8SU0tQTc2MFN8SU0tQTc1MEt8SU0tQTc0MFN8SU0tQTczMFN8SU0tQTcyMEx8SU0tQTcxMEt8SU0tQTY5MEx8SU0tQTY5MFN8SU0tQTY1MFN8SU0tQTYzMEt8SU0tQTYwMFN8VkVHQSBQVEwyMXxQVDAwM3xQODAxMHxBRFI5MTBMfFA2MDMwfFA2MDIwfFA5MDcwfFA0MTAwfFA5MDYwfFA1MDAwfENETTg5OTJ8VFhUODA0NXxBRFI4OTk1fElTMTFQVHxQMjAzMHxQNjAxMHxQODAwMHxQVDAwMnxJUzA2fENETTg5OTl8UDkwNTB8UFQwMDF8VFhUODA0MHxQMjAyMHxQOTAyMHxQMjAwMHxQNzA0MHxQNzAwMHxDNzkwXCIsXG4gICAgICAgIFwiRmx5XCI6IFwiSVEyMzB8SVE0NDR8SVE0NTB8SVE0NDB8SVE0NDJ8SVE0NDF8SVEyNDV8SVEyNTZ8SVEyMzZ8SVEyNTV8SVEyMzV8SVEyNDV8SVEyNzV8SVEyNDB8SVEyODV8SVEyODB8SVEyNzB8SVEyNjB8SVEyNTBcIixcbiAgICAgICAgXCJXaWtvXCI6IFwiS0lURSA0R3xISUdIV0FZfEdFVEFXQVl8U1RBSVJXQVl8REFSS1NJREV8REFSS0ZVTEx8REFSS05JR0hUfERBUktNT09OfFNMSURFfFdBWCA0R3xSQUlOQk9XfEJMT09NfFNVTlNFVHxHT0EoPyFubmEpfExFTk5ZfEJBUlJZfElHR1l8T1paWXxDSU5LIEZJVkV8Q0lOSyBQRUFYfENJTksgUEVBWCAyfENJTksgU0xJTXxDSU5LIFNMSU0gMnxDSU5LICt8Q0lOSyBLSU5HfENJTksgUEVBWHxDSU5LIFNMSU18U1VCTElNXCIsXG4gICAgICAgIFwiaU1vYmlsZVwiOiBcImktbW9iaWxlIChJUXxpLVNUWUxFfGlkZWF8WkFBfEhpdHopXCIsXG4gICAgICAgIFwiU2ltVmFsbGV5XCI6IFwiXFxcXGIoU1AtODB8WFQtOTMwfFNYLTM0MHxYVC05MzB8U1gtMzEwfFNQLTM2MHxTUDYwfFNQVC04MDB8U1AtMTIwfFNQVC04MDB8U1AtMTQwfFNQWC01fFNQWC04fFNQLTEwMHxTUFgtOHxTUFgtMTIpXFxcXGJcIixcbiAgICAgICAgXCJXb2xmZ2FuZ1wiOiBcIkFULUIyNER8QVQtQVM1MEhEfEFULUFTNDBXfEFULUFTNTVIRHxBVC1BUzQ1cTJ8QVQtQjI2RHxBVC1BUzUwUVwiLFxuICAgICAgICBcIkFsY2F0ZWxcIjogXCJBbGNhdGVsXCIsXG4gICAgICAgIFwiTmludGVuZG9cIjogXCJOaW50ZW5kbyAoM0RTfFN3aXRjaClcIixcbiAgICAgICAgXCJBbW9pXCI6IFwiQW1vaVwiLFxuICAgICAgICBcIklOUVwiOiBcIklOUVwiLFxuICAgICAgICBcIk9uZVBsdXNcIjogXCJPTkVQTFVTXCIsXG4gICAgICAgIFwiR2VuZXJpY1Bob25lXCI6IFwiVGFwYXRhbGt8UERBO3xTQUdFTXxcXFxcYm1tcFxcXFxifHBvY2tldHxcXFxcYnBzcFxcXFxifHN5bWJpYW58U21hcnRwaG9uZXxzbWFydGZvbnx0cmVvfHVwLmJyb3dzZXJ8dXAubGlua3x2b2RhZm9uZXxcXFxcYndhcFxcXFxifG5va2lhfFNlcmllczQwfFNlcmllczYwfFM2MHxTb255RXJpY3Nzb258TjkwMHxNQVVJLipXQVAuKkJyb3dzZXJcIlxuICAgIH0sXG4gICAgXCJ0YWJsZXRzXCI6IHtcbiAgICAgICAgXCJpUGFkXCI6IFwiaVBhZHxpUGFkLipNb2JpbGVcIixcbiAgICAgICAgXCJOZXh1c1RhYmxldFwiOiBcIkFuZHJvaWQuKk5leHVzW1xcXFxzXSsoN3w5fDEwKVwiLFxuICAgICAgICBcIkdvb2dsZVRhYmxldFwiOiBcIkFuZHJvaWQuKlBpeGVsIENcIixcbiAgICAgICAgXCJTYW1zdW5nVGFibGV0XCI6IFwiU0FNU1VORy4qVGFibGV0fEdhbGF4eS4qVGFifFNDLTAxQ3xHVC1QMTAwMHxHVC1QMTAwM3xHVC1QMTAxMHxHVC1QMzEwNXxHVC1QNjIxMHxHVC1QNjgwMHxHVC1QNjgxMHxHVC1QNzEwMHxHVC1QNzMwMHxHVC1QNzMxMHxHVC1QNzUwMHxHVC1QNzUxMHxTQ0gtSTgwMHxTQ0gtSTgxNXxTQ0gtSTkwNXxTR0gtSTk1N3xTR0gtSTk4N3xTR0gtVDg0OXxTR0gtVDg1OXxTR0gtVDg2OXxTUEgtUDEwMHxHVC1QMzEwMHxHVC1QMzEwOHxHVC1QMzExMHxHVC1QNTEwMHxHVC1QNTExMHxHVC1QNjIwMHxHVC1QNzMyMHxHVC1QNzUxMXxHVC1OODAwMHxHVC1QODUxMHxTR0gtSTQ5N3xTUEgtUDUwMHxTR0gtVDc3OXxTQ0gtSTcwNXxTQ0gtSTkxNXxHVC1OODAxM3xHVC1QMzExM3xHVC1QNTExM3xHVC1QODExMHxHVC1OODAxMHxHVC1OODAwNXxHVC1OODAyMHxHVC1QMTAxM3xHVC1QNjIwMXxHVC1QNzUwMXxHVC1ONTEwMHxHVC1ONTEwNXxHVC1ONTExMHxTSFYtRTE0MEt8U0hWLUUxNDBMfFNIVi1FMTQwU3xTSFYtRTE1MFN8U0hWLUUyMzBLfFNIVi1FMjMwTHxTSFYtRTIzMFN8U0hXLU0xODBLfFNIVy1NMTgwTHxTSFctTTE4MFN8U0hXLU0xODBXfFNIVy1NMzAwV3xTSFctTTMwNVd8U0hXLU0zODBLfFNIVy1NMzgwU3xTSFctTTM4MFd8U0hXLU00MzBXfFNIVy1NNDgwS3xTSFctTTQ4MFN8U0hXLU00ODBXfFNIVy1NNDg1V3xTSFctTTQ4Nld8U0hXLU01MDBXfEdULUk5MjI4fFNDSC1QNzM5fFNDSC1JOTI1fEdULUk5MjAwfEdULVA1MjAwfEdULVA1MjEwfEdULVA1MjEwWHxTTS1UMzExfFNNLVQzMTB8U00tVDMxMFh8U00tVDIxMHxTTS1UMjEwUnxTTS1UMjExfFNNLVA2MDB8U00tUDYwMXxTTS1QNjA1fFNNLVA5MDB8U00tUDkwMXxTTS1UMjE3fFNNLVQyMTdBfFNNLVQyMTdTfFNNLVA2MDAwfFNNLVQzMTAwfFNHSC1JNDY3fFhFNTAwfFNNLVQxMTB8R1QtUDUyMjB8R1QtSTkyMDBYfEdULU41MTEwWHxHVC1ONTEyMHxTTS1QOTA1fFNNLVQxMTF8U00tVDIxMDV8U00tVDMxNXxTTS1UMzIwfFNNLVQzMjBYfFNNLVQzMjF8U00tVDUyMHxTTS1UNTI1fFNNLVQ1MzBOVXxTTS1UMjMwTlV8U00tVDMzME5VfFNNLVQ5MDB8WEU1MDBUMUN8U00tUDYwNVZ8U00tUDkwNVZ8U00tVDMzN1Z8U00tVDUzN1Z8U00tVDcwN1Z8U00tVDgwN1Z8U00tUDYwMFh8U00tUDkwMFh8U00tVDIxMFh8U00tVDIzMHxTTS1UMjMwWHxTTS1UMzI1fEdULVA3NTAzfFNNLVQ1MzF8U00tVDMzMHxTTS1UNTMwfFNNLVQ3MDV8U00tVDcwNUN8U00tVDUzNXxTTS1UMzMxfFNNLVQ4MDB8U00tVDcwMHxTTS1UNTM3fFNNLVQ4MDd8U00tUDkwN0F8U00tVDMzN0F8U00tVDUzN0F8U00tVDcwN0F8U00tVDgwN0F8U00tVDIzN3xTTS1UODA3UHxTTS1QNjA3VHxTTS1UMjE3VHxTTS1UMzM3VHxTTS1UODA3VHxTTS1UMTE2TlF8U00tVDExNkJVfFNNLVA1NTB8U00tVDM1MHxTTS1UNTUwfFNNLVQ5MDAwfFNNLVA5MDAwfFNNLVQ3MDVZfFNNLVQ4MDV8R1QtUDMxMTN8U00tVDcxMHxTTS1UODEwfFNNLVQ4MTV8U00tVDM2MHxTTS1UNTMzfFNNLVQxMTN8U00tVDMzNXxTTS1UNzE1fFNNLVQ1NjB8U00tVDY3MHxTTS1UNjc3fFNNLVQzNzd8U00tVDU2N3xTTS1UMzU3VHxTTS1UNTU1fFNNLVQ1NjF8U00tVDcxM3xTTS1UNzE5fFNNLVQ4MTN8U00tVDgxOXxTTS1UNTgwfFNNLVQzNTVZP3xTTS1UMjgwfFNNLVQ4MTdBfFNNLVQ4MjB8U00tVzcwMHxTTS1QNTgwfFNNLVQ1ODd8U00tUDM1MHxTTS1QNTU1TXxTTS1QMzU1TXxTTS1UMTEzTlV8U00tVDgxNVl8U00tVDU4NXxTTS1UMjg1fFNNLVQ4MjV8U00tVzcwOHxTTS1UODM1fFNNLVQ4MzB8U00tVDgzN1Z8U00tVDcyMHxTTS1UNTEwfFNNLVQzODdWXCIsXG4gICAgICAgIFwiS2luZGxlXCI6IFwiS2luZGxlfFNpbGsuKkFjY2VsZXJhdGVkfEFuZHJvaWQuKlxcXFxiKEtGT1R8S0ZUVHxLRkpXSXxLRkpXQXxLRk9URXxLRlNPV0l8S0ZUSFdJfEtGVEhXQXxLRkFQV0l8S0ZBUFdBfFdGSldBRXxLRlNBV0F8S0ZTQVdJfEtGQVNXSXxLRkFSV0l8S0ZGT1dJfEtGR0lXSXxLRk1FV0kpXFxcXGJ8QW5kcm9pZC4qU2lsa1xcL1swLTkuXSsgbGlrZSBDaHJvbWVcXC9bMC05Ll0rICg/IU1vYmlsZSlcIixcbiAgICAgICAgXCJTdXJmYWNlVGFibGV0XCI6IFwiV2luZG93cyBOVCBbMC05Ll0rOyBBUk07LiooVGFibGV0fEFSTUJKUylcIixcbiAgICAgICAgXCJIUFRhYmxldFwiOiBcIkhQIFNsYXRlICg3fDh8MTApfEhQIEVsaXRlUGFkIDkwMHxocC10YWJsZXR8RWxpdGVCb29rLipUb3VjaHxIUCA4fFNsYXRlIDIxfEhQIFNsYXRlQm9vayAxMFwiLFxuICAgICAgICBcIkFzdXNUYWJsZXRcIjogXCJeLipQYWRGb25lKCg/IU1vYmlsZSkuKSokfFRyYW5zZm9ybWVyfFRGMTAxfFRGMTAxR3xURjMwMFR8VEYzMDBUR3xURjMwMFRMfFRGNzAwVHxURjcwMEtMfFRGNzAxVHxURjgxMEN8TUUxNzF8TUUzMDFUfE1FMzAyQ3xNRTM3MU1HfE1FMzcwVHxNRTM3Mk1HfE1FMTcyVnxNRTE3M1h8TUU0MDBDfFNsaWRlciBTTDEwMXxcXFxcYkswMEZcXFxcYnxcXFxcYkswMENcXFxcYnxcXFxcYkswMEVcXFxcYnxcXFxcYkswMExcXFxcYnxUWDIwMUxBfE1FMTc2Q3xNRTEwMkF8XFxcXGJNODBUQVxcXFxifE1FMzcyQ0x8TUU1NjBDR3xNRTM3MkNHfE1FMzAyS0x8IEswMTAgfCBLMDExIHwgSzAxNyB8IEswMUUgfE1FNTcyQ3xNRTEwM0t8TUUxNzBDfE1FMTcxQ3xcXFxcYk1FNzBDXFxcXGJ8TUU1ODFDfE1FNTgxQ0x8TUU4NTEwQ3xNRTE4MUN8UDAxWXxQTzFNQXxQMDFafFxcXFxiUDAyN1xcXFxifFxcXFxiUDAyNFxcXFxifFxcXFxiUDAwQ1xcXFxiXCIsXG4gICAgICAgIFwiQmxhY2tCZXJyeVRhYmxldFwiOiBcIlBsYXlCb29rfFJJTSBUYWJsZXRcIixcbiAgICAgICAgXCJIVEN0YWJsZXRcIjogXCJIVENfRmx5ZXJfUDUxMnxIVEMgRmx5ZXJ8SFRDIEpldHN0cmVhbXxIVEMtUDcxNWF8SFRDIEVWTyBWaWV3IDRHfFBHNDEyMDB8UEcwOTQxMFwiLFxuICAgICAgICBcIk1vdG9yb2xhVGFibGV0XCI6IFwieG9vbXxzaG9sZXN0fE1aNjE1fE1aNjA1fE1aNTA1fE1aNjAxfE1aNjAyfE1aNjAzfE1aNjA0fE1aNjA2fE1aNjA3fE1aNjA4fE1aNjA5fE1aNjE1fE1aNjE2fE1aNjE3XCIsXG4gICAgICAgIFwiTm9va1RhYmxldFwiOiBcIkFuZHJvaWQuKk5vb2t8Tm9va0NvbG9yfG5vb2sgYnJvd3NlcnxCTlJWMjAwfEJOUlYyMDBBfEJOVFYyNTB8Qk5UVjI1MEF8Qk5UVjQwMHxCTlRWNjAwfExvZ2ljUEQgWm9vbTJcIixcbiAgICAgICAgXCJBY2VyVGFibGV0XCI6IFwiQW5kcm9pZC4qOyBcXFxcYihBMTAwfEExMDF8QTExMHxBMjAwfEEyMTB8QTIxMXxBNTAwfEE1MDF8QTUxMHxBNTExfEE3MDB8QTcwMXxXNTAwfFc1MDBQfFc1MDF8VzUwMVB8VzUxMHxXNTExfFc3MDB8RzEwMHxHMTAwV3xCMS1BNzF8QjEtNzEwfEIxLTcxMXxBMS04MTB8QTEtODExfEExLTgzMClcXFxcYnxXMy04MTB8XFxcXGJBMy1BMTBcXFxcYnxcXFxcYkEzLUExMVxcXFxifFxcXFxiQTMtQTIwXFxcXGJ8XFxcXGJBMy1BMzBcIixcbiAgICAgICAgXCJUb3NoaWJhVGFibGV0XCI6IFwiQW5kcm9pZC4qKEFUMTAwfEFUMTA1fEFUMjAwfEFUMjA1fEFUMjcwfEFUMjc1fEFUMzAwfEFUMzA1fEFUMVM1fEFUNTAwfEFUNTcwfEFUNzAwfEFUODMwKXxUT1NISUJBLipGT0xJT1wiLFxuICAgICAgICBcIkxHVGFibGV0XCI6IFwiXFxcXGJMLTA2Q3xMRy1WOTA5fExHLVY5MDB8TEctVjcwMHxMRy1WNTEwfExHLVY1MDB8TEctVjQxMHxMRy1WNDAwfExHLVZLODEwXFxcXGJcIixcbiAgICAgICAgXCJGdWppdHN1VGFibGV0XCI6IFwiQW5kcm9pZC4qXFxcXGIoRi0wMUR8Ri0wMkZ8Ri0wNUV8Ri0xMER8TTUzMnxRNTcyKVxcXFxiXCIsXG4gICAgICAgIFwiUHJlc3RpZ2lvVGFibGV0XCI6IFwiUE1QMzE3MEJ8UE1QMzI3MEJ8UE1QMzQ3MEJ8UE1QNzE3MEJ8UE1QMzM3MEJ8UE1QMzU3MEN8UE1QNTg3MEN8UE1QMzY3MEJ8UE1QNTU3MEN8UE1QNTc3MER8UE1QMzk3MEJ8UE1QMzg3MEN8UE1QNTU4MEN8UE1QNTg4MER8UE1QNTc4MER8UE1QNTU4OEN8UE1QNzI4MEN8UE1QNzI4MEMzR3xQTVA3MjgwfFBNUDc4ODBEfFBNUDU1OTdEfFBNUDU1OTd8UE1QNzEwMER8UEVSMzQ2NHxQRVIzMjc0fFBFUjM1NzR8UEVSMzg4NHxQRVI1Mjc0fFBFUjU0NzR8UE1QNTA5N0NQUk98UE1QNTA5N3xQTVA3MzgwRHxQTVA1Mjk3Q3xQTVA1Mjk3Q19RVUFEfFBNUDgxMkV8UE1QODEyRTNHfFBNUDgxMkZ8UE1QODEwRXxQTVA4ODBURHxQTVQzMDE3fFBNVDMwMzd8UE1UMzA0N3xQTVQzMDU3fFBNVDcwMDh8UE1UNTg4N3xQTVQ1MDAxfFBNVDUwMDJcIixcbiAgICAgICAgXCJMZW5vdm9UYWJsZXRcIjogXCJMZW5vdm8gVEFCfElkZWEoVGFifFBhZCkoIEExfEExMHwgSzF8KXxUaGlua1BhZChbIF0rKT9UYWJsZXR8WVQzLTg1ME18WVQzLVg5MEx8WVQzLVg5MEZ8WVQzLVg5MFh8TGVub3ZvLiooUzIxMDl8UzIxMTB8UzUwMDB8UzYwMDB8SzMwMTF8QTMwMDB8QTM1MDB8QTEwMDB8QTIxMDd8QTIxMDl8QTExMDd8QTU1MDB8QTc2MDB8QjYwMDB8QjgwMDB8QjgwODApKC18KShGTHxGfEhWfEh8KXxUQi1YMTAzRnxUQi1YMzA0WHxUQi1YMzA0RnxUQi1YMzA0THxUQi1YNTA1RnxUQi1YNTA1THxUQi1YNTA1WHxUQi1YNjA1RnxUQi1YNjA1THxUQi04NzAzRnxUQi04NzAzWHxUQi04NzAzTnxUQi04NzA0TnxUQi04NzA0RnxUQi04NzA0WHxUQi04NzA0VnxUQi03MzA0RnxUQi03MzA0SXxUQi03MzA0WHxUYWIyQTctMTBGfFRhYjJBNy0yMEZ8VEIyLVgzMEx8WVQzLVg1MEx8WVQzLVg1MEZ8WVQzLVg1ME18WVQtWDcwNUZ8WVQtWDcwM0Z8WVQtWDcwM0x8WVQtWDcwNUx8WVQtWDcwNVh8VEIyLVgzMEZ8VEIyLVgzMEx8VEIyLVgzME18QTIxMDdBLUZ8QTIxMDdBLUh8VEIzLTczMEZ8VEIzLTczME18VEIzLTczMFh8VEItNzUwNEZ8VEItNzUwNFhcIixcbiAgICAgICAgXCJEZWxsVGFibGV0XCI6IFwiVmVudWUgMTF8VmVudWUgOHxWZW51ZSA3fERlbGwgU3RyZWFrIDEwfERlbGwgU3RyZWFrIDdcIixcbiAgICAgICAgXCJZYXJ2aWtUYWJsZXRcIjogXCJBbmRyb2lkLipcXFxcYihUQUIyMTB8VEFCMjExfFRBQjIyNHxUQUIyNTB8VEFCMjYwfFRBQjI2NHxUQUIzMTB8VEFCMzYwfFRBQjM2NHxUQUI0MTB8VEFCNDExfFRBQjQyMHxUQUI0MjR8VEFCNDUwfFRBQjQ2MHxUQUI0NjF8VEFCNDY0fFRBQjQ2NXxUQUI0Njd8VEFCNDY4fFRBQjA3LTEwMHxUQUIwNy0xMDF8VEFCMDctMTUwfFRBQjA3LTE1MXxUQUIwNy0xNTJ8VEFCMDctMjAwfFRBQjA3LTIwMS0zR3xUQUIwNy0yMTB8VEFCMDctMjExfFRBQjA3LTIxMnxUQUIwNy0yMTR8VEFCMDctMjIwfFRBQjA3LTQwMHxUQUIwNy00ODV8VEFCMDgtMTUwfFRBQjA4LTIwMHxUQUIwOC0yMDEtM0d8VEFCMDgtMjAxLTMwfFRBQjA5LTEwMHxUQUIwOS0yMTF8VEFCMDktNDEwfFRBQjEwLTE1MHxUQUIxMC0yMDF8VEFCMTAtMjExfFRBQjEwLTQwMHxUQUIxMC00MTB8VEFCMTMtMjAxfFRBQjI3NEVVS3xUQUIyNzVFVUt8VEFCMzc0RVVLfFRBQjQ2MkVVS3xUQUI0NzRFVUt8VEFCOS0yMDApXFxcXGJcIixcbiAgICAgICAgXCJNZWRpb25UYWJsZXRcIjogXCJBbmRyb2lkLipcXFxcYk9ZT1xcXFxifExJRkUuKihQOTIxMnxQOTUxNHxQOTUxNnxTOTUxMil8TElGRVRBQlwiLFxuICAgICAgICBcIkFybm92YVRhYmxldFwiOiBcIjk3RzR8QU4xMEcyfEFON2JHM3xBTjdmRzN8QU44RzN8QU44Y0czfEFON0czfEFOOUczfEFON2RHM3xBTjdkRzNTVHxBTjdkRzNDaGlsZFBhZHxBTjEwYkczfEFOMTBiRzNEVHxBTjlHMlwiLFxuICAgICAgICBcIkludGVuc29UYWJsZXRcIjogXCJJTk04MDAyS1B8SU5NMTAxMEZQfElOTTgwNU5EfEludGVuc28gVGFifFRBQjEwMDRcIixcbiAgICAgICAgXCJJUlVUYWJsZXRcIjogXCJNNzAycHJvXCIsXG4gICAgICAgIFwiTWVnYWZvblRhYmxldFwiOiBcIk1lZ2FGb24gVjl8XFxcXGJaVEUgVjlcXFxcYnxBbmRyb2lkLipcXFxcYk1UN0FcXFxcYlwiLFxuICAgICAgICBcIkVib2RhVGFibGV0XCI6IFwiRS1Cb2RhIChTdXByZW1lfEltcHJlc3NwZWVkfEl6enljb21tfEVzc2VudGlhbClcIixcbiAgICAgICAgXCJBbGxWaWV3VGFibGV0XCI6IFwiQWxsdmlldy4qKFZpdmF8QWxsZHJvfENpdHl8U3BlZWR8QWxsIFRWfEZyZW56eXxRdWFzYXJ8U2hpbmV8VFgxfEFYMXxBWDIpXCIsXG4gICAgICAgIFwiQXJjaG9zVGFibGV0XCI6IFwiXFxcXGIoMTAxRzl8ODBHOXxBMTAxSVQpXFxcXGJ8UWlsaXZlIDk3UnxBcmNob3M1fFxcXFxiQVJDSE9TICg3MHw3OXw4MHw5MHw5N3wxMDF8RkFNSUxZUEFEfCkoYnxjfCkoRzEwfCBDb2JhbHR8IFRJVEFOSVVNKEhEfCl8IFhlbm9ufCBOZW9ufFhTS3wgMnwgWFMgMnwgUExBVElOVU18IENBUkJPTnxHQU1FUEFEKVxcXFxiXCIsXG4gICAgICAgIFwiQWlub2xUYWJsZXRcIjogXCJOT1ZPN3xOT1ZPOHxOT1ZPMTB8Tm92bzdBdXJvcmF8Tm92bzdCYXNpY3xOT1ZPN1BBTEFESU58bm92bzktU3BhcmtcIixcbiAgICAgICAgXCJOb2tpYUx1bWlhVGFibGV0XCI6IFwiTHVtaWEgMjUyMFwiLFxuICAgICAgICBcIlNvbnlUYWJsZXRcIjogXCJTb255LipUYWJsZXR8WHBlcmlhIFRhYmxldHxTb255IFRhYmxldCBTfFNPLTAzRXxTR1BUMTJ8U0dQVDEzfFNHUFQxMTR8U0dQVDEyMXxTR1BUMTIyfFNHUFQxMjN8U0dQVDExMXxTR1BUMTEyfFNHUFQxMTN8U0dQVDEzMXxTR1BUMTMyfFNHUFQxMzN8U0dQVDIxMXxTR1BUMjEyfFNHUFQyMTN8U0dQMzExfFNHUDMxMnxTR1AzMjF8RUJSRDExMDF8RUJSRDExMDJ8RUJSRDEyMDF8U0dQMzUxfFNHUDM0MXxTR1A1MTF8U0dQNTEyfFNHUDUyMXxTR1A1NDF8U0dQNTUxfFNHUDYyMXxTR1A2NDF8U0dQNjEyfFNPVDMxfFNHUDc3MXxTR1A2MTF8U0dQNjEyfFNHUDcxMlwiLFxuICAgICAgICBcIlBoaWxpcHNUYWJsZXRcIjogXCJcXFxcYihQSTIwMTB8UEkzMDAwfFBJMzEwMHxQSTMxMDV8UEkzMTEwfFBJMzIwNXxQSTMyMTB8UEkzOTAwfFBJNDAxMHxQSTcwMDB8UEk3MTAwKVxcXFxiXCIsXG4gICAgICAgIFwiQ3ViZVRhYmxldFwiOiBcIkFuZHJvaWQuKihLOEdUfFU5R1R8VTEwR1R8VTE2R1R8VTE3R1R8VTE4R1R8VTE5R1R8VTIwR1R8VTIzR1R8VTMwR1QpfENVQkUgVThHVFwiLFxuICAgICAgICBcIkNvYnlUYWJsZXRcIjogXCJNSUQxMDQyfE1JRDEwNDV8TUlEMTEyNXxNSUQxMTI2fE1JRDcwMTJ8TUlENzAxNHxNSUQ3MDE1fE1JRDcwMzR8TUlENzAzNXxNSUQ3MDM2fE1JRDcwNDJ8TUlENzA0OHxNSUQ3MTI3fE1JRDgwNDJ8TUlEODA0OHxNSUQ4MTI3fE1JRDkwNDJ8TUlEOTc0MHxNSUQ5NzQyfE1JRDcwMjJ8TUlENzAxMFwiLFxuICAgICAgICBcIk1JRFRhYmxldFwiOiBcIk05NzAxfE05MDAwfE05MTAwfE04MDZ8TTEwNTJ8TTgwNnxUNzAzfE1JRDcwMXxNSUQ3MTN8TUlENzEwfE1JRDcyN3xNSUQ3NjB8TUlEODMwfE1JRDcyOHxNSUQ5MzN8TUlEMTI1fE1JRDgxMHxNSUQ3MzJ8TUlEMTIwfE1JRDkzMHxNSUQ4MDB8TUlENzMxfE1JRDkwMHxNSUQxMDB8TUlEODIwfE1JRDczNXxNSUQ5ODB8TUlEMTMwfE1JRDgzM3xNSUQ3Mzd8TUlEOTYwfE1JRDEzNXxNSUQ4NjB8TUlENzM2fE1JRDE0MHxNSUQ5MzB8TUlEODM1fE1JRDczM3xNSUQ0WDEwXCIsXG4gICAgICAgIFwiTVNJVGFibGV0XCI6IFwiTVNJIFxcXFxiKFByaW1vIDczS3xQcmltbyA3M0x8UHJpbW8gODFMfFByaW1vIDc3fFByaW1vIDkzfFByaW1vIDc1fFByaW1vIDc2fFByaW1vIDczfFByaW1vIDgxfFByaW1vIDkxfFByaW1vIDkwfEVuam95IDcxfEVuam95IDd8RW5qb3kgMTApXFxcXGJcIixcbiAgICAgICAgXCJTTWlUVGFibGV0XCI6IFwiQW5kcm9pZC4qKFxcXFxiTUlEXFxcXGJ8TUlELTU2MHxNVFYtVDEyMDB8TVRWLVBORDUzMXxNVFYtUDExMDF8TVRWLVBORDUzMClcIixcbiAgICAgICAgXCJSb2NrQ2hpcFRhYmxldFwiOiBcIkFuZHJvaWQuKihSSzI4MTh8UksyODA4QXxSSzI5MTh8UkszMDY2KXxSSzI3Mzh8UksyODA4QVwiLFxuICAgICAgICBcIkZseVRhYmxldFwiOiBcIklRMzEwfEZseSBWaXNpb25cIixcbiAgICAgICAgXCJicVRhYmxldFwiOiBcIkFuZHJvaWQuKihicSk/LipcXFxcYihFbGNhbm98Q3VyaWV8RWRpc29ufE1heHdlbGx8S2VwbGVyfFBhc2NhbHxUZXNsYXxIeXBhdGlhfFBsYXRvbnxOZXd0b258TGl2aW5nc3RvbmV8Q2VydmFudGVzfEF2YW50fEFxdWFyaXMgKFtFfE1dMTB8TTgpKVxcXFxifE1heHdlbGwuKkxpdGV8TWF4d2VsbC4qUGx1c1wiLFxuICAgICAgICBcIkh1YXdlaVRhYmxldFwiOiBcIk1lZGlhUGFkfE1lZGlhUGFkIDcgWW91dGh8SURFT1MgUzd8UzctMjAxY3xTNy0yMDJ1fFM3LTEwMXxTNy0xMDN8UzctMTA0fFM3LTEwNXxTNy0xMDZ8UzctMjAxfFM3LVNsaW18TTItQTAxTHxCQUgtTDA5fEJBSC1XMDl8QUdTLUwwOXxDTVItQUwxOVwiLFxuICAgICAgICBcIk5lY1RhYmxldFwiOiBcIlxcXFxiTi0wNkR8XFxcXGJOLTA4RFwiLFxuICAgICAgICBcIlBhbnRlY2hUYWJsZXRcIjogXCJQYW50ZWNoLipQNDEwMFwiLFxuICAgICAgICBcIkJyb25jaG9UYWJsZXRcIjogXCJCcm9uY2hvLiooTjcwMXxONzA4fE44MDJ8YTcxMClcIixcbiAgICAgICAgXCJWZXJzdXNUYWJsZXRcIjogXCJUT1VDSFBBRC4qWzc4OTEwXXxcXFxcYlRPVUNIVEFCXFxcXGJcIixcbiAgICAgICAgXCJaeW5jVGFibGV0XCI6IFwiejEwMDB8Wjk5IDJHfHo5MzB8ejk5MHx6OTA5fFo5MTl8ejkwMFwiLFxuICAgICAgICBcIlBvc2l0aXZvVGFibGV0XCI6IFwiVEIwN1NUQXxUQjEwU1RBfFRCMDdGVEF8VEIxMEZUQVwiLFxuICAgICAgICBcIk5hYmlUYWJsZXRcIjogXCJBbmRyb2lkLipcXFxcYk5hYmlcIixcbiAgICAgICAgXCJLb2JvVGFibGV0XCI6IFwiS29ibyBUb3VjaHxcXFxcYkswODBcXFxcYnxcXFxcYlZveFxcXFxiIEJ1aWxkfFxcXFxiQXJjXFxcXGIgQnVpbGRcIixcbiAgICAgICAgXCJEYW5ld1RhYmxldFwiOiBcIkRTbGlkZS4qXFxcXGIoNzAwfDcwMVJ8NzAyfDcwM1J8NzA0fDgwMnw5NzB8OTcxfDk3Mnw5NzN8OTc0fDEwMTB8MTAxMilcXFxcYlwiLFxuICAgICAgICBcIlRleGV0VGFibGV0XCI6IFwiTmF2aVBhZHxUQi03NzJBfFRNLTcwNDV8VE0tNzA1NXxUTS05NzUwfFRNLTcwMTZ8VE0tNzAyNHxUTS03MDI2fFRNLTcwNDF8VE0tNzA0M3xUTS03MDQ3fFRNLTgwNDF8VE0tOTc0MXxUTS05NzQ3fFRNLTk3NDh8VE0tOTc1MXxUTS03MDIyfFRNLTcwMjF8VE0tNzAyMHxUTS03MDExfFRNLTcwMTB8VE0tNzAyM3xUTS03MDI1fFRNLTcwMzdXfFRNLTcwMzhXfFRNLTcwMjdXfFRNLTk3MjB8VE0tOTcyNXxUTS05NzM3V3xUTS0xMDIwfFRNLTk3MzhXfFRNLTk3NDB8VE0tOTc0M1d8VEItODA3QXxUQi03NzFBfFRCLTcyN0F8VEItNzI1QXxUQi03MTlBfFRCLTgyM0F8VEItODA1QXxUQi03MjNBfFRCLTcxNUF8VEItNzA3QXxUQi03MDVBfFRCLTcwOUF8VEItNzExQXxUQi04OTBIRHxUQi04ODBIRHxUQi03OTBIRHxUQi03ODBIRHxUQi03NzBIRHxUQi03MjFIRHxUQi03MTBIRHxUQi00MzRIRHxUQi04NjBIRHxUQi04NDBIRHxUQi03NjBIRHxUQi03NTBIRHxUQi03NDBIRHxUQi03MzBIRHxUQi03MjJIRHxUQi03MjBIRHxUQi03MDBIRHxUQi01MDBIRHxUQi00NzBIRHxUQi00MzFIRHxUQi00MzBIRHxUQi01MDZ8VEItNTA0fFRCLTQ0NnxUQi00MzZ8VEItNDE2fFRCLTE0NlNFfFRCLTEyNlNFXCIsXG4gICAgICAgIFwiUGxheXN0YXRpb25UYWJsZXRcIjogXCJQbGF5c3RhdGlvbi4qKFBvcnRhYmxlfFZpdGEpXCIsXG4gICAgICAgIFwiVHJla3N0b3JUYWJsZXRcIjogXCJTVDEwNDE2LTF8VlQxMDQxNi0xfFNUNzA0MDgtMXxTVDcwMnh4LTF8U1Q3MDJ4eC0yfFNUODAyMDh8U1Q5NzIxNnxTVDcwMTA0LTJ8VlQxMDQxNi0yfFNUMTAyMTYtMkF8U3VyZlRhYlwiLFxuICAgICAgICBcIlB5bGVBdWRpb1RhYmxldFwiOiBcIlxcXFxiKFBUQkwxMENFVXxQVEJMMTBDfFBUQkw3MkJDfFBUQkw3MkJDRVV8UFRCTDdDRVV8UFRCTDdDfFBUQkw5MkJDfFBUQkw5MkJDRVV8UFRCTDlDRVV8UFRCTDlDVUt8UFRCTDlDKVxcXFxiXCIsXG4gICAgICAgIFwiQWR2YW5UYWJsZXRcIjogXCJBbmRyb2lkLiogXFxcXGIoRTNBfFQzWHxUNUN8VDVCfFQzRXxUM0N8VDNCfFQxSnxUMUZ8VDJBfFQxSHxUMWl8RTFDfFQxLUV8VDUtQXxUNHxFMS1CfFQyQ2l8VDEtQnxUMS1EfE8xLUF8RTEtQXxUMS1BfFQzQXxUNGkpXFxcXGIgXCIsXG4gICAgICAgIFwiRGFueVRlY2hUYWJsZXRcIjogXCJHZW5pdXMgVGFiIEczfEdlbml1cyBUYWIgUzJ8R2VuaXVzIFRhYiBRM3xHZW5pdXMgVGFiIEc0fEdlbml1cyBUYWIgUTR8R2VuaXVzIFRhYiBHLUlJfEdlbml1cyBUQUIgR0lJfEdlbml1cyBUQUIgR0lJSXxHZW5pdXMgVGFiIFMxXCIsXG4gICAgICAgIFwiR2FsYXBhZFRhYmxldFwiOiBcIkFuZHJvaWQuKlxcXFxiRzFcXFxcYig/IVxcXFwpKVwiLFxuICAgICAgICBcIk1pY3JvbWF4VGFibGV0XCI6IFwiRnVuYm9va3xNaWNyb21heC4qXFxcXGIoUDI1MHxQNTYwfFAzNjB8UDM2MnxQNjAwfFAzMDB8UDM1MHxQNTAwfFAyNzUpXFxcXGJcIixcbiAgICAgICAgXCJLYXJib25uVGFibGV0XCI6IFwiQW5kcm9pZC4qXFxcXGIoQTM5fEEzN3xBMzR8U1Q4fFNUMTB8U1Q3fFNtYXJ0IFRhYjN8U21hcnQgVGFiMilcXFxcYlwiLFxuICAgICAgICBcIkFsbEZpbmVUYWJsZXRcIjogXCJGaW5lNyBHZW5pdXN8RmluZTcgU2hpbmV8RmluZTcgQWlyfEZpbmU4IFN0eWxlfEZpbmU5IE1vcmV8RmluZTEwIEpveXxGaW5lMTEgV2lkZVwiLFxuICAgICAgICBcIlBST1NDQU5UYWJsZXRcIjogXCJcXFxcYihQRU02M3xQTFQxMDIzR3xQTFQxMDQxfFBMVDEwNDR8UExUMTA0NEd8UExUMTA5MXxQTFQ0MzExfFBMVDQzMTFQTHxQTFQ0MzE1fFBMVDcwMzB8UExUNzAzM3xQTFQ3MDMzRHxQTFQ3MDM1fFBMVDcwMzVEfFBMVDcwNDRLfFBMVDcwNDVLfFBMVDcwNDVLQnxQTFQ3MDcxS0d8UExUNzA3MnxQTFQ3MjIzR3xQTFQ3MjI1R3xQTFQ3Nzc3R3xQTFQ3ODEwS3xQTFQ3ODQ5R3xQTFQ3ODUxR3xQTFQ3ODUyR3xQTFQ4MDE1fFBMVDgwMzF8UExUODAzNHxQTFQ4MDM2fFBMVDgwODBLfFBMVDgwODJ8UExUODA4OHxQTFQ4MjIzR3xQTFQ4MjM0R3xQTFQ4MjM1R3xQTFQ4ODE2S3xQTFQ5MDExfFBMVDkwNDVLfFBMVDkyMzNHfFBMVDk3MzV8UExUOTc2MEd8UExUOTc3MEcpXFxcXGJcIixcbiAgICAgICAgXCJZT05FU1RhYmxldFwiOiBcIkJRMTA3OHxCQzEwMDN8QkMxMDc3fFJLOTcwMnxCQzk3MzB8QkM5MDAxfElUOTAwMXxCQzcwMDh8QkM3MDEwfEJDNzA4fEJDNzI4fEJDNzAxMnxCQzcwMzB8QkM3MDI3fEJDNzAyNlwiLFxuICAgICAgICBcIkNoYW5nSmlhVGFibGV0XCI6IFwiVFBDNzEwMnxUUEM3MTAzfFRQQzcxMDV8VFBDNzEwNnxUUEM3MTA3fFRQQzcyMDF8VFBDNzIwM3xUUEM3MjA1fFRQQzcyMTB8VFBDNzcwOHxUUEM3NzA5fFRQQzc3MTJ8VFBDNzExMHxUUEM4MTAxfFRQQzgxMDN8VFBDODEwNXxUUEM4MTA2fFRQQzgyMDN8VFBDODIwNXxUUEM4NTAzfFRQQzkxMDZ8VFBDOTcwMXxUUEM5NzEwMXxUUEM5NzEwM3xUUEM5NzEwNXxUUEM5NzEwNnxUUEM5NzExMXxUUEM5NzExM3xUUEM5NzIwM3xUUEM5NzYwM3xUUEM5NzgwOXxUUEM5NzIwNXxUUEMxMDEwMXxUUEMxMDEwM3xUUEMxMDEwNnxUUEMxMDExMXxUUEMxMDIwM3xUUEMxMDIwNXxUUEMxMDUwM1wiLFxuICAgICAgICBcIkdVVGFibGV0XCI6IFwiVFgtQTEzMDF8VFgtTTkwMDJ8UTcwMnxrZjAyNlwiLFxuICAgICAgICBcIlBvaW50T2ZWaWV3VGFibGV0XCI6IFwiVEFCLVA1MDZ8VEFCLW5hdmktNy0zRy1NfFRBQi1QNTE3fFRBQi1QLTUyN3xUQUItUDcwMXxUQUItUDcwM3xUQUItUDcyMXxUQUItUDczMU58VEFCLVA3NDF8VEFCLVA4MjV8VEFCLVA5MDV8VEFCLVA5MjV8VEFCLVBSOTQ1fFRBQi1QTDEwMTV8VEFCLVAxMDI1fFRBQi1QSTEwNDV8VEFCLVAxMzI1fFRBQi1QUk9UQUJbMC05XSt8VEFCLVBST1RBQjI1fFRBQi1QUk9UQUIyNnxUQUItUFJPVEFCMjd8VEFCLVBST1RBQjI2WEx8VEFCLVBST1RBQjItSVBTOXxUQUItUFJPVEFCMzAtSVBTOXxUQUItUFJPVEFCMjVYWEx8VEFCLVBST1RBQjI2LUlQUzEwfFRBQi1QUk9UQUIzMC1JUFMxMFwiLFxuICAgICAgICBcIk92ZXJtYXhUYWJsZXRcIjogXCJPVi0oU3RlZWxDb3JlfE5ld0Jhc2V8QmFzZWNvcmV8QmFzZW9uZXxFeGVsbGVufFF1YXR0b3J8RWR1VGFifFNvbHV0aW9ufEFDVElPTnxCYXNpY1RhYnxUZWRkeVRhYnxNYWdpY1RhYnxTdHJlYW18VEItMDh8VEItMDkpfFF1YWxjb3JlIDEwMjdcIixcbiAgICAgICAgXCJIQ0xUYWJsZXRcIjogXCJIQ0wuKlRhYmxldHxDb25uZWN0LTNHLTIuMHxDb25uZWN0LTJHLTIuMHxNRSBUYWJsZXQgVTF8TUUgVGFibGV0IFUyfE1FIFRhYmxldCBHMXxNRSBUYWJsZXQgWDF8TUUgVGFibGV0IFkyfE1FIFRhYmxldCBTeW5jXCIsXG4gICAgICAgIFwiRFBTVGFibGV0XCI6IFwiRFBTIERyZWFtIDl8RFBTIER1YWwgN1wiLFxuICAgICAgICBcIlZpc3R1cmVUYWJsZXRcIjogXCJWOTcgSER8aTc1IDNHfFZpc3R1cmUgVjQoIEhEKT98VmlzdHVyZSBWNSggSEQpP3xWaXN0dXJlIFYxMFwiLFxuICAgICAgICBcIkNyZXN0YVRhYmxldFwiOiBcIkNUUCgtKT84MTB8Q1RQKC0pPzgxOHxDVFAoLSk/ODI4fENUUCgtKT84Mzh8Q1RQKC0pPzg4OHxDVFAoLSk/OTc4fENUUCgtKT85ODB8Q1RQKC0pPzk4N3xDVFAoLSk/OTg4fENUUCgtKT85ODlcIixcbiAgICAgICAgXCJNZWRpYXRla1RhYmxldFwiOiBcIlxcXFxiTVQ4MTI1fE1UODM4OXxNVDgxMzV8TVQ4Mzc3XFxcXGJcIixcbiAgICAgICAgXCJDb25jb3JkZVRhYmxldFwiOiBcIkNvbmNvcmRlKFsgXSspP1RhYnxDb25Db3JkZSBSZWFkTWFuXCIsXG4gICAgICAgIFwiR29DbGV2ZXJUYWJsZXRcIjogXCJHT0NMRVZFUiBUQUJ8QTdHT0NMRVZFUnxNMTA0MnxNNzg0MXxNNzQyfFIxMDQyQkt8UjEwNDF8VEFCIEE5NzV8VEFCIEE3ODQyfFRBQiBBNzQxfFRBQiBBNzQxTHxUQUIgTTcyM0d8VEFCIE03MjF8VEFCIEExMDIxfFRBQiBJOTIxfFRBQiBSNzIxfFRBQiBJNzIwfFRBQiBUNzZ8VEFCIFI3MHxUQUIgUjc2LjJ8VEFCIFIxMDZ8VEFCIFI4My4yfFRBQiBNODEzR3xUQUIgSTcyMXxHQ1RBNzIyfFRBQiBJNzB8VEFCIEk3MXxUQUIgUzczfFRBQiBSNzN8VEFCIFI3NHxUQUIgUjkzfFRBQiBSNzV8VEFCIFI3Ni4xfFRBQiBBNzN8VEFCIEE5M3xUQUIgQTkzLjJ8VEFCIFQ3MnxUQUIgUjgzfFRBQiBSOTc0fFRBQiBSOTczfFRBQiBBMTAxfFRBQiBBMTAzfFRBQiBBMTA0fFRBQiBBMTA0LjJ8UjEwNUJLfE03MTNHfEE5NzJCS3xUQUIgQTk3MXxUQUIgUjk3NC4yfFRBQiBSMTA0fFRBQiBSODMuM3xUQUIgQTEwNDJcIixcbiAgICAgICAgXCJNb2RlY29tVGFibGV0XCI6IFwiRnJlZVRBQiA5MDAwfEZyZWVUQUIgNy40fEZyZWVUQUIgNzAwNHxGcmVlVEFCIDc4MDB8RnJlZVRBQiAyMDk2fEZyZWVUQUIgNy41fEZyZWVUQUIgMTAxNHxGcmVlVEFCIDEwMDEgfEZyZWVUQUIgODAwMXxGcmVlVEFCIDk3MDZ8RnJlZVRBQiA5NzAyfEZyZWVUQUIgNzAwM3xGcmVlVEFCIDcwMDJ8RnJlZVRBQiAxMDAyfEZyZWVUQUIgNzgwMXxGcmVlVEFCIDEzMzF8RnJlZVRBQiAxMDA0fEZyZWVUQUIgODAwMnxGcmVlVEFCIDgwMTR8RnJlZVRBQiA5NzA0fEZyZWVUQUIgMTAwM1wiLFxuICAgICAgICBcIlZvbmlub1RhYmxldFwiOiBcIlxcXFxiKEFyZ3VzWyBfXT9TfERpYW1vbmRbIF9dPzc5SER8RW1lcmFsZFsgX10/NzhFfEx1bmFbIF9dPzcwQ3xPbnl4WyBfXT9TfE9ueXhbIF9dP1p8T3JpblsgX10/SER8T3JpblsgX10/U3xPdGlzWyBfXT9TfFNwZWVkU3RhclsgX10/U3xNYWduZXRbIF9dP005fFByaW11c1sgX10/OTRbIF9dPzNHfFByaW11c1sgX10/OTRIRHxQcmltdXNbIF9dP1FTfEFuZHJvaWQuKlxcXFxiUThcXFxcYnxTaXJpdXNbIF9dP0VWT1sgX10/UVN8U2lyaXVzWyBfXT9RU3xTcGlyaXRbIF9dP1MpXFxcXGJcIixcbiAgICAgICAgXCJFQ1NUYWJsZXRcIjogXCJWMDdPVDJ8VE0xMDVBfFMxME9UMXxUUjEwQ1MxXCIsXG4gICAgICAgIFwiU3RvcmV4VGFibGV0XCI6IFwiZVplZVtfJ10/KFRhYnxHbylbMC05XSt8VGFiTEM3fExvb25leSBUdW5lcyBUYWJcIixcbiAgICAgICAgXCJWb2RhZm9uZVRhYmxldFwiOiBcIlNtYXJ0VGFiKFsgXSspP1swLTldK3xTbWFydFRhYklJMTB8U21hcnRUYWJJSTd8VkYtMTQ5N3xWRkQgMTQwMFwiLFxuICAgICAgICBcIkVzc2VudGllbEJUYWJsZXRcIjogXCJTbWFydFsgJ10/VEFCWyBdKz9bMC05XSt8RmFtaWx5WyAnXT9UQUIyXCIsXG4gICAgICAgIFwiUm9zc01vb3JUYWJsZXRcIjogXCJSTS03OTB8Uk0tOTk3fFJNRC04NzhHfFJNRC05NzRSfFJNVC03MDVBfFJNVC03MDF8Uk1FLTYwMXxSTVQtNTAxfFJNVC03MTFcIixcbiAgICAgICAgXCJpTW9iaWxlVGFibGV0XCI6IFwiaS1tb2JpbGUgaS1ub3RlXCIsXG4gICAgICAgIFwiVG9saW5vVGFibGV0XCI6IFwidG9saW5vIHRhYiBbMC05Ll0rfHRvbGlubyBzaGluZVwiLFxuICAgICAgICBcIkF1ZGlvU29uaWNUYWJsZXRcIjogXCJcXFxcYkMtMjJRfFQ3LVFDfFQtMTdCfFQtMTdQXFxcXGJcIixcbiAgICAgICAgXCJBTVBFVGFibGV0XCI6IFwiQW5kcm9pZC4qIEE3OCBcIixcbiAgICAgICAgXCJTa2tUYWJsZXRcIjogXCJBbmRyb2lkLiogKFNLWVBBRHxQSE9FTklYfENZQ0xPUFMpXCIsXG4gICAgICAgIFwiVGVjbm9UYWJsZXRcIjogXCJURUNOTyBQOXxURUNOTyBEUDhEXCIsXG4gICAgICAgIFwiSlhEVGFibGV0XCI6IFwiQW5kcm9pZC4qIFxcXFxiKEYzMDAwfEEzMzAwfEpYRDUwMDB8SlhEMzAwMHxKWEQyMDAwfEpYRDMwMEJ8SlhEMzAwfFM1ODAwfFM3ODAwfFM2MDJifFM1MTEwYnxTNzMwMHxTNTMwMHxTNjAyfFM2MDN8UzUxMDB8UzUxMTB8UzYwMXxTNzEwMGF8UDMwMDBGfFAzMDAwc3xQMTAxfFAyMDBzfFAxMDAwbXxQMjAwbXxQOTEwMHxQMTAwMHN8UzY2MDBifFM5MDh8UDEwMDB8UDMwMHxTMTh8UzY2MDB8UzkxMDApXFxcXGJcIixcbiAgICAgICAgXCJpSm95VGFibGV0XCI6IFwiVGFibGV0IChTcGlyaXQgN3xFc3NlbnRpYXxHYWxhdGVhfEZ1c2lvbnxPbml4IDd8TGFuZGF8VGl0YW58U2Nvb2J5fERlb3h8U3RlbGxhfFRoZW1pc3xBcmdvbnxVbmlxdWUgN3xTeWdudXN8SGV4ZW58RmluaXR5IDd8Q3JlYW18Q3JlYW0gWDJ8SmFkZXxOZW9uIDd8TmVyb24gN3xLYW5keXxTY2FwZXxTYXBoeXIgN3xSZWJlbHxCaW94fFJlYmVsfFJlYmVsIDhHQnxNeXN0fERyYWNvIDd8TXlzdHxUYWI3LTAwNHxNeXN0fFRhZGVvIEpvbmVzfFRhYmxldCBCb2luZ3xBcnJvd3xEcmFjbyBEdWFsIENhbXxBdXJpeHxNaW50fEFtaXR5fFJldm9sdXRpb258RmluaXR5IDl8TmVvbiA5fFQ5d3xBbWl0eSA0R0IgRHVhbCBDYW18U3RvbmUgNEdCfFN0b25lIDhHQnxBbmRyb21lZGF8U2lsa2VufFgyfEFuZHJvbWVkYSBJSXxIYWxsZXl8RmxhbWV8U2FwaHlyIDksN3xUb3VjaCA4fFBsYW5ldHxUcml0b258VW5pcXVlIDEwfEhleGVuIDEwfE1lbXBoaXMgNEdCfE1lbXBoaXMgOEdCfE9uaXggMTApXCIsXG4gICAgICAgIFwiRlgyVGFibGV0XCI6IFwiRlgyIFBBRDd8RlgyIFBBRDEwXCIsXG4gICAgICAgIFwiWG9yb1RhYmxldFwiOiBcIktpZHNQQUQgNzAxfFBBRFsgXT83MTJ8UEFEWyBdPzcxNHxQQURbIF0/NzE2fFBBRFsgXT83MTd8UEFEWyBdPzcxOHxQQURbIF0/NzIwfFBBRFsgXT83MjF8UEFEWyBdPzcyMnxQQURbIF0/NzkwfFBBRFsgXT83OTJ8UEFEWyBdPzkwMHxQQURbIF0/OTcxNUR8UEFEWyBdPzk3MTZEUnxQQURbIF0/OTcxOERSfFBBRFsgXT85NzE5UVJ8UEFEWyBdPzk3MjBRUnxUZWxlUEFEMTAzMHxUZWxlcGFkMTAzMnxUZWxlUEFENzMwfFRlbGVQQUQ3MzF8VGVsZVBBRDczMnxUZWxlUEFENzM1UXxUZWxlUEFEODMwfFRlbGVQQUQ5NzMwfFRlbGVQQUQ3OTV8TWVnYVBBRCAxMzMxfE1lZ2FQQUQgMTg1MXxNZWdhUEFEIDIxNTFcIixcbiAgICAgICAgXCJWaWV3c29uaWNUYWJsZXRcIjogXCJWaWV3UGFkIDEwcGl8Vmlld1BhZCAxMGV8Vmlld1BhZCAxMHN8Vmlld1BhZCBFNzJ8Vmlld1BhZDd8Vmlld1BhZCBFMTAwfFZpZXdQYWQgN2V8Vmlld1NvbmljIFZCNzMzfFZCMTAwYVwiLFxuICAgICAgICBcIlZlcml6b25UYWJsZXRcIjogXCJRVEFRWjN8UVRBSVI3fFFUQVFUWjN8UVRBU1VOMXxRVEFTVU4yfFFUQVhJQTFcIixcbiAgICAgICAgXCJPZHlzVGFibGV0XCI6IFwiTE9PWHxYRU5PMTB8T0RZU1sgLV0oU3BhY2V8RVZPfFhwcmVzc3xOT09OKXxcXFxcYlhFTElPXFxcXGJ8WGVsaW8xMFByb3xYRUxJTzdQSE9ORVRBQnxYRUxJTzEwRVhUUkVNRXxYRUxJT1BUMnxORU9fUVVBRDEwXCIsXG4gICAgICAgIFwiQ2FwdGl2YVRhYmxldFwiOiBcIkNBUFRJVkEgUEFEXCIsXG4gICAgICAgIFwiSWNvbmJpdFRhYmxldFwiOiBcIk5ldFRBQnxOVC0zNzAyfE5ULTM3MDJTfE5ULTM3MDJTfE5ULTM2MDNQfE5ULTM2MDNQfE5ULTA3MDRTfE5ULTA3MDRTfE5ULTM4MDVDfE5ULTM4MDVDfE5ULTA4MDZDfE5ULTA4MDZDfE5ULTA5MDlUfE5ULTA5MDlUfE5ULTA5MDdTfE5ULTA5MDdTfE5ULTA5MDJTfE5ULTA5MDJTXCIsXG4gICAgICAgIFwiVGVjbGFzdFRhYmxldFwiOiBcIlQ5OCA0R3xcXFxcYlA4MFxcXFxifFxcXFxiWDkwSERcXFxcYnxYOTggQWlyfFg5OCBBaXIgM0d8XFxcXGJYODlcXFxcYnxQODAgM0d8XFxcXGJYODBoXFxcXGJ8UDk4IEFpcnxcXFxcYlg4OUhEXFxcXGJ8UDk4IDNHfFxcXFxiUDkwSERcXFxcYnxQODkgM0d8WDk4IDNHfFxcXFxiUDcwaFxcXFxifFA3OUhEIDNHfEcxOGQgM0d8XFxcXGJQNzlIRFxcXFxifFxcXFxiUDg5c1xcXFxifFxcXFxiQTg4XFxcXGJ8XFxcXGJQMTBIRFxcXFxifFxcXFxiUDE5SERcXFxcYnxHMTggM0d8XFxcXGJQNzhIRFxcXFxifFxcXFxiQTc4XFxcXGJ8XFxcXGJQNzVcXFxcYnxHMTdzIDNHfEcxN2ggM0d8XFxcXGJQODV0XFxcXGJ8XFxcXGJQOTBcXFxcYnxcXFxcYlAxMVxcXFxifFxcXFxiUDk4dFxcXFxifFxcXFxiUDk4SERcXFxcYnxcXFxcYkcxOGRcXFxcYnxcXFxcYlA4NXNcXFxcYnxcXFxcYlAxMUhEXFxcXGJ8XFxcXGJQODhzXFxcXGJ8XFxcXGJBODBIRFxcXFxifFxcXFxiQTgwc2VcXFxcYnxcXFxcYkExMGhcXFxcYnxcXFxcYlA4OVxcXFxifFxcXFxiUDc4c1xcXFxifFxcXFxiRzE4XFxcXGJ8XFxcXGJQODVcXFxcYnxcXFxcYkE3MGhcXFxcYnxcXFxcYkE3MFxcXFxifFxcXFxiRzE3XFxcXGJ8XFxcXGJQMThcXFxcYnxcXFxcYkE4MHNcXFxcYnxcXFxcYkExMXNcXFxcYnxcXFxcYlA4OEhEXFxcXGJ8XFxcXGJBODBoXFxcXGJ8XFxcXGJQNzZzXFxcXGJ8XFxcXGJQNzZoXFxcXGJ8XFxcXGJQOThcXFxcYnxcXFxcYkExMEhEXFxcXGJ8XFxcXGJQNzhcXFxcYnxcXFxcYlA4OFxcXFxifFxcXFxiQTExXFxcXGJ8XFxcXGJBMTB0XFxcXGJ8XFxcXGJQNzZhXFxcXGJ8XFxcXGJQNzZ0XFxcXGJ8XFxcXGJQNzZlXFxcXGJ8XFxcXGJQODVIRFxcXFxifFxcXFxiUDg1YVxcXFxifFxcXFxiUDg2XFxcXGJ8XFxcXGJQNzVIRFxcXFxifFxcXFxiUDc2dlxcXFxifFxcXFxiQTEyXFxcXGJ8XFxcXGJQNzVhXFxcXGJ8XFxcXGJBMTVcXFxcYnxcXFxcYlA3NlRpXFxcXGJ8XFxcXGJQODFIRFxcXFxifFxcXFxiQTEwXFxcXGJ8XFxcXGJUNzYwVkVcXFxcYnxcXFxcYlQ3MjBIRFxcXFxifFxcXFxiUDc2XFxcXGJ8XFxcXGJQNzNcXFxcYnxcXFxcYlA3MVxcXFxifFxcXFxiUDcyXFxcXGJ8XFxcXGJUNzIwU0VcXFxcYnxcXFxcYkM1MjBUaVxcXFxifFxcXFxiVDc2MFxcXFxifFxcXFxiVDcyMFZFXFxcXGJ8VDcyMC0zR0V8VDcyMC1XaUZpXCIsXG4gICAgICAgIFwiT25kYVRhYmxldFwiOiBcIlxcXFxiKFY5NzVpfFZpMzB8Vlg1MzB8VjcwMXxWaTYwfFY3MDFzfFZpNTB8VjgwMXN8VjcxOXxWeDYxMHd8Vlg2MTBXfFY4MTlpfFZpMTB8Vlg1ODBXfFZpMTB8VjcxMXN8VjgxM3xWODExfFY4MjB3fFY4MjB8VmkyMHxWNzExfFZJMzBXfFY3MTJ8Vjg5MXd8Vjk3MnxWODE5d3xWODIwd3xWaTYwfFY4MjB3fFY3MTF8VjgxM3N8VjgwMXxWODE5fFY5NzVzfFY4MDF8VjgxOXxWODE5fFY4MTh8VjgxMXxWNzEyfFY5NzVtfFYxMDF3fFY5NjF3fFY4MTJ8VjgxOHxWOTcxfFY5NzFzfFY5MTl8Vjk4OXxWMTE2d3xWMTAyd3xWOTczfFZpNDApXFxcXGJbXFxcXHNdK3xWMTAgXFxcXGI0R1xcXFxiXCIsXG4gICAgICAgIFwiSmF5dGVjaFRhYmxldFwiOiBcIlRQQy1QQTc2MlwiLFxuICAgICAgICBcIkJsYXVwdW5rdFRhYmxldFwiOiBcIkVuZGVhdm91ciA4MDBOR3xFbmRlYXZvdXIgMTAxMFwiLFxuICAgICAgICBcIkRpZ21hVGFibGV0XCI6IFwiXFxcXGIoaUR4MTB8aUR4OXxpRHg4fGlEeDd8aUR4RDd8aUR4RDh8aURzUTh8aURzUTd8aURzUTh8aURzRDEwfGlEbkQ3fDNUUzgwNEh8aURzUTExfGlEajd8aURzMTApXFxcXGJcIixcbiAgICAgICAgXCJFdm9saW9UYWJsZXRcIjogXCJBUklBX01pbmlfd2lmaXxBcmlhWyBfXU1pbml8RXZvbGlvIFgxMHxFdm9saW8gWDd8RXZvbGlvIFg4fFxcXFxiRXZvdGFiXFxcXGJ8XFxcXGJOZXVyYVxcXFxiXCIsXG4gICAgICAgIFwiTGF2YVRhYmxldFwiOiBcIlFQQUQgRTcwNHxcXFxcYkl2b3J5U1xcXFxifEUtVEFCIElWT1JZfFxcXFxiRS1UQUJcXFxcYlwiLFxuICAgICAgICBcIkFvY1RhYmxldFwiOiBcIk1XMDgxMXxNVzA4MTJ8TVcwOTIyfE1USzgzODJ8TVcxMDMxfE1XMDgzMXxNVzA4MjF8TVcwOTMxfE1XMDcxMlwiLFxuICAgICAgICBcIk1wbWFuVGFibGV0XCI6IFwiTVAxMSBPQ1RBfE1QMTAgT0NUQXxNUFFDMTExNHxNUFFDMTAwNHxNUFFDOTk0fE1QUUM5NzR8TVBRQzk3M3xNUFFDODA0fE1QUUM3ODR8TVBRQzc4MHxcXFxcYk1QRzdcXFxcYnxNUERDRzc1fE1QRENHNzF8TVBEQzEwMDZ8TVAxMDFEQ3xNUERDOTAwMHxNUERDOTA1fE1QREM3MDZIRHxNUERDNzA2fE1QREM3MDV8TVBEQzExMHxNUERDMTAwfE1QREM5OXxNUERDOTd8TVBEQzg4fE1QREM4fE1QREM3N3xNUDcwOXxNSUQ3MDF8TUlENzExfE1JRDE3MHxNUERDNzAzfE1QUUMxMDEwXCIsXG4gICAgICAgIFwiQ2Vsa29uVGFibGV0XCI6IFwiQ1Q2OTV8Q1Q4ODh8Q1RbXFxcXHNdPzkxMHxDVDcgVGFifENUOSBUYWJ8Q1QzIFRhYnxDVDIgVGFifENUMSBUYWJ8QzgyMHxDNzIwfFxcXFxiQ1QtMVxcXFxiXCIsXG4gICAgICAgIFwiV29sZGVyVGFibGV0XCI6IFwibWlUYWIgXFxcXGIoRElBTU9ORHxTUEFDRXxCUk9PS0xZTnxORU98RkxZfE1BTkhBVFRBTnxGVU5LfEVWT0xVVElPTnxTS1l8R09DQVJ8SVJPTnxHRU5JVVN8UE9QfE1JTlR8RVBTSUxPTnxCUk9BRFdBWXxKVU1QfEhPUHxMRUdFTkR8TkVXIEFHRXxMSU5FfEFEVkFOQ0V8RkVFTHxGT0xMT1d8TElLRXxMSU5LfExJVkV8VEhJTkt8RlJFRURPTXxDSElDQUdPfENMRVZFTEFORHxCQUxUSU1PUkUtR0h8SU9XQXxCT1NUT058U0VBVFRMRXxQSE9FTklYfERBTExBU3xJTiAxMDF8TWFzdGVyQ2hlZilcXFxcYlwiLFxuICAgICAgICBcIk1lZGlhY29tVGFibGV0XCI6IFwiTS1NUEkxMEMzR3xNLVNQMTBFR3xNLVNQMTBFR1B8TS1TUDEwSFhBSHxNLVNQN0hYQUh8TS1TUDEwSFhCSHxNLVNQOEhYQUh8TS1TUDhNWEFcIixcbiAgICAgICAgXCJNaVRhYmxldFwiOiBcIlxcXFxiTUkgUEFEXFxcXGJ8XFxcXGJITSBOT1RFIDFXXFxcXGJcIixcbiAgICAgICAgXCJOaWJpcnVUYWJsZXRcIjogXCJOaWJpcnUgTTF8TmliaXJ1IEp1cGl0ZXIgT25lXCIsXG4gICAgICAgIFwiTmV4b1RhYmxldFwiOiBcIk5FWE8gTk9WQXxORVhPIDEwfE5FWE8gQVZJT3xORVhPIEZSRUV8TkVYTyBHT3xORVhPIEVWT3xORVhPIDNHfE5FWE8gU01BUlR8TkVYTyBLSURET3xORVhPIE1PQklcIixcbiAgICAgICAgXCJMZWFkZXJUYWJsZXRcIjogXCJUQkxUMTBRfFRCTFQxMEl8VEJMLTEwV0RLQnxUQkwtMTBXREtCTzIwMTN8VEJMLVcyMzBWMnxUQkwtVzQ1MHxUQkwtVzUwMHxTVjU3MnxUQkxUN0l8VEJBLUFDNy04R3xUQkxUNzl8VEJMLThXMTZ8VEJMLTEwVzMyfFRCTC0xMFdLQnxUQkwtVzEwMFwiLFxuICAgICAgICBcIlViaXNsYXRlVGFibGV0XCI6IFwiVWJpU2xhdGVbXFxcXHNdPzdDXCIsXG4gICAgICAgIFwiUG9ja2V0Qm9va1RhYmxldFwiOiBcIlBvY2tldGJvb2tcIixcbiAgICAgICAgXCJLb2Nhc29UYWJsZXRcIjogXCJcXFxcYihUQi0xMjA3KVxcXFxiXCIsXG4gICAgICAgIFwiSGlzZW5zZVRhYmxldFwiOiBcIlxcXFxiKEY1MjgxfEUyMzcxKVxcXFxiXCIsXG4gICAgICAgIFwiSHVkbFwiOiBcIkh1ZGwgSFQ3UzN8SHVkbCAyXCIsXG4gICAgICAgIFwiVGVsc3RyYVRhYmxldFwiOiBcIlQtSHViMlwiLFxuICAgICAgICBcIkdlbmVyaWNUYWJsZXRcIjogXCJBbmRyb2lkLipcXFxcYjk3RFxcXFxifFRhYmxldCg/IS4qUEMpfEJOVFYyNTBBfE1JRC1XQ0RNQXxMb2dpY1BEIFpvb20yfFxcXFxiQTdFQlxcXFxifENhdE5vdmE4fEExXzA3fENUNzA0fENUMTAwMnxcXFxcYk03MjFcXFxcYnxyazMwc2RrfFxcXFxiRVZPVEFCXFxcXGJ8TTc1OEF8RVQ5MDR8QUxVTUlVTTEwfFNtYXJ0ZnJlbiBUYWJ8RW5kZWF2b3VyIDEwMTB8VGFibGV0LVBDLTR8VGFnaSBUYWJ8XFxcXGJNNnByb1xcXFxifENUMTAyMFd8YXJjIDEwSER8XFxcXGJUUDc1MFxcXFxifFxcXFxiUVRBUVozXFxcXGJ8V1ZUMTAxfFRNMTA4OHxLVDEwN1wiXG4gICAgfSxcbiAgICBcIm9zc1wiOiB7XG4gICAgICAgIFwiQW5kcm9pZE9TXCI6IFwiQW5kcm9pZFwiLFxuICAgICAgICBcIkJsYWNrQmVycnlPU1wiOiBcImJsYWNrYmVycnl8XFxcXGJCQjEwXFxcXGJ8cmltIHRhYmxldCBvc1wiLFxuICAgICAgICBcIlBhbG1PU1wiOiBcIlBhbG1PU3xhdmFudGdvfGJsYXplcnxlbGFpbmV8aGlwdG9wfHBhbG18cGx1Y2tlcnx4aWlub1wiLFxuICAgICAgICBcIlN5bWJpYW5PU1wiOiBcIlN5bWJpYW58U3ltYk9TfFNlcmllczYwfFNlcmllczQwfFNZQi1bMC05XSt8XFxcXGJTNjBcXFxcYlwiLFxuICAgICAgICBcIldpbmRvd3NNb2JpbGVPU1wiOiBcIldpbmRvd3MgQ0UuKihQUEN8U21hcnRwaG9uZXxNb2JpbGV8WzAtOV17M314WzAtOV17M30pfFdpbmRvd3MgTW9iaWxlfFdpbmRvd3MgUGhvbmUgWzAtOS5dK3xXQ0U7XCIsXG4gICAgICAgIFwiV2luZG93c1Bob25lT1NcIjogXCJXaW5kb3dzIFBob25lIDEwLjB8V2luZG93cyBQaG9uZSA4LjF8V2luZG93cyBQaG9uZSA4LjB8V2luZG93cyBQaG9uZSBPU3xYQkxXUDd8WnVuZVdQN3xXaW5kb3dzIE5UIDYuWzIzXTsgQVJNO1wiLFxuICAgICAgICBcImlPU1wiOiBcIlxcXFxiaVBob25lLipNb2JpbGV8XFxcXGJpUG9kfFxcXFxiaVBhZHxBcHBsZUNvcmVNZWRpYVwiLFxuICAgICAgICBcImlQYWRPU1wiOiBcIkNQVSBPUyAxM1wiLFxuICAgICAgICBcIk1lZUdvT1NcIjogXCJNZWVHb1wiLFxuICAgICAgICBcIk1hZW1vT1NcIjogXCJNYWVtb1wiLFxuICAgICAgICBcIkphdmFPU1wiOiBcIkoyTUVcXC98XFxcXGJNSURQXFxcXGJ8XFxcXGJDTERDXFxcXGJcIixcbiAgICAgICAgXCJ3ZWJPU1wiOiBcIndlYk9TfGhwd09TXCIsXG4gICAgICAgIFwiYmFkYU9TXCI6IFwiXFxcXGJCYWRhXFxcXGJcIixcbiAgICAgICAgXCJCUkVXT1NcIjogXCJCUkVXXCJcbiAgICB9LFxuICAgIFwidWFzXCI6IHtcbiAgICAgICAgXCJDaHJvbWVcIjogXCJcXFxcYkNyTW9cXFxcYnxDcmlPU3xBbmRyb2lkLipDaHJvbWVcXC9bLjAtOV0qIChNb2JpbGUpP1wiLFxuICAgICAgICBcIkRvbGZpblwiOiBcIlxcXFxiRG9sZmluXFxcXGJcIixcbiAgICAgICAgXCJPcGVyYVwiOiBcIk9wZXJhLipNaW5pfE9wZXJhLipNb2JpfEFuZHJvaWQuKk9wZXJhfE1vYmlsZS4qT1BSXFwvWzAtOS5dKyR8Q29hc3RcXC9bMC05Ll0rXCIsXG4gICAgICAgIFwiU2t5ZmlyZVwiOiBcIlNreWZpcmVcIixcbiAgICAgICAgXCJFZGdlXCI6IFwiTW9iaWxlIFNhZmFyaVxcL1suMC05XSogRWRnZVwiLFxuICAgICAgICBcIklFXCI6IFwiSUVNb2JpbGV8TVNJRU1vYmlsZVwiLFxuICAgICAgICBcIkZpcmVmb3hcIjogXCJmZW5uZWN8ZmlyZWZveC4qbWFlbW98KE1vYmlsZXxUYWJsZXQpLipGaXJlZm94fEZpcmVmb3guKk1vYmlsZXxGeGlPU1wiLFxuICAgICAgICBcIkJvbHRcIjogXCJib2x0XCIsXG4gICAgICAgIFwiVGVhU2hhcmtcIjogXCJ0ZWFzaGFya1wiLFxuICAgICAgICBcIkJsYXplclwiOiBcIkJsYXplclwiLFxuICAgICAgICBcIlNhZmFyaVwiOiBcIlZlcnNpb24uKk1vYmlsZS4qU2FmYXJpfFNhZmFyaS4qTW9iaWxlfE1vYmlsZVNhZmFyaVwiLFxuICAgICAgICBcIldlQ2hhdFwiOiBcIlxcXFxiTWljcm9NZXNzZW5nZXJcXFxcYlwiLFxuICAgICAgICBcIlVDQnJvd3NlclwiOiBcIlVDLipCcm93c2VyfFVDV0VCXCIsXG4gICAgICAgIFwiYmFpZHVib3hhcHBcIjogXCJiYWlkdWJveGFwcFwiLFxuICAgICAgICBcImJhaWR1YnJvd3NlclwiOiBcImJhaWR1YnJvd3NlclwiLFxuICAgICAgICBcIkRpaWdvQnJvd3NlclwiOiBcIkRpaWdvQnJvd3NlclwiLFxuICAgICAgICBcIk1lcmN1cnlcIjogXCJcXFxcYk1lcmN1cnlcXFxcYlwiLFxuICAgICAgICBcIk9iaWdvQnJvd3NlclwiOiBcIk9iaWdvXCIsXG4gICAgICAgIFwiTmV0RnJvbnRcIjogXCJORi1Ccm93c2VyXCIsXG4gICAgICAgIFwiR2VuZXJpY0Jyb3dzZXJcIjogXCJOb2tpYUJyb3dzZXJ8T3ZpQnJvd3NlcnxPbmVCcm93c2VyfFR3b25reUJlYW1Ccm93c2VyfFNFTUMuKkJyb3dzZXJ8Rmx5Rmxvd3xNaW5pbW98TmV0RnJvbnR8Tm92YXJyYS1WaXNpb258TVFRQnJvd3NlcnxNaWNyb01lc3NlbmdlclwiLFxuICAgICAgICBcIlBhbGVNb29uXCI6IFwiQW5kcm9pZC4qUGFsZU1vb258TW9iaWxlLipQYWxlTW9vblwiXG4gICAgfSxcbiAgICBcInByb3BzXCI6IHtcbiAgICAgICAgXCJNb2JpbGVcIjogXCJNb2JpbGVcXC9bVkVSXVwiLFxuICAgICAgICBcIkJ1aWxkXCI6IFwiQnVpbGRcXC9bVkVSXVwiLFxuICAgICAgICBcIlZlcnNpb25cIjogXCJWZXJzaW9uXFwvW1ZFUl1cIixcbiAgICAgICAgXCJWZW5kb3JJRFwiOiBcIlZlbmRvcklEXFwvW1ZFUl1cIixcbiAgICAgICAgXCJpUGFkXCI6IFwiaVBhZC4qQ1BVW2EteiBdK1tWRVJdXCIsXG4gICAgICAgIFwiaVBob25lXCI6IFwiaVBob25lLipDUFVbYS16IF0rW1ZFUl1cIixcbiAgICAgICAgXCJpUG9kXCI6IFwiaVBvZC4qQ1BVW2EteiBdK1tWRVJdXCIsXG4gICAgICAgIFwiS2luZGxlXCI6IFwiS2luZGxlXFwvW1ZFUl1cIixcbiAgICAgICAgXCJDaHJvbWVcIjogW1xuICAgICAgICAgICAgXCJDaHJvbWVcXC9bVkVSXVwiLFxuICAgICAgICAgICAgXCJDcmlPU1xcL1tWRVJdXCIsXG4gICAgICAgICAgICBcIkNyTW9cXC9bVkVSXVwiXG4gICAgICAgIF0sXG4gICAgICAgIFwiQ29hc3RcIjogW1xuICAgICAgICAgICAgXCJDb2FzdFxcL1tWRVJdXCJcbiAgICAgICAgXSxcbiAgICAgICAgXCJEb2xmaW5cIjogXCJEb2xmaW5cXC9bVkVSXVwiLFxuICAgICAgICBcIkZpcmVmb3hcIjogW1xuICAgICAgICAgICAgXCJGaXJlZm94XFwvW1ZFUl1cIixcbiAgICAgICAgICAgIFwiRnhpT1NcXC9bVkVSXVwiXG4gICAgICAgIF0sXG4gICAgICAgIFwiRmVubmVjXCI6IFwiRmVubmVjXFwvW1ZFUl1cIixcbiAgICAgICAgXCJFZGdlXCI6IFwiRWRnZVxcL1tWRVJdXCIsXG4gICAgICAgIFwiSUVcIjogW1xuICAgICAgICAgICAgXCJJRU1vYmlsZVxcL1tWRVJdO1wiLFxuICAgICAgICAgICAgXCJJRU1vYmlsZSBbVkVSXVwiLFxuICAgICAgICAgICAgXCJNU0lFIFtWRVJdO1wiLFxuICAgICAgICAgICAgXCJUcmlkZW50XFwvWzAtOS5dKzsuKnJ2OltWRVJdXCJcbiAgICAgICAgXSxcbiAgICAgICAgXCJOZXRGcm9udFwiOiBcIk5ldEZyb250XFwvW1ZFUl1cIixcbiAgICAgICAgXCJOb2tpYUJyb3dzZXJcIjogXCJOb2tpYUJyb3dzZXJcXC9bVkVSXVwiLFxuICAgICAgICBcIk9wZXJhXCI6IFtcbiAgICAgICAgICAgIFwiIE9QUlxcL1tWRVJdXCIsXG4gICAgICAgICAgICBcIk9wZXJhIE1pbmlcXC9bVkVSXVwiLFxuICAgICAgICAgICAgXCJWZXJzaW9uXFwvW1ZFUl1cIlxuICAgICAgICBdLFxuICAgICAgICBcIk9wZXJhIE1pbmlcIjogXCJPcGVyYSBNaW5pXFwvW1ZFUl1cIixcbiAgICAgICAgXCJPcGVyYSBNb2JpXCI6IFwiVmVyc2lvblxcL1tWRVJdXCIsXG4gICAgICAgIFwiVUNCcm93c2VyXCI6IFtcbiAgICAgICAgICAgIFwiVUNXRUJbVkVSXVwiLFxuICAgICAgICAgICAgXCJVQy4qQnJvd3NlclxcL1tWRVJdXCJcbiAgICAgICAgXSxcbiAgICAgICAgXCJNUVFCcm93c2VyXCI6IFwiTVFRQnJvd3NlclxcL1tWRVJdXCIsXG4gICAgICAgIFwiTWljcm9NZXNzZW5nZXJcIjogXCJNaWNyb01lc3NlbmdlclxcL1tWRVJdXCIsXG4gICAgICAgIFwiYmFpZHVib3hhcHBcIjogXCJiYWlkdWJveGFwcFxcL1tWRVJdXCIsXG4gICAgICAgIFwiYmFpZHVicm93c2VyXCI6IFwiYmFpZHVicm93c2VyXFwvW1ZFUl1cIixcbiAgICAgICAgXCJTYW1zdW5nQnJvd3NlclwiOiBcIlNhbXN1bmdCcm93c2VyXFwvW1ZFUl1cIixcbiAgICAgICAgXCJJcm9uXCI6IFwiSXJvblxcL1tWRVJdXCIsXG4gICAgICAgIFwiU2FmYXJpXCI6IFtcbiAgICAgICAgICAgIFwiVmVyc2lvblxcL1tWRVJdXCIsXG4gICAgICAgICAgICBcIlNhZmFyaVxcL1tWRVJdXCJcbiAgICAgICAgXSxcbiAgICAgICAgXCJTa3lmaXJlXCI6IFwiU2t5ZmlyZVxcL1tWRVJdXCIsXG4gICAgICAgIFwiVGl6ZW5cIjogXCJUaXplblxcL1tWRVJdXCIsXG4gICAgICAgIFwiV2Via2l0XCI6IFwid2Via2l0WyBcXC9dW1ZFUl1cIixcbiAgICAgICAgXCJQYWxlTW9vblwiOiBcIlBhbGVNb29uXFwvW1ZFUl1cIixcbiAgICAgICAgXCJHZWNrb1wiOiBcIkdlY2tvXFwvW1ZFUl1cIixcbiAgICAgICAgXCJUcmlkZW50XCI6IFwiVHJpZGVudFxcL1tWRVJdXCIsXG4gICAgICAgIFwiUHJlc3RvXCI6IFwiUHJlc3RvXFwvW1ZFUl1cIixcbiAgICAgICAgXCJHb2FubmFcIjogXCJHb2FubmFcXC9bVkVSXVwiLFxuICAgICAgICBcImlPU1wiOiBcIiBcXFxcYmk/T1NcXFxcYiBbVkVSXVsgO117MX1cIixcbiAgICAgICAgXCJBbmRyb2lkXCI6IFwiQW5kcm9pZCBbVkVSXVwiLFxuICAgICAgICBcIkJsYWNrQmVycnlcIjogW1xuICAgICAgICAgICAgXCJCbGFja0JlcnJ5W1xcXFx3XStcXC9bVkVSXVwiLFxuICAgICAgICAgICAgXCJCbGFja0JlcnJ5LipWZXJzaW9uXFwvW1ZFUl1cIixcbiAgICAgICAgICAgIFwiVmVyc2lvblxcL1tWRVJdXCJcbiAgICAgICAgXSxcbiAgICAgICAgXCJCUkVXXCI6IFwiQlJFVyBbVkVSXVwiLFxuICAgICAgICBcIkphdmFcIjogXCJKYXZhXFwvW1ZFUl1cIixcbiAgICAgICAgXCJXaW5kb3dzIFBob25lIE9TXCI6IFtcbiAgICAgICAgICAgIFwiV2luZG93cyBQaG9uZSBPUyBbVkVSXVwiLFxuICAgICAgICAgICAgXCJXaW5kb3dzIFBob25lIFtWRVJdXCJcbiAgICAgICAgXSxcbiAgICAgICAgXCJXaW5kb3dzIFBob25lXCI6IFwiV2luZG93cyBQaG9uZSBbVkVSXVwiLFxuICAgICAgICBcIldpbmRvd3MgQ0VcIjogXCJXaW5kb3dzIENFXFwvW1ZFUl1cIixcbiAgICAgICAgXCJXaW5kb3dzIE5UXCI6IFwiV2luZG93cyBOVCBbVkVSXVwiLFxuICAgICAgICBcIlN5bWJpYW5cIjogW1xuICAgICAgICAgICAgXCJTeW1iaWFuT1NcXC9bVkVSXVwiLFxuICAgICAgICAgICAgXCJTeW1iaWFuXFwvW1ZFUl1cIlxuICAgICAgICBdLFxuICAgICAgICBcIndlYk9TXCI6IFtcbiAgICAgICAgICAgIFwid2ViT1NcXC9bVkVSXVwiLFxuICAgICAgICAgICAgXCJocHdPU1xcL1tWRVJdO1wiXG4gICAgICAgIF1cbiAgICB9LFxuICAgIFwidXRpbHNcIjoge1xuICAgICAgICBcIkJvdFwiOiBcIkdvb2dsZWJvdHxmYWNlYm9va2V4dGVybmFsaGl0fEdvb2dsZS1BTVBIVE1MfHN+YW1wLXZhbGlkYXRvcnxBZHNCb3QtR29vZ2xlfEdvb2dsZSBLZXl3b3JkIFN1Z2dlc3Rpb258RmFjZWJvdHxZYW5kZXhCb3R8WWFuZGV4TW9iaWxlQm90fGJpbmdib3R8aWFfYXJjaGl2ZXJ8QWhyZWZzQm90fEV6b29tc3xHU0xGYm90fFdCU2VhcmNoQm90fFR3aXR0ZXJib3R8VHdlZXRtZW1lQm90fFR3aWtsZXxQYXBlckxpQm90fFdvdGJveHxVbndpbmRGZXRjaG9yfEV4YWJvdHxNSjEyYm90fFlhbmRleEltYWdlc3xUdXJuaXRpbkJvdHxQaW5nZG9tfGNvbnRlbnRraW5nYXBwXCIsXG4gICAgICAgIFwiTW9iaWxlQm90XCI6IFwiR29vZ2xlYm90LU1vYmlsZXxBZHNCb3QtR29vZ2xlLU1vYmlsZXxZYWhvb1NlZWtlclxcL00xQTEtUjJEMlwiLFxuICAgICAgICBcIkRlc2t0b3BNb2RlXCI6IFwiV1BEZXNrdG9wXCIsXG4gICAgICAgIFwiVFZcIjogXCJTb255RFRWfEhiYlRWXCIsXG4gICAgICAgIFwiV2ViS2l0XCI6IFwiKHdlYmtpdClbIFxcL10oW1xcXFx3Ll0rKVwiLFxuICAgICAgICBcIkNvbnNvbGVcIjogXCJcXFxcYihOaW50ZW5kb3xOaW50ZW5kbyBXaWlVfE5pbnRlbmRvIDNEU3xOaW50ZW5kbyBTd2l0Y2h8UExBWVNUQVRJT058WGJveClcXFxcYlwiLFxuICAgICAgICBcIldhdGNoXCI6IFwiU00tVjcwMFwiXG4gICAgfVxufTtcblxuICAgIC8vIGZvbGxvd2luZyBwYXR0ZXJucyBjb21lIGZyb20gaHR0cDovL2RldGVjdG1vYmlsZWJyb3dzZXJzLmNvbS9cbiAgICBpbXBsLmRldGVjdE1vYmlsZUJyb3dzZXJzID0ge1xuICAgICAgICBmdWxsUGF0dGVybjogLyhhbmRyb2lkfGJiXFxkK3xtZWVnbykuK21vYmlsZXxhdmFudGdvfGJhZGFcXC98YmxhY2tiZXJyeXxibGF6ZXJ8Y29tcGFsfGVsYWluZXxmZW5uZWN8aGlwdG9wfGllbW9iaWxlfGlwKGhvbmV8b2QpfGlyaXN8a2luZGxlfGxnZSB8bWFlbW98bWlkcHxtbXB8bW9iaWxlLitmaXJlZm94fG5ldGZyb250fG9wZXJhIG0ob2J8aW4paXxwYWxtKCBvcyk/fHBob25lfHAoaXhpfHJlKVxcL3xwbHVja2VyfHBvY2tldHxwc3B8c2VyaWVzKDR8NikwfHN5bWJpYW58dHJlb3x1cFxcLihicm93c2VyfGxpbmspfHZvZGFmb25lfHdhcHx3aW5kb3dzIGNlfHhkYXx4aWluby9pLFxuICAgICAgICBzaG9ydFBhdHRlcm46IC8xMjA3fDYzMTB8NjU5MHwzZ3NvfDR0aHB8NTBbMS02XWl8Nzcwc3w4MDJzfGEgd2F8YWJhY3xhYyhlcnxvb3xzXFwtKXxhaShrb3xybil8YWwoYXZ8Y2F8Y28pfGFtb2l8YW4oZXh8bnl8eXcpfGFwdHV8YXIoY2h8Z28pfGFzKHRlfHVzKXxhdHR3fGF1KGRpfFxcLW18ciB8cyApfGF2YW58YmUoY2t8bGx8bnEpfGJpKGxifHJkKXxibChhY3xheil8YnIoZXx2KXd8YnVtYnxid1xcLShufHUpfGM1NVxcL3xjYXBpfGNjd2F8Y2RtXFwtfGNlbGx8Y2h0bXxjbGRjfGNtZFxcLXxjbyhtcHxuZCl8Y3Jhd3xkYShpdHxsbHxuZyl8ZGJ0ZXxkY1xcLXN8ZGV2aXxkaWNhfGRtb2J8ZG8oY3xwKW98ZHMoMTJ8XFwtZCl8ZWwoNDl8YWkpfGVtKGwyfHVsKXxlcihpY3xrMCl8ZXNsOHxleihbNC03XTB8b3N8d2F8emUpfGZldGN8Zmx5KFxcLXxfKXxnMSB1fGc1NjB8Z2VuZXxnZlxcLTV8Z1xcLW1vfGdvKFxcLnd8b2QpfGdyKGFkfHVuKXxoYWllfGhjaXR8aGRcXC0obXxwfHQpfGhlaVxcLXxoaShwdHx0YSl8aHAoIGl8aXApfGhzXFwtY3xodChjKFxcLXwgfF98YXxnfHB8c3x0KXx0cCl8aHUoYXd8dGMpfGlcXC0oMjB8Z298bWEpfGkyMzB8aWFjKCB8XFwtfFxcLyl8aWJyb3xpZGVhfGlnMDF8aWtvbXxpbTFrfGlubm98aXBhcXxpcmlzfGphKHR8dilhfGpicm98amVtdXxqaWdzfGtkZGl8a2VqaXxrZ3QoIHxcXC8pfGtsb258a3B0IHxrd2NcXC18a3lvKGN8ayl8bGUobm98eGkpfGxnKCBnfFxcLyhrfGx8dSl8NTB8NTR8XFwtW2Etd10pfGxpYnd8bHlueHxtMVxcLXd8bTNnYXxtNTBcXC98bWEodGV8dWl8eG8pfG1jKDAxfDIxfGNhKXxtXFwtY3J8bWUocmN8cmkpfG1pKG84fG9hfHRzKXxtbWVmfG1vKDAxfDAyfGJpfGRlfGRvfHQoXFwtfCB8b3x2KXx6eil8bXQoNTB8cDF8diApfG13YnB8bXl3YXxuMTBbMC0yXXxuMjBbMi0zXXxuMzAoMHwyKXxuNTAoMHwyfDUpfG43KDAoMHwxKXwxMCl8bmUoKGN8bSlcXC18b258dGZ8d2Z8d2d8d3QpfG5vayg2fGkpfG56cGh8bzJpbXxvcCh0aXx3dil8b3Jhbnxvd2cxfHA4MDB8cGFuKGF8ZHx0KXxwZHhnfHBnKDEzfFxcLShbMS04XXxjKSl8cGhpbHxwaXJlfHBsKGF5fHVjKXxwblxcLTJ8cG8oY2t8cnR8c2UpfHByb3h8cHNpb3xwdFxcLWd8cWFcXC1hfHFjKDA3fDEyfDIxfDMyfDYwfFxcLVsyLTddfGlcXC0pfHF0ZWt8cjM4MHxyNjAwfHJha3N8cmltOXxybyh2ZXx6byl8czU1XFwvfHNhKGdlfG1hfG1tfG1zfG55fHZhKXxzYygwMXxoXFwtfG9vfHBcXC0pfHNka1xcL3xzZShjKFxcLXwwfDEpfDQ3fG1jfG5kfHJpKXxzZ2hcXC18c2hhcnxzaWUoXFwtfG0pfHNrXFwtMHxzbCg0NXxpZCl8c20oYWx8YXJ8YjN8aXR8dDUpfHNvKGZ0fG55KXxzcCgwMXxoXFwtfHZcXC18diApfHN5KDAxfG1iKXx0MigxOHw1MCl8dDYoMDB8MTB8MTgpfHRhKGd0fGxrKXx0Y2xcXC18dGRnXFwtfHRlbChpfG0pfHRpbVxcLXx0XFwtbW98dG8ocGx8c2gpfHRzKDcwfG1cXC18bTN8bTUpfHR4XFwtOXx1cChcXC5ifGcxfHNpKXx1dHN0fHY0MDB8djc1MHx2ZXJpfHZpKHJnfHRlKXx2ayg0MHw1WzAtM118XFwtdil8dm00MHx2b2RhfHZ1bGN8dngoNTJ8NTN8NjB8NjF8NzB8ODB8ODF8ODN8ODV8OTgpfHczYyhcXC18ICl8d2ViY3x3aGl0fHdpKGcgfG5jfG53KXx3bWxifHdvbnV8eDcwMHx5YXNcXC18eW91cnx6ZXRvfHp0ZVxcLS9pLFxuICAgICAgICB0YWJsZXRQYXR0ZXJuOiAvYW5kcm9pZHxpcGFkfHBsYXlib29rfHNpbGsvaVxuICAgIH07XG5cbiAgICB2YXIgaGFzT3duUHJvcCA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHksXG4gICAgICAgIGlzQXJyYXk7XG5cbiAgICBpbXBsLkZBTExCQUNLX1BIT05FID0gJ1Vua25vd25QaG9uZSc7XG4gICAgaW1wbC5GQUxMQkFDS19UQUJMRVQgPSAnVW5rbm93blRhYmxldCc7XG4gICAgaW1wbC5GQUxMQkFDS19NT0JJTEUgPSAnVW5rbm93bk1vYmlsZSc7XG5cbiAgICBpc0FycmF5ID0gKCdpc0FycmF5JyBpbiBBcnJheSkgP1xuICAgICAgICBBcnJheS5pc0FycmF5IDogZnVuY3Rpb24gKHZhbHVlKSB7IHJldHVybiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwodmFsdWUpID09PSAnW29iamVjdCBBcnJheV0nOyB9O1xuXG4gICAgZnVuY3Rpb24gZXF1YWxJQyhhLCBiKSB7XG4gICAgICAgIHJldHVybiBhICE9IG51bGwgJiYgYiAhPSBudWxsICYmIGEudG9Mb3dlckNhc2UoKSA9PT0gYi50b0xvd2VyQ2FzZSgpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGNvbnRhaW5zSUMoYXJyYXksIHZhbHVlKSB7XG4gICAgICAgIHZhciB2YWx1ZUxDLCBpLCBsZW4gPSBhcnJheS5sZW5ndGg7XG4gICAgICAgIGlmICghbGVuIHx8ICF2YWx1ZSkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIHZhbHVlTEMgPSB2YWx1ZS50b0xvd2VyQ2FzZSgpO1xuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgbGVuOyArK2kpIHtcbiAgICAgICAgICAgIGlmICh2YWx1ZUxDID09PSBhcnJheVtpXS50b0xvd2VyQ2FzZSgpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGNvbnZlcnRQcm9wc1RvUmVnRXhwKG9iamVjdCkge1xuICAgICAgICBmb3IgKHZhciBrZXkgaW4gb2JqZWN0KSB7XG4gICAgICAgICAgICBpZiAoaGFzT3duUHJvcC5jYWxsKG9iamVjdCwga2V5KSkge1xuICAgICAgICAgICAgICAgIG9iamVjdFtrZXldID0gbmV3IFJlZ0V4cChvYmplY3Rba2V5XSwgJ2knKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIHByZXBhcmVVc2VyQWdlbnQodXNlckFnZW50KSB7XG4gICAgICAgIHJldHVybiAodXNlckFnZW50IHx8ICcnKS5zdWJzdHIoMCwgNTAwKTsgLy8gbWl0aWdhdGUgdnVsbmVyYWJsZSB0byBSZURvU1xuICAgIH1cblxuICAgIChmdW5jdGlvbiBpbml0KCkge1xuICAgICAgICB2YXIga2V5LCB2YWx1ZXMsIHZhbHVlLCBpLCBsZW4sIHZlclBvcywgbW9iaWxlRGV0ZWN0UnVsZXMgPSBpbXBsLm1vYmlsZURldGVjdFJ1bGVzO1xuICAgICAgICBmb3IgKGtleSBpbiBtb2JpbGVEZXRlY3RSdWxlcy5wcm9wcykge1xuICAgICAgICAgICAgaWYgKGhhc093blByb3AuY2FsbChtb2JpbGVEZXRlY3RSdWxlcy5wcm9wcywga2V5KSkge1xuICAgICAgICAgICAgICAgIHZhbHVlcyA9IG1vYmlsZURldGVjdFJ1bGVzLnByb3BzW2tleV07XG4gICAgICAgICAgICAgICAgaWYgKCFpc0FycmF5KHZhbHVlcykpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFsdWVzID0gW3ZhbHVlc107XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGxlbiA9IHZhbHVlcy5sZW5ndGg7XG4gICAgICAgICAgICAgICAgZm9yIChpID0gMDsgaSA8IGxlbjsgKytpKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhbHVlID0gdmFsdWVzW2ldO1xuICAgICAgICAgICAgICAgICAgICB2ZXJQb3MgPSB2YWx1ZS5pbmRleE9mKCdbVkVSXScpO1xuICAgICAgICAgICAgICAgICAgICBpZiAodmVyUG9zID49IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlID0gdmFsdWUuc3Vic3RyaW5nKDAsIHZlclBvcykgKyAnKFtcXFxcdy5fXFxcXCtdKyknICsgdmFsdWUuc3Vic3RyaW5nKHZlclBvcyArIDUpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHZhbHVlc1tpXSA9IG5ldyBSZWdFeHAodmFsdWUsICdpJyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIG1vYmlsZURldGVjdFJ1bGVzLnByb3BzW2tleV0gPSB2YWx1ZXM7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgY29udmVydFByb3BzVG9SZWdFeHAobW9iaWxlRGV0ZWN0UnVsZXMub3NzKTtcbiAgICAgICAgY29udmVydFByb3BzVG9SZWdFeHAobW9iaWxlRGV0ZWN0UnVsZXMucGhvbmVzKTtcbiAgICAgICAgY29udmVydFByb3BzVG9SZWdFeHAobW9iaWxlRGV0ZWN0UnVsZXMudGFibGV0cyk7XG4gICAgICAgIGNvbnZlcnRQcm9wc1RvUmVnRXhwKG1vYmlsZURldGVjdFJ1bGVzLnVhcyk7XG4gICAgICAgIGNvbnZlcnRQcm9wc1RvUmVnRXhwKG1vYmlsZURldGVjdFJ1bGVzLnV0aWxzKTtcblxuICAgICAgICAvLyBjb3B5IHNvbWUgcGF0dGVybnMgdG8gb3NzMCB3aGljaCBhcmUgdGVzdGVkIGZpcnN0IChzZWUgaXNzdWUjMTUpXG4gICAgICAgIG1vYmlsZURldGVjdFJ1bGVzLm9zczAgPSB7XG4gICAgICAgICAgICBXaW5kb3dzUGhvbmVPUzogbW9iaWxlRGV0ZWN0UnVsZXMub3NzLldpbmRvd3NQaG9uZU9TLFxuICAgICAgICAgICAgV2luZG93c01vYmlsZU9TOiBtb2JpbGVEZXRlY3RSdWxlcy5vc3MuV2luZG93c01vYmlsZU9TXG4gICAgICAgIH07XG4gICAgfSgpKTtcblxuICAgIC8qKlxuICAgICAqIFRlc3QgdXNlckFnZW50IHN0cmluZyBhZ2FpbnN0IGEgc2V0IG9mIHJ1bGVzIGFuZCBmaW5kIHRoZSBmaXJzdCBtYXRjaGVkIGtleS5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gcnVsZXMgKGtleSBpcyBTdHJpbmcsIHZhbHVlIGlzIFJlZ0V4cClcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gdXNlckFnZW50IHRoZSBuYXZpZ2F0b3IudXNlckFnZW50IChvciBIVFRQLUhlYWRlciAnVXNlci1BZ2VudCcpLlxuICAgICAqIEByZXR1cm5zIHtTdHJpbmd8bnVsbH0gdGhlIG1hdGNoZWQga2V5IGlmIGZvdW5kLCBvdGhlcndpc2UgPHR0Pm51bGw8L3R0PlxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgaW1wbC5maW5kTWF0Y2ggPSBmdW5jdGlvbihydWxlcywgdXNlckFnZW50KSB7XG4gICAgICAgIGZvciAodmFyIGtleSBpbiBydWxlcykge1xuICAgICAgICAgICAgaWYgKGhhc093blByb3AuY2FsbChydWxlcywga2V5KSkge1xuICAgICAgICAgICAgICAgIGlmIChydWxlc1trZXldLnRlc3QodXNlckFnZW50KSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4ga2V5O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogVGVzdCB1c2VyQWdlbnQgc3RyaW5nIGFnYWluc3QgYSBzZXQgb2YgcnVsZXMgYW5kIHJldHVybiBhbiBhcnJheSBvZiBtYXRjaGVkIGtleXMuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHJ1bGVzIChrZXkgaXMgU3RyaW5nLCB2YWx1ZSBpcyBSZWdFeHApXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IHVzZXJBZ2VudCB0aGUgbmF2aWdhdG9yLnVzZXJBZ2VudCAob3IgSFRUUC1IZWFkZXIgJ1VzZXItQWdlbnQnKS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IGFuIGFycmF5IG9mIG1hdGNoZWQga2V5cywgbWF5IGJlIGVtcHR5IHdoZW4gdGhlcmUgaXMgbm8gbWF0Y2gsIGJ1dCBub3QgPHR0Pm51bGw8L3R0PlxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgaW1wbC5maW5kTWF0Y2hlcyA9IGZ1bmN0aW9uKHJ1bGVzLCB1c2VyQWdlbnQpIHtcbiAgICAgICAgdmFyIHJlc3VsdCA9IFtdO1xuICAgICAgICBmb3IgKHZhciBrZXkgaW4gcnVsZXMpIHtcbiAgICAgICAgICAgIGlmIChoYXNPd25Qcm9wLmNhbGwocnVsZXMsIGtleSkpIHtcbiAgICAgICAgICAgICAgICBpZiAocnVsZXNba2V5XS50ZXN0KHVzZXJBZ2VudCkpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0LnB1c2goa2V5KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogQ2hlY2sgdGhlIHZlcnNpb24gb2YgdGhlIGdpdmVuIHByb3BlcnR5IGluIHRoZSBVc2VyLUFnZW50LlxuICAgICAqXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IHByb3BlcnR5TmFtZVxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSB1c2VyQWdlbnRcbiAgICAgKiBAcmV0dXJuIHtTdHJpbmd9IHZlcnNpb24gb3IgPHR0Pm51bGw8L3R0PiBpZiB2ZXJzaW9uIG5vdCBmb3VuZFxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgaW1wbC5nZXRWZXJzaW9uU3RyID0gZnVuY3Rpb24gKHByb3BlcnR5TmFtZSwgdXNlckFnZW50KSB7XG4gICAgICAgIHZhciBwcm9wcyA9IGltcGwubW9iaWxlRGV0ZWN0UnVsZXMucHJvcHMsIHBhdHRlcm5zLCBpLCBsZW4sIG1hdGNoO1xuICAgICAgICBpZiAoaGFzT3duUHJvcC5jYWxsKHByb3BzLCBwcm9wZXJ0eU5hbWUpKSB7XG4gICAgICAgICAgICBwYXR0ZXJucyA9IHByb3BzW3Byb3BlcnR5TmFtZV07XG4gICAgICAgICAgICBsZW4gPSBwYXR0ZXJucy5sZW5ndGg7XG4gICAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgbGVuOyArK2kpIHtcbiAgICAgICAgICAgICAgICBtYXRjaCA9IHBhdHRlcm5zW2ldLmV4ZWModXNlckFnZW50KTtcbiAgICAgICAgICAgICAgICBpZiAobWF0Y2ggIT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG1hdGNoWzFdO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogQ2hlY2sgdGhlIHZlcnNpb24gb2YgdGhlIGdpdmVuIHByb3BlcnR5IGluIHRoZSBVc2VyLUFnZW50LlxuICAgICAqIFdpbGwgcmV0dXJuIGEgZmxvYXQgbnVtYmVyLiAoZWcuIDJfMCB3aWxsIHJldHVybiAyLjAsIDQuMy4xIHdpbGwgcmV0dXJuIDQuMzEpXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gcHJvcGVydHlOYW1lXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IHVzZXJBZ2VudFxuICAgICAqIEByZXR1cm4ge051bWJlcn0gdmVyc2lvbiBvciA8dHQ+TmFOPC90dD4gaWYgdmVyc2lvbiBub3QgZm91bmRcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIGltcGwuZ2V0VmVyc2lvbiA9IGZ1bmN0aW9uIChwcm9wZXJ0eU5hbWUsIHVzZXJBZ2VudCkge1xuICAgICAgICB2YXIgdmVyc2lvbiA9IGltcGwuZ2V0VmVyc2lvblN0cihwcm9wZXJ0eU5hbWUsIHVzZXJBZ2VudCk7XG4gICAgICAgIHJldHVybiB2ZXJzaW9uID8gaW1wbC5wcmVwYXJlVmVyc2lvbk5vKHZlcnNpb24pIDogTmFOO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBQcmVwYXJlIHRoZSB2ZXJzaW9uIG51bWJlci5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSB2ZXJzaW9uXG4gICAgICogQHJldHVybiB7TnVtYmVyfSB0aGUgdmVyc2lvbiBudW1iZXIgYXMgYSBmbG9hdGluZyBudW1iZXJcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIGltcGwucHJlcGFyZVZlcnNpb25ObyA9IGZ1bmN0aW9uICh2ZXJzaW9uKSB7XG4gICAgICAgIHZhciBudW1iZXJzO1xuXG4gICAgICAgIG51bWJlcnMgPSB2ZXJzaW9uLnNwbGl0KC9bYS16Ll8gXFwvXFwtXS9pKTtcbiAgICAgICAgaWYgKG51bWJlcnMubGVuZ3RoID09PSAxKSB7XG4gICAgICAgICAgICB2ZXJzaW9uID0gbnVtYmVyc1swXTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobnVtYmVycy5sZW5ndGggPiAxKSB7XG4gICAgICAgICAgICB2ZXJzaW9uID0gbnVtYmVyc1swXSArICcuJztcbiAgICAgICAgICAgIG51bWJlcnMuc2hpZnQoKTtcbiAgICAgICAgICAgIHZlcnNpb24gKz0gbnVtYmVycy5qb2luKCcnKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gTnVtYmVyKHZlcnNpb24pO1xuICAgIH07XG5cbiAgICBpbXBsLmlzTW9iaWxlRmFsbGJhY2sgPSBmdW5jdGlvbiAodXNlckFnZW50KSB7XG4gICAgICAgIHJldHVybiBpbXBsLmRldGVjdE1vYmlsZUJyb3dzZXJzLmZ1bGxQYXR0ZXJuLnRlc3QodXNlckFnZW50KSB8fFxuICAgICAgICAgICAgaW1wbC5kZXRlY3RNb2JpbGVCcm93c2Vycy5zaG9ydFBhdHRlcm4udGVzdCh1c2VyQWdlbnQuc3Vic3RyKDAsNCkpO1xuICAgIH07XG5cbiAgICBpbXBsLmlzVGFibGV0RmFsbGJhY2sgPSBmdW5jdGlvbiAodXNlckFnZW50KSB7XG4gICAgICAgIHJldHVybiBpbXBsLmRldGVjdE1vYmlsZUJyb3dzZXJzLnRhYmxldFBhdHRlcm4udGVzdCh1c2VyQWdlbnQpO1xuICAgIH07XG5cbiAgICBpbXBsLnByZXBhcmVEZXRlY3Rpb25DYWNoZSA9IGZ1bmN0aW9uIChjYWNoZSwgdXNlckFnZW50LCBtYXhQaG9uZVdpZHRoKSB7XG4gICAgICAgIGlmIChjYWNoZS5tb2JpbGUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHZhciBwaG9uZSwgdGFibGV0LCBwaG9uZVNpemVkO1xuXG4gICAgICAgIC8vIGZpcnN0IGNoZWNrIGZvciBzdHJvbmdlciB0YWJsZXQgcnVsZXMsIHRoZW4gcGhvbmUgKHNlZSBpc3N1ZSM1KVxuICAgICAgICB0YWJsZXQgPSBpbXBsLmZpbmRNYXRjaChpbXBsLm1vYmlsZURldGVjdFJ1bGVzLnRhYmxldHMsIHVzZXJBZ2VudCk7XG4gICAgICAgIGlmICh0YWJsZXQpIHtcbiAgICAgICAgICAgIGNhY2hlLm1vYmlsZSA9IGNhY2hlLnRhYmxldCA9IHRhYmxldDtcbiAgICAgICAgICAgIGNhY2hlLnBob25lID0gbnVsbDtcbiAgICAgICAgICAgIHJldHVybjsgLy8gdW5hbWJpZ3VvdXNseSBpZGVudGlmaWVkIGFzIHRhYmxldFxuICAgICAgICB9XG5cbiAgICAgICAgcGhvbmUgPSBpbXBsLmZpbmRNYXRjaChpbXBsLm1vYmlsZURldGVjdFJ1bGVzLnBob25lcywgdXNlckFnZW50KTtcbiAgICAgICAgaWYgKHBob25lKSB7XG4gICAgICAgICAgICBjYWNoZS5tb2JpbGUgPSBjYWNoZS5waG9uZSA9IHBob25lO1xuICAgICAgICAgICAgY2FjaGUudGFibGV0ID0gbnVsbDtcbiAgICAgICAgICAgIHJldHVybjsgLy8gdW5hbWJpZ3VvdXNseSBpZGVudGlmaWVkIGFzIHBob25lXG4gICAgICAgIH1cblxuICAgICAgICAvLyBvdXIgcnVsZXMgaGF2ZW4ndCBmb3VuZCBhIG1hdGNoIC0+IHRyeSBtb3JlIGdlbmVyYWwgZmFsbGJhY2sgcnVsZXNcbiAgICAgICAgaWYgKGltcGwuaXNNb2JpbGVGYWxsYmFjayh1c2VyQWdlbnQpKSB7XG4gICAgICAgICAgICBwaG9uZVNpemVkID0gTW9iaWxlRGV0ZWN0LmlzUGhvbmVTaXplZChtYXhQaG9uZVdpZHRoKTtcbiAgICAgICAgICAgIGlmIChwaG9uZVNpemVkID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICBjYWNoZS5tb2JpbGUgPSBpbXBsLkZBTExCQUNLX01PQklMRTtcbiAgICAgICAgICAgICAgICBjYWNoZS50YWJsZXQgPSBjYWNoZS5waG9uZSA9IG51bGw7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHBob25lU2l6ZWQpIHtcbiAgICAgICAgICAgICAgICBjYWNoZS5tb2JpbGUgPSBjYWNoZS5waG9uZSA9IGltcGwuRkFMTEJBQ0tfUEhPTkU7XG4gICAgICAgICAgICAgICAgY2FjaGUudGFibGV0ID0gbnVsbDtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgY2FjaGUubW9iaWxlID0gY2FjaGUudGFibGV0ID0gaW1wbC5GQUxMQkFDS19UQUJMRVQ7XG4gICAgICAgICAgICAgICAgY2FjaGUucGhvbmUgPSBudWxsO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKGltcGwuaXNUYWJsZXRGYWxsYmFjayh1c2VyQWdlbnQpKSB7XG4gICAgICAgICAgICBjYWNoZS5tb2JpbGUgPSBjYWNoZS50YWJsZXQgPSBpbXBsLkZBTExCQUNLX1RBQkxFVDtcbiAgICAgICAgICAgIGNhY2hlLnBob25lID0gbnVsbDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIC8vIG5vdCBtb2JpbGUgYXQgYWxsIVxuICAgICAgICAgICAgY2FjaGUubW9iaWxlID0gY2FjaGUudGFibGV0ID0gY2FjaGUucGhvbmUgPSBudWxsO1xuICAgICAgICB9XG4gICAgfTtcblxuICAgIC8vIHQgaXMgYSByZWZlcmVuY2UgdG8gYSBNb2JpbGVEZXRlY3QgaW5zdGFuY2VcbiAgICBpbXBsLm1vYmlsZUdyYWRlID0gZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgLy8gaW1wbCBub3RlOlxuICAgICAgICAvLyBUbyBrZWVwIGluIHN5bmMgdy8gTW9iaWxlX0RldGVjdC5waHAgZWFzaWx5LCB0aGUgZm9sbG93aW5nIGNvZGUgaXMgdGlnaHRseSBhbGlnbmVkIHRvIHRoZSBQSFAgdmVyc2lvbi5cbiAgICAgICAgLy8gV2hlbiBjaGFuZ2VzIGFyZSBtYWRlIGluIE1vYmlsZV9EZXRlY3QucGhwLCBjb3B5IHRoaXMgbWV0aG9kIGFuZCByZXBsYWNlOlxuICAgICAgICAvLyAgICAgJHRoaXMtPiAvIHQuXG4gICAgICAgIC8vICAgICBzZWxmOjpNT0JJTEVfR1JBREVfKC4pIC8gJyQxJ1xuICAgICAgICAvLyAgICAgLCBzZWxmOjpWRVJTSU9OX1RZUEVfRkxPQVQgLyAobm90aGluZylcbiAgICAgICAgLy8gICAgIGlzSU9TKCkgLyBvcygnaU9TJylcbiAgICAgICAgLy8gICAgIFtyZWddIC8gKG5vdGhpbmcpICAgPC0tIGpzZGVsaXZyIGNvbXBsYWluaW5nIGFib3V0IHVuZXNjYXBlZCB1bmljb2RlIGNoYXJhY3RlciBVKzAwQUVcbiAgICAgICAgdmFyICRpc01vYmlsZSA9IHQubW9iaWxlKCkgIT09IG51bGw7XG5cbiAgICAgICAgaWYgKFxuICAgICAgICAgICAgLy8gQXBwbGUgaU9TIDMuMi01LjEgLSBUZXN0ZWQgb24gdGhlIG9yaWdpbmFsIGlQYWQgKDQuMyAvIDUuMCksIGlQYWQgMiAoNC4zKSwgaVBhZCAzICg1LjEpLCBvcmlnaW5hbCBpUGhvbmUgKDMuMSksIGlQaG9uZSAzICgzLjIpLCAzR1MgKDQuMyksIDQgKDQuMyAvIDUuMCksIGFuZCA0UyAoNS4xKVxuICAgICAgICAgICAgdC5vcygnaU9TJykgJiYgdC52ZXJzaW9uKCdpUGFkJyk+PTQuMyB8fFxuICAgICAgICAgICAgdC5vcygnaU9TJykgJiYgdC52ZXJzaW9uKCdpUGhvbmUnKT49My4xIHx8XG4gICAgICAgICAgICB0Lm9zKCdpT1MnKSAmJiB0LnZlcnNpb24oJ2lQb2QnKT49My4xIHx8XG5cbiAgICAgICAgICAgIC8vIEFuZHJvaWQgMi4xLTIuMyAtIFRlc3RlZCBvbiB0aGUgSFRDIEluY3JlZGlibGUgKDIuMiksIG9yaWdpbmFsIERyb2lkICgyLjIpLCBIVEMgQXJpYSAoMi4xKSwgR29vZ2xlIE5leHVzIFMgKDIuMykuIEZ1bmN0aW9uYWwgb24gMS41ICYgMS42IGJ1dCBwZXJmb3JtYW5jZSBtYXkgYmUgc2x1Z2dpc2gsIHRlc3RlZCBvbiBHb29nbGUgRzEgKDEuNSlcbiAgICAgICAgICAgIC8vIEFuZHJvaWQgMy4xIChIb25leWNvbWIpICAtIFRlc3RlZCBvbiB0aGUgU2Ftc3VuZyBHYWxheHkgVGFiIDEwLjEgYW5kIE1vdG9yb2xhIFhPT01cbiAgICAgICAgICAgIC8vIEFuZHJvaWQgNC4wIChJQ1MpICAtIFRlc3RlZCBvbiBhIEdhbGF4eSBOZXh1cy4gTm90ZTogdHJhbnNpdGlvbiBwZXJmb3JtYW5jZSBjYW4gYmUgcG9vciBvbiB1cGdyYWRlZCBkZXZpY2VzXG4gICAgICAgICAgICAvLyBBbmRyb2lkIDQuMSAoSmVsbHkgQmVhbikgIC0gVGVzdGVkIG9uIGEgR2FsYXh5IE5leHVzIGFuZCBHYWxheHkgN1xuICAgICAgICAgICAgKCB0LnZlcnNpb24oJ0FuZHJvaWQnKT4yLjEgJiYgdC5pcygnV2Via2l0JykgKSB8fFxuXG4gICAgICAgICAgICAvLyBXaW5kb3dzIFBob25lIDctNy41IC0gVGVzdGVkIG9uIHRoZSBIVEMgU3Vycm91bmQgKDcuMCkgSFRDIFRyb3BoeSAoNy41KSwgTEctRTkwMCAoNy41KSwgTm9raWEgTHVtaWEgODAwXG4gICAgICAgICAgICB0LnZlcnNpb24oJ1dpbmRvd3MgUGhvbmUgT1MnKT49Ny4wIHx8XG5cbiAgICAgICAgICAgIC8vIEJsYWNrYmVycnkgNyAtIFRlc3RlZCBvbiBCbGFja0JlcnJ5IFRvcmNoIDk4MTBcbiAgICAgICAgICAgIC8vIEJsYWNrYmVycnkgNi4wIC0gVGVzdGVkIG9uIHRoZSBUb3JjaCA5ODAwIGFuZCBTdHlsZSA5NjcwXG4gICAgICAgICAgICB0LmlzKCdCbGFja0JlcnJ5JykgJiYgdC52ZXJzaW9uKCdCbGFja0JlcnJ5Jyk+PTYuMCB8fFxuICAgICAgICAgICAgLy8gQmxhY2tiZXJyeSBQbGF5Ym9vayAoMS4wLTIuMCkgLSBUZXN0ZWQgb24gUGxheUJvb2tcbiAgICAgICAgICAgIHQubWF0Y2goJ1BsYXlib29rLipUYWJsZXQnKSB8fFxuXG4gICAgICAgICAgICAvLyBQYWxtIFdlYk9TICgxLjQtMi4wKSAtIFRlc3RlZCBvbiB0aGUgUGFsbSBQaXhpICgxLjQpLCBQcmUgKDEuNCksIFByZSAyICgyLjApXG4gICAgICAgICAgICAoIHQudmVyc2lvbignd2ViT1MnKT49MS40ICYmIHQubWF0Y2goJ1BhbG18UHJlfFBpeGknKSApIHx8XG4gICAgICAgICAgICAvLyBQYWxtIFdlYk9TIDMuMCAgLSBUZXN0ZWQgb24gSFAgVG91Y2hQYWRcbiAgICAgICAgICAgIHQubWF0Y2goJ2hwLipUb3VjaFBhZCcpIHx8XG5cbiAgICAgICAgICAgIC8vIEZpcmVmb3ggTW9iaWxlICgxMiBCZXRhKSAtIFRlc3RlZCBvbiBBbmRyb2lkIDIuMyBkZXZpY2VcbiAgICAgICAgICAgICggdC5pcygnRmlyZWZveCcpICYmIHQudmVyc2lvbignRmlyZWZveCcpPj0xMiApIHx8XG5cbiAgICAgICAgICAgIC8vIENocm9tZSBmb3IgQW5kcm9pZCAtIFRlc3RlZCBvbiBBbmRyb2lkIDQuMCwgNC4xIGRldmljZVxuICAgICAgICAgICAgKCB0LmlzKCdDaHJvbWUnKSAmJiB0LmlzKCdBbmRyb2lkT1MnKSAmJiB0LnZlcnNpb24oJ0FuZHJvaWQnKT49NC4wICkgfHxcblxuICAgICAgICAgICAgLy8gU2t5ZmlyZSA0LjEgLSBUZXN0ZWQgb24gQW5kcm9pZCAyLjMgZGV2aWNlXG4gICAgICAgICAgICAoIHQuaXMoJ1NreWZpcmUnKSAmJiB0LnZlcnNpb24oJ1NreWZpcmUnKT49NC4xICYmIHQuaXMoJ0FuZHJvaWRPUycpICYmIHQudmVyc2lvbignQW5kcm9pZCcpPj0yLjMgKSB8fFxuXG4gICAgICAgICAgICAvLyBPcGVyYSBNb2JpbGUgMTEuNS0xMjogVGVzdGVkIG9uIEFuZHJvaWQgMi4zXG4gICAgICAgICAgICAoIHQuaXMoJ09wZXJhJykgJiYgdC52ZXJzaW9uKCdPcGVyYSBNb2JpJyk+MTEgJiYgdC5pcygnQW5kcm9pZE9TJykgKSB8fFxuXG4gICAgICAgICAgICAvLyBNZWVnbyAxLjIgLSBUZXN0ZWQgb24gTm9raWEgOTUwIGFuZCBOOVxuICAgICAgICAgICAgdC5pcygnTWVlR29PUycpIHx8XG5cbiAgICAgICAgICAgIC8vIFRpemVuIChwcmUtcmVsZWFzZSkgLSBUZXN0ZWQgb24gZWFybHkgaGFyZHdhcmVcbiAgICAgICAgICAgIHQuaXMoJ1RpemVuJykgfHxcblxuICAgICAgICAgICAgLy8gU2Ftc3VuZyBCYWRhIDIuMCAtIFRlc3RlZCBvbiBhIFNhbXN1bmcgV2F2ZSAzLCBEb2xwaGluIGJyb3dzZXJcbiAgICAgICAgICAgIC8vIEB0b2RvOiBtb3JlIHRlc3RzIGhlcmUhXG4gICAgICAgICAgICB0LmlzKCdEb2xmaW4nKSAmJiB0LnZlcnNpb24oJ0JhZGEnKT49Mi4wIHx8XG5cbiAgICAgICAgICAgIC8vIFVDIEJyb3dzZXIgLSBUZXN0ZWQgb24gQW5kcm9pZCAyLjMgZGV2aWNlXG4gICAgICAgICAgICAoICh0LmlzKCdVQyBCcm93c2VyJykgfHwgdC5pcygnRG9sZmluJykpICYmIHQudmVyc2lvbignQW5kcm9pZCcpPj0yLjMgKSB8fFxuXG4gICAgICAgICAgICAvLyBLaW5kbGUgMyBhbmQgRmlyZSAgLSBUZXN0ZWQgb24gdGhlIGJ1aWx0LWluIFdlYktpdCBicm93c2VyIGZvciBlYWNoXG4gICAgICAgICAgICAoIHQubWF0Y2goJ0tpbmRsZSBGaXJlJykgfHxcbiAgICAgICAgICAgICAgICB0LmlzKCdLaW5kbGUnKSAmJiB0LnZlcnNpb24oJ0tpbmRsZScpPj0zLjAgKSB8fFxuXG4gICAgICAgICAgICAvLyBOb29rIENvbG9yIDEuNC4xIC0gVGVzdGVkIG9uIG9yaWdpbmFsIE5vb2sgQ29sb3IsIG5vdCBOb29rIFRhYmxldFxuICAgICAgICAgICAgdC5pcygnQW5kcm9pZE9TJykgJiYgdC5pcygnTm9va1RhYmxldCcpIHx8XG5cbiAgICAgICAgICAgIC8vIENocm9tZSBEZXNrdG9wIDExLTIxIC0gVGVzdGVkIG9uIE9TIFggMTAuNyBhbmQgV2luZG93cyA3XG4gICAgICAgICAgICB0LnZlcnNpb24oJ0Nocm9tZScpPj0xMSAmJiAhJGlzTW9iaWxlIHx8XG5cbiAgICAgICAgICAgIC8vIFNhZmFyaSBEZXNrdG9wIDQtNSAtIFRlc3RlZCBvbiBPUyBYIDEwLjcgYW5kIFdpbmRvd3MgN1xuICAgICAgICAgICAgdC52ZXJzaW9uKCdTYWZhcmknKT49NS4wICYmICEkaXNNb2JpbGUgfHxcblxuICAgICAgICAgICAgLy8gRmlyZWZveCBEZXNrdG9wIDQtMTMgLSBUZXN0ZWQgb24gT1MgWCAxMC43IGFuZCBXaW5kb3dzIDdcbiAgICAgICAgICAgIHQudmVyc2lvbignRmlyZWZveCcpPj00LjAgJiYgISRpc01vYmlsZSB8fFxuXG4gICAgICAgICAgICAvLyBJbnRlcm5ldCBFeHBsb3JlciA3LTkgLSBUZXN0ZWQgb24gV2luZG93cyBYUCwgVmlzdGEgYW5kIDdcbiAgICAgICAgICAgIHQudmVyc2lvbignTVNJRScpPj03LjAgJiYgISRpc01vYmlsZSB8fFxuXG4gICAgICAgICAgICAvLyBPcGVyYSBEZXNrdG9wIDEwLTEyIC0gVGVzdGVkIG9uIE9TIFggMTAuNyBhbmQgV2luZG93cyA3XG4gICAgICAgICAgICAvLyBAcmVmZXJlbmNlOiBodHRwOi8vbXkub3BlcmEuY29tL2NvbW11bml0eS9vcGVud2ViL2lkb3BlcmEvXG4gICAgICAgICAgICB0LnZlcnNpb24oJ09wZXJhJyk+PTEwICYmICEkaXNNb2JpbGVcblxuICAgICAgICAgICAgKXtcbiAgICAgICAgICAgIHJldHVybiAnQSc7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoXG4gICAgICAgICAgICB0Lm9zKCdpT1MnKSAmJiB0LnZlcnNpb24oJ2lQYWQnKTw0LjMgfHxcbiAgICAgICAgICAgIHQub3MoJ2lPUycpICYmIHQudmVyc2lvbignaVBob25lJyk8My4xIHx8XG4gICAgICAgICAgICB0Lm9zKCdpT1MnKSAmJiB0LnZlcnNpb24oJ2lQb2QnKTwzLjEgfHxcblxuICAgICAgICAgICAgLy8gQmxhY2tiZXJyeSA1LjA6IFRlc3RlZCBvbiB0aGUgU3Rvcm0gMiA5NTUwLCBCb2xkIDk3NzBcbiAgICAgICAgICAgIHQuaXMoJ0JsYWNrYmVycnknKSAmJiB0LnZlcnNpb24oJ0JsYWNrQmVycnknKT49NSAmJiB0LnZlcnNpb24oJ0JsYWNrQmVycnknKTw2IHx8XG5cbiAgICAgICAgICAgIC8vT3BlcmEgTWluaSAoNS4wLTYuNSkgLSBUZXN0ZWQgb24gaU9TIDMuMi80LjMgYW5kIEFuZHJvaWQgMi4zXG4gICAgICAgICAgICAoIHQudmVyc2lvbignT3BlcmEgTWluaScpPj01LjAgJiYgdC52ZXJzaW9uKCdPcGVyYSBNaW5pJyk8PTYuNSAmJlxuICAgICAgICAgICAgICAgICh0LnZlcnNpb24oJ0FuZHJvaWQnKT49Mi4zIHx8IHQuaXMoJ2lPUycpKSApIHx8XG5cbiAgICAgICAgICAgIC8vIE5va2lhIFN5bWJpYW5eMyAtIFRlc3RlZCBvbiBOb2tpYSBOOCAoU3ltYmlhbl4zKSwgQzcgKFN5bWJpYW5eMyksIGFsc28gd29ya3Mgb24gTjk3IChTeW1iaWFuXjEpXG4gICAgICAgICAgICB0Lm1hdGNoKCdOb2tpYU44fE5va2lhQzd8Tjk3LipTZXJpZXM2MHxTeW1iaWFuLzMnKSB8fFxuXG4gICAgICAgICAgICAvLyBAdG9kbzogcmVwb3J0IHRoaXMgKHRlc3RlZCBvbiBOb2tpYSBONzEpXG4gICAgICAgICAgICB0LnZlcnNpb24oJ09wZXJhIE1vYmknKT49MTEgJiYgdC5pcygnU3ltYmlhbk9TJylcbiAgICAgICAgICAgICl7XG4gICAgICAgICAgICByZXR1cm4gJ0InO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKFxuICAgICAgICAvLyBCbGFja2JlcnJ5IDQueCAtIFRlc3RlZCBvbiB0aGUgQ3VydmUgODMzMFxuICAgICAgICAgICAgdC52ZXJzaW9uKCdCbGFja0JlcnJ5Jyk8NS4wIHx8XG4gICAgICAgICAgICAvLyBXaW5kb3dzIE1vYmlsZSAtIFRlc3RlZCBvbiB0aGUgSFRDIExlbyAoV2luTW8gNS4yKVxuICAgICAgICAgICAgdC5tYXRjaCgnTVNJRU1vYmlsZXxXaW5kb3dzIENFLipNb2JpbGUnKSB8fCB0LnZlcnNpb24oJ1dpbmRvd3MgTW9iaWxlJyk8PTUuMlxuXG4gICAgICAgICAgICApe1xuICAgICAgICAgICAgcmV0dXJuICdDJztcbiAgICAgICAgfVxuXG4gICAgICAgIC8vQWxsIG9sZGVyIHNtYXJ0cGhvbmUgcGxhdGZvcm1zIGFuZCBmZWF0dXJlcGhvbmVzIC0gQW55IGRldmljZSB0aGF0IGRvZXNuJ3Qgc3VwcG9ydCBtZWRpYSBxdWVyaWVzXG4gICAgICAgIC8vd2lsbCByZWNlaXZlIHRoZSBiYXNpYywgQyBncmFkZSBleHBlcmllbmNlLlxuICAgICAgICByZXR1cm4gJ0MnO1xuICAgIH07XG5cbiAgICBpbXBsLmRldGVjdE9TID0gZnVuY3Rpb24gKHVhKSB7XG4gICAgICAgIHJldHVybiBpbXBsLmZpbmRNYXRjaChpbXBsLm1vYmlsZURldGVjdFJ1bGVzLm9zczAsIHVhKSB8fFxuICAgICAgICAgICAgaW1wbC5maW5kTWF0Y2goaW1wbC5tb2JpbGVEZXRlY3RSdWxlcy5vc3MsIHVhKTtcbiAgICB9O1xuXG4gICAgaW1wbC5nZXREZXZpY2VTbWFsbGVyU2lkZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHdpbmRvdy5zY3JlZW4ud2lkdGggPCB3aW5kb3cuc2NyZWVuLmhlaWdodCA/XG4gICAgICAgICAgICB3aW5kb3cuc2NyZWVuLndpZHRoIDpcbiAgICAgICAgICAgIHdpbmRvdy5zY3JlZW4uaGVpZ2h0O1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBDb25zdHJ1Y3RvciBmb3IgTW9iaWxlRGV0ZWN0IG9iamVjdC5cbiAgICAgKiA8YnI+XG4gICAgICogU3VjaCBhbiBvYmplY3Qgd2lsbCBrZWVwIGEgcmVmZXJlbmNlIHRvIHRoZSBnaXZlbiB1c2VyLWFnZW50IHN0cmluZyBhbmQgY2FjaGUgbW9zdCBvZiB0aGUgZGV0ZWN0IHF1ZXJpZXMuPGJyPlxuICAgICAqIDxkaXYgc3R5bGU9XCJiYWNrZ3JvdW5kLWNvbG9yOiAjZDllZGY3OyBib3JkZXI6IDFweCBzb2xpZCAjYmNlOGYxOyBjb2xvcjogIzNhODdhZDsgcGFkZGluZzogMTRweDsgYm9yZGVyLXJhZGl1czogMnB4OyBtYXJnaW4tdG9wOiAyMHB4XCI+XG4gICAgICogICAgIDxzdHJvbmc+RmluZCBpbmZvcm1hdGlvbiBob3cgdG8gZG93bmxvYWQgYW5kIGluc3RhbGw6PC9zdHJvbmc+XG4gICAgICogICAgIDxhIGhyZWY9XCJodHRwczovL2dpdGh1Yi5jb20vaGdvZWJsL21vYmlsZS1kZXRlY3QuanMvXCI+Z2l0aHViLmNvbS9oZ29lYmwvbW9iaWxlLWRldGVjdC5qcy88L2E+XG4gICAgICogPC9kaXY+XG4gICAgICpcbiAgICAgKiBAZXhhbXBsZSA8cHJlPlxuICAgICAqICAgICB2YXIgbWQgPSBuZXcgTW9iaWxlRGV0ZWN0KHdpbmRvdy5uYXZpZ2F0b3IudXNlckFnZW50KTtcbiAgICAgKiAgICAgaWYgKG1kLm1vYmlsZSgpKSB7XG4gICAgICogICAgICAgICBsb2NhdGlvbi5ocmVmID0gKG1kLm1vYmlsZUdyYWRlKCkgPT09ICdBJykgPyAnL21vYmlsZS8nIDogJy9seW54Lyc7XG4gICAgICogICAgIH1cbiAgICAgKiA8L3ByZT5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSB1c2VyQWdlbnQgdHlwaWNhbGx5IHRha2VuIGZyb20gd2luZG93Lm5hdmlnYXRvci51c2VyQWdlbnQgb3IgaHR0cF9oZWFkZXJbJ1VzZXItQWdlbnQnXVxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbbWF4UGhvbmVXaWR0aD02MDBdIDxzdHJvbmc+b25seSBmb3IgYnJvd3NlcnM8L3N0cm9uZz4gc3BlY2lmeSBhIHZhbHVlIGZvciB0aGUgbWF4aW11bVxuICAgICAqICAgICAgICB3aWR0aCBvZiBzbWFsbGVzdCBkZXZpY2Ugc2lkZSAoaW4gbG9naWNhbCBcIkNTU1wiIHBpeGVscykgdW50aWwgYSBkZXZpY2UgZGV0ZWN0ZWQgYXMgbW9iaWxlIHdpbGwgYmUgaGFuZGxlZFxuICAgICAqICAgICAgICBhcyBwaG9uZS5cbiAgICAgKiAgICAgICAgVGhpcyBpcyBvbmx5IHVzZWQgaW4gY2FzZXMgd2hlcmUgdGhlIGRldmljZSBjYW5ub3QgYmUgY2xhc3NpZmllZCBhcyBwaG9uZSBvciB0YWJsZXQuPGJyPlxuICAgICAqICAgICAgICBTZWUgPGEgaHJlZj1cImh0dHA6Ly9kZXZlbG9wZXIuYW5kcm9pZC5jb20vZ3VpZGUvcHJhY3RpY2VzL3NjcmVlbnNfc3VwcG9ydC5odG1sXCI+RGVjbGFyaW5nIFRhYmxldCBMYXlvdXRzXG4gICAgICogICAgICAgIGZvciBBbmRyb2lkPC9hPi48YnI+XG4gICAgICogICAgICAgIElmIHlvdSBwcm92aWRlIGEgdmFsdWUgPCAwLCB0aGVuIHRoaXMgXCJmdXp6eVwiIGNoZWNrIGlzIGRpc2FibGVkLlxuICAgICAqIEBjb25zdHJ1Y3RvclxuICAgICAqIEBnbG9iYWxcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBNb2JpbGVEZXRlY3QodXNlckFnZW50LCBtYXhQaG9uZVdpZHRoKSB7XG4gICAgICAgIHRoaXMudWEgPSBwcmVwYXJlVXNlckFnZW50KHVzZXJBZ2VudCk7XG4gICAgICAgIHRoaXMuX2NhY2hlID0ge307XG4gICAgICAgIC8vNjAwZHAgaXMgdHlwaWNhbCA3XCIgdGFibGV0IG1pbmltdW0gd2lkdGhcbiAgICAgICAgdGhpcy5tYXhQaG9uZVdpZHRoID0gbWF4UGhvbmVXaWR0aCB8fCA2MDA7XG4gICAgfVxuXG4gICAgTW9iaWxlRGV0ZWN0LnByb3RvdHlwZSA9IHtcbiAgICAgICAgY29uc3RydWN0b3I6IE1vYmlsZURldGVjdCxcblxuICAgICAgICAvKipcbiAgICAgICAgICogUmV0dXJucyB0aGUgZGV0ZWN0ZWQgcGhvbmUgb3IgdGFibGV0IHR5cGUgb3IgPHR0Pm51bGw8L3R0PiBpZiBpdCBpcyBub3QgYSBtb2JpbGUgZGV2aWNlLlxuICAgICAgICAgKiA8YnI+XG4gICAgICAgICAqIEZvciBhIGxpc3Qgb2YgcG9zc2libGUgcmV0dXJuIHZhbHVlcyBzZWUge0BsaW5rIE1vYmlsZURldGVjdCNwaG9uZX0gYW5kIHtAbGluayBNb2JpbGVEZXRlY3QjdGFibGV0fS48YnI+XG4gICAgICAgICAqIDxicj5cbiAgICAgICAgICogSWYgdGhlIGRldmljZSBpcyBub3QgZGV0ZWN0ZWQgYnkgdGhlIHJlZ3VsYXIgZXhwcmVzc2lvbnMgZnJvbSBNb2JpbGUtRGV0ZWN0LCBhIHRlc3QgaXMgbWFkZSBhZ2FpbnN0XG4gICAgICAgICAqIHRoZSBwYXR0ZXJucyBvZiA8YSBocmVmPVwiaHR0cDovL2RldGVjdG1vYmlsZWJyb3dzZXJzLmNvbS9cIj5kZXRlY3Rtb2JpbGVicm93c2Vycy5jb208L2E+LiBJZiB0aGlzIHRlc3RcbiAgICAgICAgICogaXMgcG9zaXRpdmUsIGEgdmFsdWUgb2YgPGNvZGU+VW5rbm93blBob25lPC9jb2RlPiwgPGNvZGU+VW5rbm93blRhYmxldDwvY29kZT4gb3JcbiAgICAgICAgICogPGNvZGU+VW5rbm93bk1vYmlsZTwvY29kZT4gaXMgcmV0dXJuZWQuPGJyPlxuICAgICAgICAgKiBXaGVuIHVzZWQgaW4gYnJvd3NlciwgdGhlIGRlY2lzaW9uIHdoZXRoZXIgcGhvbmUgb3IgdGFibGV0IGlzIG1hZGUgYmFzZWQgb24gPGNvZGU+c2NyZWVuLndpZHRoL2hlaWdodDwvY29kZT4uPGJyPlxuICAgICAgICAgKiA8YnI+XG4gICAgICAgICAqIFdoZW4gdXNlZCBzZXJ2ZXItc2lkZSAobm9kZS5qcyksIHRoZXJlIGlzIG5vIHdheSB0byB0ZWxsIHRoZSBkaWZmZXJlbmNlIGJldHdlZW4gPGNvZGU+VW5rbm93blRhYmxldDwvY29kZT5cbiAgICAgICAgICogYW5kIDxjb2RlPlVua25vd25Nb2JpbGU8L2NvZGU+LCBzbyB5b3Ugd2lsbCBnZXQgPGNvZGU+VW5rbm93bk1vYmlsZTwvY29kZT4gaGVyZS48YnI+XG4gICAgICAgICAqIEJlIGF3YXJlIHRoYXQgc2luY2UgdjEuMC4wIGluIHRoaXMgc3BlY2lhbCBjYXNlIHlvdSB3aWxsIGdldCA8Y29kZT5Vbmtub3duTW9iaWxlPC9jb2RlPiBvbmx5IGZvcjpcbiAgICAgICAgICoge0BsaW5rIE1vYmlsZURldGVjdCNtb2JpbGV9LCBub3QgZm9yIHtAbGluayBNb2JpbGVEZXRlY3QjcGhvbmV9IGFuZCB7QGxpbmsgTW9iaWxlRGV0ZWN0I3RhYmxldH0uXG4gICAgICAgICAqIEluIHZlcnNpb25zIGJlZm9yZSB2MS4wLjAgYWxsIDMgbWV0aG9kcyByZXR1cm5lZCA8Y29kZT5Vbmtub3duTW9iaWxlPC9jb2RlPiB3aGljaCB3YXMgdGVkaW91cyB0byB1c2UuXG4gICAgICAgICAqIDxicj5cbiAgICAgICAgICogSW4gbW9zdCBjYXNlcyB5b3Ugd2lsbCB1c2UgdGhlIHJldHVybiB2YWx1ZSBqdXN0IGFzIGEgYm9vbGVhbi5cbiAgICAgICAgICpcbiAgICAgICAgICogQHJldHVybnMge1N0cmluZ30gdGhlIGtleSBmb3IgdGhlIHBob25lIGZhbWlseSBvciB0YWJsZXQgZmFtaWx5LCBlLmcuIFwiTmV4dXNcIi5cbiAgICAgICAgICogQGZ1bmN0aW9uIE1vYmlsZURldGVjdCNtb2JpbGVcbiAgICAgICAgICovXG4gICAgICAgIG1vYmlsZTogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgaW1wbC5wcmVwYXJlRGV0ZWN0aW9uQ2FjaGUodGhpcy5fY2FjaGUsIHRoaXMudWEsIHRoaXMubWF4UGhvbmVXaWR0aCk7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fY2FjaGUubW9iaWxlO1xuICAgICAgICB9LFxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBSZXR1cm5zIHRoZSBkZXRlY3RlZCBwaG9uZSB0eXBlL2ZhbWlseSBzdHJpbmcgb3IgPHR0Pm51bGw8L3R0Pi5cbiAgICAgICAgICogPGJyPlxuICAgICAgICAgKiBUaGUgcmV0dXJuZWQgdGFibGV0IChmYW1pbHkgb3IgcHJvZHVjZXIpIGlzIG9uZSBvZiBmb2xsb3dpbmcga2V5czo8YnI+XG4gICAgICAgICAqIDxicj48dHQ+aVBob25lLCBCbGFja0JlcnJ5LCBIVEMsIE5leHVzLCBEZWxsLCBNb3Rvcm9sYSwgU2Ftc3VuZywgTEcsIFNvbnksIEFzdXMsXG4gICAgICAgICAqIE5va2lhTHVtaWEsIE1pY3JvbWF4LCBQYWxtLCBWZXJ0dSwgUGFudGVjaCwgRmx5LCBXaWtvLCBpTW9iaWxlLCBTaW1WYWxsZXksXG4gICAgICAgICAqIFdvbGZnYW5nLCBBbGNhdGVsLCBOaW50ZW5kbywgQW1vaSwgSU5RLCBPbmVQbHVzLCBHZW5lcmljUGhvbmU8L3R0Pjxicj5cbiAgICAgICAgICogPGJyPlxuICAgICAgICAgKiBJZiB0aGUgZGV2aWNlIGlzIG5vdCBkZXRlY3RlZCBieSB0aGUgcmVndWxhciBleHByZXNzaW9ucyBmcm9tIE1vYmlsZS1EZXRlY3QsIGEgdGVzdCBpcyBtYWRlIGFnYWluc3RcbiAgICAgICAgICogdGhlIHBhdHRlcm5zIG9mIDxhIGhyZWY9XCJodHRwOi8vZGV0ZWN0bW9iaWxlYnJvd3NlcnMuY29tL1wiPmRldGVjdG1vYmlsZWJyb3dzZXJzLmNvbTwvYT4uIElmIHRoaXMgdGVzdFxuICAgICAgICAgKiBpcyBwb3NpdGl2ZSwgYSB2YWx1ZSBvZiA8Y29kZT5Vbmtub3duUGhvbmU8L2NvZGU+IG9yIDxjb2RlPlVua25vd25Nb2JpbGU8L2NvZGU+IGlzIHJldHVybmVkLjxicj5cbiAgICAgICAgICogV2hlbiB1c2VkIGluIGJyb3dzZXIsIHRoZSBkZWNpc2lvbiB3aGV0aGVyIHBob25lIG9yIHRhYmxldCBpcyBtYWRlIGJhc2VkIG9uIDxjb2RlPnNjcmVlbi53aWR0aC9oZWlnaHQ8L2NvZGU+Ljxicj5cbiAgICAgICAgICogPGJyPlxuICAgICAgICAgKiBXaGVuIHVzZWQgc2VydmVyLXNpZGUgKG5vZGUuanMpLCB0aGVyZSBpcyBubyB3YXkgdG8gdGVsbCB0aGUgZGlmZmVyZW5jZSBiZXR3ZWVuIDxjb2RlPlVua25vd25UYWJsZXQ8L2NvZGU+XG4gICAgICAgICAqIGFuZCA8Y29kZT5Vbmtub3duTW9iaWxlPC9jb2RlPiwgc28geW91IHdpbGwgZ2V0IDxjb2RlPm51bGw8L2NvZGU+IGhlcmUsIHdoaWxlIHtAbGluayBNb2JpbGVEZXRlY3QjbW9iaWxlfVxuICAgICAgICAgKiB3aWxsIHJldHVybiA8Y29kZT5Vbmtub3duTW9iaWxlPC9jb2RlPi48YnI+XG4gICAgICAgICAqIEJlIGF3YXJlIHRoYXQgc2luY2UgdjEuMC4wIGluIHRoaXMgc3BlY2lhbCBjYXNlIHlvdSB3aWxsIGdldCA8Y29kZT5Vbmtub3duTW9iaWxlPC9jb2RlPiBvbmx5IGZvcjpcbiAgICAgICAgICoge0BsaW5rIE1vYmlsZURldGVjdCNtb2JpbGV9LCBub3QgZm9yIHtAbGluayBNb2JpbGVEZXRlY3QjcGhvbmV9IGFuZCB7QGxpbmsgTW9iaWxlRGV0ZWN0I3RhYmxldH0uXG4gICAgICAgICAqIEluIHZlcnNpb25zIGJlZm9yZSB2MS4wLjAgYWxsIDMgbWV0aG9kcyByZXR1cm5lZCA8Y29kZT5Vbmtub3duTW9iaWxlPC9jb2RlPiB3aGljaCB3YXMgdGVkaW91cyB0byB1c2UuXG4gICAgICAgICAqIDxicj5cbiAgICAgICAgICogSW4gbW9zdCBjYXNlcyB5b3Ugd2lsbCB1c2UgdGhlIHJldHVybiB2YWx1ZSBqdXN0IGFzIGEgYm9vbGVhbi5cbiAgICAgICAgICpcbiAgICAgICAgICogQHJldHVybnMge1N0cmluZ30gdGhlIGtleSBvZiB0aGUgcGhvbmUgZmFtaWx5IG9yIHByb2R1Y2VyLCBlLmcuIFwiaVBob25lXCJcbiAgICAgICAgICogQGZ1bmN0aW9uIE1vYmlsZURldGVjdCNwaG9uZVxuICAgICAgICAgKi9cbiAgICAgICAgcGhvbmU6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGltcGwucHJlcGFyZURldGVjdGlvbkNhY2hlKHRoaXMuX2NhY2hlLCB0aGlzLnVhLCB0aGlzLm1heFBob25lV2lkdGgpO1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2NhY2hlLnBob25lO1xuICAgICAgICB9LFxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBSZXR1cm5zIHRoZSBkZXRlY3RlZCB0YWJsZXQgdHlwZS9mYW1pbHkgc3RyaW5nIG9yIDx0dD5udWxsPC90dD4uXG4gICAgICAgICAqIDxicj5cbiAgICAgICAgICogVGhlIHJldHVybmVkIHRhYmxldCAoZmFtaWx5IG9yIHByb2R1Y2VyKSBpcyBvbmUgb2YgZm9sbG93aW5nIGtleXM6PGJyPlxuICAgICAgICAgKiA8YnI+PHR0PmlQYWQsIE5leHVzVGFibGV0LCBHb29nbGVUYWJsZXQsIFNhbXN1bmdUYWJsZXQsIEtpbmRsZSwgU3VyZmFjZVRhYmxldCxcbiAgICAgICAgICogSFBUYWJsZXQsIEFzdXNUYWJsZXQsIEJsYWNrQmVycnlUYWJsZXQsIEhUQ3RhYmxldCwgTW90b3JvbGFUYWJsZXQsIE5vb2tUYWJsZXQsXG4gICAgICAgICAqIEFjZXJUYWJsZXQsIFRvc2hpYmFUYWJsZXQsIExHVGFibGV0LCBGdWppdHN1VGFibGV0LCBQcmVzdGlnaW9UYWJsZXQsXG4gICAgICAgICAqIExlbm92b1RhYmxldCwgRGVsbFRhYmxldCwgWWFydmlrVGFibGV0LCBNZWRpb25UYWJsZXQsIEFybm92YVRhYmxldCxcbiAgICAgICAgICogSW50ZW5zb1RhYmxldCwgSVJVVGFibGV0LCBNZWdhZm9uVGFibGV0LCBFYm9kYVRhYmxldCwgQWxsVmlld1RhYmxldCxcbiAgICAgICAgICogQXJjaG9zVGFibGV0LCBBaW5vbFRhYmxldCwgTm9raWFMdW1pYVRhYmxldCwgU29ueVRhYmxldCwgUGhpbGlwc1RhYmxldCxcbiAgICAgICAgICogQ3ViZVRhYmxldCwgQ29ieVRhYmxldCwgTUlEVGFibGV0LCBNU0lUYWJsZXQsIFNNaVRUYWJsZXQsIFJvY2tDaGlwVGFibGV0LFxuICAgICAgICAgKiBGbHlUYWJsZXQsIGJxVGFibGV0LCBIdWF3ZWlUYWJsZXQsIE5lY1RhYmxldCwgUGFudGVjaFRhYmxldCwgQnJvbmNob1RhYmxldCxcbiAgICAgICAgICogVmVyc3VzVGFibGV0LCBaeW5jVGFibGV0LCBQb3NpdGl2b1RhYmxldCwgTmFiaVRhYmxldCwgS29ib1RhYmxldCwgRGFuZXdUYWJsZXQsXG4gICAgICAgICAqIFRleGV0VGFibGV0LCBQbGF5c3RhdGlvblRhYmxldCwgVHJla3N0b3JUYWJsZXQsIFB5bGVBdWRpb1RhYmxldCwgQWR2YW5UYWJsZXQsXG4gICAgICAgICAqIERhbnlUZWNoVGFibGV0LCBHYWxhcGFkVGFibGV0LCBNaWNyb21heFRhYmxldCwgS2FyYm9ublRhYmxldCwgQWxsRmluZVRhYmxldCxcbiAgICAgICAgICogUFJPU0NBTlRhYmxldCwgWU9ORVNUYWJsZXQsIENoYW5nSmlhVGFibGV0LCBHVVRhYmxldCwgUG9pbnRPZlZpZXdUYWJsZXQsXG4gICAgICAgICAqIE92ZXJtYXhUYWJsZXQsIEhDTFRhYmxldCwgRFBTVGFibGV0LCBWaXN0dXJlVGFibGV0LCBDcmVzdGFUYWJsZXQsXG4gICAgICAgICAqIE1lZGlhdGVrVGFibGV0LCBDb25jb3JkZVRhYmxldCwgR29DbGV2ZXJUYWJsZXQsIE1vZGVjb21UYWJsZXQsIFZvbmlub1RhYmxldCxcbiAgICAgICAgICogRUNTVGFibGV0LCBTdG9yZXhUYWJsZXQsIFZvZGFmb25lVGFibGV0LCBFc3NlbnRpZWxCVGFibGV0LCBSb3NzTW9vclRhYmxldCxcbiAgICAgICAgICogaU1vYmlsZVRhYmxldCwgVG9saW5vVGFibGV0LCBBdWRpb1NvbmljVGFibGV0LCBBTVBFVGFibGV0LCBTa2tUYWJsZXQsXG4gICAgICAgICAqIFRlY25vVGFibGV0LCBKWERUYWJsZXQsIGlKb3lUYWJsZXQsIEZYMlRhYmxldCwgWG9yb1RhYmxldCwgVmlld3NvbmljVGFibGV0LFxuICAgICAgICAgKiBWZXJpem9uVGFibGV0LCBPZHlzVGFibGV0LCBDYXB0aXZhVGFibGV0LCBJY29uYml0VGFibGV0LCBUZWNsYXN0VGFibGV0LFxuICAgICAgICAgKiBPbmRhVGFibGV0LCBKYXl0ZWNoVGFibGV0LCBCbGF1cHVua3RUYWJsZXQsIERpZ21hVGFibGV0LCBFdm9saW9UYWJsZXQsXG4gICAgICAgICAqIExhdmFUYWJsZXQsIEFvY1RhYmxldCwgTXBtYW5UYWJsZXQsIENlbGtvblRhYmxldCwgV29sZGVyVGFibGV0LCBNZWRpYWNvbVRhYmxldCxcbiAgICAgICAgICogTWlUYWJsZXQsIE5pYmlydVRhYmxldCwgTmV4b1RhYmxldCwgTGVhZGVyVGFibGV0LCBVYmlzbGF0ZVRhYmxldCxcbiAgICAgICAgICogUG9ja2V0Qm9va1RhYmxldCwgS29jYXNvVGFibGV0LCBIaXNlbnNlVGFibGV0LCBIdWRsLCBUZWxzdHJhVGFibGV0LFxuICAgICAgICAgKiBHZW5lcmljVGFibGV0PC90dD48YnI+XG4gICAgICAgICAqIDxicj5cbiAgICAgICAgICogSWYgdGhlIGRldmljZSBpcyBub3QgZGV0ZWN0ZWQgYnkgdGhlIHJlZ3VsYXIgZXhwcmVzc2lvbnMgZnJvbSBNb2JpbGUtRGV0ZWN0LCBhIHRlc3QgaXMgbWFkZSBhZ2FpbnN0XG4gICAgICAgICAqIHRoZSBwYXR0ZXJucyBvZiA8YSBocmVmPVwiaHR0cDovL2RldGVjdG1vYmlsZWJyb3dzZXJzLmNvbS9cIj5kZXRlY3Rtb2JpbGVicm93c2Vycy5jb208L2E+LiBJZiB0aGlzIHRlc3RcbiAgICAgICAgICogaXMgcG9zaXRpdmUsIGEgdmFsdWUgb2YgPGNvZGU+VW5rbm93blRhYmxldDwvY29kZT4gb3IgPGNvZGU+VW5rbm93bk1vYmlsZTwvY29kZT4gaXMgcmV0dXJuZWQuPGJyPlxuICAgICAgICAgKiBXaGVuIHVzZWQgaW4gYnJvd3NlciwgdGhlIGRlY2lzaW9uIHdoZXRoZXIgcGhvbmUgb3IgdGFibGV0IGlzIG1hZGUgYmFzZWQgb24gPGNvZGU+c2NyZWVuLndpZHRoL2hlaWdodDwvY29kZT4uPGJyPlxuICAgICAgICAgKiA8YnI+XG4gICAgICAgICAqIFdoZW4gdXNlZCBzZXJ2ZXItc2lkZSAobm9kZS5qcyksIHRoZXJlIGlzIG5vIHdheSB0byB0ZWxsIHRoZSBkaWZmZXJlbmNlIGJldHdlZW4gPGNvZGU+VW5rbm93blRhYmxldDwvY29kZT5cbiAgICAgICAgICogYW5kIDxjb2RlPlVua25vd25Nb2JpbGU8L2NvZGU+LCBzbyB5b3Ugd2lsbCBnZXQgPGNvZGU+bnVsbDwvY29kZT4gaGVyZSwgd2hpbGUge0BsaW5rIE1vYmlsZURldGVjdCNtb2JpbGV9XG4gICAgICAgICAqIHdpbGwgcmV0dXJuIDxjb2RlPlVua25vd25Nb2JpbGU8L2NvZGU+Ljxicj5cbiAgICAgICAgICogQmUgYXdhcmUgdGhhdCBzaW5jZSB2MS4wLjAgaW4gdGhpcyBzcGVjaWFsIGNhc2UgeW91IHdpbGwgZ2V0IDxjb2RlPlVua25vd25Nb2JpbGU8L2NvZGU+IG9ubHkgZm9yOlxuICAgICAgICAgKiB7QGxpbmsgTW9iaWxlRGV0ZWN0I21vYmlsZX0sIG5vdCBmb3Ige0BsaW5rIE1vYmlsZURldGVjdCNwaG9uZX0gYW5kIHtAbGluayBNb2JpbGVEZXRlY3QjdGFibGV0fS5cbiAgICAgICAgICogSW4gdmVyc2lvbnMgYmVmb3JlIHYxLjAuMCBhbGwgMyBtZXRob2RzIHJldHVybmVkIDxjb2RlPlVua25vd25Nb2JpbGU8L2NvZGU+IHdoaWNoIHdhcyB0ZWRpb3VzIHRvIHVzZS5cbiAgICAgICAgICogPGJyPlxuICAgICAgICAgKiBJbiBtb3N0IGNhc2VzIHlvdSB3aWxsIHVzZSB0aGUgcmV0dXJuIHZhbHVlIGp1c3QgYXMgYSBib29sZWFuLlxuICAgICAgICAgKlxuICAgICAgICAgKiBAcmV0dXJucyB7U3RyaW5nfSB0aGUga2V5IG9mIHRoZSB0YWJsZXQgZmFtaWx5IG9yIHByb2R1Y2VyLCBlLmcuIFwiU2Ftc3VuZ1RhYmxldFwiXG4gICAgICAgICAqIEBmdW5jdGlvbiBNb2JpbGVEZXRlY3QjdGFibGV0XG4gICAgICAgICAqL1xuICAgICAgICB0YWJsZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGltcGwucHJlcGFyZURldGVjdGlvbkNhY2hlKHRoaXMuX2NhY2hlLCB0aGlzLnVhLCB0aGlzLm1heFBob25lV2lkdGgpO1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2NhY2hlLnRhYmxldDtcbiAgICAgICAgfSxcblxuICAgICAgICAvKipcbiAgICAgICAgICogUmV0dXJucyB0aGUgKGZpcnN0KSBkZXRlY3RlZCB1c2VyLWFnZW50IHN0cmluZyBvciA8dHQ+bnVsbDwvdHQ+LlxuICAgICAgICAgKiA8YnI+XG4gICAgICAgICAqIFRoZSByZXR1cm5lZCB1c2VyLWFnZW50IGlzIG9uZSBvZiBmb2xsb3dpbmcga2V5czo8YnI+XG4gICAgICAgICAqIDxicj48dHQ+Q2hyb21lLCBEb2xmaW4sIE9wZXJhLCBTa3lmaXJlLCBFZGdlLCBJRSwgRmlyZWZveCwgQm9sdCwgVGVhU2hhcmssIEJsYXplcixcbiAgICAgICAgICogU2FmYXJpLCBXZUNoYXQsIFVDQnJvd3NlciwgYmFpZHVib3hhcHAsIGJhaWR1YnJvd3NlciwgRGlpZ29Ccm93c2VyLCBNZXJjdXJ5LFxuICAgICAgICAgKiBPYmlnb0Jyb3dzZXIsIE5ldEZyb250LCBHZW5lcmljQnJvd3NlciwgUGFsZU1vb248L3R0Pjxicj5cbiAgICAgICAgICogPGJyPlxuICAgICAgICAgKiBJbiBtb3N0IGNhc2VzIGNhbGxpbmcge0BsaW5rIE1vYmlsZURldGVjdCN1c2VyQWdlbnR9IHdpbGwgYmUgc3VmZmljaWVudC4gQnV0IHRoZXJlIGFyZSByYXJlXG4gICAgICAgICAqIGNhc2VzIHdoZXJlIGEgbW9iaWxlIGRldmljZSBwcmV0ZW5kcyB0byBiZSBtb3JlIHRoYW4gb25lIHBhcnRpY3VsYXIgYnJvd3Nlci4gWW91IGNhbiBnZXQgdGhlXG4gICAgICAgICAqIGxpc3Qgb2YgYWxsIG1hdGNoZXMgd2l0aCB7QGxpbmsgTW9iaWxlRGV0ZWN0I3VzZXJBZ2VudHN9IG9yIGNoZWNrIGZvciBhIHBhcnRpY3VsYXIgdmFsdWUgYnlcbiAgICAgICAgICogcHJvdmlkaW5nIG9uZSBvZiB0aGUgZGVmaW5lZCBrZXlzIGFzIGZpcnN0IGFyZ3VtZW50IHRvIHtAbGluayBNb2JpbGVEZXRlY3QjaXN9LlxuICAgICAgICAgKlxuICAgICAgICAgKiBAcmV0dXJucyB7U3RyaW5nfSB0aGUga2V5IGZvciB0aGUgZGV0ZWN0ZWQgdXNlci1hZ2VudCBvciA8dHQ+bnVsbDwvdHQ+XG4gICAgICAgICAqIEBmdW5jdGlvbiBNb2JpbGVEZXRlY3QjdXNlckFnZW50XG4gICAgICAgICAqL1xuICAgICAgICB1c2VyQWdlbnQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLl9jYWNoZS51c2VyQWdlbnQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIHRoaXMuX2NhY2hlLnVzZXJBZ2VudCA9IGltcGwuZmluZE1hdGNoKGltcGwubW9iaWxlRGV0ZWN0UnVsZXMudWFzLCB0aGlzLnVhKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9jYWNoZS51c2VyQWdlbnQ7XG4gICAgICAgIH0sXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIFJldHVybnMgYWxsIGRldGVjdGVkIHVzZXItYWdlbnQgc3RyaW5ncy5cbiAgICAgICAgICogPGJyPlxuICAgICAgICAgKiBUaGUgYXJyYXkgaXMgZW1wdHkgb3IgY29udGFpbnMgb25lIG9yIG1vcmUgb2YgZm9sbG93aW5nIGtleXM6PGJyPlxuICAgICAgICAgKiA8YnI+PHR0PkNocm9tZSwgRG9sZmluLCBPcGVyYSwgU2t5ZmlyZSwgRWRnZSwgSUUsIEZpcmVmb3gsIEJvbHQsIFRlYVNoYXJrLCBCbGF6ZXIsXG4gICAgICAgICAqIFNhZmFyaSwgV2VDaGF0LCBVQ0Jyb3dzZXIsIGJhaWR1Ym94YXBwLCBiYWlkdWJyb3dzZXIsIERpaWdvQnJvd3NlciwgTWVyY3VyeSxcbiAgICAgICAgICogT2JpZ29Ccm93c2VyLCBOZXRGcm9udCwgR2VuZXJpY0Jyb3dzZXIsIFBhbGVNb29uPC90dD48YnI+XG4gICAgICAgICAqIDxicj5cbiAgICAgICAgICogSW4gbW9zdCBjYXNlcyBjYWxsaW5nIHtAbGluayBNb2JpbGVEZXRlY3QjdXNlckFnZW50fSB3aWxsIGJlIHN1ZmZpY2llbnQuIEJ1dCB0aGVyZSBhcmUgcmFyZVxuICAgICAgICAgKiBjYXNlcyB3aGVyZSBhIG1vYmlsZSBkZXZpY2UgcHJldGVuZHMgdG8gYmUgbW9yZSB0aGFuIG9uZSBwYXJ0aWN1bGFyIGJyb3dzZXIuIFlvdSBjYW4gZ2V0IHRoZVxuICAgICAgICAgKiBsaXN0IG9mIGFsbCBtYXRjaGVzIHdpdGgge0BsaW5rIE1vYmlsZURldGVjdCN1c2VyQWdlbnRzfSBvciBjaGVjayBmb3IgYSBwYXJ0aWN1bGFyIHZhbHVlIGJ5XG4gICAgICAgICAqIHByb3ZpZGluZyBvbmUgb2YgdGhlIGRlZmluZWQga2V5cyBhcyBmaXJzdCBhcmd1bWVudCB0byB7QGxpbmsgTW9iaWxlRGV0ZWN0I2lzfS5cbiAgICAgICAgICpcbiAgICAgICAgICogQHJldHVybnMge0FycmF5fSB0aGUgYXJyYXkgb2YgZGV0ZWN0ZWQgdXNlci1hZ2VudCBrZXlzIG9yIDx0dD5bXTwvdHQ+XG4gICAgICAgICAqIEBmdW5jdGlvbiBNb2JpbGVEZXRlY3QjdXNlckFnZW50c1xuICAgICAgICAgKi9cbiAgICAgICAgdXNlckFnZW50czogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgaWYgKHRoaXMuX2NhY2hlLnVzZXJBZ2VudHMgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIHRoaXMuX2NhY2hlLnVzZXJBZ2VudHMgPSBpbXBsLmZpbmRNYXRjaGVzKGltcGwubW9iaWxlRGV0ZWN0UnVsZXMudWFzLCB0aGlzLnVhKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9jYWNoZS51c2VyQWdlbnRzO1xuICAgICAgICB9LFxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBSZXR1cm5zIHRoZSBkZXRlY3RlZCBvcGVyYXRpbmcgc3lzdGVtIHN0cmluZyBvciA8dHQ+bnVsbDwvdHQ+LlxuICAgICAgICAgKiA8YnI+XG4gICAgICAgICAqIFRoZSBvcGVyYXRpbmcgc3lzdGVtIGlzIG9uZSBvZiBmb2xsb3dpbmcga2V5czo8YnI+XG4gICAgICAgICAqIDxicj48dHQ+QW5kcm9pZE9TLCBCbGFja0JlcnJ5T1MsIFBhbG1PUywgU3ltYmlhbk9TLCBXaW5kb3dzTW9iaWxlT1MsIFdpbmRvd3NQaG9uZU9TLFxuICAgICAgICAgKiBpT1MsIGlQYWRPUywgTWVlR29PUywgTWFlbW9PUywgSmF2YU9TLCB3ZWJPUywgYmFkYU9TLCBCUkVXT1M8L3R0Pjxicj5cbiAgICAgICAgICpcbiAgICAgICAgICogQHJldHVybnMge1N0cmluZ30gdGhlIGtleSBmb3IgdGhlIGRldGVjdGVkIG9wZXJhdGluZyBzeXN0ZW0uXG4gICAgICAgICAqIEBmdW5jdGlvbiBNb2JpbGVEZXRlY3Qjb3NcbiAgICAgICAgICovXG4gICAgICAgIG9zOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5fY2FjaGUub3MgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIHRoaXMuX2NhY2hlLm9zID0gaW1wbC5kZXRlY3RPUyh0aGlzLnVhKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9jYWNoZS5vcztcbiAgICAgICAgfSxcblxuICAgICAgICAvKipcbiAgICAgICAgICogR2V0IHRoZSB2ZXJzaW9uIChhcyBOdW1iZXIpIG9mIHRoZSBnaXZlbiBwcm9wZXJ0eSBpbiB0aGUgVXNlci1BZ2VudC5cbiAgICAgICAgICogPGJyPlxuICAgICAgICAgKiBXaWxsIHJldHVybiBhIGZsb2F0IG51bWJlci4gKGVnLiAyXzAgd2lsbCByZXR1cm4gMi4wLCA0LjMuMSB3aWxsIHJldHVybiA0LjMxKVxuICAgICAgICAgKlxuICAgICAgICAgKiBAcGFyYW0ge1N0cmluZ30ga2V5IGEga2V5IGRlZmluaW5nIGEgdGhpbmcgd2hpY2ggaGFzIGEgdmVyc2lvbi48YnI+XG4gICAgICAgICAqICAgICAgICBZb3UgY2FuIHVzZSBvbmUgb2YgZm9sbG93aW5nIGtleXM6PGJyPlxuICAgICAgICAgKiA8YnI+PHR0Pk1vYmlsZSwgQnVpbGQsIFZlcnNpb24sIFZlbmRvcklELCBpUGFkLCBpUGhvbmUsIGlQb2QsIEtpbmRsZSwgQ2hyb21lLCBDb2FzdCxcbiAgICAgICAgICogRG9sZmluLCBGaXJlZm94LCBGZW5uZWMsIEVkZ2UsIElFLCBOZXRGcm9udCwgTm9raWFCcm93c2VyLCBPcGVyYSwgT3BlcmEgTWluaSxcbiAgICAgICAgICogT3BlcmEgTW9iaSwgVUNCcm93c2VyLCBNUVFCcm93c2VyLCBNaWNyb01lc3NlbmdlciwgYmFpZHVib3hhcHAsIGJhaWR1YnJvd3NlcixcbiAgICAgICAgICogU2Ftc3VuZ0Jyb3dzZXIsIElyb24sIFNhZmFyaSwgU2t5ZmlyZSwgVGl6ZW4sIFdlYmtpdCwgUGFsZU1vb24sIEdlY2tvLCBUcmlkZW50LFxuICAgICAgICAgKiBQcmVzdG8sIEdvYW5uYSwgaU9TLCBBbmRyb2lkLCBCbGFja0JlcnJ5LCBCUkVXLCBKYXZhLCBXaW5kb3dzIFBob25lIE9TLCBXaW5kb3dzXG4gICAgICAgICAqIFBob25lLCBXaW5kb3dzIENFLCBXaW5kb3dzIE5ULCBTeW1iaWFuLCB3ZWJPUzwvdHQ+PGJyPlxuICAgICAgICAgKlxuICAgICAgICAgKiBAcmV0dXJucyB7TnVtYmVyfSB0aGUgdmVyc2lvbiBhcyBmbG9hdCBvciA8dHQ+TmFOPC90dD4gaWYgVXNlci1BZ2VudCBkb2Vzbid0IGNvbnRhaW4gdGhpcyB2ZXJzaW9uLlxuICAgICAgICAgKiAgICAgICAgICBCZSBjYXJlZnVsIHdoZW4gY29tcGFyaW5nIHRoaXMgdmFsdWUgd2l0aCAnPT0nIG9wZXJhdG9yIVxuICAgICAgICAgKiBAZnVuY3Rpb24gTW9iaWxlRGV0ZWN0I3ZlcnNpb25cbiAgICAgICAgICovXG4gICAgICAgIHZlcnNpb246IGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgICAgIHJldHVybiBpbXBsLmdldFZlcnNpb24oa2V5LCB0aGlzLnVhKTtcbiAgICAgICAgfSxcblxuICAgICAgICAvKipcbiAgICAgICAgICogR2V0IHRoZSB2ZXJzaW9uIChhcyBTdHJpbmcpIG9mIHRoZSBnaXZlbiBwcm9wZXJ0eSBpbiB0aGUgVXNlci1BZ2VudC5cbiAgICAgICAgICogPGJyPlxuICAgICAgICAgKlxuICAgICAgICAgKiBAcGFyYW0ge1N0cmluZ30ga2V5IGEga2V5IGRlZmluaW5nIGEgdGhpbmcgd2hpY2ggaGFzIGEgdmVyc2lvbi48YnI+XG4gICAgICAgICAqICAgICAgICBZb3UgY2FuIHVzZSBvbmUgb2YgZm9sbG93aW5nIGtleXM6PGJyPlxuICAgICAgICAgKiA8YnI+PHR0Pk1vYmlsZSwgQnVpbGQsIFZlcnNpb24sIFZlbmRvcklELCBpUGFkLCBpUGhvbmUsIGlQb2QsIEtpbmRsZSwgQ2hyb21lLCBDb2FzdCxcbiAgICAgICAgICogRG9sZmluLCBGaXJlZm94LCBGZW5uZWMsIEVkZ2UsIElFLCBOZXRGcm9udCwgTm9raWFCcm93c2VyLCBPcGVyYSwgT3BlcmEgTWluaSxcbiAgICAgICAgICogT3BlcmEgTW9iaSwgVUNCcm93c2VyLCBNUVFCcm93c2VyLCBNaWNyb01lc3NlbmdlciwgYmFpZHVib3hhcHAsIGJhaWR1YnJvd3NlcixcbiAgICAgICAgICogU2Ftc3VuZ0Jyb3dzZXIsIElyb24sIFNhZmFyaSwgU2t5ZmlyZSwgVGl6ZW4sIFdlYmtpdCwgUGFsZU1vb24sIEdlY2tvLCBUcmlkZW50LFxuICAgICAgICAgKiBQcmVzdG8sIEdvYW5uYSwgaU9TLCBBbmRyb2lkLCBCbGFja0JlcnJ5LCBCUkVXLCBKYXZhLCBXaW5kb3dzIFBob25lIE9TLCBXaW5kb3dzXG4gICAgICAgICAqIFBob25lLCBXaW5kb3dzIENFLCBXaW5kb3dzIE5ULCBTeW1iaWFuLCB3ZWJPUzwvdHQ+PGJyPlxuICAgICAgICAgKlxuICAgICAgICAgKiBAcmV0dXJucyB7U3RyaW5nfSB0aGUgXCJyYXdcIiB2ZXJzaW9uIGFzIFN0cmluZyBvciA8dHQ+bnVsbDwvdHQ+IGlmIFVzZXItQWdlbnQgZG9lc24ndCBjb250YWluIHRoaXMgdmVyc2lvbi5cbiAgICAgICAgICpcbiAgICAgICAgICogQGZ1bmN0aW9uIE1vYmlsZURldGVjdCN2ZXJzaW9uU3RyXG4gICAgICAgICAqL1xuICAgICAgICB2ZXJzaW9uU3RyOiBmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgICAgICByZXR1cm4gaW1wbC5nZXRWZXJzaW9uU3RyKGtleSwgdGhpcy51YSk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIEdsb2JhbCB0ZXN0IGtleSBhZ2FpbnN0IHVzZXJBZ2VudCwgb3MsIHBob25lLCB0YWJsZXQgYW5kIHNvbWUgb3RoZXIgcHJvcGVydGllcyBvZiB1c2VyQWdlbnQgc3RyaW5nLlxuICAgICAgICAgKlxuICAgICAgICAgKiBAcGFyYW0ge1N0cmluZ30ga2V5IHRoZSBrZXkgKGNhc2UtaW5zZW5zaXRpdmUpIG9mIGEgdXNlckFnZW50LCBhbiBvcGVyYXRpbmcgc3lzdGVtLCBwaG9uZSBvclxuICAgICAgICAgKiAgICAgICAgdGFibGV0IGZhbWlseS48YnI+XG4gICAgICAgICAqICAgICAgICBGb3IgYSBjb21wbGV0ZSBsaXN0IG9mIHBvc3NpYmxlIHZhbHVlcywgc2VlIHtAbGluayBNb2JpbGVEZXRlY3QjdXNlckFnZW50fSxcbiAgICAgICAgICogICAgICAgIHtAbGluayBNb2JpbGVEZXRlY3Qjb3N9LCB7QGxpbmsgTW9iaWxlRGV0ZWN0I3Bob25lfSwge0BsaW5rIE1vYmlsZURldGVjdCN0YWJsZXR9Ljxicj5cbiAgICAgICAgICogICAgICAgIEFkZGl0aW9uYWxseSB5b3UgaGF2ZSBmb2xsb3dpbmcga2V5czo8YnI+XG4gICAgICAgICAqIDxicj48dHQ+Qm90LCBNb2JpbGVCb3QsIERlc2t0b3BNb2RlLCBUViwgV2ViS2l0LCBDb25zb2xlLCBXYXRjaDwvdHQ+PGJyPlxuICAgICAgICAgKlxuICAgICAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gPHR0PnRydWU8L3R0PiB3aGVuIHRoZSBnaXZlbiBrZXkgaXMgb25lIG9mIHRoZSBkZWZpbmVkIGtleXMgb2YgdXNlckFnZW50LCBvcywgcGhvbmUsXG4gICAgICAgICAqICAgICAgICAgICAgICAgICAgICB0YWJsZXQgb3Igb25lIG9mIHRoZSBsaXN0ZWQgYWRkaXRpb25hbCBrZXlzLCBvdGhlcndpc2UgPHR0PmZhbHNlPC90dD5cbiAgICAgICAgICogQGZ1bmN0aW9uIE1vYmlsZURldGVjdCNpc1xuICAgICAgICAgKi9cbiAgICAgICAgaXM6IGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgICAgIHJldHVybiBjb250YWluc0lDKHRoaXMudXNlckFnZW50cygpLCBrZXkpIHx8XG4gICAgICAgICAgICAgICAgICAgZXF1YWxJQyhrZXksIHRoaXMub3MoKSkgfHxcbiAgICAgICAgICAgICAgICAgICBlcXVhbElDKGtleSwgdGhpcy5waG9uZSgpKSB8fFxuICAgICAgICAgICAgICAgICAgIGVxdWFsSUMoa2V5LCB0aGlzLnRhYmxldCgpKSB8fFxuICAgICAgICAgICAgICAgICAgIGNvbnRhaW5zSUMoaW1wbC5maW5kTWF0Y2hlcyhpbXBsLm1vYmlsZURldGVjdFJ1bGVzLnV0aWxzLCB0aGlzLnVhKSwga2V5KTtcbiAgICAgICAgfSxcblxuICAgICAgICAvKipcbiAgICAgICAgICogRG8gYSBxdWljayB0ZXN0IGFnYWluc3QgbmF2aWdhdG9yOjp1c2VyQWdlbnQuXG4gICAgICAgICAqXG4gICAgICAgICAqIEBwYXJhbSB7U3RyaW5nfFJlZ0V4cH0gcGF0dGVybiB0aGUgcGF0dGVybiwgZWl0aGVyIGFzIFN0cmluZyBvciBSZWdFeHBcbiAgICAgICAgICogICAgICAgICAgICAgICAgICAgICAgICAoYSBzdHJpbmcgd2lsbCBiZSBjb252ZXJ0ZWQgdG8gYSBjYXNlLWluc2Vuc2l0aXZlIFJlZ0V4cCkuXG4gICAgICAgICAqIEByZXR1cm5zIHtib29sZWFufSA8dHQ+dHJ1ZTwvdHQ+IHdoZW4gdGhlIHBhdHRlcm4gbWF0Y2hlcywgb3RoZXJ3aXNlIDx0dD5mYWxzZTwvdHQ+XG4gICAgICAgICAqIEBmdW5jdGlvbiBNb2JpbGVEZXRlY3QjbWF0Y2hcbiAgICAgICAgICovXG4gICAgICAgIG1hdGNoOiBmdW5jdGlvbiAocGF0dGVybikge1xuICAgICAgICAgICAgaWYgKCEocGF0dGVybiBpbnN0YW5jZW9mIFJlZ0V4cCkpIHtcbiAgICAgICAgICAgICAgICBwYXR0ZXJuID0gbmV3IFJlZ0V4cChwYXR0ZXJuLCAnaScpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHBhdHRlcm4udGVzdCh0aGlzLnVhKTtcbiAgICAgICAgfSxcblxuICAgICAgICAvKipcbiAgICAgICAgICogQ2hlY2tzIHdoZXRoZXIgdGhlIG1vYmlsZSBkZXZpY2UgY2FuIGJlIGNvbnNpZGVyZWQgYXMgcGhvbmUgcmVnYXJkaW5nIDxjb2RlPnNjcmVlbi53aWR0aDwvY29kZT4uXG4gICAgICAgICAqIDxicj5cbiAgICAgICAgICogT2J2aW91c2x5IHRoaXMgbWV0aG9kIG1ha2VzIHNlbnNlIGluIGJyb3dzZXIgZW52aXJvbm1lbnRzIG9ubHkgKG5vdCBmb3IgTm9kZS5qcykhXG4gICAgICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbbWF4UGhvbmVXaWR0aF0gdGhlIG1heGltdW0gbG9naWNhbCBwaXhlbHMgKGFrYS4gQ1NTLXBpeGVscykgdG8gYmUgY29uc2lkZXJlZCBhcyBwaG9uZS48YnI+XG4gICAgICAgICAqICAgICAgICBUaGUgYXJndW1lbnQgaXMgb3B0aW9uYWwgYW5kIGlmIG5vdCBwcmVzZW50IG9yIGZhbHN5LCB0aGUgdmFsdWUgb2YgdGhlIGNvbnN0cnVjdG9yIGlzIHRha2VuLlxuICAgICAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbnx1bmRlZmluZWR9IDxjb2RlPnVuZGVmaW5lZDwvY29kZT4gaWYgc2NyZWVuIHNpemUgd2Fzbid0IGRldGVjdGFibGUsIGVsc2UgPGNvZGU+dHJ1ZTwvY29kZT5cbiAgICAgICAgICogICAgICAgICAgd2hlbiBzY3JlZW4ud2lkdGggaXMgbGVzcyBvciBlcXVhbCB0byBtYXhQaG9uZVdpZHRoLCBvdGhlcndpc2UgPGNvZGU+ZmFsc2U8L2NvZGU+Ljxicj5cbiAgICAgICAgICogICAgICAgICAgV2lsbCBhbHdheXMgcmV0dXJuIDxjb2RlPnVuZGVmaW5lZDwvY29kZT4gc2VydmVyLXNpZGUuXG4gICAgICAgICAqL1xuICAgICAgICBpc1Bob25lU2l6ZWQ6IGZ1bmN0aW9uIChtYXhQaG9uZVdpZHRoKSB7XG4gICAgICAgICAgICByZXR1cm4gTW9iaWxlRGV0ZWN0LmlzUGhvbmVTaXplZChtYXhQaG9uZVdpZHRoIHx8IHRoaXMubWF4UGhvbmVXaWR0aCk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIFJldHVybnMgdGhlIG1vYmlsZSBncmFkZSAoJ0EnLCAnQicsICdDJykuXG4gICAgICAgICAqXG4gICAgICAgICAqIEByZXR1cm5zIHtTdHJpbmd9IG9uZSBvZiB0aGUgbW9iaWxlIGdyYWRlcyAoJ0EnLCAnQicsICdDJykuXG4gICAgICAgICAqIEBmdW5jdGlvbiBNb2JpbGVEZXRlY3QjbW9iaWxlR3JhZGVcbiAgICAgICAgICovXG4gICAgICAgIG1vYmlsZUdyYWRlOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5fY2FjaGUuZ3JhZGUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIHRoaXMuX2NhY2hlLmdyYWRlID0gaW1wbC5tb2JpbGVHcmFkZSh0aGlzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9jYWNoZS5ncmFkZTtcbiAgICAgICAgfVxuICAgIH07XG5cbiAgICAvLyBlbnZpcm9ubWVudC1kZXBlbmRlbnRcbiAgICBpZiAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiYgd2luZG93LnNjcmVlbikge1xuICAgICAgICBNb2JpbGVEZXRlY3QuaXNQaG9uZVNpemVkID0gZnVuY3Rpb24gKG1heFBob25lV2lkdGgpIHtcbiAgICAgICAgICAgIHJldHVybiBtYXhQaG9uZVdpZHRoIDwgMCA/IHVuZGVmaW5lZCA6IGltcGwuZ2V0RGV2aWNlU21hbGxlclNpZGUoKSA8PSBtYXhQaG9uZVdpZHRoO1xuICAgICAgICB9O1xuICAgIH0gZWxzZSB7XG4gICAgICAgIE1vYmlsZURldGVjdC5pc1Bob25lU2l6ZWQgPSBmdW5jdGlvbiAoKSB7fTtcbiAgICB9XG5cbiAgICAvLyBzaG91bGQgbm90IGJlIHJlcGxhY2VkIGJ5IGEgY29tcGxldGVseSBuZXcgb2JqZWN0IC0ganVzdCBvdmVyd3JpdGUgZXhpc3RpbmcgbWV0aG9kc1xuICAgIE1vYmlsZURldGVjdC5faW1wbCA9IGltcGw7XG4gICAgXG4gICAgTW9iaWxlRGV0ZWN0LnZlcnNpb24gPSAnMS40LjQgMjAxOS0wOS0yMSc7XG5cbiAgICByZXR1cm4gTW9iaWxlRGV0ZWN0O1xufSk7IC8vIGVuZCBvZiBjYWxsIG9mIGRlZmluZSgpXG59KSgoZnVuY3Rpb24gKHVuZGVmaW5lZCkge1xuICAgIGlmICh0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJyAmJiBtb2R1bGUuZXhwb3J0cykge1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKGZhY3RvcnkpIHsgbW9kdWxlLmV4cG9ydHMgPSBmYWN0b3J5KCk7IH07XG4gICAgfSBlbHNlIGlmICh0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQpIHtcbiAgICAgICAgcmV0dXJuIGRlZmluZTtcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbiAoZmFjdG9yeSkgeyB3aW5kb3cuTW9iaWxlRGV0ZWN0ID0gZmFjdG9yeSgpOyB9O1xuICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIHBsZWFzZSBmaWxlIGEgYnVnIGlmIHlvdSBnZXQgdGhpcyBlcnJvciFcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCd1bmtub3duIGVudmlyb25tZW50Jyk7XG4gICAgfVxufSkoKSk7IiwiY29uc3Qgb3Blbkl0ZW0gPSBpdGVtID0+IHtcclxuICAgIGNvbnN0IGNvbnRhaW5lciA9IGl0ZW0uY2xvc2VzdCgnLnRlYW1fX2l0ZW0nKTtcclxuICAgIGNvbnN0IGNvbnRlbnQgPSBjb250YWluZXIuZmluZCgnLnRlYW1fX2NvbnRlbnQnKTtcclxuICAgIGNvbnN0IGFib3V0ID0gY29udGFpbmVyLmZpbmQoJy50ZWFtX19hYm91dCcpO1xyXG4gICAgY29uc3QgcmVxSGVpZ2h0ID0gYWJvdXQuaGVpZ2h0KCk7XHJcbiAgICBjb25zdCB0cmlhbmdsZSA9IGNvbnRhaW5lci5maW5kKCcudGVhbV9fdHJpYW5nbGUnKTtcclxuXHJcbiAgICBjb250YWluZXIuYWRkQ2xhc3MoJ3RlYW1fX2l0ZW1fYWN0aXZlJyk7XHJcbiAgICBjb250ZW50LmhlaWdodChyZXFIZWlnaHQpO1xyXG4gICAgdHJpYW5nbGUuY3NzKCd0cmFuc2Zvcm0nLCAncm90YXRlKC0xODBkZWcpJyk7XHJcbn1cclxuXHJcbmNvbnN0IGNsb3NlRXZlcnlJdGVtID0gY29udGFpbmVyID0+IHtcclxuICAgIGNvbnN0IGl0ZW1jb250YWluZXIgPSBjb250YWluZXIuZmluZCgnLnRlYW1fX2l0ZW0nKTtcclxuICAgIGNvbnN0IGl0ZW1zID0gY29udGFpbmVyLmZpbmQoJy50ZWFtX19jb250ZW50Jyk7XHJcbiAgICBjb25zdCB0cmlhbmdsZXMgPSBjb250YWluZXIuZmluZCgnLnRlYW1fX3RyaWFuZ2xlJyk7XHJcblxyXG4gICAgaXRlbWNvbnRhaW5lci5yZW1vdmVDbGFzcygndGVhbV9faXRlbV9hY3RpdmUnKTtcclxuICAgIGl0ZW1zLmhlaWdodCgwKTtcclxuICAgIHRyaWFuZ2xlcy5jc3MoJ3RyYW5zZm9ybScsICdyb3RhdGUoMGRlZyknKTtcclxufVxyXG5cclxuJCgnLnRlYW1fX3RpdGxlJykub24oJ2NsaWNrJywgZSA9PiB7XHJcbiAgICBjb25zdCAkdGhpcyA9ICQoZS5jdXJyZW50VGFyZ2V0KTtcclxuICAgIGNvbnN0IGNvbnRhaW5lciA9ICR0aGlzLmNsb3Nlc3QoJy50ZWFtX19saXN0Jyk7XHJcbiAgICBjb25zdCBlbGVtQ29udGFpbmVyID0gJHRoaXMuY2xvc2VzdCgnLnRlYW1fX2l0ZW0nKTtcclxuXHJcbiAgICBpZiAoZWxlbUNvbnRhaW5lci5oYXNDbGFzcygndGVhbV9faXRlbV9hY3RpdmUnKSkge1xyXG4gICAgICAgIGNsb3NlRXZlcnlJdGVtKGNvbnRhaW5lcik7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICAgIGNsb3NlRXZlcnlJdGVtKGNvbnRhaW5lcik7XHJcbiAgICAgICAgb3Blbkl0ZW0oJHRoaXMpO1xyXG4gICAgfVxyXG59KSIsImNvbnN0IGJ0biA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNoYW1idXJnZXInKTsgLy8g0LrQvdC+0L/QutCwINCz0LDQvNCx0YPRgNCz0LXRgFxyXG5jb25zdCBhcnJheSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy5tZW51X19saW5rJyk7IC8vINGB0L/QuNGB0L7QuiDRjdC70LXQvNC10L3RgtC+0LIg0LzQtdC90Y5cclxuY29uc3QgYm9keSA9IGRvY3VtZW50LmJvZHk7XHJcblxyXG5idG4uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBlID0+IHsgLy8g0L/RgNC4INC60LvQuNC60LUg0L3QsCDQs9Cw0LzQsdGD0YDQs9C10YBcclxuICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuICAgIG1lbnUoYXJyYXkpOyAvLyDQstGL0LfQvtCyINGE0YPQvdC60YbQuNC4IG1lbnVcclxufSlcclxuXHJcbmZ1bmN0aW9uIG1lbnUoYXJyKSB7XHJcbiAgICBjb25zdCBmdWxsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XHJcbiAgICBjb25zdCBsaXN0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgndWwnKTtcclxuICAgIGZ1bGwuY2xhc3NMaXN0LmFkZCgnZnVsbCcpO1xyXG4gICAgbGlzdC5jbGFzc0xpc3QuYWRkKCdmdWxsLW1lbnVfX2xpc3QnKTtcclxuXHJcbiAgICBhcnIuZm9yRWFjaChlID0+IHsgLy8g0L/QtdGA0LXQsdC+0YAg0Y3Qu9C10LzQtdC90YLQvtCyINC80LXQvdGOXHJcbiAgICAgICAgY29uc3QgaXRlbSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2xpJyk7XHJcbiAgICAgICAgY29uc3QgbGluayA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2EnKTtcclxuICAgICAgICBpdGVtLmNsYXNzTGlzdC5hZGQoJ2Z1bGwtbWVudV9faXRlbScpO1xyXG4gICAgICAgIGxpbmsuY2xhc3NMaXN0LmFkZCgnZnVsbC1tZW51X19saW5rJyk7XHJcbiAgICAgICAgbGluay5zZXRBdHRyaWJ1dGUoJ2RhdGEtc2Nyb2xsLXRvJywgZS5nZXRBdHRyaWJ1dGUoJ2RhdGEtc2Nyb2xsLXRvJykpO1xyXG4gICAgICAgIGxpbmsuaHJlZiA9ICcjJztcclxuICAgICAgICBsaW5rLnRleHRDb250ZW50ID0gZS50ZXh0Q29udGVudDtcclxuXHJcbiAgICAgICAgaXRlbS5hcHBlbmRDaGlsZChsaW5rKTtcclxuICAgICAgICBsaXN0LmFwcGVuZENoaWxkKGl0ZW0pO1xyXG5cclxuICAgICAgICBsaW5rLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZSA9PiB7IC8vINC10YHQu9C4INC60LvQuNC6INC/0L4g0Y3Qu9C10LzQtdC90YLRgyDRgdC/0LjRgdC60LBcclxuICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG5cclxuICAgICAgICAgICAgLy8g0KLRg9C/0L4g0L/QtdGA0LXQvdC+0YEg0LjQtyBTY3JvbGxQYWdlclxyXG4gICAgICAgICAgICBjb25zdCAkdGhpcyA9ICQoZS5jdXJyZW50VGFyZ2V0KTtcclxuICAgICAgICAgICAgY29uc3QgdGFyZ2V0ID0gJHRoaXMuYXR0cignZGF0YS1zY3JvbGwtdG8nKTtcclxuICAgICAgICAgICAgY29uc3QgcmVxU2VjdGlvbiA9ICQoYFtkYXRhLXNlY3Rpb24taWQ9JHt0YXJnZXR9XWApO1xyXG4gICAgICAgICAgICBwZXJmb21UcmFuc2l0aW9uKHJlcVNlY3Rpb24uaW5kZXgoKSk7XHJcbiAgICAgICAgICAgIGJvZHkucmVtb3ZlQ2hpbGQoZnVsbCk7XHJcbiAgICAgICAgfSlcclxuICAgIH0pO1xyXG5cclxuICAgIGNvbnN0IHRlbXBsYXRlID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI3N2Zy10ZW1wbGF0ZScpOyAvLyDRiNCw0LHQu9C+0L0g0YEg0LrQvdC+0L/QutC+0Lkg0LfQsNC60YDRi9GC0LjRj1xyXG4gICAgZnVsbC5pbm5lckhUTUwgPSB0ZW1wbGF0ZS5pbm5lckhUTUw7IC8vINCy0YHRgtCw0LLQutCwINC60L7QtNCwINC40Lcg0YjQsNCx0LvQvtC90LBcclxuXHJcbiAgICBmdWxsLmFwcGVuZENoaWxkKGxpc3QpO1xyXG4gICAgYm9keS5hcHBlbmRDaGlsZChmdWxsKTtcclxuXHJcbiAgICBjb25zdCBjbG9zZUJ0biA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNmdWxsLW1lbnVfX2Nsb3NlJyk7XHJcblxyXG4gICAgY2xvc2VCdG4uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBlID0+IHsgLy8g0L3QsNC20LDRgtC40LUg0L3QsCDQutGA0LXRgdGC0LjQulxyXG4gICAgICAgIGJvZHkucmVtb3ZlQ2hpbGQoZnVsbCk7XHJcbiAgICB9KTtcclxuXHJcbiAgICBmdWxsLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZSA9PiB7IC8vINC90LDQttCw0YLQuNC1INC90LAg0L7QsdC70LDRgdGC0Ywg0LLQvdC1INC80LXQvdGOXHJcbiAgICAgICAgaWYgKGUudGFyZ2V0ID09IGZ1bGwpIHtcclxuICAgICAgICAgICAgYm9keS5yZW1vdmVDaGlsZChmdWxsKTtcclxuICAgICAgICB9XHJcbiAgICB9KVxyXG59IiwiY29uc3QgSG9yaXpvbnRBY2NvcmQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcubWVudS1hY2NvcmRpb25fX2xpc3QnKTsgLy8g0L/QvtC40YHQuiDRgdC/0LjRgdC60LBcclxuXHJcbmNvbnN0IG1lc3VyZVdpZHRoID0gaXRlbSA9PiB7XHJcbiAgICBsZXQgY29udGFpbmVyV2lkdGggPSAwO1xyXG4gICAgY29uc3Qgc2NyZWVuV2lkdGggPSB3aW5kb3cuaW5uZXJXaWR0aDtcclxuICAgIGNvbnN0IGl0ZW1Db250YWluZXIgPSBpdGVtLmNsb3Nlc3QoJy5tZW51LWFjY29yZGlvbl9fbGlzdCcpO1xyXG4gICAgY29uc3QgdGl0bGVCbG9ja3MgPSBpdGVtQ29udGFpbmVyLnF1ZXJ5U2VsZWN0b3JBbGwoXCIubWVudS1hY2NvcmRpb25fX2J0blwiKTtcclxuICAgIGlmICh3aW5kb3cuaW5uZXJXaWR0aCA8PSA0ODApIHtcclxuICAgICAgICBjb250YWluZXJXaWR0aCA9IHNjcmVlbldpZHRoIC0gdGl0bGVCbG9ja3NbMV0ub2Zmc2V0V2lkdGg7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICAgIGNvbnRhaW5lcldpZHRoID0gc2NyZWVuV2lkdGggLSAodGl0bGVCbG9ja3NbMF0ub2Zmc2V0V2lkdGggKiB0aXRsZUJsb2Nrcy5sZW5ndGggLyAyKTtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gY29udGFpbmVyV2lkdGg7XHJcbn1cclxuXHJcbkhvcml6b250QWNjb3JkLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZSA9PiB7XHJcbiAgICBlLnByZXZlbnREZWZhdWx0KCk7XHJcblxyXG4gICAgY29uc3QgSG9yaXpvbnRBY2NvcmRUYXJnZXQgPSBlLnRhcmdldDtcclxuXHJcbiAgICBpZiAod2luZG93LmlubmVyV2lkdGggPD0gNDgwKSB7IC8vINC10YHQu9C4INGB0LDQudGCINC+0YLQutGA0YvQu9C4INC90LAg0YLQtdC70LXRhNC+0L3QtVxyXG4gICAgICAgIGNvbnN0IHBob25lc0FjdGl2ZSA9IEhvcml6b250QWNjb3JkLnF1ZXJ5U2VsZWN0b3IoJy5tZW51LWFjY29yZGlvbl9faXRlbV9waG9uZXNfYWN0aXZlJyk7IC8vINC40YnQtdC8INCw0LrRgtC40LLQvdGL0Lkg0Y3Qu9C10LzQtdC90YJcclxuXHJcbiAgICAgICAgaWYgKHBob25lc0FjdGl2ZSAmJiAoSG9yaXpvbnRBY2NvcmRUYXJnZXQuY2xvc2VzdCgnLm1lbnUtYWNjb3JkaW9uX19idG4nKSB8fCBIb3Jpem9udEFjY29yZFRhcmdldC5jbG9zZXN0KCcubWVudS1hY2NvcmRpb25fX2Nsb3NlLWNvbnRlbnQnKSkpIHsgLy8g0LXRgdC70Lgg0L3QsNGI0LvQuCDQuCDQutC70LjQuiDQv9GA0L7QuNC30L7RiNC10Lsg0L/QviDQutC90L7Qv9C60LUg0LjQu9C4INC/0L4g0LrRgNC10YHRgtC40LrRg1xyXG4gICAgICAgICAgICBIb3Jpem9udEFjY29yZFRhcmdldC5jbG9zZXN0KCcubWVudS1hY2NvcmRpb25fX2l0ZW1fcGhvbmVzX2FjdGl2ZScpLnJlbW92ZSgpOyAvLyDRg9C00LDQu9GP0LXQvCDQsNC60YLQuNCy0L3Ri9C5INGN0LvQtdC80LXQvdGCXHJcbiAgICAgICAgfSBlbHNlIGlmICghcGhvbmVzQWN0aXZlICYmIEhvcml6b250QWNjb3JkVGFyZ2V0LmNsb3Nlc3QoJy5tZW51LWFjY29yZGlvbl9fYnRuJykpIHsgLy8g0LXRgdC70Lgg0LDQutGC0LjQstC90L7Qs9C+INC90LXRgtGDINC4INC60LvQuNC6INC/0YDQvtC40LfQvtGI0LXQuyDQv9C+INC60L3QvtC/0LrQtVxyXG4gICAgICAgICAgICBjb25zdCBuZXdJdGVtID0gSG9yaXpvbnRBY2NvcmRUYXJnZXQuY2xvc2VzdCgnLm1lbnUtYWNjb3JkaW9uX19pdGVtJykuY2xvbmVOb2RlKHRydWUpOyAvLyDRgdC+0LfQtNCw0LXQvCDQutC70L7QvSDRjdC70LXQvNC10L3RgtCwINGB0L/QuNGB0LrQsCwg0L/QviDQutC+0YLQvtGA0L7QvNGDINC/0YDQvtC40LfQvtGI0LXQuyDQutC70LjQulxyXG4gICAgICAgICAgICBIb3Jpem9udEFjY29yZC5hcHBlbmRDaGlsZChuZXdJdGVtKS5jbGFzc0xpc3QuYWRkKCdtZW51LWFjY29yZGlvbl9faXRlbV9waG9uZXNfYWN0aXZlJyk7IC8vINCy0YHQsNGC0LLQu9GP0LXQvCDQutC70L7QvSDQsiDQutC+0L3QtdGGINGB0L/QuNGB0LrQsFxyXG4gICAgICAgICAgICBjb25zb2xlLmxvZyhIb3Jpem9udEFjY29yZFRhcmdldCk7XHJcblxyXG4gICAgICAgICAgICBuZXdJdGVtLnF1ZXJ5U2VsZWN0b3IoJy5tZW51LWFjY29yZGlvbl9fY29udGVudCcpLnN0eWxlLndpZHRoID0gYCR7bWVzdXJlV2lkdGgoSG9yaXpvbnRBY2NvcmRUYXJnZXQpfXB4YDtcclxuICAgICAgICB9XHJcbiAgICB9IGVsc2UgeyAvLyDQtdGB0LvQuCDQtNGA0YPQs9C40LUg0YPRgdGC0YDQvtC50YHRgtCy0LBcclxuICAgICAgICBpZiAoSG9yaXpvbnRBY2NvcmRUYXJnZXQuY2xvc2VzdCgnLm1lbnUtYWNjb3JkaW9uX19idG4nKSB8fCBIb3Jpem9udEFjY29yZFRhcmdldC5jbG9zZXN0KCcubWVudS1hY2NvcmRpb25fX2Nsb3NlLWNvbnRlbnQnKSkgeyAvLyDQtdGB0LvQuCDQutC70LjQuiDQv9GA0L7QuNC30L7RiNC10Lsg0L/QviDQutC90L7Qv9C60LUg0LjQu9C4INC/0L4g0LrRgNC10YHRgtC40LrRg1xyXG4gICAgICAgICAgICBjb25zdCBhY3RpdmUgPSBIb3Jpem9udEFjY29yZC5xdWVyeVNlbGVjdG9yKCcuYWN0aXZlJyk7IC8vINC40YnQtdC8INCw0LrRgtC40LLQvdGL0Lkg0LrQu9Cw0YHRgVxyXG4gICAgICAgICAgICBpZiAoYWN0aXZlKSB7IC8vINC10YHQu9C4INGB0YPRidC10YHRgtCy0YPQtdGCXHJcbiAgICAgICAgICAgICAgICBhY3RpdmUucXVlcnlTZWxlY3RvcignLm1lbnUtYWNjb3JkaW9uX19jb250ZW50Jykuc3R5bGUud2luZHRoID0gMDtcclxuICAgICAgICAgICAgICAgIGFjdGl2ZS5jbGFzc0xpc3QucmVtb3ZlKCdhY3RpdmUnKTsgLy8g0YPQtNCw0LvRj9C10Lwg0LrQu9Cw0YHRgVxyXG4gICAgICAgICAgICAgICAgaWYgKHdpbmRvdy5pbm5lcldpZHRoIDw9IDc2OCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGFjdGl2ZS5xdWVyeVNlbGVjdG9yKCcubWVudS1hY2NvcmRpb25fX2NvbnRlbnQnKS5zdHlsZS53aWR0aCA9IDA7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKGFjdGl2ZSAhPSBIb3Jpem9udEFjY29yZFRhcmdldC5jbG9zZXN0KCcubWVudS1hY2NvcmRpb25fX2l0ZW0nKSkgeyAvLyDQtdGB0LvQuCDQutC70LjQuiDQv9GA0L7QuNC30L7RiNC10Lsg0L3QtSDQv9C+INCw0LrRgtC40LLQvdC+0LzRgyDQutC70LDRgdGB0YNcclxuICAgICAgICAgICAgICAgIEhvcml6b250QWNjb3JkVGFyZ2V0LmNsb3Nlc3QoJy5tZW51LWFjY29yZGlvbl9faXRlbScpLmNsYXNzTGlzdC5hZGQoJ2FjdGl2ZScpOyAvLyDQtNC+0LHQsNCy0LvRj9C10Lwg0LDQutGC0LjQstC90YvQuSDQutC70LDRgdGBINGN0LvQtdC80LXQvdGC0YMsINC90LAg0LrQvtGC0L7RgNGL0Lkg0LrQu9C40LrQvdGD0LvQuFxyXG4gICAgICAgICAgICAgICAgaWYgKHdpbmRvdy5pbm5lcldpZHRoIDw9IDc2OCkge1xyXG4gICAgICAgICAgICAgICAgICAgIEhvcml6b250QWNjb3JkVGFyZ2V0LmNsb3Nlc3QoJy5tZW51LWFjY29yZGlvbl9faXRlbScpLnF1ZXJ5U2VsZWN0b3IoJy5tZW51LWFjY29yZGlvbl9fY29udGVudCcpLnN0eWxlLndpZHRoID0gYCR7bWVzdXJlV2lkdGgoSG9yaXpvbnRBY2NvcmRUYXJnZXQpfXB4YDtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxufSkiLCJsZXQgbXlNYXA7XHJcblxyXG5jb25zdCBpbml0ID0gKCkgPT4ge1xyXG4gICAgbXlNYXAgPSBuZXcgeW1hcHMuTWFwKCdtYXAnLCB7XHJcbiAgICAgICAgY2VudGVyOiBbNTMuNTk1MjI2LCAyNS44MjYzNjFdLFxyXG4gICAgICAgIHpvb206IDE0LjIyLFxyXG4gICAgICAgIGNvbnRyb2xzOiBbXVxyXG4gICAgfSk7XHJcblxyXG4gICAgY29uc3QgY29vcmRzID0gW1xyXG4gICAgICAgIFs1My42MDAzNjIsIDI1LjgxOTg2M10sXHJcbiAgICAgICAgWzUzLjYwMDExMSwgMjUuODI0MDc2XSxcclxuICAgICAgICBbNTMuNTg4Mjc0LCAyNS44MDU3NjhdLFxyXG4gICAgICAgIFs1My41OTI2MjQsIDI1LjgyOTQ5M11cclxuICAgIF07XHJcblxyXG4gICAgY29uc3QgbXlDb2xsZWN0aW9uID0gbmV3IHltYXBzLkdlb09iamVjdENvbGxlY3Rpb24oe30sIHtcclxuICAgICAgICBkcmFnZ2FibGU6IGZhbHNlLFxyXG4gICAgICAgIGljb25MYXlvdXQ6ICdkZWZhdWx0I2ltYWdlJyxcclxuICAgICAgICBpY29uSW1hZ2VIcmVmOiBcIi4vaW1nL2ljb25zL21hcmtlci5zdmdcIixcclxuICAgICAgICBpY29uSW1hZ2VTaXplOiBbNDYsIDU3XSxcclxuICAgICAgICBpY29uSW1hZ2VPZmZzZXQ6IFstMzUsIC01Ml1cclxuICAgIH0pXHJcblxyXG4gICAgY29vcmRzLmZvckVhY2goY29vcmQgPT4ge1xyXG4gICAgICAgIG15Q29sbGVjdGlvbi5hZGQobmV3IHltYXBzLlBsYWNlbWFyayhjb29yZCkpO1xyXG4gICAgfSlcclxuXHJcbiAgICBteU1hcC5nZW9PYmplY3RzLmFkZChteUNvbGxlY3Rpb24pO1xyXG5cclxuICAgIG15TWFwLmJlaGF2aW9ycy5kaXNhYmxlKCdzY3JvbGxab29tJyk7XHJcbn1cclxuXHJcbnltYXBzLnJlYWR5KGluaXQpOyIsImNvbnN0IHZhbGlkYXRlRmllbGRzID0gKGZvcm0sIGZpZWxkc0FycmF5KSA9PiB7XHJcbiAgICBmaWVsZHNBcnJheS5mb3JFYWNoKChmaWVsZCkgPT4ge1xyXG4gICAgICAgIGZpZWxkLnJlbW92ZUNsYXNzKFwiaW5wdXQtZXJyb3JcIik7XHJcbiAgICAgICAgaWYgKGZpZWxkLnZhbCgpLnRyaW0oKSA9PT0gXCJcIikge1xyXG4gICAgICAgICAgICBmaWVsZC5hZGRDbGFzcyhcImlucHV0LWVycm9yXCIpO1xyXG4gICAgICAgIH1cclxuICAgIH0pO1xyXG5cclxuICAgIGNvbnN0IGVycm9yc0ZpZWxkID0gZm9ybS5maW5kKFwiLmlucHV0LWVycm9yXCIpO1xyXG5cclxuICAgIHJldHVybiBlcnJvcnNGaWVsZC5sZW5ndGggPT09IDA7XHJcbn1cclxuXHJcbiQoJyNteUZvcm0nKS5zdWJtaXQoZSA9PiB7XHJcbiAgICBlLnByZXZlbnREZWZhdWx0KCk7XHJcblxyXG4gICAgY29uc3QgZm9ybSA9ICQoZS5jdXJyZW50VGFyZ2V0KTtcclxuICAgIGNvbnN0IG5hbWUgPSBmb3JtLmZpbmQoXCJbbmFtZSA9ICduYW1lJ11cIik7XHJcbiAgICBjb25zdCBwaG9uZSA9IGZvcm0uZmluZChcIltuYW1lID0gJ3Bob25lJ11cIik7XHJcbiAgICBjb25zdCBjb21tZW50ID0gZm9ybS5maW5kKFwiW25hbWUgPSAnbWVzc2FnZSddXCIpO1xyXG4gICAgY29uc3QgdG8gPSBmb3JtLmZpbmQoXCJbbmFtZSA9ICd0byddXCIpO1xyXG5cclxuICAgIGNvbnN0IG1vZGFsID0gJCgnI21vZGFsJyk7XHJcbiAgICBjb25zdCBjb250ZW50ID0gbW9kYWwuZmluZCgnLm92ZXJsYXlfX3RleHQnKTtcclxuXHJcbiAgICBtb2RhbC5yZW1vdmVDbGFzcyhcImVycm9yLW1lc3NhZ2VcIik7XHJcblxyXG4gICAgaWYgKHZhbGlkYXRlRmllbGRzKGZvcm0sIFtuYW1lLCBwaG9uZSwgY29tbWVudCwgdG9dKSkge1xyXG4gICAgICAgIGNvbnN0IHJlcXVlc3QgPSAkLmFqYXgoe1xyXG4gICAgICAgICAgICB1cmw6IFwiaHR0cHM6Ly93ZWJkZXYtYXBpLmxvZnRzY2hvb2wuY29tL3NlbmRtYWlsXCIsXHJcbiAgICAgICAgICAgIG1ldGhvZDogXCJwb3N0XCIsXHJcbiAgICAgICAgICAgIGRhdGE6IHtcclxuICAgICAgICAgICAgICAgIG5hbWU6IG5hbWUudmFsKCksXHJcbiAgICAgICAgICAgICAgICBwaG9uZTogcGhvbmUudmFsKCksXHJcbiAgICAgICAgICAgICAgICBjb21tZW50OiBjb21tZW50LnZhbCgpLFxyXG4gICAgICAgICAgICAgICAgdG86IHRvLnZhbCgpXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgcmVxdWVzdC5kb25lKGRhdGEgPT4ge1xyXG4gICAgICAgICAgICBjb250ZW50LnRleHQoZGF0YS5tZXNzYWdlKTtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgcmVxdWVzdC5mYWlsKGRhdGEgPT4ge1xyXG4gICAgICAgICAgICBjb250ZW50LnRleHQoZGF0YS5yZXNwb25zZUpTT04ubWVzc2FnZSlcclxuICAgICAgICAgICAgbW9kYWwuYWRkQ2xhc3MoXCJlcnJvci1tZXNzYWdlXCIpO1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICByZXF1ZXN0LmFsd2F5cygoKSA9PiB7XHJcbiAgICAgICAgICAgICQoJ2JvZHknKS5jc3MoJ292ZXJmbG93JywgJ2hpZGRlbicpO1xyXG4gICAgICAgICAgICAkLmZhbmN5Ym94Lm9wZW4oe1xyXG4gICAgICAgICAgICAgICAgc3JjOiBcIiNtb2RhbFwiLFxyXG4gICAgICAgICAgICAgICAgdHlwZTogXCJpbmxpbmVcIlxyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgIH0pXHJcbiAgICB9XHJcbn0pO1xyXG5cclxuJCgnLmFwcC1zdXBtaXQtYnRuJykub24oJ2NsaWNrJywgZSA9PiB7XHJcbiAgICBlLnByZXZlbnREZWZhdWx0KCk7XHJcblxyXG4gICAgJC5mYW5jeWJveC5jbG9zZSgpO1xyXG4gICAgJCgnYm9keScpLmNzcygnb3ZlcmZsb3cnLCAnYXV0bycpO1xyXG59KSIsImNvbnN0IHBsYXllckNvbnRhaW5lciA9ICQoJy5wbGF5ZXInKTtcclxuY29uc3QgcGxheWVyID0gJCgnLnBsYXllcl9fZWxlbScpWzBdO1xyXG5cclxubGV0IGV2ZW50c0luaXQgPSAoKSA9PiB7XHJcbiAgICAkKCcucGxheWVyX19zdGFydCcpLm9uKCdjbGljaycsIGUgPT4ge1xyXG4gICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuXHJcbiAgICAgICAgaWYgKHBsYXllckNvbnRhaW5lci5oYXNDbGFzcygncGF1c2VkJykpIHtcclxuICAgICAgICAgICAgcGxheWVyLnBhdXNlKCk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgcGxheWVyLnBsYXkoKTtcclxuICAgICAgICB9XHJcbiAgICB9KVxyXG5cclxuICAgICQoJy5wbGF5ZXJfX3BsYXliYWNrJykub24oJ2NsaWNrJywgZSA9PiB7XHJcbiAgICAgICAgY29uc3QgcGxheWJhY2tCYXIgPSAkKGUuY3VycmVudFRhcmdldCk7XHJcbiAgICAgICAgY29uc3QgcGxheWJhY2tCYXJDbGlja2VkUG9zaXRpb24gPSBlLm9yaWdpbmFsRXZlbnQubGF5ZXJYO1xyXG4gICAgICAgIGNvbnN0IG5ld0J1dHRvblBvc2l0aW9uUGVyY2VudCA9IChwbGF5YmFja0JhckNsaWNrZWRQb3NpdGlvbiAvIHBsYXliYWNrQmFyLndpZHRoKCkpICogMTAwO1xyXG4gICAgICAgIGNvbnN0IG5ld1BsYXliYWNrUG9zaXRpb25TZWMgPSAocGxheWVyLmR1cmF0aW9uIC8gMTAwKSAqIG5ld0J1dHRvblBvc2l0aW9uUGVyY2VudDtcclxuXHJcbiAgICAgICAgJCgnLnBsYXllcl9fcGxheWJhY2stYnV0dG9uJykuY3NzKHtcclxuICAgICAgICAgICAgbGVmdDogYCR7bmV3QnV0dG9uUG9zaXRpb25QZXJjZW50fSVgXHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIHBsYXllci5jdXJyZW50VGltZSA9IG5ld1BsYXliYWNrUG9zaXRpb25TZWM7XHJcbiAgICB9KVxyXG5cclxuICAgICQoJy5wbGF5ZXJfX3ZvbHVtZScpLm9uKCdjbGljaycsIGUgPT4ge1xyXG4gICAgICAgIGNvbnN0IHZvbHVtZUJhciA9ICQoZS5jdXJyZW50VGFyZ2V0KTtcclxuICAgICAgICBjb25zdCB2b2x1bWVCYXJjbGlja2VkUG9zaXRpb24gPSBlLm9yaWdpbmFsRXZlbnQubGF5ZXJYO1xyXG4gICAgICAgIGxldCBuZXdWb2x1bWVQb3NpdGlvblBlcmNlbnQgPSAodm9sdW1lQmFyY2xpY2tlZFBvc2l0aW9uIC8gdm9sdW1lQmFyLndpZHRoKCkpICogMTAwO1xyXG5cclxuICAgICAgICBpZiAobmV3Vm9sdW1lUG9zaXRpb25QZXJjZW50IDwgMCkgbmV3Vm9sdW1lUG9zaXRpb25QZXJjZW50ID0gMDtcclxuXHJcbiAgICAgICAgJCgnLnBsYXllcl9fdm9sdW1lLWJ1dHRvbicpLmNzcyh7XHJcbiAgICAgICAgICAgIGxlZnQ6IGAke25ld1ZvbHVtZVBvc2l0aW9uUGVyY2VudH0lYFxyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICBwbGF5ZXIudm9sdW1lID0gbmV3Vm9sdW1lUG9zaXRpb25QZXJjZW50IC8gMTAwO1xyXG4gICAgfSlcclxuXHJcbiAgICBsZXQgcGxheWVyVm9sdW1lTm93ID0gcGxheWVyLnZvbHVtZTtcclxuICAgICQoJy5wbGF5ZXJfX3NwZWFrZXItYnRuJykub24oJ2NsaWNrJywgZSA9PiB7XHJcbiAgICAgICAgaWYgKHBsYXllci52b2x1bWUgIT0gMCkge1xyXG4gICAgICAgICAgICBwbGF5ZXIudm9sdW1lID0gMDtcclxuICAgICAgICAgICAgJCgnLnBsYXllcl9fdm9sdW1lLWJ1dHRvbicpLmNzcyh7XHJcbiAgICAgICAgICAgICAgICBsZWZ0OiAnMCUnXHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHBsYXllci52b2x1bWUgPSBwbGF5ZXJWb2x1bWVOb3c7XHJcbiAgICAgICAgICAgICQoJy5wbGF5ZXJfX3ZvbHVtZS1idXR0b24nKS5jc3Moe1xyXG4gICAgICAgICAgICAgICAgbGVmdDogYCR7cGxheWVyVm9sdW1lTm93KjEwMH0lYFxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICB9KVxyXG5cclxuICAgICQoJy5wbGF5ZXJfX3NwbGFzaCcpLm9uKCdjbGljaycsIGUgPT4ge1xyXG4gICAgICAgIHBsYXllci5wbGF5KCk7XHJcbiAgICB9KVxyXG5cclxuICAgICQoJy5wbGF5ZXJfX2VsZW0nKS5vbignY2xpY2snLCBlID0+IHtcclxuICAgICAgICBwbGF5ZXIucGF1c2UoKTtcclxuICAgIH0pXHJcbn1cclxuXHJcbnBsYXllci5vbnBhdXNlID0gKCkgPT4ge1xyXG4gICAgcGxheWVyQ29udGFpbmVyLnJlbW92ZUNsYXNzKCdhY3RpdmUnKTtcclxuICAgIHBsYXllckNvbnRhaW5lci5yZW1vdmVDbGFzcygncGF1c2VkJyk7XHJcbn1cclxuXHJcbnBsYXllci5vbnBsYXkgPSAoKSA9PiB7XHJcbiAgICBwbGF5ZXJDb250YWluZXIuYWRkQ2xhc3MoJ2FjdGl2ZScpO1xyXG4gICAgcGxheWVyQ29udGFpbmVyLmFkZENsYXNzKCdwYXVzZWQnKVxyXG59XHJcblxyXG5ldmVudHNJbml0KCk7XHJcblxyXG5cclxuLy8gPT09PT09PT09PT09PT09PT0gWU9VVFVCRSBBUEkgPT09PT09PT09PT09PT09PT09PT09PT09XHJcblxyXG4vLyBsZXQgcGxheWVyO1xyXG4vLyBjb25zdCBwbGF5ZXJDb250YWluZXIgPSAkKCcucGxheWVyJyk7XHJcblxyXG4vLyBsZXQgZXZlbnRzSW5pdCA9ICgpID0+IHtcclxuLy8gICAgICQoJy5wbGF5ZXJfX3N0YXJ0Jykub24oJ2NsaWNrJywgZSA9PiB7XHJcbi8vICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG5cclxuLy8gICAgICAgICBpZiAocGxheWVyQ29udGFpbmVyLmhhc0NsYXNzKCdwYXVzZWQnKSl7XHJcbi8vICAgICAgICAgICAgIHBsYXllci5wYXVzZVZpZGVvKCk7XHJcbi8vICAgICAgICAgfSBlbHNlIHtcclxuLy8gICAgICAgICAgICAgcGxheWVyLnBsYXlWaWRlbygpO1xyXG4vLyAgICAgICAgIH1cclxuLy8gICAgIH0pXHJcblxyXG4vLyAgICAgJCgnLnBsYXllcl9fcGxheWJhY2snKS5vbignY2xpY2snLCBlID0+IHtcclxuLy8gICAgICAgICBjb25zdCBiYXIgPSAkKGUuY3VycmVudFRhcmdldCk7XHJcbi8vICAgICAgICAgY29uc3QgY2xpY2tlZFBvc2l0aW9uID0gZS5vcmlnaW5hbEV2ZW50LmxheWVyWDtcclxuLy8gICAgICAgICBjb25zdCBuZXdCdXR0b25Qb3NpdGlvblBlcmNlbnQgPSAoY2xpY2tlZFBvc2l0aW9uIC8gYmFyLndpZHRoKCkpICogMTAwO1xyXG4vLyAgICAgICAgIGNvbnN0IG5ld1BsYWJhY2tQb3NpdGlvblNlYyA9IChwbGF5ZXIuZ2V0RHVyYXRpb24oKSAvIDEwMCkgKiBuZXdCdXR0b25Qb3NpdGlvblBlcmNlbnQ7XHJcblxyXG4vLyAgICAgICAgICQoJy5wbGF5ZXJfX3BsYXliYWNrLWJ1dHRvbicpLmNzcyh7XHJcbi8vICAgICAgICAgICAgIGxlZnQ6IGAke25ld0J1dHRvblBvc2l0aW9uUGVyY2VudH0lYFxyXG4vLyAgICAgICAgIH0pO1xyXG5cclxuLy8gICAgICAgICBwbGF5ZXIuc2Vla1RvKG5ld1BsYWJhY2tQb3NpdGlvblNlYyk7XHJcbi8vICAgICB9KVxyXG5cclxuLy8gICAgICQoJy5wbGF5ZXJfX3NwbGFzaCcpLm9uKCdjbGljaycsIGUgPT4ge1xyXG4vLyAgICAgICAgIHBsYXllci5wbGF5VmlkZW8oKTtcclxuLy8gICAgIH0pXHJcbi8vIH1cclxuXHJcbi8vIGNvbnN0IGZvcm1hdFRpbWUgPSB0aW1lU2VjID0+IHtcclxuLy8gICAgIGNvbnN0IHJvdW5kVGltZSA9IE1hdGgucm91bmQodGltZVNlYyk7XHJcblxyXG4vLyAgICAgY29uc3QgbWludXRlcyA9IGFkZFplcm8oTWF0aC5mbG9vcihyb3VuZFRpbWUgLyA2MCkpO1xyXG4vLyAgICAgY29uc3Qgc2Vjb25kcyA9IGFkZFplcm8ocm91bmRUaW1lIC0gbWludXRlcyAqIDYwKTtcclxuXHJcbi8vICAgICBmdW5jdGlvbiBhZGRaZXJvKG51bSkge1xyXG4vLyAgICAgICAgIHJldHVybiBudW0gPCAxMCA/IGAwJHtudW19YCA6IG51bTtcclxuLy8gICAgIH1cclxuXHJcbi8vICAgICByZXR1cm4gYCR7bWludXRlc306JHtzZWNvbmRzfWA7XHJcbi8vIH1cclxuXHJcbi8vIGNvbnN0IG9uUGxheWVyUmVhZHkgPSAoKSA9PiB7XHJcbi8vICAgICBsZXQgaW50ZXJ2YWw7XHJcbi8vICAgICBjb25zdCBkdXJhdGlvblNlYyA9IHBsYXllci5nZXREdXJhdGlvbigpO1xyXG5cclxuLy8gICAgICQoJy5wbGF5ZXJfX2R1cmFjdGlvbi1lc3RpbWF0ZScpLnRleHQoZm9ybWF0VGltZShkdXJhdGlvblNlYykpO1xyXG5cclxuLy8gICAgIGlmICh0eXBlb2YgaW50ZXJ2YWwgIT09ICd1bmRlZmluZWQnKSB7XHJcbi8vICAgICAgICAgY2xlYXJJbnRlcnZhbChpbnRlcnZhbCk7XHJcbi8vICAgICB9XHJcblxyXG4vLyAgICAgaW50ZXJ2YWwgPSBzZXRJbnRlcnZhbCgoKSA9PiB7XHJcbi8vICAgICAgICAgY29uc3QgY29tcGxldGVkU2VjID0gcGxheWVyLmdldEN1cnJlbnRUaW1lKCk7XHJcbi8vICAgICAgICAgY29uc3QgY29tcGxldGVkUGVyY2VudCA9IChjb21wbGV0ZWRTZWMgLyBkdXJhdGlvblNlYykgKiAxMDA7XHJcblxyXG4vLyAgICAgICAgICQoJy5wbGF5ZXJfX3BsYXliYWNrLWJ1dHRvbicpLmNzcyh7XHJcbi8vICAgICAgICAgICAgIGxlZnQ6IGAke2NvbXBsZXRlZFBlcmNlbnR9JWBcclxuLy8gICAgICAgICB9KVxyXG4vLyAgICAgICAgICQoJy5wbGF5ZXJfX2R1cmFjdGlvbi1jb21wbGV0ZWQnKS50ZXh0KGZvcm1hdFRpbWUoY29tcGxldGVkU2VjKSlcclxuLy8gICAgIH0sIDEwMDApO1xyXG4vLyB9XHJcblxyXG4vLyBjb25zdCBvblBsYXllclN0YXRlQ2hhbmdlID0gZSA9PiB7XHJcbi8vICAgICAvKlxyXG4vLyAgICAgICAgIC0xIOKAkyDQstC+0YHQv9GA0L7QuNC30LLQtdC00LXQvdC40LUg0LLQuNC00LXQviDQvdC1INC90LDRh9Cw0LvQvtGB0YxcclxuLy8gICAgICAgICAwIOKAkyDQstC+0YHQv9GA0L7QuNC30LLQtdC00LXQvdC40LUg0LLQuNC00LXQviDQt9Cw0LLQtdGA0YjQtdC90L5cclxuLy8gICAgICAgICAxIOKAkyDQstC+0YHQv9GA0L7QuNC30LLQtdC00LXQvdC40LVcclxuLy8gICAgICAgICAyIOKAkyDQv9Cw0YPQt9CwXHJcbi8vICAgICAgICAgMyDigJMg0LHRg9GE0LXRgNC40LfQsNGG0LjRj1xyXG4vLyAgICAgICAgIDUg4oCTINCy0LjQtNC10L4g0L3QsNGF0L7QtNC40YLRgdGPINCyINC+0YfQtdGA0LXQtNC4XHJcbi8vICAgICAqL1xyXG4vLyAgICAgc3dpdGNoIChlLmRhdGEpIHtcclxuLy8gICAgICAgICBjYXNlIDE6XHJcbi8vICAgICAgICAgICAgIHBsYXllckNvbnRhaW5lci5hZGRDbGFzcygnYWN0aXZlJyk7XHJcbi8vICAgICAgICAgICAgIHBsYXllckNvbnRhaW5lci5hZGRDbGFzcygncGF1c2VkJyk7XHJcbi8vICAgICAgICAgICAgIGJyZWFrO1xyXG5cclxuLy8gICAgICAgICBjYXNlIDI6XHJcbi8vICAgICAgICAgICAgIHBsYXllckNvbnRhaW5lci5yZW1vdmVDbGFzcygnYWN0aXZlJyk7XHJcbi8vICAgICAgICAgICAgIHBsYXllckNvbnRhaW5lci5yZW1vdmVDbGFzcygncGF1c2VkJyk7XHJcbi8vICAgICAgICAgICAgIGJyZWFrO1xyXG4vLyAgICAgfVxyXG4vLyB9XHJcblxyXG4vLyBmdW5jdGlvbiBvbllvdVR1YmVJZnJhbWVBUElSZWFkeSgpIHtcclxuLy8gcGxheWVyID0gbmV3IFlULlBsYXllcigneXQtcGxheWVyJywge1xyXG4vLyAgICAgaGVpZ2h0OiAnNDA1JyxcclxuLy8gICAgIHdpZHRoOiAnNjYwJyxcclxuLy8gICAgIHZpZGVvSWQ6ICdKc1c4aDR6bWxTNCcsXHJcbi8vICAgICBldmVudHM6IHtcclxuLy8gICAgICAgICAnb25SZWFkeSc6IG9uUGxheWVyUmVhZHksXHJcbi8vICAgICAgICAgJ29uU3RhdGVDaGFuZ2UnOiBvblBsYXllclN0YXRlQ2hhbmdlXHJcbi8vICAgICB9LFxyXG4vLyAgICAgcGxheWVyVmFyczoge1xyXG4vLyAgICAgICAgIGNvbnRyb2xzOiAwLFxyXG4vLyAgICAgICAgIGRpc2FibGVrYjogMCxcclxuLy8gICAgICAgICBzaG93aW5mbzogMCxcclxuLy8gICAgICAgICByZWw6IDAsXHJcbi8vICAgICAgICAgYXV0b3BsYXk6IDAsXHJcbi8vICAgICAgICAgbW9kZXN0YnJhbmRpbmc6IDBcclxuLy8gICAgIH1cclxuLy8gfSk7XHJcbi8vIH1cclxuXHJcbi8vIGV2ZW50c0luaXQoKTsiLCJjb25zdCBmaW5kQmxvY2tCeUFsaWFzID0gYWxpYXMgPT4ge1xyXG4gICAgcmV0dXJuICQoXCIucmV2aWV3X19pdGVtXCIpLmZpbHRlcigobmR4LCBpdGVtKSA9PiB7XHJcbiAgICAgICAgcmV0dXJuICQoaXRlbSkuYXR0cignZGF0YS1saW5rZWQtd2l0aCcpID09IGFsaWFzO1xyXG4gICAgfSlcclxufVxyXG5cclxuJCgnLnJldmlld3NfX3N3aXRoZXItbGluaycpLm9uKCdjbGljaycsIGUgPT4ge1xyXG4gICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG5cclxuICAgIGNvbnN0ICR0aGlzID0gJChlLmN1cnJlbnRUYXJnZXQpO1xyXG4gICAgY29uc3QgdGFyZ2V0ID0gJHRoaXMuYXR0cignZGF0YS1vcGVuJyk7XHJcbiAgICBjb25zdCBpdGVtVG9TaG93ID0gZmluZEJsb2NrQnlBbGlhcyh0YXJnZXQpO1xyXG4gICAgY29uc3QgY3VySXRlbSA9ICR0aGlzLmNsb3Nlc3QoJy5yZXZpZXdzX19zd2l0aGVyLWl0ZW0nKTtcclxuXHJcbiAgICBpdGVtVG9TaG93LmFkZENsYXNzKCdyZXZpZXdfX2l0ZW1fYWN0aXZlJykuc2libGluZ3MoKS5yZW1vdmVDbGFzcygncmV2aWV3X19pdGVtX2FjdGl2ZScpO1xyXG4gICAgY3VySXRlbS5hZGRDbGFzcygncmV2aWV3c19fc3dpdGhlci1pdGVtX2FjdGl2ZScpLnNpYmxpbmdzKCkucmVtb3ZlQ2xhc3MoJ3Jldmlld3NfX3N3aXRoZXItaXRlbV9hY3RpdmUnKTtcclxufSkiLCJjb25zdCBzZWN0aW9ucyA9ICQoJ3NlY3Rpb24nKTtcclxuY29uc3QgZGlzcGxheSA9ICQoJy5tYWluY29udGVudCcpO1xyXG5jb25zdCBzaWRlTWVudSA9ICQoJy5wYWdlbmF0b3InKTtcclxuY29uc3QgbWVudUl0ZW1zID0gc2lkZU1lbnUuZmluZCgnLnBhZ2VuYXRvcl9faXRlbScpO1xyXG5cclxuY29uc3QgbW9iaWxlRGV0ZWN0ID0gbmV3IE1vYmlsZURldGVjdCh3aW5kb3cubmF2aWdhdG9yLnVzZXJBZ2VudCk7XHJcbmNvbnN0IGlzTW9iaWxlID0gbW9iaWxlRGV0ZWN0Lm1vYmlsZSgpO1xyXG5cclxuXHJcbmxldCBpblNjcm9sbCA9IGZhbHNlO1xyXG5cclxuc2VjdGlvbnMuZmlyc3QoKS5hZGRDbGFzcygnYWN0aXZlJyk7XHJcblxyXG5jb25zdCBjb3VudFNlY3Rpb25Qb3NpdGlvbiA9IHNlY3Rpb25FcSA9PiB7XHJcbiAgICBjb25zdCBwb3NpdGlvbiA9IHNlY3Rpb25FcSAqIC0xMDA7XHJcblxyXG4gICAgaWYgKGlzTmFOKHBvc2l0aW9uKSkge1xyXG4gICAgICAgIGNvbnNvbGUuZXJyb3IoJ9C/0LXRgNC10LTQsNC90L4g0L3QtSDQstC10YDQvdC+0LUg0LfQvdCw0YfQtdC90LjQtSDQsiBjb3VudFNlY3Rpb25Qb3NpdGlvbicpO1xyXG4gICAgICAgIHJldHVybiAwO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBwb3NpdGlvbjtcclxufVxyXG5cclxuY29uc3QgY2hhbmdlTWVudVRoZW1lRm9yUGFnZW5hdG9yID0gc2VjdGlvbkVxID0+IHtcclxuICAgIGNvbnN0IGN1cnJlbnRTZWN0aW9uID0gc2VjdGlvbnMuZXEoc2VjdGlvbkVxKTtcclxuICAgIGNvbnN0IG1lbnVUaGVtZSA9IGN1cnJlbnRTZWN0aW9uLmF0dHIoJ2RhdGEtc2lkZW1lbnUtdGhlbWUnKTtcclxuICAgIGNvbnN0IGFjdGl2ZUNsYXNzID0gJ3BhZ2VuYXRvcl9iZ19kYXJrJztcclxuXHJcbiAgICBpZiAobWVudVRoZW1lID09PSBcImJsYWNrXCIpIHtcclxuICAgICAgICBzaWRlTWVudS5hZGRDbGFzcyhhY3RpdmVDbGFzcyk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICAgIHNpZGVNZW51LnJlbW92ZUNsYXNzKGFjdGl2ZUNsYXNzKTtcclxuICAgIH1cclxufVxyXG5cclxuY29uc3QgcmVzZXRBY3RpdmVDbGFzc0Zvckl0ZW0gPSAoaXRlbXMsIGl0ZW1FcSwgYWN0aXZlQ2xhc3MpID0+IHtcclxuICAgIGl0ZW1zLmVxKGl0ZW1FcSkuYWRkQ2xhc3MoYWN0aXZlQ2xhc3MpLnNpYmxpbmdzKCkucmVtb3ZlQ2xhc3MoYWN0aXZlQ2xhc3MpO1xyXG59XHJcblxyXG5jb25zdCBwZXJmb21UcmFuc2l0aW9uID0gc2VjdGlvbkVxID0+IHtcclxuICAgIGlmIChpblNjcm9sbCkgcmV0dXJuO1xyXG5cclxuICAgIGNvbnN0IHRyYW5zaXRpb25PdmVyID0gMTAwMDtcclxuICAgIGNvbnN0IG1vdXNlSW5lcnRpb25PdmVyID0gMzAwO1xyXG5cclxuICAgIGluU2Nyb2xsID0gdHJ1ZTtcclxuXHJcbiAgICBjb25zdCBwb3NpdGlvbiA9IGNvdW50U2VjdGlvblBvc2l0aW9uKHNlY3Rpb25FcSk7XHJcblxyXG4gICAgY2hhbmdlTWVudVRoZW1lRm9yUGFnZW5hdG9yKHNlY3Rpb25FcSk7XHJcblxyXG4gICAgZGlzcGxheS5jc3Moe1xyXG4gICAgICAgIHRyYW5zZm9ybTogYHRyYW5zbGF0ZVkoJHtwb3NpdGlvbn0lKWBcclxuICAgIH0pXHJcblxyXG4gICAgcmVzZXRBY3RpdmVDbGFzc0Zvckl0ZW0oc2VjdGlvbnMsIHNlY3Rpb25FcSwgJ2FjdGl2ZScpO1xyXG5cclxuICAgIHNldFRpbWVvdXQoKCkgPT4ge1xyXG4gICAgICAgIHJlc2V0QWN0aXZlQ2xhc3NGb3JJdGVtKG1lbnVJdGVtcywgc2VjdGlvbkVxLCAncGFnZW5hdG9yX19pdGVtX2FjdGl2ZScpO1xyXG4gICAgfSwgdHJhbnNpdGlvbk92ZXIgLyAzKTtcclxuXHJcbiAgICBzZXRUaW1lb3V0KCgpID0+IHtcclxuICAgICAgICBpblNjcm9sbCA9IGZhbHNlO1xyXG4gICAgfSwgdHJhbnNpdGlvbk92ZXIgKyBtb3VzZUluZXJ0aW9uT3Zlcik7XHJcbn1cclxuXHJcbmNvbnN0IHZpZXdwb3J0U2Nyb2xsZXIgPSAoKSA9PiB7XHJcbiAgICBjb25zdCBhY3RpdmVTZWN0aW9uID0gc2VjdGlvbnMuZmlsdGVyKCcuYWN0aXZlJyk7XHJcbiAgICBjb25zdCBuZXh0U2VjdGlvbiA9IGFjdGl2ZVNlY3Rpb24ubmV4dCgnc2VjdGlvbicpO1xyXG4gICAgY29uc3QgcHJldlNlY3Rpb24gPSBhY3RpdmVTZWN0aW9uLnByZXYoJ3NlY3Rpb24nKTtcclxuXHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgIG5leHQoKSB7XHJcbiAgICAgICAgICAgIGlmIChuZXh0U2VjdGlvbi5sZW5ndGgpIHtcclxuICAgICAgICAgICAgICAgIHBlcmZvbVRyYW5zaXRpb24obmV4dFNlY3Rpb24uaW5kZXgoKSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9LFxyXG4gICAgICAgIHByZXYoKSB7XHJcbiAgICAgICAgICAgIGlmIChwcmV2U2VjdGlvbi5sZW5ndGgpIHtcclxuICAgICAgICAgICAgICAgIHBlcmZvbVRyYW5zaXRpb24ocHJldlNlY3Rpb24uaW5kZXgoKSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9O1xyXG59XHJcblxyXG4kKHdpbmRvdykub24oJ3doZWVsJywgZSA9PiB7XHJcbiAgICBjb25zdCBkZWx0YVkgPSBlLm9yaWdpbmFsRXZlbnQuZGVsdGFZO1xyXG4gICAgY29uc3Qgc2Nyb2xsZXIgPSB2aWV3cG9ydFNjcm9sbGVyKCk7XHJcblxyXG4gICAgaWYgKGRlbHRhWSA+IDApIHtcclxuICAgICAgICBzY3JvbGxlci5uZXh0KCk7XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKGRlbHRhWSA8IDApIHtcclxuICAgICAgICBzY3JvbGxlci5wcmV2KCk7XHJcbiAgICB9XHJcbn0pXHJcblxyXG4kKHdpbmRvdykub24oJ2tleWRvd24nLCBlID0+IHtcclxuICAgIGNvbnN0IHRhZ05hbWUgPSBlLnRhcmdldC50YWdOYW1lLnRvTG93ZXJDYXNlKCk7XHJcbiAgICBjb25zdCB1c2VyVHlwaW5nSW5wdXRzID0gdGFnTmFtZSA9PT0gJ2lucHV0JyB8fCB0YWdOYW1lID09PSAndGV4dGFyZWEnO1xyXG4gICAgY29uc3Qgc2Nyb2xsZXIgPSB2aWV3cG9ydFNjcm9sbGVyKCk7XHJcblxyXG4gICAgaWYgKHVzZXJUeXBpbmdJbnB1dHMpIHJldHVybjtcclxuXHJcbiAgICBzd2l0Y2ggKGUua2V5Q29kZSkge1xyXG4gICAgICAgIGNhc2UgMzg6XHJcbiAgICAgICAgICAgIHNjcm9sbGVyLnByZXYoKTtcclxuICAgICAgICAgICAgYnJlYWs7XHJcblxyXG4gICAgICAgIGNhc2UgNDA6XHJcbiAgICAgICAgICAgIHNjcm9sbGVyLm5leHQoKTtcclxuICAgICAgICAgICAgYnJlYWs7XHJcbiAgICB9XHJcbn0pXHJcblxyXG4kKCcud3JhcHBlcicpLm9uKCd0b3VjaG1vdmUnLCBlID0+IGUucHJldmVudERlZmF1bHQoKSk7XHJcblxyXG4kKCdbZGF0YS1zY3JvbGwtdG9dJykub24oJ2NsaWNrJywgZSA9PiB7XHJcbiAgICBlLnByZXZlbnREZWZhdWx0KCk7XHJcblxyXG4gICAgY29uc3QgJHRoaXMgPSAkKGUuY3VycmVudFRhcmdldCk7XHJcblxyXG4gICAgY29uc3QgdGFyZ2V0ID0gJHRoaXMuYXR0cignZGF0YS1zY3JvbGwtdG8nKTtcclxuICAgIGNvbnN0IHJlcVNlY3Rpb24gPSAkKGBbZGF0YS1zZWN0aW9uLWlkPSR7dGFyZ2V0fV1gKTtcclxuXHJcbiAgICBwZXJmb21UcmFuc2l0aW9uKHJlcVNlY3Rpb24uaW5kZXgoKSk7XHJcbn0pXHJcblxyXG5pZiAoaXNNb2JpbGUpIHtcclxuICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9tYXR0YnJ5c29uL1RvdWNoU3dpcGUtSnF1ZXJ5LVBsdWdpblxyXG5cclxuICAgICQoXCJib2R5XCIpLnN3aXBlKHtcclxuICAgICAgICBzd2lwZTogZnVuY3Rpb24gKGV2ZW50LCBkaXJlY3Rpb24pIHtcclxuICAgICAgICAgICAgY29uc3Qgc2Nyb2xsZXIgPSB2aWV3cG9ydFNjcm9sbGVyKCk7XHJcbiAgICAgICAgICAgIGxldCBzY3JvbGxEaXJlY3Rpb247XHJcblxyXG4gICAgICAgICAgICBpZiAoZGlyZWN0aW9uID09PSBcInVwXCIpIHNjcm9sbERpcmVjdGlvbiA9ICduZXh0JztcclxuICAgICAgICAgICAgaWYgKGRpcmVjdGlvbiA9PT0gXCJkb3duXCIpIHNjcm9sbERpcmVjdGlvbiA9ICdwcmV2JztcclxuXHJcbiAgICAgICAgICAgIHNjcm9sbGVyW3Njcm9sbERpcmVjdGlvbl0oKTtcclxuICAgICAgICB9XHJcbiAgICB9KTtcclxufSIsImNvbnN0IHNsaWRlciA9ICQoJy5zbGlkZXJfX2xpc3QnKS5ieFNsaWRlcih7XHJcbiAgICBwYWdlcjogZmFsc2UsXHJcbiAgICBjb250cm9sczogZmFsc2VcclxufSk7XHJcblxyXG4kKCcuc2xpZGVyX19jb250cm9sLWxlZnQtYXJyb3cnKS5vbignY2xpY2snLCBlID0+IHtcclxuICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuICAgIHNsaWRlci5nb1RvUHJldlNsaWRlKCk7XHJcbn0pXHJcblxyXG4kKCcuc2xpZGVyX19jb250cm9sLXJpZ2h0LWFycm93Jykub24oJ2NsaWNrJywgZSA9PiB7XHJcbiAgICBlLnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICBzbGlkZXIuZ29Ub05leHRTbGlkZSgpO1xyXG59KSJdfQ==
